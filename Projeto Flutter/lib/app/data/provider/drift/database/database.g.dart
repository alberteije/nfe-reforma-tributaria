// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'database.dart';

// ignore_for_file: type=lint
class $ProdutosTable extends Produtos with TableInfo<$ProdutosTable, Produto> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $ProdutosTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
    'id',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idProdutoSubgrupoMeta = const VerificationMeta(
    'idProdutoSubgrupo',
  );
  @override
  late final GeneratedColumn<int> idProdutoSubgrupo = GeneratedColumn<int>(
    'id_produto_subgrupo',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idProdutoMarcaMeta = const VerificationMeta(
    'idProdutoMarca',
  );
  @override
  late final GeneratedColumn<int> idProdutoMarca = GeneratedColumn<int>(
    'id_produto_marca',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idProdutoUnidadeMeta = const VerificationMeta(
    'idProdutoUnidade',
  );
  @override
  late final GeneratedColumn<int> idProdutoUnidade = GeneratedColumn<int>(
    'id_produto_unidade',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idTributIcmsCustomCabMeta =
      const VerificationMeta('idTributIcmsCustomCab');
  @override
  late final GeneratedColumn<int> idTributIcmsCustomCab = GeneratedColumn<int>(
    'id_tribut_icms_custom_cab',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idTributGrupoTributarioMeta =
      const VerificationMeta('idTributGrupoTributario');
  @override
  late final GeneratedColumn<int> idTributGrupoTributario =
      GeneratedColumn<int>(
        'id_tribut_grupo_tributario',
        aliasedName,
        true,
        type: DriftSqlType.int,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _nomeMeta = const VerificationMeta('nome');
  @override
  late final GeneratedColumn<String> nome = GeneratedColumn<String>(
    'nome',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 100,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _descricaoMeta = const VerificationMeta(
    'descricao',
  );
  @override
  late final GeneratedColumn<String> descricao = GeneratedColumn<String>(
    'descricao',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 250,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _gtinMeta = const VerificationMeta('gtin');
  @override
  late final GeneratedColumn<String> gtin = GeneratedColumn<String>(
    'gtin',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 14,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _codigoInternoMeta = const VerificationMeta(
    'codigoInterno',
  );
  @override
  late final GeneratedColumn<String> codigoInterno = GeneratedColumn<String>(
    'codigo_interno',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 50,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _valorCompraMeta = const VerificationMeta(
    'valorCompra',
  );
  @override
  late final GeneratedColumn<double> valorCompra = GeneratedColumn<double>(
    'valor_compra',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _valorVendaMeta = const VerificationMeta(
    'valorVenda',
  );
  @override
  late final GeneratedColumn<double> valorVenda = GeneratedColumn<double>(
    'valor_venda',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _codigoNcmMeta = const VerificationMeta(
    'codigoNcm',
  );
  @override
  late final GeneratedColumn<String> codigoNcm = GeneratedColumn<String>(
    'codigo_ncm',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 8,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _estoqueMinimoMeta = const VerificationMeta(
    'estoqueMinimo',
  );
  @override
  late final GeneratedColumn<double> estoqueMinimo = GeneratedColumn<double>(
    'estoque_minimo',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _estoqueMaximoMeta = const VerificationMeta(
    'estoqueMaximo',
  );
  @override
  late final GeneratedColumn<double> estoqueMaximo = GeneratedColumn<double>(
    'estoque_maximo',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _quantidadeEstoqueMeta = const VerificationMeta(
    'quantidadeEstoque',
  );
  @override
  late final GeneratedColumn<double> quantidadeEstoque =
      GeneratedColumn<double>(
        'quantidade_estoque',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _dataCadastroMeta = const VerificationMeta(
    'dataCadastro',
  );
  @override
  late final GeneratedColumn<DateTime> dataCadastro = GeneratedColumn<DateTime>(
    'data_cadastro',
    aliasedName,
    true,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: false,
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    idProdutoSubgrupo,
    idProdutoMarca,
    idProdutoUnidade,
    idTributIcmsCustomCab,
    idTributGrupoTributario,
    nome,
    descricao,
    gtin,
    codigoInterno,
    valorCompra,
    valorVenda,
    codigoNcm,
    estoqueMinimo,
    estoqueMaximo,
    quantidadeEstoque,
    dataCadastro,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'produto';
  @override
  VerificationContext validateIntegrity(
    Insertable<Produto> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('id_produto_subgrupo')) {
      context.handle(
        _idProdutoSubgrupoMeta,
        idProdutoSubgrupo.isAcceptableOrUnknown(
          data['id_produto_subgrupo']!,
          _idProdutoSubgrupoMeta,
        ),
      );
    }
    if (data.containsKey('id_produto_marca')) {
      context.handle(
        _idProdutoMarcaMeta,
        idProdutoMarca.isAcceptableOrUnknown(
          data['id_produto_marca']!,
          _idProdutoMarcaMeta,
        ),
      );
    }
    if (data.containsKey('id_produto_unidade')) {
      context.handle(
        _idProdutoUnidadeMeta,
        idProdutoUnidade.isAcceptableOrUnknown(
          data['id_produto_unidade']!,
          _idProdutoUnidadeMeta,
        ),
      );
    }
    if (data.containsKey('id_tribut_icms_custom_cab')) {
      context.handle(
        _idTributIcmsCustomCabMeta,
        idTributIcmsCustomCab.isAcceptableOrUnknown(
          data['id_tribut_icms_custom_cab']!,
          _idTributIcmsCustomCabMeta,
        ),
      );
    }
    if (data.containsKey('id_tribut_grupo_tributario')) {
      context.handle(
        _idTributGrupoTributarioMeta,
        idTributGrupoTributario.isAcceptableOrUnknown(
          data['id_tribut_grupo_tributario']!,
          _idTributGrupoTributarioMeta,
        ),
      );
    }
    if (data.containsKey('nome')) {
      context.handle(
        _nomeMeta,
        nome.isAcceptableOrUnknown(data['nome']!, _nomeMeta),
      );
    }
    if (data.containsKey('descricao')) {
      context.handle(
        _descricaoMeta,
        descricao.isAcceptableOrUnknown(data['descricao']!, _descricaoMeta),
      );
    }
    if (data.containsKey('gtin')) {
      context.handle(
        _gtinMeta,
        gtin.isAcceptableOrUnknown(data['gtin']!, _gtinMeta),
      );
    }
    if (data.containsKey('codigo_interno')) {
      context.handle(
        _codigoInternoMeta,
        codigoInterno.isAcceptableOrUnknown(
          data['codigo_interno']!,
          _codigoInternoMeta,
        ),
      );
    }
    if (data.containsKey('valor_compra')) {
      context.handle(
        _valorCompraMeta,
        valorCompra.isAcceptableOrUnknown(
          data['valor_compra']!,
          _valorCompraMeta,
        ),
      );
    }
    if (data.containsKey('valor_venda')) {
      context.handle(
        _valorVendaMeta,
        valorVenda.isAcceptableOrUnknown(data['valor_venda']!, _valorVendaMeta),
      );
    }
    if (data.containsKey('codigo_ncm')) {
      context.handle(
        _codigoNcmMeta,
        codigoNcm.isAcceptableOrUnknown(data['codigo_ncm']!, _codigoNcmMeta),
      );
    }
    if (data.containsKey('estoque_minimo')) {
      context.handle(
        _estoqueMinimoMeta,
        estoqueMinimo.isAcceptableOrUnknown(
          data['estoque_minimo']!,
          _estoqueMinimoMeta,
        ),
      );
    }
    if (data.containsKey('estoque_maximo')) {
      context.handle(
        _estoqueMaximoMeta,
        estoqueMaximo.isAcceptableOrUnknown(
          data['estoque_maximo']!,
          _estoqueMaximoMeta,
        ),
      );
    }
    if (data.containsKey('quantidade_estoque')) {
      context.handle(
        _quantidadeEstoqueMeta,
        quantidadeEstoque.isAcceptableOrUnknown(
          data['quantidade_estoque']!,
          _quantidadeEstoqueMeta,
        ),
      );
    }
    if (data.containsKey('data_cadastro')) {
      context.handle(
        _dataCadastroMeta,
        dataCadastro.isAcceptableOrUnknown(
          data['data_cadastro']!,
          _dataCadastroMeta,
        ),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  Produto map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return Produto(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id'],
      ),
      idProdutoSubgrupo: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_produto_subgrupo'],
      ),
      idProdutoMarca: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_produto_marca'],
      ),
      idProdutoUnidade: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_produto_unidade'],
      ),
      idTributIcmsCustomCab: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_tribut_icms_custom_cab'],
      ),
      idTributGrupoTributario: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_tribut_grupo_tributario'],
      ),
      nome: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}nome'],
      ),
      descricao: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}descricao'],
      ),
      gtin: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}gtin'],
      ),
      codigoInterno: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}codigo_interno'],
      ),
      valorCompra: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_compra'],
      ),
      valorVenda: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_venda'],
      ),
      codigoNcm: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}codigo_ncm'],
      ),
      estoqueMinimo: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}estoque_minimo'],
      ),
      estoqueMaximo: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}estoque_maximo'],
      ),
      quantidadeEstoque: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}quantidade_estoque'],
      ),
      dataCadastro: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}data_cadastro'],
      ),
    );
  }

  @override
  $ProdutosTable createAlias(String alias) {
    return $ProdutosTable(attachedDatabase, alias);
  }
}

class Produto extends DataClass implements Insertable<Produto> {
  final int? id;
  final int? idProdutoSubgrupo;
  final int? idProdutoMarca;
  final int? idProdutoUnidade;
  final int? idTributIcmsCustomCab;
  final int? idTributGrupoTributario;
  final String? nome;
  final String? descricao;
  final String? gtin;
  final String? codigoInterno;
  final double? valorCompra;
  final double? valorVenda;
  final String? codigoNcm;
  final double? estoqueMinimo;
  final double? estoqueMaximo;
  final double? quantidadeEstoque;
  final DateTime? dataCadastro;
  const Produto({
    this.id,
    this.idProdutoSubgrupo,
    this.idProdutoMarca,
    this.idProdutoUnidade,
    this.idTributIcmsCustomCab,
    this.idTributGrupoTributario,
    this.nome,
    this.descricao,
    this.gtin,
    this.codigoInterno,
    this.valorCompra,
    this.valorVenda,
    this.codigoNcm,
    this.estoqueMinimo,
    this.estoqueMaximo,
    this.quantidadeEstoque,
    this.dataCadastro,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || idProdutoSubgrupo != null) {
      map['id_produto_subgrupo'] = Variable<int>(idProdutoSubgrupo);
    }
    if (!nullToAbsent || idProdutoMarca != null) {
      map['id_produto_marca'] = Variable<int>(idProdutoMarca);
    }
    if (!nullToAbsent || idProdutoUnidade != null) {
      map['id_produto_unidade'] = Variable<int>(idProdutoUnidade);
    }
    if (!nullToAbsent || idTributIcmsCustomCab != null) {
      map['id_tribut_icms_custom_cab'] = Variable<int>(idTributIcmsCustomCab);
    }
    if (!nullToAbsent || idTributGrupoTributario != null) {
      map['id_tribut_grupo_tributario'] = Variable<int>(
        idTributGrupoTributario,
      );
    }
    if (!nullToAbsent || nome != null) {
      map['nome'] = Variable<String>(nome);
    }
    if (!nullToAbsent || descricao != null) {
      map['descricao'] = Variable<String>(descricao);
    }
    if (!nullToAbsent || gtin != null) {
      map['gtin'] = Variable<String>(gtin);
    }
    if (!nullToAbsent || codigoInterno != null) {
      map['codigo_interno'] = Variable<String>(codigoInterno);
    }
    if (!nullToAbsent || valorCompra != null) {
      map['valor_compra'] = Variable<double>(valorCompra);
    }
    if (!nullToAbsent || valorVenda != null) {
      map['valor_venda'] = Variable<double>(valorVenda);
    }
    if (!nullToAbsent || codigoNcm != null) {
      map['codigo_ncm'] = Variable<String>(codigoNcm);
    }
    if (!nullToAbsent || estoqueMinimo != null) {
      map['estoque_minimo'] = Variable<double>(estoqueMinimo);
    }
    if (!nullToAbsent || estoqueMaximo != null) {
      map['estoque_maximo'] = Variable<double>(estoqueMaximo);
    }
    if (!nullToAbsent || quantidadeEstoque != null) {
      map['quantidade_estoque'] = Variable<double>(quantidadeEstoque);
    }
    if (!nullToAbsent || dataCadastro != null) {
      map['data_cadastro'] = Variable<DateTime>(dataCadastro);
    }
    return map;
  }

  factory Produto.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return Produto(
      id: serializer.fromJson<int?>(json['id']),
      idProdutoSubgrupo: serializer.fromJson<int?>(json['idProdutoSubgrupo']),
      idProdutoMarca: serializer.fromJson<int?>(json['idProdutoMarca']),
      idProdutoUnidade: serializer.fromJson<int?>(json['idProdutoUnidade']),
      idTributIcmsCustomCab: serializer.fromJson<int?>(
        json['idTributIcmsCustomCab'],
      ),
      idTributGrupoTributario: serializer.fromJson<int?>(
        json['idTributGrupoTributario'],
      ),
      nome: serializer.fromJson<String?>(json['nome']),
      descricao: serializer.fromJson<String?>(json['descricao']),
      gtin: serializer.fromJson<String?>(json['gtin']),
      codigoInterno: serializer.fromJson<String?>(json['codigoInterno']),
      valorCompra: serializer.fromJson<double?>(json['valorCompra']),
      valorVenda: serializer.fromJson<double?>(json['valorVenda']),
      codigoNcm: serializer.fromJson<String?>(json['codigoNcm']),
      estoqueMinimo: serializer.fromJson<double?>(json['estoqueMinimo']),
      estoqueMaximo: serializer.fromJson<double?>(json['estoqueMaximo']),
      quantidadeEstoque: serializer.fromJson<double?>(
        json['quantidadeEstoque'],
      ),
      dataCadastro: serializer.fromJson<DateTime?>(json['dataCadastro']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idProdutoSubgrupo': serializer.toJson<int?>(idProdutoSubgrupo),
      'idProdutoMarca': serializer.toJson<int?>(idProdutoMarca),
      'idProdutoUnidade': serializer.toJson<int?>(idProdutoUnidade),
      'idTributIcmsCustomCab': serializer.toJson<int?>(idTributIcmsCustomCab),
      'idTributGrupoTributario': serializer.toJson<int?>(
        idTributGrupoTributario,
      ),
      'nome': serializer.toJson<String?>(nome),
      'descricao': serializer.toJson<String?>(descricao),
      'gtin': serializer.toJson<String?>(gtin),
      'codigoInterno': serializer.toJson<String?>(codigoInterno),
      'valorCompra': serializer.toJson<double?>(valorCompra),
      'valorVenda': serializer.toJson<double?>(valorVenda),
      'codigoNcm': serializer.toJson<String?>(codigoNcm),
      'estoqueMinimo': serializer.toJson<double?>(estoqueMinimo),
      'estoqueMaximo': serializer.toJson<double?>(estoqueMaximo),
      'quantidadeEstoque': serializer.toJson<double?>(quantidadeEstoque),
      'dataCadastro': serializer.toJson<DateTime?>(dataCadastro),
    };
  }

  Produto copyWith({
    Value<int?> id = const Value.absent(),
    Value<int?> idProdutoSubgrupo = const Value.absent(),
    Value<int?> idProdutoMarca = const Value.absent(),
    Value<int?> idProdutoUnidade = const Value.absent(),
    Value<int?> idTributIcmsCustomCab = const Value.absent(),
    Value<int?> idTributGrupoTributario = const Value.absent(),
    Value<String?> nome = const Value.absent(),
    Value<String?> descricao = const Value.absent(),
    Value<String?> gtin = const Value.absent(),
    Value<String?> codigoInterno = const Value.absent(),
    Value<double?> valorCompra = const Value.absent(),
    Value<double?> valorVenda = const Value.absent(),
    Value<String?> codigoNcm = const Value.absent(),
    Value<double?> estoqueMinimo = const Value.absent(),
    Value<double?> estoqueMaximo = const Value.absent(),
    Value<double?> quantidadeEstoque = const Value.absent(),
    Value<DateTime?> dataCadastro = const Value.absent(),
  }) => Produto(
    id: id.present ? id.value : this.id,
    idProdutoSubgrupo:
        idProdutoSubgrupo.present
            ? idProdutoSubgrupo.value
            : this.idProdutoSubgrupo,
    idProdutoMarca:
        idProdutoMarca.present ? idProdutoMarca.value : this.idProdutoMarca,
    idProdutoUnidade:
        idProdutoUnidade.present
            ? idProdutoUnidade.value
            : this.idProdutoUnidade,
    idTributIcmsCustomCab:
        idTributIcmsCustomCab.present
            ? idTributIcmsCustomCab.value
            : this.idTributIcmsCustomCab,
    idTributGrupoTributario:
        idTributGrupoTributario.present
            ? idTributGrupoTributario.value
            : this.idTributGrupoTributario,
    nome: nome.present ? nome.value : this.nome,
    descricao: descricao.present ? descricao.value : this.descricao,
    gtin: gtin.present ? gtin.value : this.gtin,
    codigoInterno:
        codigoInterno.present ? codigoInterno.value : this.codigoInterno,
    valorCompra: valorCompra.present ? valorCompra.value : this.valorCompra,
    valorVenda: valorVenda.present ? valorVenda.value : this.valorVenda,
    codigoNcm: codigoNcm.present ? codigoNcm.value : this.codigoNcm,
    estoqueMinimo:
        estoqueMinimo.present ? estoqueMinimo.value : this.estoqueMinimo,
    estoqueMaximo:
        estoqueMaximo.present ? estoqueMaximo.value : this.estoqueMaximo,
    quantidadeEstoque:
        quantidadeEstoque.present
            ? quantidadeEstoque.value
            : this.quantidadeEstoque,
    dataCadastro: dataCadastro.present ? dataCadastro.value : this.dataCadastro,
  );
  Produto copyWithCompanion(ProdutosCompanion data) {
    return Produto(
      id: data.id.present ? data.id.value : this.id,
      idProdutoSubgrupo:
          data.idProdutoSubgrupo.present
              ? data.idProdutoSubgrupo.value
              : this.idProdutoSubgrupo,
      idProdutoMarca:
          data.idProdutoMarca.present
              ? data.idProdutoMarca.value
              : this.idProdutoMarca,
      idProdutoUnidade:
          data.idProdutoUnidade.present
              ? data.idProdutoUnidade.value
              : this.idProdutoUnidade,
      idTributIcmsCustomCab:
          data.idTributIcmsCustomCab.present
              ? data.idTributIcmsCustomCab.value
              : this.idTributIcmsCustomCab,
      idTributGrupoTributario:
          data.idTributGrupoTributario.present
              ? data.idTributGrupoTributario.value
              : this.idTributGrupoTributario,
      nome: data.nome.present ? data.nome.value : this.nome,
      descricao: data.descricao.present ? data.descricao.value : this.descricao,
      gtin: data.gtin.present ? data.gtin.value : this.gtin,
      codigoInterno:
          data.codigoInterno.present
              ? data.codigoInterno.value
              : this.codigoInterno,
      valorCompra:
          data.valorCompra.present ? data.valorCompra.value : this.valorCompra,
      valorVenda:
          data.valorVenda.present ? data.valorVenda.value : this.valorVenda,
      codigoNcm: data.codigoNcm.present ? data.codigoNcm.value : this.codigoNcm,
      estoqueMinimo:
          data.estoqueMinimo.present
              ? data.estoqueMinimo.value
              : this.estoqueMinimo,
      estoqueMaximo:
          data.estoqueMaximo.present
              ? data.estoqueMaximo.value
              : this.estoqueMaximo,
      quantidadeEstoque:
          data.quantidadeEstoque.present
              ? data.quantidadeEstoque.value
              : this.quantidadeEstoque,
      dataCadastro:
          data.dataCadastro.present
              ? data.dataCadastro.value
              : this.dataCadastro,
    );
  }

  @override
  String toString() {
    return (StringBuffer('Produto(')
          ..write('id: $id, ')
          ..write('idProdutoSubgrupo: $idProdutoSubgrupo, ')
          ..write('idProdutoMarca: $idProdutoMarca, ')
          ..write('idProdutoUnidade: $idProdutoUnidade, ')
          ..write('idTributIcmsCustomCab: $idTributIcmsCustomCab, ')
          ..write('idTributGrupoTributario: $idTributGrupoTributario, ')
          ..write('nome: $nome, ')
          ..write('descricao: $descricao, ')
          ..write('gtin: $gtin, ')
          ..write('codigoInterno: $codigoInterno, ')
          ..write('valorCompra: $valorCompra, ')
          ..write('valorVenda: $valorVenda, ')
          ..write('codigoNcm: $codigoNcm, ')
          ..write('estoqueMinimo: $estoqueMinimo, ')
          ..write('estoqueMaximo: $estoqueMaximo, ')
          ..write('quantidadeEstoque: $quantidadeEstoque, ')
          ..write('dataCadastro: $dataCadastro')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    idProdutoSubgrupo,
    idProdutoMarca,
    idProdutoUnidade,
    idTributIcmsCustomCab,
    idTributGrupoTributario,
    nome,
    descricao,
    gtin,
    codigoInterno,
    valorCompra,
    valorVenda,
    codigoNcm,
    estoqueMinimo,
    estoqueMaximo,
    quantidadeEstoque,
    dataCadastro,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is Produto &&
          other.id == this.id &&
          other.idProdutoSubgrupo == this.idProdutoSubgrupo &&
          other.idProdutoMarca == this.idProdutoMarca &&
          other.idProdutoUnidade == this.idProdutoUnidade &&
          other.idTributIcmsCustomCab == this.idTributIcmsCustomCab &&
          other.idTributGrupoTributario == this.idTributGrupoTributario &&
          other.nome == this.nome &&
          other.descricao == this.descricao &&
          other.gtin == this.gtin &&
          other.codigoInterno == this.codigoInterno &&
          other.valorCompra == this.valorCompra &&
          other.valorVenda == this.valorVenda &&
          other.codigoNcm == this.codigoNcm &&
          other.estoqueMinimo == this.estoqueMinimo &&
          other.estoqueMaximo == this.estoqueMaximo &&
          other.quantidadeEstoque == this.quantidadeEstoque &&
          other.dataCadastro == this.dataCadastro);
}

class ProdutosCompanion extends UpdateCompanion<Produto> {
  final Value<int?> id;
  final Value<int?> idProdutoSubgrupo;
  final Value<int?> idProdutoMarca;
  final Value<int?> idProdutoUnidade;
  final Value<int?> idTributIcmsCustomCab;
  final Value<int?> idTributGrupoTributario;
  final Value<String?> nome;
  final Value<String?> descricao;
  final Value<String?> gtin;
  final Value<String?> codigoInterno;
  final Value<double?> valorCompra;
  final Value<double?> valorVenda;
  final Value<String?> codigoNcm;
  final Value<double?> estoqueMinimo;
  final Value<double?> estoqueMaximo;
  final Value<double?> quantidadeEstoque;
  final Value<DateTime?> dataCadastro;
  const ProdutosCompanion({
    this.id = const Value.absent(),
    this.idProdutoSubgrupo = const Value.absent(),
    this.idProdutoMarca = const Value.absent(),
    this.idProdutoUnidade = const Value.absent(),
    this.idTributIcmsCustomCab = const Value.absent(),
    this.idTributGrupoTributario = const Value.absent(),
    this.nome = const Value.absent(),
    this.descricao = const Value.absent(),
    this.gtin = const Value.absent(),
    this.codigoInterno = const Value.absent(),
    this.valorCompra = const Value.absent(),
    this.valorVenda = const Value.absent(),
    this.codigoNcm = const Value.absent(),
    this.estoqueMinimo = const Value.absent(),
    this.estoqueMaximo = const Value.absent(),
    this.quantidadeEstoque = const Value.absent(),
    this.dataCadastro = const Value.absent(),
  });
  ProdutosCompanion.insert({
    this.id = const Value.absent(),
    this.idProdutoSubgrupo = const Value.absent(),
    this.idProdutoMarca = const Value.absent(),
    this.idProdutoUnidade = const Value.absent(),
    this.idTributIcmsCustomCab = const Value.absent(),
    this.idTributGrupoTributario = const Value.absent(),
    this.nome = const Value.absent(),
    this.descricao = const Value.absent(),
    this.gtin = const Value.absent(),
    this.codigoInterno = const Value.absent(),
    this.valorCompra = const Value.absent(),
    this.valorVenda = const Value.absent(),
    this.codigoNcm = const Value.absent(),
    this.estoqueMinimo = const Value.absent(),
    this.estoqueMaximo = const Value.absent(),
    this.quantidadeEstoque = const Value.absent(),
    this.dataCadastro = const Value.absent(),
  });
  static Insertable<Produto> custom({
    Expression<int>? id,
    Expression<int>? idProdutoSubgrupo,
    Expression<int>? idProdutoMarca,
    Expression<int>? idProdutoUnidade,
    Expression<int>? idTributIcmsCustomCab,
    Expression<int>? idTributGrupoTributario,
    Expression<String>? nome,
    Expression<String>? descricao,
    Expression<String>? gtin,
    Expression<String>? codigoInterno,
    Expression<double>? valorCompra,
    Expression<double>? valorVenda,
    Expression<String>? codigoNcm,
    Expression<double>? estoqueMinimo,
    Expression<double>? estoqueMaximo,
    Expression<double>? quantidadeEstoque,
    Expression<DateTime>? dataCadastro,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (idProdutoSubgrupo != null) 'id_produto_subgrupo': idProdutoSubgrupo,
      if (idProdutoMarca != null) 'id_produto_marca': idProdutoMarca,
      if (idProdutoUnidade != null) 'id_produto_unidade': idProdutoUnidade,
      if (idTributIcmsCustomCab != null)
        'id_tribut_icms_custom_cab': idTributIcmsCustomCab,
      if (idTributGrupoTributario != null)
        'id_tribut_grupo_tributario': idTributGrupoTributario,
      if (nome != null) 'nome': nome,
      if (descricao != null) 'descricao': descricao,
      if (gtin != null) 'gtin': gtin,
      if (codigoInterno != null) 'codigo_interno': codigoInterno,
      if (valorCompra != null) 'valor_compra': valorCompra,
      if (valorVenda != null) 'valor_venda': valorVenda,
      if (codigoNcm != null) 'codigo_ncm': codigoNcm,
      if (estoqueMinimo != null) 'estoque_minimo': estoqueMinimo,
      if (estoqueMaximo != null) 'estoque_maximo': estoqueMaximo,
      if (quantidadeEstoque != null) 'quantidade_estoque': quantidadeEstoque,
      if (dataCadastro != null) 'data_cadastro': dataCadastro,
    });
  }

  ProdutosCompanion copyWith({
    Value<int?>? id,
    Value<int?>? idProdutoSubgrupo,
    Value<int?>? idProdutoMarca,
    Value<int?>? idProdutoUnidade,
    Value<int?>? idTributIcmsCustomCab,
    Value<int?>? idTributGrupoTributario,
    Value<String?>? nome,
    Value<String?>? descricao,
    Value<String?>? gtin,
    Value<String?>? codigoInterno,
    Value<double?>? valorCompra,
    Value<double?>? valorVenda,
    Value<String?>? codigoNcm,
    Value<double?>? estoqueMinimo,
    Value<double?>? estoqueMaximo,
    Value<double?>? quantidadeEstoque,
    Value<DateTime?>? dataCadastro,
  }) {
    return ProdutosCompanion(
      id: id ?? this.id,
      idProdutoSubgrupo: idProdutoSubgrupo ?? this.idProdutoSubgrupo,
      idProdutoMarca: idProdutoMarca ?? this.idProdutoMarca,
      idProdutoUnidade: idProdutoUnidade ?? this.idProdutoUnidade,
      idTributIcmsCustomCab:
          idTributIcmsCustomCab ?? this.idTributIcmsCustomCab,
      idTributGrupoTributario:
          idTributGrupoTributario ?? this.idTributGrupoTributario,
      nome: nome ?? this.nome,
      descricao: descricao ?? this.descricao,
      gtin: gtin ?? this.gtin,
      codigoInterno: codigoInterno ?? this.codigoInterno,
      valorCompra: valorCompra ?? this.valorCompra,
      valorVenda: valorVenda ?? this.valorVenda,
      codigoNcm: codigoNcm ?? this.codigoNcm,
      estoqueMinimo: estoqueMinimo ?? this.estoqueMinimo,
      estoqueMaximo: estoqueMaximo ?? this.estoqueMaximo,
      quantidadeEstoque: quantidadeEstoque ?? this.quantidadeEstoque,
      dataCadastro: dataCadastro ?? this.dataCadastro,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (idProdutoSubgrupo.present) {
      map['id_produto_subgrupo'] = Variable<int>(idProdutoSubgrupo.value);
    }
    if (idProdutoMarca.present) {
      map['id_produto_marca'] = Variable<int>(idProdutoMarca.value);
    }
    if (idProdutoUnidade.present) {
      map['id_produto_unidade'] = Variable<int>(idProdutoUnidade.value);
    }
    if (idTributIcmsCustomCab.present) {
      map['id_tribut_icms_custom_cab'] = Variable<int>(
        idTributIcmsCustomCab.value,
      );
    }
    if (idTributGrupoTributario.present) {
      map['id_tribut_grupo_tributario'] = Variable<int>(
        idTributGrupoTributario.value,
      );
    }
    if (nome.present) {
      map['nome'] = Variable<String>(nome.value);
    }
    if (descricao.present) {
      map['descricao'] = Variable<String>(descricao.value);
    }
    if (gtin.present) {
      map['gtin'] = Variable<String>(gtin.value);
    }
    if (codigoInterno.present) {
      map['codigo_interno'] = Variable<String>(codigoInterno.value);
    }
    if (valorCompra.present) {
      map['valor_compra'] = Variable<double>(valorCompra.value);
    }
    if (valorVenda.present) {
      map['valor_venda'] = Variable<double>(valorVenda.value);
    }
    if (codigoNcm.present) {
      map['codigo_ncm'] = Variable<String>(codigoNcm.value);
    }
    if (estoqueMinimo.present) {
      map['estoque_minimo'] = Variable<double>(estoqueMinimo.value);
    }
    if (estoqueMaximo.present) {
      map['estoque_maximo'] = Variable<double>(estoqueMaximo.value);
    }
    if (quantidadeEstoque.present) {
      map['quantidade_estoque'] = Variable<double>(quantidadeEstoque.value);
    }
    if (dataCadastro.present) {
      map['data_cadastro'] = Variable<DateTime>(dataCadastro.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('ProdutosCompanion(')
          ..write('id: $id, ')
          ..write('idProdutoSubgrupo: $idProdutoSubgrupo, ')
          ..write('idProdutoMarca: $idProdutoMarca, ')
          ..write('idProdutoUnidade: $idProdutoUnidade, ')
          ..write('idTributIcmsCustomCab: $idTributIcmsCustomCab, ')
          ..write('idTributGrupoTributario: $idTributGrupoTributario, ')
          ..write('nome: $nome, ')
          ..write('descricao: $descricao, ')
          ..write('gtin: $gtin, ')
          ..write('codigoInterno: $codigoInterno, ')
          ..write('valorCompra: $valorCompra, ')
          ..write('valorVenda: $valorVenda, ')
          ..write('codigoNcm: $codigoNcm, ')
          ..write('estoqueMinimo: $estoqueMinimo, ')
          ..write('estoqueMaximo: $estoqueMaximo, ')
          ..write('quantidadeEstoque: $quantidadeEstoque, ')
          ..write('dataCadastro: $dataCadastro')
          ..write(')'))
        .toString();
  }
}

class $NfeReferenciadasTable extends NfeReferenciadas
    with TableInfo<$NfeReferenciadasTable, NfeReferenciada> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeReferenciadasTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
    'id',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idNfeCabecalhoMeta = const VerificationMeta(
    'idNfeCabecalho',
  );
  @override
  late final GeneratedColumn<int> idNfeCabecalho = GeneratedColumn<int>(
    'id_nfe_cabecalho',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _chaveAcessoMeta = const VerificationMeta(
    'chaveAcesso',
  );
  @override
  late final GeneratedColumn<String> chaveAcesso = GeneratedColumn<String>(
    'chave_acesso',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 44,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _chaveCodigoZeradoMeta = const VerificationMeta(
    'chaveCodigoZerado',
  );
  @override
  late final GeneratedColumn<String> chaveCodigoZerado =
      GeneratedColumn<String>(
        'chave_codigo_zerado',
        aliasedName,
        true,
        additionalChecks: GeneratedColumn.checkTextLength(
          minTextLength: 0,
          maxTextLength: 44,
        ),
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    idNfeCabecalho,
    chaveAcesso,
    chaveCodigoZerado,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'nfe_referenciada';
  @override
  VerificationContext validateIntegrity(
    Insertable<NfeReferenciada> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('id_nfe_cabecalho')) {
      context.handle(
        _idNfeCabecalhoMeta,
        idNfeCabecalho.isAcceptableOrUnknown(
          data['id_nfe_cabecalho']!,
          _idNfeCabecalhoMeta,
        ),
      );
    }
    if (data.containsKey('chave_acesso')) {
      context.handle(
        _chaveAcessoMeta,
        chaveAcesso.isAcceptableOrUnknown(
          data['chave_acesso']!,
          _chaveAcessoMeta,
        ),
      );
    }
    if (data.containsKey('chave_codigo_zerado')) {
      context.handle(
        _chaveCodigoZeradoMeta,
        chaveCodigoZerado.isAcceptableOrUnknown(
          data['chave_codigo_zerado']!,
          _chaveCodigoZeradoMeta,
        ),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeReferenciada map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return NfeReferenciada(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id'],
      ),
      idNfeCabecalho: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_nfe_cabecalho'],
      ),
      chaveAcesso: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}chave_acesso'],
      ),
      chaveCodigoZerado: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}chave_codigo_zerado'],
      ),
    );
  }

  @override
  $NfeReferenciadasTable createAlias(String alias) {
    return $NfeReferenciadasTable(attachedDatabase, alias);
  }
}

class NfeReferenciada extends DataClass implements Insertable<NfeReferenciada> {
  final int? id;
  final int? idNfeCabecalho;
  final String? chaveAcesso;
  final String? chaveCodigoZerado;
  const NfeReferenciada({
    this.id,
    this.idNfeCabecalho,
    this.chaveAcesso,
    this.chaveCodigoZerado,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeCabecalho != null) {
      map['id_nfe_cabecalho'] = Variable<int>(idNfeCabecalho);
    }
    if (!nullToAbsent || chaveAcesso != null) {
      map['chave_acesso'] = Variable<String>(chaveAcesso);
    }
    if (!nullToAbsent || chaveCodigoZerado != null) {
      map['chave_codigo_zerado'] = Variable<String>(chaveCodigoZerado);
    }
    return map;
  }

  factory NfeReferenciada.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeReferenciada(
      id: serializer.fromJson<int?>(json['id']),
      idNfeCabecalho: serializer.fromJson<int?>(json['idNfeCabecalho']),
      chaveAcesso: serializer.fromJson<String?>(json['chaveAcesso']),
      chaveCodigoZerado: serializer.fromJson<String?>(
        json['chaveCodigoZerado'],
      ),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeCabecalho': serializer.toJson<int?>(idNfeCabecalho),
      'chaveAcesso': serializer.toJson<String?>(chaveAcesso),
      'chaveCodigoZerado': serializer.toJson<String?>(chaveCodigoZerado),
    };
  }

  NfeReferenciada copyWith({
    Value<int?> id = const Value.absent(),
    Value<int?> idNfeCabecalho = const Value.absent(),
    Value<String?> chaveAcesso = const Value.absent(),
    Value<String?> chaveCodigoZerado = const Value.absent(),
  }) => NfeReferenciada(
    id: id.present ? id.value : this.id,
    idNfeCabecalho:
        idNfeCabecalho.present ? idNfeCabecalho.value : this.idNfeCabecalho,
    chaveAcesso: chaveAcesso.present ? chaveAcesso.value : this.chaveAcesso,
    chaveCodigoZerado:
        chaveCodigoZerado.present
            ? chaveCodigoZerado.value
            : this.chaveCodigoZerado,
  );
  NfeReferenciada copyWithCompanion(NfeReferenciadasCompanion data) {
    return NfeReferenciada(
      id: data.id.present ? data.id.value : this.id,
      idNfeCabecalho:
          data.idNfeCabecalho.present
              ? data.idNfeCabecalho.value
              : this.idNfeCabecalho,
      chaveAcesso:
          data.chaveAcesso.present ? data.chaveAcesso.value : this.chaveAcesso,
      chaveCodigoZerado:
          data.chaveCodigoZerado.present
              ? data.chaveCodigoZerado.value
              : this.chaveCodigoZerado,
    );
  }

  @override
  String toString() {
    return (StringBuffer('NfeReferenciada(')
          ..write('id: $id, ')
          ..write('idNfeCabecalho: $idNfeCabecalho, ')
          ..write('chaveAcesso: $chaveAcesso, ')
          ..write('chaveCodigoZerado: $chaveCodigoZerado')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode =>
      Object.hash(id, idNfeCabecalho, chaveAcesso, chaveCodigoZerado);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeReferenciada &&
          other.id == this.id &&
          other.idNfeCabecalho == this.idNfeCabecalho &&
          other.chaveAcesso == this.chaveAcesso &&
          other.chaveCodigoZerado == this.chaveCodigoZerado);
}

class NfeReferenciadasCompanion extends UpdateCompanion<NfeReferenciada> {
  final Value<int?> id;
  final Value<int?> idNfeCabecalho;
  final Value<String?> chaveAcesso;
  final Value<String?> chaveCodigoZerado;
  const NfeReferenciadasCompanion({
    this.id = const Value.absent(),
    this.idNfeCabecalho = const Value.absent(),
    this.chaveAcesso = const Value.absent(),
    this.chaveCodigoZerado = const Value.absent(),
  });
  NfeReferenciadasCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeCabecalho = const Value.absent(),
    this.chaveAcesso = const Value.absent(),
    this.chaveCodigoZerado = const Value.absent(),
  });
  static Insertable<NfeReferenciada> custom({
    Expression<int>? id,
    Expression<int>? idNfeCabecalho,
    Expression<String>? chaveAcesso,
    Expression<String>? chaveCodigoZerado,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (idNfeCabecalho != null) 'id_nfe_cabecalho': idNfeCabecalho,
      if (chaveAcesso != null) 'chave_acesso': chaveAcesso,
      if (chaveCodigoZerado != null) 'chave_codigo_zerado': chaveCodigoZerado,
    });
  }

  NfeReferenciadasCompanion copyWith({
    Value<int?>? id,
    Value<int?>? idNfeCabecalho,
    Value<String?>? chaveAcesso,
    Value<String?>? chaveCodigoZerado,
  }) {
    return NfeReferenciadasCompanion(
      id: id ?? this.id,
      idNfeCabecalho: idNfeCabecalho ?? this.idNfeCabecalho,
      chaveAcesso: chaveAcesso ?? this.chaveAcesso,
      chaveCodigoZerado: chaveCodigoZerado ?? this.chaveCodigoZerado,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (idNfeCabecalho.present) {
      map['id_nfe_cabecalho'] = Variable<int>(idNfeCabecalho.value);
    }
    if (chaveAcesso.present) {
      map['chave_acesso'] = Variable<String>(chaveAcesso.value);
    }
    if (chaveCodigoZerado.present) {
      map['chave_codigo_zerado'] = Variable<String>(chaveCodigoZerado.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeReferenciadasCompanion(')
          ..write('id: $id, ')
          ..write('idNfeCabecalho: $idNfeCabecalho, ')
          ..write('chaveAcesso: $chaveAcesso, ')
          ..write('chaveCodigoZerado: $chaveCodigoZerado')
          ..write(')'))
        .toString();
  }
}

class $NfeEmitentesTable extends NfeEmitentes
    with TableInfo<$NfeEmitentesTable, NfeEmitente> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeEmitentesTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
    'id',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idNfeCabecalhoMeta = const VerificationMeta(
    'idNfeCabecalho',
  );
  @override
  late final GeneratedColumn<int> idNfeCabecalho = GeneratedColumn<int>(
    'id_nfe_cabecalho',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _cnpjMeta = const VerificationMeta('cnpj');
  @override
  late final GeneratedColumn<String> cnpj = GeneratedColumn<String>(
    'cnpj',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 14,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _cpfMeta = const VerificationMeta('cpf');
  @override
  late final GeneratedColumn<String> cpf = GeneratedColumn<String>(
    'cpf',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 11,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _nomeMeta = const VerificationMeta('nome');
  @override
  late final GeneratedColumn<String> nome = GeneratedColumn<String>(
    'nome',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 60,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _fantasiaMeta = const VerificationMeta(
    'fantasia',
  );
  @override
  late final GeneratedColumn<String> fantasia = GeneratedColumn<String>(
    'fantasia',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 60,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _logradouroMeta = const VerificationMeta(
    'logradouro',
  );
  @override
  late final GeneratedColumn<String> logradouro = GeneratedColumn<String>(
    'logradouro',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 60,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _numeroMeta = const VerificationMeta('numero');
  @override
  late final GeneratedColumn<String> numero = GeneratedColumn<String>(
    'numero',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 60,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _complementoMeta = const VerificationMeta(
    'complemento',
  );
  @override
  late final GeneratedColumn<String> complemento = GeneratedColumn<String>(
    'complemento',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 60,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _bairroMeta = const VerificationMeta('bairro');
  @override
  late final GeneratedColumn<String> bairro = GeneratedColumn<String>(
    'bairro',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 60,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _codigoMunicipioMeta = const VerificationMeta(
    'codigoMunicipio',
  );
  @override
  late final GeneratedColumn<int> codigoMunicipio = GeneratedColumn<int>(
    'codigo_municipio',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _nomeMunicipioMeta = const VerificationMeta(
    'nomeMunicipio',
  );
  @override
  late final GeneratedColumn<String> nomeMunicipio = GeneratedColumn<String>(
    'nome_municipio',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 60,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _ufMeta = const VerificationMeta('uf');
  @override
  late final GeneratedColumn<String> uf = GeneratedColumn<String>(
    'uf',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 2,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _cepMeta = const VerificationMeta('cep');
  @override
  late final GeneratedColumn<String> cep = GeneratedColumn<String>(
    'cep',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 8,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _codigoPaisMeta = const VerificationMeta(
    'codigoPais',
  );
  @override
  late final GeneratedColumn<int> codigoPais = GeneratedColumn<int>(
    'codigo_pais',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _nomePaisMeta = const VerificationMeta(
    'nomePais',
  );
  @override
  late final GeneratedColumn<String> nomePais = GeneratedColumn<String>(
    'nome_pais',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 60,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _telefoneMeta = const VerificationMeta(
    'telefone',
  );
  @override
  late final GeneratedColumn<String> telefone = GeneratedColumn<String>(
    'telefone',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 14,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _inscricaoEstadualMeta = const VerificationMeta(
    'inscricaoEstadual',
  );
  @override
  late final GeneratedColumn<String> inscricaoEstadual =
      GeneratedColumn<String>(
        'inscricao_estadual',
        aliasedName,
        true,
        additionalChecks: GeneratedColumn.checkTextLength(
          minTextLength: 0,
          maxTextLength: 14,
        ),
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _inscricaoEstadualStMeta =
      const VerificationMeta('inscricaoEstadualSt');
  @override
  late final GeneratedColumn<String> inscricaoEstadualSt =
      GeneratedColumn<String>(
        'inscricao_estadual_st',
        aliasedName,
        true,
        additionalChecks: GeneratedColumn.checkTextLength(
          minTextLength: 0,
          maxTextLength: 14,
        ),
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _inscricaoMunicipalMeta =
      const VerificationMeta('inscricaoMunicipal');
  @override
  late final GeneratedColumn<String> inscricaoMunicipal =
      GeneratedColumn<String>(
        'inscricao_municipal',
        aliasedName,
        true,
        additionalChecks: GeneratedColumn.checkTextLength(
          minTextLength: 0,
          maxTextLength: 15,
        ),
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _cnaeMeta = const VerificationMeta('cnae');
  @override
  late final GeneratedColumn<String> cnae = GeneratedColumn<String>(
    'cnae',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 7,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _crtMeta = const VerificationMeta('crt');
  @override
  late final GeneratedColumn<String> crt = GeneratedColumn<String>(
    'crt',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 1,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    idNfeCabecalho,
    cnpj,
    cpf,
    nome,
    fantasia,
    logradouro,
    numero,
    complemento,
    bairro,
    codigoMunicipio,
    nomeMunicipio,
    uf,
    cep,
    codigoPais,
    nomePais,
    telefone,
    inscricaoEstadual,
    inscricaoEstadualSt,
    inscricaoMunicipal,
    cnae,
    crt,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'nfe_emitente';
  @override
  VerificationContext validateIntegrity(
    Insertable<NfeEmitente> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('id_nfe_cabecalho')) {
      context.handle(
        _idNfeCabecalhoMeta,
        idNfeCabecalho.isAcceptableOrUnknown(
          data['id_nfe_cabecalho']!,
          _idNfeCabecalhoMeta,
        ),
      );
    }
    if (data.containsKey('cnpj')) {
      context.handle(
        _cnpjMeta,
        cnpj.isAcceptableOrUnknown(data['cnpj']!, _cnpjMeta),
      );
    }
    if (data.containsKey('cpf')) {
      context.handle(
        _cpfMeta,
        cpf.isAcceptableOrUnknown(data['cpf']!, _cpfMeta),
      );
    }
    if (data.containsKey('nome')) {
      context.handle(
        _nomeMeta,
        nome.isAcceptableOrUnknown(data['nome']!, _nomeMeta),
      );
    }
    if (data.containsKey('fantasia')) {
      context.handle(
        _fantasiaMeta,
        fantasia.isAcceptableOrUnknown(data['fantasia']!, _fantasiaMeta),
      );
    }
    if (data.containsKey('logradouro')) {
      context.handle(
        _logradouroMeta,
        logradouro.isAcceptableOrUnknown(data['logradouro']!, _logradouroMeta),
      );
    }
    if (data.containsKey('numero')) {
      context.handle(
        _numeroMeta,
        numero.isAcceptableOrUnknown(data['numero']!, _numeroMeta),
      );
    }
    if (data.containsKey('complemento')) {
      context.handle(
        _complementoMeta,
        complemento.isAcceptableOrUnknown(
          data['complemento']!,
          _complementoMeta,
        ),
      );
    }
    if (data.containsKey('bairro')) {
      context.handle(
        _bairroMeta,
        bairro.isAcceptableOrUnknown(data['bairro']!, _bairroMeta),
      );
    }
    if (data.containsKey('codigo_municipio')) {
      context.handle(
        _codigoMunicipioMeta,
        codigoMunicipio.isAcceptableOrUnknown(
          data['codigo_municipio']!,
          _codigoMunicipioMeta,
        ),
      );
    }
    if (data.containsKey('nome_municipio')) {
      context.handle(
        _nomeMunicipioMeta,
        nomeMunicipio.isAcceptableOrUnknown(
          data['nome_municipio']!,
          _nomeMunicipioMeta,
        ),
      );
    }
    if (data.containsKey('uf')) {
      context.handle(_ufMeta, uf.isAcceptableOrUnknown(data['uf']!, _ufMeta));
    }
    if (data.containsKey('cep')) {
      context.handle(
        _cepMeta,
        cep.isAcceptableOrUnknown(data['cep']!, _cepMeta),
      );
    }
    if (data.containsKey('codigo_pais')) {
      context.handle(
        _codigoPaisMeta,
        codigoPais.isAcceptableOrUnknown(data['codigo_pais']!, _codigoPaisMeta),
      );
    }
    if (data.containsKey('nome_pais')) {
      context.handle(
        _nomePaisMeta,
        nomePais.isAcceptableOrUnknown(data['nome_pais']!, _nomePaisMeta),
      );
    }
    if (data.containsKey('telefone')) {
      context.handle(
        _telefoneMeta,
        telefone.isAcceptableOrUnknown(data['telefone']!, _telefoneMeta),
      );
    }
    if (data.containsKey('inscricao_estadual')) {
      context.handle(
        _inscricaoEstadualMeta,
        inscricaoEstadual.isAcceptableOrUnknown(
          data['inscricao_estadual']!,
          _inscricaoEstadualMeta,
        ),
      );
    }
    if (data.containsKey('inscricao_estadual_st')) {
      context.handle(
        _inscricaoEstadualStMeta,
        inscricaoEstadualSt.isAcceptableOrUnknown(
          data['inscricao_estadual_st']!,
          _inscricaoEstadualStMeta,
        ),
      );
    }
    if (data.containsKey('inscricao_municipal')) {
      context.handle(
        _inscricaoMunicipalMeta,
        inscricaoMunicipal.isAcceptableOrUnknown(
          data['inscricao_municipal']!,
          _inscricaoMunicipalMeta,
        ),
      );
    }
    if (data.containsKey('cnae')) {
      context.handle(
        _cnaeMeta,
        cnae.isAcceptableOrUnknown(data['cnae']!, _cnaeMeta),
      );
    }
    if (data.containsKey('crt')) {
      context.handle(
        _crtMeta,
        crt.isAcceptableOrUnknown(data['crt']!, _crtMeta),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeEmitente map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return NfeEmitente(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id'],
      ),
      idNfeCabecalho: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_nfe_cabecalho'],
      ),
      cnpj: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}cnpj'],
      ),
      cpf: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}cpf'],
      ),
      nome: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}nome'],
      ),
      fantasia: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}fantasia'],
      ),
      logradouro: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}logradouro'],
      ),
      numero: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}numero'],
      ),
      complemento: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}complemento'],
      ),
      bairro: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}bairro'],
      ),
      codigoMunicipio: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}codigo_municipio'],
      ),
      nomeMunicipio: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}nome_municipio'],
      ),
      uf: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}uf'],
      ),
      cep: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}cep'],
      ),
      codigoPais: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}codigo_pais'],
      ),
      nomePais: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}nome_pais'],
      ),
      telefone: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}telefone'],
      ),
      inscricaoEstadual: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}inscricao_estadual'],
      ),
      inscricaoEstadualSt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}inscricao_estadual_st'],
      ),
      inscricaoMunicipal: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}inscricao_municipal'],
      ),
      cnae: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}cnae'],
      ),
      crt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}crt'],
      ),
    );
  }

  @override
  $NfeEmitentesTable createAlias(String alias) {
    return $NfeEmitentesTable(attachedDatabase, alias);
  }
}

class NfeEmitente extends DataClass implements Insertable<NfeEmitente> {
  final int? id;
  final int? idNfeCabecalho;
  final String? cnpj;
  final String? cpf;
  final String? nome;
  final String? fantasia;
  final String? logradouro;
  final String? numero;
  final String? complemento;
  final String? bairro;
  final int? codigoMunicipio;
  final String? nomeMunicipio;
  final String? uf;
  final String? cep;
  final int? codigoPais;
  final String? nomePais;
  final String? telefone;
  final String? inscricaoEstadual;
  final String? inscricaoEstadualSt;
  final String? inscricaoMunicipal;
  final String? cnae;
  final String? crt;
  const NfeEmitente({
    this.id,
    this.idNfeCabecalho,
    this.cnpj,
    this.cpf,
    this.nome,
    this.fantasia,
    this.logradouro,
    this.numero,
    this.complemento,
    this.bairro,
    this.codigoMunicipio,
    this.nomeMunicipio,
    this.uf,
    this.cep,
    this.codigoPais,
    this.nomePais,
    this.telefone,
    this.inscricaoEstadual,
    this.inscricaoEstadualSt,
    this.inscricaoMunicipal,
    this.cnae,
    this.crt,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeCabecalho != null) {
      map['id_nfe_cabecalho'] = Variable<int>(idNfeCabecalho);
    }
    if (!nullToAbsent || cnpj != null) {
      map['cnpj'] = Variable<String>(cnpj);
    }
    if (!nullToAbsent || cpf != null) {
      map['cpf'] = Variable<String>(cpf);
    }
    if (!nullToAbsent || nome != null) {
      map['nome'] = Variable<String>(nome);
    }
    if (!nullToAbsent || fantasia != null) {
      map['fantasia'] = Variable<String>(fantasia);
    }
    if (!nullToAbsent || logradouro != null) {
      map['logradouro'] = Variable<String>(logradouro);
    }
    if (!nullToAbsent || numero != null) {
      map['numero'] = Variable<String>(numero);
    }
    if (!nullToAbsent || complemento != null) {
      map['complemento'] = Variable<String>(complemento);
    }
    if (!nullToAbsent || bairro != null) {
      map['bairro'] = Variable<String>(bairro);
    }
    if (!nullToAbsent || codigoMunicipio != null) {
      map['codigo_municipio'] = Variable<int>(codigoMunicipio);
    }
    if (!nullToAbsent || nomeMunicipio != null) {
      map['nome_municipio'] = Variable<String>(nomeMunicipio);
    }
    if (!nullToAbsent || uf != null) {
      map['uf'] = Variable<String>(uf);
    }
    if (!nullToAbsent || cep != null) {
      map['cep'] = Variable<String>(cep);
    }
    if (!nullToAbsent || codigoPais != null) {
      map['codigo_pais'] = Variable<int>(codigoPais);
    }
    if (!nullToAbsent || nomePais != null) {
      map['nome_pais'] = Variable<String>(nomePais);
    }
    if (!nullToAbsent || telefone != null) {
      map['telefone'] = Variable<String>(telefone);
    }
    if (!nullToAbsent || inscricaoEstadual != null) {
      map['inscricao_estadual'] = Variable<String>(inscricaoEstadual);
    }
    if (!nullToAbsent || inscricaoEstadualSt != null) {
      map['inscricao_estadual_st'] = Variable<String>(inscricaoEstadualSt);
    }
    if (!nullToAbsent || inscricaoMunicipal != null) {
      map['inscricao_municipal'] = Variable<String>(inscricaoMunicipal);
    }
    if (!nullToAbsent || cnae != null) {
      map['cnae'] = Variable<String>(cnae);
    }
    if (!nullToAbsent || crt != null) {
      map['crt'] = Variable<String>(crt);
    }
    return map;
  }

  factory NfeEmitente.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeEmitente(
      id: serializer.fromJson<int?>(json['id']),
      idNfeCabecalho: serializer.fromJson<int?>(json['idNfeCabecalho']),
      cnpj: serializer.fromJson<String?>(json['cnpj']),
      cpf: serializer.fromJson<String?>(json['cpf']),
      nome: serializer.fromJson<String?>(json['nome']),
      fantasia: serializer.fromJson<String?>(json['fantasia']),
      logradouro: serializer.fromJson<String?>(json['logradouro']),
      numero: serializer.fromJson<String?>(json['numero']),
      complemento: serializer.fromJson<String?>(json['complemento']),
      bairro: serializer.fromJson<String?>(json['bairro']),
      codigoMunicipio: serializer.fromJson<int?>(json['codigoMunicipio']),
      nomeMunicipio: serializer.fromJson<String?>(json['nomeMunicipio']),
      uf: serializer.fromJson<String?>(json['uf']),
      cep: serializer.fromJson<String?>(json['cep']),
      codigoPais: serializer.fromJson<int?>(json['codigoPais']),
      nomePais: serializer.fromJson<String?>(json['nomePais']),
      telefone: serializer.fromJson<String?>(json['telefone']),
      inscricaoEstadual: serializer.fromJson<String?>(
        json['inscricaoEstadual'],
      ),
      inscricaoEstadualSt: serializer.fromJson<String?>(
        json['inscricaoEstadualSt'],
      ),
      inscricaoMunicipal: serializer.fromJson<String?>(
        json['inscricaoMunicipal'],
      ),
      cnae: serializer.fromJson<String?>(json['cnae']),
      crt: serializer.fromJson<String?>(json['crt']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeCabecalho': serializer.toJson<int?>(idNfeCabecalho),
      'cnpj': serializer.toJson<String?>(cnpj),
      'cpf': serializer.toJson<String?>(cpf),
      'nome': serializer.toJson<String?>(nome),
      'fantasia': serializer.toJson<String?>(fantasia),
      'logradouro': serializer.toJson<String?>(logradouro),
      'numero': serializer.toJson<String?>(numero),
      'complemento': serializer.toJson<String?>(complemento),
      'bairro': serializer.toJson<String?>(bairro),
      'codigoMunicipio': serializer.toJson<int?>(codigoMunicipio),
      'nomeMunicipio': serializer.toJson<String?>(nomeMunicipio),
      'uf': serializer.toJson<String?>(uf),
      'cep': serializer.toJson<String?>(cep),
      'codigoPais': serializer.toJson<int?>(codigoPais),
      'nomePais': serializer.toJson<String?>(nomePais),
      'telefone': serializer.toJson<String?>(telefone),
      'inscricaoEstadual': serializer.toJson<String?>(inscricaoEstadual),
      'inscricaoEstadualSt': serializer.toJson<String?>(inscricaoEstadualSt),
      'inscricaoMunicipal': serializer.toJson<String?>(inscricaoMunicipal),
      'cnae': serializer.toJson<String?>(cnae),
      'crt': serializer.toJson<String?>(crt),
    };
  }

  NfeEmitente copyWith({
    Value<int?> id = const Value.absent(),
    Value<int?> idNfeCabecalho = const Value.absent(),
    Value<String?> cnpj = const Value.absent(),
    Value<String?> cpf = const Value.absent(),
    Value<String?> nome = const Value.absent(),
    Value<String?> fantasia = const Value.absent(),
    Value<String?> logradouro = const Value.absent(),
    Value<String?> numero = const Value.absent(),
    Value<String?> complemento = const Value.absent(),
    Value<String?> bairro = const Value.absent(),
    Value<int?> codigoMunicipio = const Value.absent(),
    Value<String?> nomeMunicipio = const Value.absent(),
    Value<String?> uf = const Value.absent(),
    Value<String?> cep = const Value.absent(),
    Value<int?> codigoPais = const Value.absent(),
    Value<String?> nomePais = const Value.absent(),
    Value<String?> telefone = const Value.absent(),
    Value<String?> inscricaoEstadual = const Value.absent(),
    Value<String?> inscricaoEstadualSt = const Value.absent(),
    Value<String?> inscricaoMunicipal = const Value.absent(),
    Value<String?> cnae = const Value.absent(),
    Value<String?> crt = const Value.absent(),
  }) => NfeEmitente(
    id: id.present ? id.value : this.id,
    idNfeCabecalho:
        idNfeCabecalho.present ? idNfeCabecalho.value : this.idNfeCabecalho,
    cnpj: cnpj.present ? cnpj.value : this.cnpj,
    cpf: cpf.present ? cpf.value : this.cpf,
    nome: nome.present ? nome.value : this.nome,
    fantasia: fantasia.present ? fantasia.value : this.fantasia,
    logradouro: logradouro.present ? logradouro.value : this.logradouro,
    numero: numero.present ? numero.value : this.numero,
    complemento: complemento.present ? complemento.value : this.complemento,
    bairro: bairro.present ? bairro.value : this.bairro,
    codigoMunicipio:
        codigoMunicipio.present ? codigoMunicipio.value : this.codigoMunicipio,
    nomeMunicipio:
        nomeMunicipio.present ? nomeMunicipio.value : this.nomeMunicipio,
    uf: uf.present ? uf.value : this.uf,
    cep: cep.present ? cep.value : this.cep,
    codigoPais: codigoPais.present ? codigoPais.value : this.codigoPais,
    nomePais: nomePais.present ? nomePais.value : this.nomePais,
    telefone: telefone.present ? telefone.value : this.telefone,
    inscricaoEstadual:
        inscricaoEstadual.present
            ? inscricaoEstadual.value
            : this.inscricaoEstadual,
    inscricaoEstadualSt:
        inscricaoEstadualSt.present
            ? inscricaoEstadualSt.value
            : this.inscricaoEstadualSt,
    inscricaoMunicipal:
        inscricaoMunicipal.present
            ? inscricaoMunicipal.value
            : this.inscricaoMunicipal,
    cnae: cnae.present ? cnae.value : this.cnae,
    crt: crt.present ? crt.value : this.crt,
  );
  NfeEmitente copyWithCompanion(NfeEmitentesCompanion data) {
    return NfeEmitente(
      id: data.id.present ? data.id.value : this.id,
      idNfeCabecalho:
          data.idNfeCabecalho.present
              ? data.idNfeCabecalho.value
              : this.idNfeCabecalho,
      cnpj: data.cnpj.present ? data.cnpj.value : this.cnpj,
      cpf: data.cpf.present ? data.cpf.value : this.cpf,
      nome: data.nome.present ? data.nome.value : this.nome,
      fantasia: data.fantasia.present ? data.fantasia.value : this.fantasia,
      logradouro:
          data.logradouro.present ? data.logradouro.value : this.logradouro,
      numero: data.numero.present ? data.numero.value : this.numero,
      complemento:
          data.complemento.present ? data.complemento.value : this.complemento,
      bairro: data.bairro.present ? data.bairro.value : this.bairro,
      codigoMunicipio:
          data.codigoMunicipio.present
              ? data.codigoMunicipio.value
              : this.codigoMunicipio,
      nomeMunicipio:
          data.nomeMunicipio.present
              ? data.nomeMunicipio.value
              : this.nomeMunicipio,
      uf: data.uf.present ? data.uf.value : this.uf,
      cep: data.cep.present ? data.cep.value : this.cep,
      codigoPais:
          data.codigoPais.present ? data.codigoPais.value : this.codigoPais,
      nomePais: data.nomePais.present ? data.nomePais.value : this.nomePais,
      telefone: data.telefone.present ? data.telefone.value : this.telefone,
      inscricaoEstadual:
          data.inscricaoEstadual.present
              ? data.inscricaoEstadual.value
              : this.inscricaoEstadual,
      inscricaoEstadualSt:
          data.inscricaoEstadualSt.present
              ? data.inscricaoEstadualSt.value
              : this.inscricaoEstadualSt,
      inscricaoMunicipal:
          data.inscricaoMunicipal.present
              ? data.inscricaoMunicipal.value
              : this.inscricaoMunicipal,
      cnae: data.cnae.present ? data.cnae.value : this.cnae,
      crt: data.crt.present ? data.crt.value : this.crt,
    );
  }

  @override
  String toString() {
    return (StringBuffer('NfeEmitente(')
          ..write('id: $id, ')
          ..write('idNfeCabecalho: $idNfeCabecalho, ')
          ..write('cnpj: $cnpj, ')
          ..write('cpf: $cpf, ')
          ..write('nome: $nome, ')
          ..write('fantasia: $fantasia, ')
          ..write('logradouro: $logradouro, ')
          ..write('numero: $numero, ')
          ..write('complemento: $complemento, ')
          ..write('bairro: $bairro, ')
          ..write('codigoMunicipio: $codigoMunicipio, ')
          ..write('nomeMunicipio: $nomeMunicipio, ')
          ..write('uf: $uf, ')
          ..write('cep: $cep, ')
          ..write('codigoPais: $codigoPais, ')
          ..write('nomePais: $nomePais, ')
          ..write('telefone: $telefone, ')
          ..write('inscricaoEstadual: $inscricaoEstadual, ')
          ..write('inscricaoEstadualSt: $inscricaoEstadualSt, ')
          ..write('inscricaoMunicipal: $inscricaoMunicipal, ')
          ..write('cnae: $cnae, ')
          ..write('crt: $crt')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hashAll([
    id,
    idNfeCabecalho,
    cnpj,
    cpf,
    nome,
    fantasia,
    logradouro,
    numero,
    complemento,
    bairro,
    codigoMunicipio,
    nomeMunicipio,
    uf,
    cep,
    codigoPais,
    nomePais,
    telefone,
    inscricaoEstadual,
    inscricaoEstadualSt,
    inscricaoMunicipal,
    cnae,
    crt,
  ]);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeEmitente &&
          other.id == this.id &&
          other.idNfeCabecalho == this.idNfeCabecalho &&
          other.cnpj == this.cnpj &&
          other.cpf == this.cpf &&
          other.nome == this.nome &&
          other.fantasia == this.fantasia &&
          other.logradouro == this.logradouro &&
          other.numero == this.numero &&
          other.complemento == this.complemento &&
          other.bairro == this.bairro &&
          other.codigoMunicipio == this.codigoMunicipio &&
          other.nomeMunicipio == this.nomeMunicipio &&
          other.uf == this.uf &&
          other.cep == this.cep &&
          other.codigoPais == this.codigoPais &&
          other.nomePais == this.nomePais &&
          other.telefone == this.telefone &&
          other.inscricaoEstadual == this.inscricaoEstadual &&
          other.inscricaoEstadualSt == this.inscricaoEstadualSt &&
          other.inscricaoMunicipal == this.inscricaoMunicipal &&
          other.cnae == this.cnae &&
          other.crt == this.crt);
}

class NfeEmitentesCompanion extends UpdateCompanion<NfeEmitente> {
  final Value<int?> id;
  final Value<int?> idNfeCabecalho;
  final Value<String?> cnpj;
  final Value<String?> cpf;
  final Value<String?> nome;
  final Value<String?> fantasia;
  final Value<String?> logradouro;
  final Value<String?> numero;
  final Value<String?> complemento;
  final Value<String?> bairro;
  final Value<int?> codigoMunicipio;
  final Value<String?> nomeMunicipio;
  final Value<String?> uf;
  final Value<String?> cep;
  final Value<int?> codigoPais;
  final Value<String?> nomePais;
  final Value<String?> telefone;
  final Value<String?> inscricaoEstadual;
  final Value<String?> inscricaoEstadualSt;
  final Value<String?> inscricaoMunicipal;
  final Value<String?> cnae;
  final Value<String?> crt;
  const NfeEmitentesCompanion({
    this.id = const Value.absent(),
    this.idNfeCabecalho = const Value.absent(),
    this.cnpj = const Value.absent(),
    this.cpf = const Value.absent(),
    this.nome = const Value.absent(),
    this.fantasia = const Value.absent(),
    this.logradouro = const Value.absent(),
    this.numero = const Value.absent(),
    this.complemento = const Value.absent(),
    this.bairro = const Value.absent(),
    this.codigoMunicipio = const Value.absent(),
    this.nomeMunicipio = const Value.absent(),
    this.uf = const Value.absent(),
    this.cep = const Value.absent(),
    this.codigoPais = const Value.absent(),
    this.nomePais = const Value.absent(),
    this.telefone = const Value.absent(),
    this.inscricaoEstadual = const Value.absent(),
    this.inscricaoEstadualSt = const Value.absent(),
    this.inscricaoMunicipal = const Value.absent(),
    this.cnae = const Value.absent(),
    this.crt = const Value.absent(),
  });
  NfeEmitentesCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeCabecalho = const Value.absent(),
    this.cnpj = const Value.absent(),
    this.cpf = const Value.absent(),
    this.nome = const Value.absent(),
    this.fantasia = const Value.absent(),
    this.logradouro = const Value.absent(),
    this.numero = const Value.absent(),
    this.complemento = const Value.absent(),
    this.bairro = const Value.absent(),
    this.codigoMunicipio = const Value.absent(),
    this.nomeMunicipio = const Value.absent(),
    this.uf = const Value.absent(),
    this.cep = const Value.absent(),
    this.codigoPais = const Value.absent(),
    this.nomePais = const Value.absent(),
    this.telefone = const Value.absent(),
    this.inscricaoEstadual = const Value.absent(),
    this.inscricaoEstadualSt = const Value.absent(),
    this.inscricaoMunicipal = const Value.absent(),
    this.cnae = const Value.absent(),
    this.crt = const Value.absent(),
  });
  static Insertable<NfeEmitente> custom({
    Expression<int>? id,
    Expression<int>? idNfeCabecalho,
    Expression<String>? cnpj,
    Expression<String>? cpf,
    Expression<String>? nome,
    Expression<String>? fantasia,
    Expression<String>? logradouro,
    Expression<String>? numero,
    Expression<String>? complemento,
    Expression<String>? bairro,
    Expression<int>? codigoMunicipio,
    Expression<String>? nomeMunicipio,
    Expression<String>? uf,
    Expression<String>? cep,
    Expression<int>? codigoPais,
    Expression<String>? nomePais,
    Expression<String>? telefone,
    Expression<String>? inscricaoEstadual,
    Expression<String>? inscricaoEstadualSt,
    Expression<String>? inscricaoMunicipal,
    Expression<String>? cnae,
    Expression<String>? crt,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (idNfeCabecalho != null) 'id_nfe_cabecalho': idNfeCabecalho,
      if (cnpj != null) 'cnpj': cnpj,
      if (cpf != null) 'cpf': cpf,
      if (nome != null) 'nome': nome,
      if (fantasia != null) 'fantasia': fantasia,
      if (logradouro != null) 'logradouro': logradouro,
      if (numero != null) 'numero': numero,
      if (complemento != null) 'complemento': complemento,
      if (bairro != null) 'bairro': bairro,
      if (codigoMunicipio != null) 'codigo_municipio': codigoMunicipio,
      if (nomeMunicipio != null) 'nome_municipio': nomeMunicipio,
      if (uf != null) 'uf': uf,
      if (cep != null) 'cep': cep,
      if (codigoPais != null) 'codigo_pais': codigoPais,
      if (nomePais != null) 'nome_pais': nomePais,
      if (telefone != null) 'telefone': telefone,
      if (inscricaoEstadual != null) 'inscricao_estadual': inscricaoEstadual,
      if (inscricaoEstadualSt != null)
        'inscricao_estadual_st': inscricaoEstadualSt,
      if (inscricaoMunicipal != null) 'inscricao_municipal': inscricaoMunicipal,
      if (cnae != null) 'cnae': cnae,
      if (crt != null) 'crt': crt,
    });
  }

  NfeEmitentesCompanion copyWith({
    Value<int?>? id,
    Value<int?>? idNfeCabecalho,
    Value<String?>? cnpj,
    Value<String?>? cpf,
    Value<String?>? nome,
    Value<String?>? fantasia,
    Value<String?>? logradouro,
    Value<String?>? numero,
    Value<String?>? complemento,
    Value<String?>? bairro,
    Value<int?>? codigoMunicipio,
    Value<String?>? nomeMunicipio,
    Value<String?>? uf,
    Value<String?>? cep,
    Value<int?>? codigoPais,
    Value<String?>? nomePais,
    Value<String?>? telefone,
    Value<String?>? inscricaoEstadual,
    Value<String?>? inscricaoEstadualSt,
    Value<String?>? inscricaoMunicipal,
    Value<String?>? cnae,
    Value<String?>? crt,
  }) {
    return NfeEmitentesCompanion(
      id: id ?? this.id,
      idNfeCabecalho: idNfeCabecalho ?? this.idNfeCabecalho,
      cnpj: cnpj ?? this.cnpj,
      cpf: cpf ?? this.cpf,
      nome: nome ?? this.nome,
      fantasia: fantasia ?? this.fantasia,
      logradouro: logradouro ?? this.logradouro,
      numero: numero ?? this.numero,
      complemento: complemento ?? this.complemento,
      bairro: bairro ?? this.bairro,
      codigoMunicipio: codigoMunicipio ?? this.codigoMunicipio,
      nomeMunicipio: nomeMunicipio ?? this.nomeMunicipio,
      uf: uf ?? this.uf,
      cep: cep ?? this.cep,
      codigoPais: codigoPais ?? this.codigoPais,
      nomePais: nomePais ?? this.nomePais,
      telefone: telefone ?? this.telefone,
      inscricaoEstadual: inscricaoEstadual ?? this.inscricaoEstadual,
      inscricaoEstadualSt: inscricaoEstadualSt ?? this.inscricaoEstadualSt,
      inscricaoMunicipal: inscricaoMunicipal ?? this.inscricaoMunicipal,
      cnae: cnae ?? this.cnae,
      crt: crt ?? this.crt,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (idNfeCabecalho.present) {
      map['id_nfe_cabecalho'] = Variable<int>(idNfeCabecalho.value);
    }
    if (cnpj.present) {
      map['cnpj'] = Variable<String>(cnpj.value);
    }
    if (cpf.present) {
      map['cpf'] = Variable<String>(cpf.value);
    }
    if (nome.present) {
      map['nome'] = Variable<String>(nome.value);
    }
    if (fantasia.present) {
      map['fantasia'] = Variable<String>(fantasia.value);
    }
    if (logradouro.present) {
      map['logradouro'] = Variable<String>(logradouro.value);
    }
    if (numero.present) {
      map['numero'] = Variable<String>(numero.value);
    }
    if (complemento.present) {
      map['complemento'] = Variable<String>(complemento.value);
    }
    if (bairro.present) {
      map['bairro'] = Variable<String>(bairro.value);
    }
    if (codigoMunicipio.present) {
      map['codigo_municipio'] = Variable<int>(codigoMunicipio.value);
    }
    if (nomeMunicipio.present) {
      map['nome_municipio'] = Variable<String>(nomeMunicipio.value);
    }
    if (uf.present) {
      map['uf'] = Variable<String>(uf.value);
    }
    if (cep.present) {
      map['cep'] = Variable<String>(cep.value);
    }
    if (codigoPais.present) {
      map['codigo_pais'] = Variable<int>(codigoPais.value);
    }
    if (nomePais.present) {
      map['nome_pais'] = Variable<String>(nomePais.value);
    }
    if (telefone.present) {
      map['telefone'] = Variable<String>(telefone.value);
    }
    if (inscricaoEstadual.present) {
      map['inscricao_estadual'] = Variable<String>(inscricaoEstadual.value);
    }
    if (inscricaoEstadualSt.present) {
      map['inscricao_estadual_st'] = Variable<String>(
        inscricaoEstadualSt.value,
      );
    }
    if (inscricaoMunicipal.present) {
      map['inscricao_municipal'] = Variable<String>(inscricaoMunicipal.value);
    }
    if (cnae.present) {
      map['cnae'] = Variable<String>(cnae.value);
    }
    if (crt.present) {
      map['crt'] = Variable<String>(crt.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeEmitentesCompanion(')
          ..write('id: $id, ')
          ..write('idNfeCabecalho: $idNfeCabecalho, ')
          ..write('cnpj: $cnpj, ')
          ..write('cpf: $cpf, ')
          ..write('nome: $nome, ')
          ..write('fantasia: $fantasia, ')
          ..write('logradouro: $logradouro, ')
          ..write('numero: $numero, ')
          ..write('complemento: $complemento, ')
          ..write('bairro: $bairro, ')
          ..write('codigoMunicipio: $codigoMunicipio, ')
          ..write('nomeMunicipio: $nomeMunicipio, ')
          ..write('uf: $uf, ')
          ..write('cep: $cep, ')
          ..write('codigoPais: $codigoPais, ')
          ..write('nomePais: $nomePais, ')
          ..write('telefone: $telefone, ')
          ..write('inscricaoEstadual: $inscricaoEstadual, ')
          ..write('inscricaoEstadualSt: $inscricaoEstadualSt, ')
          ..write('inscricaoMunicipal: $inscricaoMunicipal, ')
          ..write('cnae: $cnae, ')
          ..write('crt: $crt')
          ..write(')'))
        .toString();
  }
}

class $NfeDestinatariosTable extends NfeDestinatarios
    with TableInfo<$NfeDestinatariosTable, NfeDestinatario> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeDestinatariosTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
    'id',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idNfeCabecalhoMeta = const VerificationMeta(
    'idNfeCabecalho',
  );
  @override
  late final GeneratedColumn<int> idNfeCabecalho = GeneratedColumn<int>(
    'id_nfe_cabecalho',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _cnpjMeta = const VerificationMeta('cnpj');
  @override
  late final GeneratedColumn<String> cnpj = GeneratedColumn<String>(
    'cnpj',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 14,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _cpfMeta = const VerificationMeta('cpf');
  @override
  late final GeneratedColumn<String> cpf = GeneratedColumn<String>(
    'cpf',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 11,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _estrangeiroIdentificacaoMeta =
      const VerificationMeta('estrangeiroIdentificacao');
  @override
  late final GeneratedColumn<String> estrangeiroIdentificacao =
      GeneratedColumn<String>(
        'estrangeiro_identificacao',
        aliasedName,
        true,
        additionalChecks: GeneratedColumn.checkTextLength(
          minTextLength: 0,
          maxTextLength: 20,
        ),
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _nomeMeta = const VerificationMeta('nome');
  @override
  late final GeneratedColumn<String> nome = GeneratedColumn<String>(
    'nome',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 60,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _logradouroMeta = const VerificationMeta(
    'logradouro',
  );
  @override
  late final GeneratedColumn<String> logradouro = GeneratedColumn<String>(
    'logradouro',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 60,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _numeroMeta = const VerificationMeta('numero');
  @override
  late final GeneratedColumn<String> numero = GeneratedColumn<String>(
    'numero',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 60,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _complementoMeta = const VerificationMeta(
    'complemento',
  );
  @override
  late final GeneratedColumn<String> complemento = GeneratedColumn<String>(
    'complemento',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 60,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _bairroMeta = const VerificationMeta('bairro');
  @override
  late final GeneratedColumn<String> bairro = GeneratedColumn<String>(
    'bairro',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 60,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _codigoMunicipioMeta = const VerificationMeta(
    'codigoMunicipio',
  );
  @override
  late final GeneratedColumn<int> codigoMunicipio = GeneratedColumn<int>(
    'codigo_municipio',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _nomeMunicipioMeta = const VerificationMeta(
    'nomeMunicipio',
  );
  @override
  late final GeneratedColumn<String> nomeMunicipio = GeneratedColumn<String>(
    'nome_municipio',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 60,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _ufMeta = const VerificationMeta('uf');
  @override
  late final GeneratedColumn<String> uf = GeneratedColumn<String>(
    'uf',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 2,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _cepMeta = const VerificationMeta('cep');
  @override
  late final GeneratedColumn<String> cep = GeneratedColumn<String>(
    'cep',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 8,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _codigoPaisMeta = const VerificationMeta(
    'codigoPais',
  );
  @override
  late final GeneratedColumn<int> codigoPais = GeneratedColumn<int>(
    'codigo_pais',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _nomePaisMeta = const VerificationMeta(
    'nomePais',
  );
  @override
  late final GeneratedColumn<String> nomePais = GeneratedColumn<String>(
    'nome_pais',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 60,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _telefoneMeta = const VerificationMeta(
    'telefone',
  );
  @override
  late final GeneratedColumn<String> telefone = GeneratedColumn<String>(
    'telefone',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 14,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _indicadorIeMeta = const VerificationMeta(
    'indicadorIe',
  );
  @override
  late final GeneratedColumn<String> indicadorIe = GeneratedColumn<String>(
    'indicador_ie',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 1,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _inscricaoEstadualMeta = const VerificationMeta(
    'inscricaoEstadual',
  );
  @override
  late final GeneratedColumn<String> inscricaoEstadual =
      GeneratedColumn<String>(
        'inscricao_estadual',
        aliasedName,
        true,
        additionalChecks: GeneratedColumn.checkTextLength(
          minTextLength: 0,
          maxTextLength: 14,
        ),
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _suframaMeta = const VerificationMeta(
    'suframa',
  );
  @override
  late final GeneratedColumn<int> suframa = GeneratedColumn<int>(
    'suframa',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _inscricaoMunicipalMeta =
      const VerificationMeta('inscricaoMunicipal');
  @override
  late final GeneratedColumn<String> inscricaoMunicipal =
      GeneratedColumn<String>(
        'inscricao_municipal',
        aliasedName,
        true,
        additionalChecks: GeneratedColumn.checkTextLength(
          minTextLength: 0,
          maxTextLength: 15,
        ),
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _emailMeta = const VerificationMeta('email');
  @override
  late final GeneratedColumn<String> email = GeneratedColumn<String>(
    'email',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 60,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    idNfeCabecalho,
    cnpj,
    cpf,
    estrangeiroIdentificacao,
    nome,
    logradouro,
    numero,
    complemento,
    bairro,
    codigoMunicipio,
    nomeMunicipio,
    uf,
    cep,
    codigoPais,
    nomePais,
    telefone,
    indicadorIe,
    inscricaoEstadual,
    suframa,
    inscricaoMunicipal,
    email,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'nfe_destinatario';
  @override
  VerificationContext validateIntegrity(
    Insertable<NfeDestinatario> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('id_nfe_cabecalho')) {
      context.handle(
        _idNfeCabecalhoMeta,
        idNfeCabecalho.isAcceptableOrUnknown(
          data['id_nfe_cabecalho']!,
          _idNfeCabecalhoMeta,
        ),
      );
    }
    if (data.containsKey('cnpj')) {
      context.handle(
        _cnpjMeta,
        cnpj.isAcceptableOrUnknown(data['cnpj']!, _cnpjMeta),
      );
    }
    if (data.containsKey('cpf')) {
      context.handle(
        _cpfMeta,
        cpf.isAcceptableOrUnknown(data['cpf']!, _cpfMeta),
      );
    }
    if (data.containsKey('estrangeiro_identificacao')) {
      context.handle(
        _estrangeiroIdentificacaoMeta,
        estrangeiroIdentificacao.isAcceptableOrUnknown(
          data['estrangeiro_identificacao']!,
          _estrangeiroIdentificacaoMeta,
        ),
      );
    }
    if (data.containsKey('nome')) {
      context.handle(
        _nomeMeta,
        nome.isAcceptableOrUnknown(data['nome']!, _nomeMeta),
      );
    }
    if (data.containsKey('logradouro')) {
      context.handle(
        _logradouroMeta,
        logradouro.isAcceptableOrUnknown(data['logradouro']!, _logradouroMeta),
      );
    }
    if (data.containsKey('numero')) {
      context.handle(
        _numeroMeta,
        numero.isAcceptableOrUnknown(data['numero']!, _numeroMeta),
      );
    }
    if (data.containsKey('complemento')) {
      context.handle(
        _complementoMeta,
        complemento.isAcceptableOrUnknown(
          data['complemento']!,
          _complementoMeta,
        ),
      );
    }
    if (data.containsKey('bairro')) {
      context.handle(
        _bairroMeta,
        bairro.isAcceptableOrUnknown(data['bairro']!, _bairroMeta),
      );
    }
    if (data.containsKey('codigo_municipio')) {
      context.handle(
        _codigoMunicipioMeta,
        codigoMunicipio.isAcceptableOrUnknown(
          data['codigo_municipio']!,
          _codigoMunicipioMeta,
        ),
      );
    }
    if (data.containsKey('nome_municipio')) {
      context.handle(
        _nomeMunicipioMeta,
        nomeMunicipio.isAcceptableOrUnknown(
          data['nome_municipio']!,
          _nomeMunicipioMeta,
        ),
      );
    }
    if (data.containsKey('uf')) {
      context.handle(_ufMeta, uf.isAcceptableOrUnknown(data['uf']!, _ufMeta));
    }
    if (data.containsKey('cep')) {
      context.handle(
        _cepMeta,
        cep.isAcceptableOrUnknown(data['cep']!, _cepMeta),
      );
    }
    if (data.containsKey('codigo_pais')) {
      context.handle(
        _codigoPaisMeta,
        codigoPais.isAcceptableOrUnknown(data['codigo_pais']!, _codigoPaisMeta),
      );
    }
    if (data.containsKey('nome_pais')) {
      context.handle(
        _nomePaisMeta,
        nomePais.isAcceptableOrUnknown(data['nome_pais']!, _nomePaisMeta),
      );
    }
    if (data.containsKey('telefone')) {
      context.handle(
        _telefoneMeta,
        telefone.isAcceptableOrUnknown(data['telefone']!, _telefoneMeta),
      );
    }
    if (data.containsKey('indicador_ie')) {
      context.handle(
        _indicadorIeMeta,
        indicadorIe.isAcceptableOrUnknown(
          data['indicador_ie']!,
          _indicadorIeMeta,
        ),
      );
    }
    if (data.containsKey('inscricao_estadual')) {
      context.handle(
        _inscricaoEstadualMeta,
        inscricaoEstadual.isAcceptableOrUnknown(
          data['inscricao_estadual']!,
          _inscricaoEstadualMeta,
        ),
      );
    }
    if (data.containsKey('suframa')) {
      context.handle(
        _suframaMeta,
        suframa.isAcceptableOrUnknown(data['suframa']!, _suframaMeta),
      );
    }
    if (data.containsKey('inscricao_municipal')) {
      context.handle(
        _inscricaoMunicipalMeta,
        inscricaoMunicipal.isAcceptableOrUnknown(
          data['inscricao_municipal']!,
          _inscricaoMunicipalMeta,
        ),
      );
    }
    if (data.containsKey('email')) {
      context.handle(
        _emailMeta,
        email.isAcceptableOrUnknown(data['email']!, _emailMeta),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeDestinatario map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return NfeDestinatario(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id'],
      ),
      idNfeCabecalho: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_nfe_cabecalho'],
      ),
      cnpj: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}cnpj'],
      ),
      cpf: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}cpf'],
      ),
      estrangeiroIdentificacao: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}estrangeiro_identificacao'],
      ),
      nome: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}nome'],
      ),
      logradouro: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}logradouro'],
      ),
      numero: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}numero'],
      ),
      complemento: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}complemento'],
      ),
      bairro: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}bairro'],
      ),
      codigoMunicipio: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}codigo_municipio'],
      ),
      nomeMunicipio: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}nome_municipio'],
      ),
      uf: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}uf'],
      ),
      cep: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}cep'],
      ),
      codigoPais: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}codigo_pais'],
      ),
      nomePais: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}nome_pais'],
      ),
      telefone: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}telefone'],
      ),
      indicadorIe: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}indicador_ie'],
      ),
      inscricaoEstadual: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}inscricao_estadual'],
      ),
      suframa: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}suframa'],
      ),
      inscricaoMunicipal: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}inscricao_municipal'],
      ),
      email: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}email'],
      ),
    );
  }

  @override
  $NfeDestinatariosTable createAlias(String alias) {
    return $NfeDestinatariosTable(attachedDatabase, alias);
  }
}

class NfeDestinatario extends DataClass implements Insertable<NfeDestinatario> {
  final int? id;
  final int? idNfeCabecalho;
  final String? cnpj;
  final String? cpf;
  final String? estrangeiroIdentificacao;
  final String? nome;
  final String? logradouro;
  final String? numero;
  final String? complemento;
  final String? bairro;
  final int? codigoMunicipio;
  final String? nomeMunicipio;
  final String? uf;
  final String? cep;
  final int? codigoPais;
  final String? nomePais;
  final String? telefone;
  final String? indicadorIe;
  final String? inscricaoEstadual;
  final int? suframa;
  final String? inscricaoMunicipal;
  final String? email;
  const NfeDestinatario({
    this.id,
    this.idNfeCabecalho,
    this.cnpj,
    this.cpf,
    this.estrangeiroIdentificacao,
    this.nome,
    this.logradouro,
    this.numero,
    this.complemento,
    this.bairro,
    this.codigoMunicipio,
    this.nomeMunicipio,
    this.uf,
    this.cep,
    this.codigoPais,
    this.nomePais,
    this.telefone,
    this.indicadorIe,
    this.inscricaoEstadual,
    this.suframa,
    this.inscricaoMunicipal,
    this.email,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeCabecalho != null) {
      map['id_nfe_cabecalho'] = Variable<int>(idNfeCabecalho);
    }
    if (!nullToAbsent || cnpj != null) {
      map['cnpj'] = Variable<String>(cnpj);
    }
    if (!nullToAbsent || cpf != null) {
      map['cpf'] = Variable<String>(cpf);
    }
    if (!nullToAbsent || estrangeiroIdentificacao != null) {
      map['estrangeiro_identificacao'] = Variable<String>(
        estrangeiroIdentificacao,
      );
    }
    if (!nullToAbsent || nome != null) {
      map['nome'] = Variable<String>(nome);
    }
    if (!nullToAbsent || logradouro != null) {
      map['logradouro'] = Variable<String>(logradouro);
    }
    if (!nullToAbsent || numero != null) {
      map['numero'] = Variable<String>(numero);
    }
    if (!nullToAbsent || complemento != null) {
      map['complemento'] = Variable<String>(complemento);
    }
    if (!nullToAbsent || bairro != null) {
      map['bairro'] = Variable<String>(bairro);
    }
    if (!nullToAbsent || codigoMunicipio != null) {
      map['codigo_municipio'] = Variable<int>(codigoMunicipio);
    }
    if (!nullToAbsent || nomeMunicipio != null) {
      map['nome_municipio'] = Variable<String>(nomeMunicipio);
    }
    if (!nullToAbsent || uf != null) {
      map['uf'] = Variable<String>(uf);
    }
    if (!nullToAbsent || cep != null) {
      map['cep'] = Variable<String>(cep);
    }
    if (!nullToAbsent || codigoPais != null) {
      map['codigo_pais'] = Variable<int>(codigoPais);
    }
    if (!nullToAbsent || nomePais != null) {
      map['nome_pais'] = Variable<String>(nomePais);
    }
    if (!nullToAbsent || telefone != null) {
      map['telefone'] = Variable<String>(telefone);
    }
    if (!nullToAbsent || indicadorIe != null) {
      map['indicador_ie'] = Variable<String>(indicadorIe);
    }
    if (!nullToAbsent || inscricaoEstadual != null) {
      map['inscricao_estadual'] = Variable<String>(inscricaoEstadual);
    }
    if (!nullToAbsent || suframa != null) {
      map['suframa'] = Variable<int>(suframa);
    }
    if (!nullToAbsent || inscricaoMunicipal != null) {
      map['inscricao_municipal'] = Variable<String>(inscricaoMunicipal);
    }
    if (!nullToAbsent || email != null) {
      map['email'] = Variable<String>(email);
    }
    return map;
  }

  factory NfeDestinatario.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeDestinatario(
      id: serializer.fromJson<int?>(json['id']),
      idNfeCabecalho: serializer.fromJson<int?>(json['idNfeCabecalho']),
      cnpj: serializer.fromJson<String?>(json['cnpj']),
      cpf: serializer.fromJson<String?>(json['cpf']),
      estrangeiroIdentificacao: serializer.fromJson<String?>(
        json['estrangeiroIdentificacao'],
      ),
      nome: serializer.fromJson<String?>(json['nome']),
      logradouro: serializer.fromJson<String?>(json['logradouro']),
      numero: serializer.fromJson<String?>(json['numero']),
      complemento: serializer.fromJson<String?>(json['complemento']),
      bairro: serializer.fromJson<String?>(json['bairro']),
      codigoMunicipio: serializer.fromJson<int?>(json['codigoMunicipio']),
      nomeMunicipio: serializer.fromJson<String?>(json['nomeMunicipio']),
      uf: serializer.fromJson<String?>(json['uf']),
      cep: serializer.fromJson<String?>(json['cep']),
      codigoPais: serializer.fromJson<int?>(json['codigoPais']),
      nomePais: serializer.fromJson<String?>(json['nomePais']),
      telefone: serializer.fromJson<String?>(json['telefone']),
      indicadorIe: serializer.fromJson<String?>(json['indicadorIe']),
      inscricaoEstadual: serializer.fromJson<String?>(
        json['inscricaoEstadual'],
      ),
      suframa: serializer.fromJson<int?>(json['suframa']),
      inscricaoMunicipal: serializer.fromJson<String?>(
        json['inscricaoMunicipal'],
      ),
      email: serializer.fromJson<String?>(json['email']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeCabecalho': serializer.toJson<int?>(idNfeCabecalho),
      'cnpj': serializer.toJson<String?>(cnpj),
      'cpf': serializer.toJson<String?>(cpf),
      'estrangeiroIdentificacao': serializer.toJson<String?>(
        estrangeiroIdentificacao,
      ),
      'nome': serializer.toJson<String?>(nome),
      'logradouro': serializer.toJson<String?>(logradouro),
      'numero': serializer.toJson<String?>(numero),
      'complemento': serializer.toJson<String?>(complemento),
      'bairro': serializer.toJson<String?>(bairro),
      'codigoMunicipio': serializer.toJson<int?>(codigoMunicipio),
      'nomeMunicipio': serializer.toJson<String?>(nomeMunicipio),
      'uf': serializer.toJson<String?>(uf),
      'cep': serializer.toJson<String?>(cep),
      'codigoPais': serializer.toJson<int?>(codigoPais),
      'nomePais': serializer.toJson<String?>(nomePais),
      'telefone': serializer.toJson<String?>(telefone),
      'indicadorIe': serializer.toJson<String?>(indicadorIe),
      'inscricaoEstadual': serializer.toJson<String?>(inscricaoEstadual),
      'suframa': serializer.toJson<int?>(suframa),
      'inscricaoMunicipal': serializer.toJson<String?>(inscricaoMunicipal),
      'email': serializer.toJson<String?>(email),
    };
  }

  NfeDestinatario copyWith({
    Value<int?> id = const Value.absent(),
    Value<int?> idNfeCabecalho = const Value.absent(),
    Value<String?> cnpj = const Value.absent(),
    Value<String?> cpf = const Value.absent(),
    Value<String?> estrangeiroIdentificacao = const Value.absent(),
    Value<String?> nome = const Value.absent(),
    Value<String?> logradouro = const Value.absent(),
    Value<String?> numero = const Value.absent(),
    Value<String?> complemento = const Value.absent(),
    Value<String?> bairro = const Value.absent(),
    Value<int?> codigoMunicipio = const Value.absent(),
    Value<String?> nomeMunicipio = const Value.absent(),
    Value<String?> uf = const Value.absent(),
    Value<String?> cep = const Value.absent(),
    Value<int?> codigoPais = const Value.absent(),
    Value<String?> nomePais = const Value.absent(),
    Value<String?> telefone = const Value.absent(),
    Value<String?> indicadorIe = const Value.absent(),
    Value<String?> inscricaoEstadual = const Value.absent(),
    Value<int?> suframa = const Value.absent(),
    Value<String?> inscricaoMunicipal = const Value.absent(),
    Value<String?> email = const Value.absent(),
  }) => NfeDestinatario(
    id: id.present ? id.value : this.id,
    idNfeCabecalho:
        idNfeCabecalho.present ? idNfeCabecalho.value : this.idNfeCabecalho,
    cnpj: cnpj.present ? cnpj.value : this.cnpj,
    cpf: cpf.present ? cpf.value : this.cpf,
    estrangeiroIdentificacao:
        estrangeiroIdentificacao.present
            ? estrangeiroIdentificacao.value
            : this.estrangeiroIdentificacao,
    nome: nome.present ? nome.value : this.nome,
    logradouro: logradouro.present ? logradouro.value : this.logradouro,
    numero: numero.present ? numero.value : this.numero,
    complemento: complemento.present ? complemento.value : this.complemento,
    bairro: bairro.present ? bairro.value : this.bairro,
    codigoMunicipio:
        codigoMunicipio.present ? codigoMunicipio.value : this.codigoMunicipio,
    nomeMunicipio:
        nomeMunicipio.present ? nomeMunicipio.value : this.nomeMunicipio,
    uf: uf.present ? uf.value : this.uf,
    cep: cep.present ? cep.value : this.cep,
    codigoPais: codigoPais.present ? codigoPais.value : this.codigoPais,
    nomePais: nomePais.present ? nomePais.value : this.nomePais,
    telefone: telefone.present ? telefone.value : this.telefone,
    indicadorIe: indicadorIe.present ? indicadorIe.value : this.indicadorIe,
    inscricaoEstadual:
        inscricaoEstadual.present
            ? inscricaoEstadual.value
            : this.inscricaoEstadual,
    suframa: suframa.present ? suframa.value : this.suframa,
    inscricaoMunicipal:
        inscricaoMunicipal.present
            ? inscricaoMunicipal.value
            : this.inscricaoMunicipal,
    email: email.present ? email.value : this.email,
  );
  NfeDestinatario copyWithCompanion(NfeDestinatariosCompanion data) {
    return NfeDestinatario(
      id: data.id.present ? data.id.value : this.id,
      idNfeCabecalho:
          data.idNfeCabecalho.present
              ? data.idNfeCabecalho.value
              : this.idNfeCabecalho,
      cnpj: data.cnpj.present ? data.cnpj.value : this.cnpj,
      cpf: data.cpf.present ? data.cpf.value : this.cpf,
      estrangeiroIdentificacao:
          data.estrangeiroIdentificacao.present
              ? data.estrangeiroIdentificacao.value
              : this.estrangeiroIdentificacao,
      nome: data.nome.present ? data.nome.value : this.nome,
      logradouro:
          data.logradouro.present ? data.logradouro.value : this.logradouro,
      numero: data.numero.present ? data.numero.value : this.numero,
      complemento:
          data.complemento.present ? data.complemento.value : this.complemento,
      bairro: data.bairro.present ? data.bairro.value : this.bairro,
      codigoMunicipio:
          data.codigoMunicipio.present
              ? data.codigoMunicipio.value
              : this.codigoMunicipio,
      nomeMunicipio:
          data.nomeMunicipio.present
              ? data.nomeMunicipio.value
              : this.nomeMunicipio,
      uf: data.uf.present ? data.uf.value : this.uf,
      cep: data.cep.present ? data.cep.value : this.cep,
      codigoPais:
          data.codigoPais.present ? data.codigoPais.value : this.codigoPais,
      nomePais: data.nomePais.present ? data.nomePais.value : this.nomePais,
      telefone: data.telefone.present ? data.telefone.value : this.telefone,
      indicadorIe:
          data.indicadorIe.present ? data.indicadorIe.value : this.indicadorIe,
      inscricaoEstadual:
          data.inscricaoEstadual.present
              ? data.inscricaoEstadual.value
              : this.inscricaoEstadual,
      suframa: data.suframa.present ? data.suframa.value : this.suframa,
      inscricaoMunicipal:
          data.inscricaoMunicipal.present
              ? data.inscricaoMunicipal.value
              : this.inscricaoMunicipal,
      email: data.email.present ? data.email.value : this.email,
    );
  }

  @override
  String toString() {
    return (StringBuffer('NfeDestinatario(')
          ..write('id: $id, ')
          ..write('idNfeCabecalho: $idNfeCabecalho, ')
          ..write('cnpj: $cnpj, ')
          ..write('cpf: $cpf, ')
          ..write('estrangeiroIdentificacao: $estrangeiroIdentificacao, ')
          ..write('nome: $nome, ')
          ..write('logradouro: $logradouro, ')
          ..write('numero: $numero, ')
          ..write('complemento: $complemento, ')
          ..write('bairro: $bairro, ')
          ..write('codigoMunicipio: $codigoMunicipio, ')
          ..write('nomeMunicipio: $nomeMunicipio, ')
          ..write('uf: $uf, ')
          ..write('cep: $cep, ')
          ..write('codigoPais: $codigoPais, ')
          ..write('nomePais: $nomePais, ')
          ..write('telefone: $telefone, ')
          ..write('indicadorIe: $indicadorIe, ')
          ..write('inscricaoEstadual: $inscricaoEstadual, ')
          ..write('suframa: $suframa, ')
          ..write('inscricaoMunicipal: $inscricaoMunicipal, ')
          ..write('email: $email')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hashAll([
    id,
    idNfeCabecalho,
    cnpj,
    cpf,
    estrangeiroIdentificacao,
    nome,
    logradouro,
    numero,
    complemento,
    bairro,
    codigoMunicipio,
    nomeMunicipio,
    uf,
    cep,
    codigoPais,
    nomePais,
    telefone,
    indicadorIe,
    inscricaoEstadual,
    suframa,
    inscricaoMunicipal,
    email,
  ]);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeDestinatario &&
          other.id == this.id &&
          other.idNfeCabecalho == this.idNfeCabecalho &&
          other.cnpj == this.cnpj &&
          other.cpf == this.cpf &&
          other.estrangeiroIdentificacao == this.estrangeiroIdentificacao &&
          other.nome == this.nome &&
          other.logradouro == this.logradouro &&
          other.numero == this.numero &&
          other.complemento == this.complemento &&
          other.bairro == this.bairro &&
          other.codigoMunicipio == this.codigoMunicipio &&
          other.nomeMunicipio == this.nomeMunicipio &&
          other.uf == this.uf &&
          other.cep == this.cep &&
          other.codigoPais == this.codigoPais &&
          other.nomePais == this.nomePais &&
          other.telefone == this.telefone &&
          other.indicadorIe == this.indicadorIe &&
          other.inscricaoEstadual == this.inscricaoEstadual &&
          other.suframa == this.suframa &&
          other.inscricaoMunicipal == this.inscricaoMunicipal &&
          other.email == this.email);
}

class NfeDestinatariosCompanion extends UpdateCompanion<NfeDestinatario> {
  final Value<int?> id;
  final Value<int?> idNfeCabecalho;
  final Value<String?> cnpj;
  final Value<String?> cpf;
  final Value<String?> estrangeiroIdentificacao;
  final Value<String?> nome;
  final Value<String?> logradouro;
  final Value<String?> numero;
  final Value<String?> complemento;
  final Value<String?> bairro;
  final Value<int?> codigoMunicipio;
  final Value<String?> nomeMunicipio;
  final Value<String?> uf;
  final Value<String?> cep;
  final Value<int?> codigoPais;
  final Value<String?> nomePais;
  final Value<String?> telefone;
  final Value<String?> indicadorIe;
  final Value<String?> inscricaoEstadual;
  final Value<int?> suframa;
  final Value<String?> inscricaoMunicipal;
  final Value<String?> email;
  const NfeDestinatariosCompanion({
    this.id = const Value.absent(),
    this.idNfeCabecalho = const Value.absent(),
    this.cnpj = const Value.absent(),
    this.cpf = const Value.absent(),
    this.estrangeiroIdentificacao = const Value.absent(),
    this.nome = const Value.absent(),
    this.logradouro = const Value.absent(),
    this.numero = const Value.absent(),
    this.complemento = const Value.absent(),
    this.bairro = const Value.absent(),
    this.codigoMunicipio = const Value.absent(),
    this.nomeMunicipio = const Value.absent(),
    this.uf = const Value.absent(),
    this.cep = const Value.absent(),
    this.codigoPais = const Value.absent(),
    this.nomePais = const Value.absent(),
    this.telefone = const Value.absent(),
    this.indicadorIe = const Value.absent(),
    this.inscricaoEstadual = const Value.absent(),
    this.suframa = const Value.absent(),
    this.inscricaoMunicipal = const Value.absent(),
    this.email = const Value.absent(),
  });
  NfeDestinatariosCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeCabecalho = const Value.absent(),
    this.cnpj = const Value.absent(),
    this.cpf = const Value.absent(),
    this.estrangeiroIdentificacao = const Value.absent(),
    this.nome = const Value.absent(),
    this.logradouro = const Value.absent(),
    this.numero = const Value.absent(),
    this.complemento = const Value.absent(),
    this.bairro = const Value.absent(),
    this.codigoMunicipio = const Value.absent(),
    this.nomeMunicipio = const Value.absent(),
    this.uf = const Value.absent(),
    this.cep = const Value.absent(),
    this.codigoPais = const Value.absent(),
    this.nomePais = const Value.absent(),
    this.telefone = const Value.absent(),
    this.indicadorIe = const Value.absent(),
    this.inscricaoEstadual = const Value.absent(),
    this.suframa = const Value.absent(),
    this.inscricaoMunicipal = const Value.absent(),
    this.email = const Value.absent(),
  });
  static Insertable<NfeDestinatario> custom({
    Expression<int>? id,
    Expression<int>? idNfeCabecalho,
    Expression<String>? cnpj,
    Expression<String>? cpf,
    Expression<String>? estrangeiroIdentificacao,
    Expression<String>? nome,
    Expression<String>? logradouro,
    Expression<String>? numero,
    Expression<String>? complemento,
    Expression<String>? bairro,
    Expression<int>? codigoMunicipio,
    Expression<String>? nomeMunicipio,
    Expression<String>? uf,
    Expression<String>? cep,
    Expression<int>? codigoPais,
    Expression<String>? nomePais,
    Expression<String>? telefone,
    Expression<String>? indicadorIe,
    Expression<String>? inscricaoEstadual,
    Expression<int>? suframa,
    Expression<String>? inscricaoMunicipal,
    Expression<String>? email,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (idNfeCabecalho != null) 'id_nfe_cabecalho': idNfeCabecalho,
      if (cnpj != null) 'cnpj': cnpj,
      if (cpf != null) 'cpf': cpf,
      if (estrangeiroIdentificacao != null)
        'estrangeiro_identificacao': estrangeiroIdentificacao,
      if (nome != null) 'nome': nome,
      if (logradouro != null) 'logradouro': logradouro,
      if (numero != null) 'numero': numero,
      if (complemento != null) 'complemento': complemento,
      if (bairro != null) 'bairro': bairro,
      if (codigoMunicipio != null) 'codigo_municipio': codigoMunicipio,
      if (nomeMunicipio != null) 'nome_municipio': nomeMunicipio,
      if (uf != null) 'uf': uf,
      if (cep != null) 'cep': cep,
      if (codigoPais != null) 'codigo_pais': codigoPais,
      if (nomePais != null) 'nome_pais': nomePais,
      if (telefone != null) 'telefone': telefone,
      if (indicadorIe != null) 'indicador_ie': indicadorIe,
      if (inscricaoEstadual != null) 'inscricao_estadual': inscricaoEstadual,
      if (suframa != null) 'suframa': suframa,
      if (inscricaoMunicipal != null) 'inscricao_municipal': inscricaoMunicipal,
      if (email != null) 'email': email,
    });
  }

  NfeDestinatariosCompanion copyWith({
    Value<int?>? id,
    Value<int?>? idNfeCabecalho,
    Value<String?>? cnpj,
    Value<String?>? cpf,
    Value<String?>? estrangeiroIdentificacao,
    Value<String?>? nome,
    Value<String?>? logradouro,
    Value<String?>? numero,
    Value<String?>? complemento,
    Value<String?>? bairro,
    Value<int?>? codigoMunicipio,
    Value<String?>? nomeMunicipio,
    Value<String?>? uf,
    Value<String?>? cep,
    Value<int?>? codigoPais,
    Value<String?>? nomePais,
    Value<String?>? telefone,
    Value<String?>? indicadorIe,
    Value<String?>? inscricaoEstadual,
    Value<int?>? suframa,
    Value<String?>? inscricaoMunicipal,
    Value<String?>? email,
  }) {
    return NfeDestinatariosCompanion(
      id: id ?? this.id,
      idNfeCabecalho: idNfeCabecalho ?? this.idNfeCabecalho,
      cnpj: cnpj ?? this.cnpj,
      cpf: cpf ?? this.cpf,
      estrangeiroIdentificacao:
          estrangeiroIdentificacao ?? this.estrangeiroIdentificacao,
      nome: nome ?? this.nome,
      logradouro: logradouro ?? this.logradouro,
      numero: numero ?? this.numero,
      complemento: complemento ?? this.complemento,
      bairro: bairro ?? this.bairro,
      codigoMunicipio: codigoMunicipio ?? this.codigoMunicipio,
      nomeMunicipio: nomeMunicipio ?? this.nomeMunicipio,
      uf: uf ?? this.uf,
      cep: cep ?? this.cep,
      codigoPais: codigoPais ?? this.codigoPais,
      nomePais: nomePais ?? this.nomePais,
      telefone: telefone ?? this.telefone,
      indicadorIe: indicadorIe ?? this.indicadorIe,
      inscricaoEstadual: inscricaoEstadual ?? this.inscricaoEstadual,
      suframa: suframa ?? this.suframa,
      inscricaoMunicipal: inscricaoMunicipal ?? this.inscricaoMunicipal,
      email: email ?? this.email,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (idNfeCabecalho.present) {
      map['id_nfe_cabecalho'] = Variable<int>(idNfeCabecalho.value);
    }
    if (cnpj.present) {
      map['cnpj'] = Variable<String>(cnpj.value);
    }
    if (cpf.present) {
      map['cpf'] = Variable<String>(cpf.value);
    }
    if (estrangeiroIdentificacao.present) {
      map['estrangeiro_identificacao'] = Variable<String>(
        estrangeiroIdentificacao.value,
      );
    }
    if (nome.present) {
      map['nome'] = Variable<String>(nome.value);
    }
    if (logradouro.present) {
      map['logradouro'] = Variable<String>(logradouro.value);
    }
    if (numero.present) {
      map['numero'] = Variable<String>(numero.value);
    }
    if (complemento.present) {
      map['complemento'] = Variable<String>(complemento.value);
    }
    if (bairro.present) {
      map['bairro'] = Variable<String>(bairro.value);
    }
    if (codigoMunicipio.present) {
      map['codigo_municipio'] = Variable<int>(codigoMunicipio.value);
    }
    if (nomeMunicipio.present) {
      map['nome_municipio'] = Variable<String>(nomeMunicipio.value);
    }
    if (uf.present) {
      map['uf'] = Variable<String>(uf.value);
    }
    if (cep.present) {
      map['cep'] = Variable<String>(cep.value);
    }
    if (codigoPais.present) {
      map['codigo_pais'] = Variable<int>(codigoPais.value);
    }
    if (nomePais.present) {
      map['nome_pais'] = Variable<String>(nomePais.value);
    }
    if (telefone.present) {
      map['telefone'] = Variable<String>(telefone.value);
    }
    if (indicadorIe.present) {
      map['indicador_ie'] = Variable<String>(indicadorIe.value);
    }
    if (inscricaoEstadual.present) {
      map['inscricao_estadual'] = Variable<String>(inscricaoEstadual.value);
    }
    if (suframa.present) {
      map['suframa'] = Variable<int>(suframa.value);
    }
    if (inscricaoMunicipal.present) {
      map['inscricao_municipal'] = Variable<String>(inscricaoMunicipal.value);
    }
    if (email.present) {
      map['email'] = Variable<String>(email.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeDestinatariosCompanion(')
          ..write('id: $id, ')
          ..write('idNfeCabecalho: $idNfeCabecalho, ')
          ..write('cnpj: $cnpj, ')
          ..write('cpf: $cpf, ')
          ..write('estrangeiroIdentificacao: $estrangeiroIdentificacao, ')
          ..write('nome: $nome, ')
          ..write('logradouro: $logradouro, ')
          ..write('numero: $numero, ')
          ..write('complemento: $complemento, ')
          ..write('bairro: $bairro, ')
          ..write('codigoMunicipio: $codigoMunicipio, ')
          ..write('nomeMunicipio: $nomeMunicipio, ')
          ..write('uf: $uf, ')
          ..write('cep: $cep, ')
          ..write('codigoPais: $codigoPais, ')
          ..write('nomePais: $nomePais, ')
          ..write('telefone: $telefone, ')
          ..write('indicadorIe: $indicadorIe, ')
          ..write('inscricaoEstadual: $inscricaoEstadual, ')
          ..write('suframa: $suframa, ')
          ..write('inscricaoMunicipal: $inscricaoMunicipal, ')
          ..write('email: $email')
          ..write(')'))
        .toString();
  }
}

class $NfeLocalRetiradasTable extends NfeLocalRetiradas
    with TableInfo<$NfeLocalRetiradasTable, NfeLocalRetirada> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeLocalRetiradasTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
    'id',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idNfeCabecalhoMeta = const VerificationMeta(
    'idNfeCabecalho',
  );
  @override
  late final GeneratedColumn<int> idNfeCabecalho = GeneratedColumn<int>(
    'id_nfe_cabecalho',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _cnpjMeta = const VerificationMeta('cnpj');
  @override
  late final GeneratedColumn<String> cnpj = GeneratedColumn<String>(
    'cnpj',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 14,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _cpfMeta = const VerificationMeta('cpf');
  @override
  late final GeneratedColumn<String> cpf = GeneratedColumn<String>(
    'cpf',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 11,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _nomeExpedidorMeta = const VerificationMeta(
    'nomeExpedidor',
  );
  @override
  late final GeneratedColumn<String> nomeExpedidor = GeneratedColumn<String>(
    'nome_expedidor',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 60,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _logradouroMeta = const VerificationMeta(
    'logradouro',
  );
  @override
  late final GeneratedColumn<String> logradouro = GeneratedColumn<String>(
    'logradouro',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 60,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _numeroMeta = const VerificationMeta('numero');
  @override
  late final GeneratedColumn<String> numero = GeneratedColumn<String>(
    'numero',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 60,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _complementoMeta = const VerificationMeta(
    'complemento',
  );
  @override
  late final GeneratedColumn<String> complemento = GeneratedColumn<String>(
    'complemento',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 60,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _bairroMeta = const VerificationMeta('bairro');
  @override
  late final GeneratedColumn<String> bairro = GeneratedColumn<String>(
    'bairro',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 60,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _codigoMunicipioMeta = const VerificationMeta(
    'codigoMunicipio',
  );
  @override
  late final GeneratedColumn<int> codigoMunicipio = GeneratedColumn<int>(
    'codigo_municipio',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _nomeMunicipioMeta = const VerificationMeta(
    'nomeMunicipio',
  );
  @override
  late final GeneratedColumn<String> nomeMunicipio = GeneratedColumn<String>(
    'nome_municipio',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 60,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _ufMeta = const VerificationMeta('uf');
  @override
  late final GeneratedColumn<String> uf = GeneratedColumn<String>(
    'uf',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 2,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _cepMeta = const VerificationMeta('cep');
  @override
  late final GeneratedColumn<String> cep = GeneratedColumn<String>(
    'cep',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 8,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _codigoPaisMeta = const VerificationMeta(
    'codigoPais',
  );
  @override
  late final GeneratedColumn<int> codigoPais = GeneratedColumn<int>(
    'codigo_pais',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _nomePaisMeta = const VerificationMeta(
    'nomePais',
  );
  @override
  late final GeneratedColumn<String> nomePais = GeneratedColumn<String>(
    'nome_pais',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 60,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _telefoneMeta = const VerificationMeta(
    'telefone',
  );
  @override
  late final GeneratedColumn<String> telefone = GeneratedColumn<String>(
    'telefone',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 14,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _emailMeta = const VerificationMeta('email');
  @override
  late final GeneratedColumn<String> email = GeneratedColumn<String>(
    'email',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 60,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _inscricaoEstadualMeta = const VerificationMeta(
    'inscricaoEstadual',
  );
  @override
  late final GeneratedColumn<String> inscricaoEstadual =
      GeneratedColumn<String>(
        'inscricao_estadual',
        aliasedName,
        true,
        additionalChecks: GeneratedColumn.checkTextLength(
          minTextLength: 0,
          maxTextLength: 14,
        ),
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    idNfeCabecalho,
    cnpj,
    cpf,
    nomeExpedidor,
    logradouro,
    numero,
    complemento,
    bairro,
    codigoMunicipio,
    nomeMunicipio,
    uf,
    cep,
    codigoPais,
    nomePais,
    telefone,
    email,
    inscricaoEstadual,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'nfe_local_retirada';
  @override
  VerificationContext validateIntegrity(
    Insertable<NfeLocalRetirada> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('id_nfe_cabecalho')) {
      context.handle(
        _idNfeCabecalhoMeta,
        idNfeCabecalho.isAcceptableOrUnknown(
          data['id_nfe_cabecalho']!,
          _idNfeCabecalhoMeta,
        ),
      );
    }
    if (data.containsKey('cnpj')) {
      context.handle(
        _cnpjMeta,
        cnpj.isAcceptableOrUnknown(data['cnpj']!, _cnpjMeta),
      );
    }
    if (data.containsKey('cpf')) {
      context.handle(
        _cpfMeta,
        cpf.isAcceptableOrUnknown(data['cpf']!, _cpfMeta),
      );
    }
    if (data.containsKey('nome_expedidor')) {
      context.handle(
        _nomeExpedidorMeta,
        nomeExpedidor.isAcceptableOrUnknown(
          data['nome_expedidor']!,
          _nomeExpedidorMeta,
        ),
      );
    }
    if (data.containsKey('logradouro')) {
      context.handle(
        _logradouroMeta,
        logradouro.isAcceptableOrUnknown(data['logradouro']!, _logradouroMeta),
      );
    }
    if (data.containsKey('numero')) {
      context.handle(
        _numeroMeta,
        numero.isAcceptableOrUnknown(data['numero']!, _numeroMeta),
      );
    }
    if (data.containsKey('complemento')) {
      context.handle(
        _complementoMeta,
        complemento.isAcceptableOrUnknown(
          data['complemento']!,
          _complementoMeta,
        ),
      );
    }
    if (data.containsKey('bairro')) {
      context.handle(
        _bairroMeta,
        bairro.isAcceptableOrUnknown(data['bairro']!, _bairroMeta),
      );
    }
    if (data.containsKey('codigo_municipio')) {
      context.handle(
        _codigoMunicipioMeta,
        codigoMunicipio.isAcceptableOrUnknown(
          data['codigo_municipio']!,
          _codigoMunicipioMeta,
        ),
      );
    }
    if (data.containsKey('nome_municipio')) {
      context.handle(
        _nomeMunicipioMeta,
        nomeMunicipio.isAcceptableOrUnknown(
          data['nome_municipio']!,
          _nomeMunicipioMeta,
        ),
      );
    }
    if (data.containsKey('uf')) {
      context.handle(_ufMeta, uf.isAcceptableOrUnknown(data['uf']!, _ufMeta));
    }
    if (data.containsKey('cep')) {
      context.handle(
        _cepMeta,
        cep.isAcceptableOrUnknown(data['cep']!, _cepMeta),
      );
    }
    if (data.containsKey('codigo_pais')) {
      context.handle(
        _codigoPaisMeta,
        codigoPais.isAcceptableOrUnknown(data['codigo_pais']!, _codigoPaisMeta),
      );
    }
    if (data.containsKey('nome_pais')) {
      context.handle(
        _nomePaisMeta,
        nomePais.isAcceptableOrUnknown(data['nome_pais']!, _nomePaisMeta),
      );
    }
    if (data.containsKey('telefone')) {
      context.handle(
        _telefoneMeta,
        telefone.isAcceptableOrUnknown(data['telefone']!, _telefoneMeta),
      );
    }
    if (data.containsKey('email')) {
      context.handle(
        _emailMeta,
        email.isAcceptableOrUnknown(data['email']!, _emailMeta),
      );
    }
    if (data.containsKey('inscricao_estadual')) {
      context.handle(
        _inscricaoEstadualMeta,
        inscricaoEstadual.isAcceptableOrUnknown(
          data['inscricao_estadual']!,
          _inscricaoEstadualMeta,
        ),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeLocalRetirada map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return NfeLocalRetirada(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id'],
      ),
      idNfeCabecalho: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_nfe_cabecalho'],
      ),
      cnpj: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}cnpj'],
      ),
      cpf: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}cpf'],
      ),
      nomeExpedidor: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}nome_expedidor'],
      ),
      logradouro: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}logradouro'],
      ),
      numero: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}numero'],
      ),
      complemento: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}complemento'],
      ),
      bairro: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}bairro'],
      ),
      codigoMunicipio: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}codigo_municipio'],
      ),
      nomeMunicipio: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}nome_municipio'],
      ),
      uf: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}uf'],
      ),
      cep: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}cep'],
      ),
      codigoPais: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}codigo_pais'],
      ),
      nomePais: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}nome_pais'],
      ),
      telefone: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}telefone'],
      ),
      email: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}email'],
      ),
      inscricaoEstadual: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}inscricao_estadual'],
      ),
    );
  }

  @override
  $NfeLocalRetiradasTable createAlias(String alias) {
    return $NfeLocalRetiradasTable(attachedDatabase, alias);
  }
}

class NfeLocalRetirada extends DataClass
    implements Insertable<NfeLocalRetirada> {
  final int? id;
  final int? idNfeCabecalho;
  final String? cnpj;
  final String? cpf;
  final String? nomeExpedidor;
  final String? logradouro;
  final String? numero;
  final String? complemento;
  final String? bairro;
  final int? codigoMunicipio;
  final String? nomeMunicipio;
  final String? uf;
  final String? cep;
  final int? codigoPais;
  final String? nomePais;
  final String? telefone;
  final String? email;
  final String? inscricaoEstadual;
  const NfeLocalRetirada({
    this.id,
    this.idNfeCabecalho,
    this.cnpj,
    this.cpf,
    this.nomeExpedidor,
    this.logradouro,
    this.numero,
    this.complemento,
    this.bairro,
    this.codigoMunicipio,
    this.nomeMunicipio,
    this.uf,
    this.cep,
    this.codigoPais,
    this.nomePais,
    this.telefone,
    this.email,
    this.inscricaoEstadual,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeCabecalho != null) {
      map['id_nfe_cabecalho'] = Variable<int>(idNfeCabecalho);
    }
    if (!nullToAbsent || cnpj != null) {
      map['cnpj'] = Variable<String>(cnpj);
    }
    if (!nullToAbsent || cpf != null) {
      map['cpf'] = Variable<String>(cpf);
    }
    if (!nullToAbsent || nomeExpedidor != null) {
      map['nome_expedidor'] = Variable<String>(nomeExpedidor);
    }
    if (!nullToAbsent || logradouro != null) {
      map['logradouro'] = Variable<String>(logradouro);
    }
    if (!nullToAbsent || numero != null) {
      map['numero'] = Variable<String>(numero);
    }
    if (!nullToAbsent || complemento != null) {
      map['complemento'] = Variable<String>(complemento);
    }
    if (!nullToAbsent || bairro != null) {
      map['bairro'] = Variable<String>(bairro);
    }
    if (!nullToAbsent || codigoMunicipio != null) {
      map['codigo_municipio'] = Variable<int>(codigoMunicipio);
    }
    if (!nullToAbsent || nomeMunicipio != null) {
      map['nome_municipio'] = Variable<String>(nomeMunicipio);
    }
    if (!nullToAbsent || uf != null) {
      map['uf'] = Variable<String>(uf);
    }
    if (!nullToAbsent || cep != null) {
      map['cep'] = Variable<String>(cep);
    }
    if (!nullToAbsent || codigoPais != null) {
      map['codigo_pais'] = Variable<int>(codigoPais);
    }
    if (!nullToAbsent || nomePais != null) {
      map['nome_pais'] = Variable<String>(nomePais);
    }
    if (!nullToAbsent || telefone != null) {
      map['telefone'] = Variable<String>(telefone);
    }
    if (!nullToAbsent || email != null) {
      map['email'] = Variable<String>(email);
    }
    if (!nullToAbsent || inscricaoEstadual != null) {
      map['inscricao_estadual'] = Variable<String>(inscricaoEstadual);
    }
    return map;
  }

  factory NfeLocalRetirada.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeLocalRetirada(
      id: serializer.fromJson<int?>(json['id']),
      idNfeCabecalho: serializer.fromJson<int?>(json['idNfeCabecalho']),
      cnpj: serializer.fromJson<String?>(json['cnpj']),
      cpf: serializer.fromJson<String?>(json['cpf']),
      nomeExpedidor: serializer.fromJson<String?>(json['nomeExpedidor']),
      logradouro: serializer.fromJson<String?>(json['logradouro']),
      numero: serializer.fromJson<String?>(json['numero']),
      complemento: serializer.fromJson<String?>(json['complemento']),
      bairro: serializer.fromJson<String?>(json['bairro']),
      codigoMunicipio: serializer.fromJson<int?>(json['codigoMunicipio']),
      nomeMunicipio: serializer.fromJson<String?>(json['nomeMunicipio']),
      uf: serializer.fromJson<String?>(json['uf']),
      cep: serializer.fromJson<String?>(json['cep']),
      codigoPais: serializer.fromJson<int?>(json['codigoPais']),
      nomePais: serializer.fromJson<String?>(json['nomePais']),
      telefone: serializer.fromJson<String?>(json['telefone']),
      email: serializer.fromJson<String?>(json['email']),
      inscricaoEstadual: serializer.fromJson<String?>(
        json['inscricaoEstadual'],
      ),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeCabecalho': serializer.toJson<int?>(idNfeCabecalho),
      'cnpj': serializer.toJson<String?>(cnpj),
      'cpf': serializer.toJson<String?>(cpf),
      'nomeExpedidor': serializer.toJson<String?>(nomeExpedidor),
      'logradouro': serializer.toJson<String?>(logradouro),
      'numero': serializer.toJson<String?>(numero),
      'complemento': serializer.toJson<String?>(complemento),
      'bairro': serializer.toJson<String?>(bairro),
      'codigoMunicipio': serializer.toJson<int?>(codigoMunicipio),
      'nomeMunicipio': serializer.toJson<String?>(nomeMunicipio),
      'uf': serializer.toJson<String?>(uf),
      'cep': serializer.toJson<String?>(cep),
      'codigoPais': serializer.toJson<int?>(codigoPais),
      'nomePais': serializer.toJson<String?>(nomePais),
      'telefone': serializer.toJson<String?>(telefone),
      'email': serializer.toJson<String?>(email),
      'inscricaoEstadual': serializer.toJson<String?>(inscricaoEstadual),
    };
  }

  NfeLocalRetirada copyWith({
    Value<int?> id = const Value.absent(),
    Value<int?> idNfeCabecalho = const Value.absent(),
    Value<String?> cnpj = const Value.absent(),
    Value<String?> cpf = const Value.absent(),
    Value<String?> nomeExpedidor = const Value.absent(),
    Value<String?> logradouro = const Value.absent(),
    Value<String?> numero = const Value.absent(),
    Value<String?> complemento = const Value.absent(),
    Value<String?> bairro = const Value.absent(),
    Value<int?> codigoMunicipio = const Value.absent(),
    Value<String?> nomeMunicipio = const Value.absent(),
    Value<String?> uf = const Value.absent(),
    Value<String?> cep = const Value.absent(),
    Value<int?> codigoPais = const Value.absent(),
    Value<String?> nomePais = const Value.absent(),
    Value<String?> telefone = const Value.absent(),
    Value<String?> email = const Value.absent(),
    Value<String?> inscricaoEstadual = const Value.absent(),
  }) => NfeLocalRetirada(
    id: id.present ? id.value : this.id,
    idNfeCabecalho:
        idNfeCabecalho.present ? idNfeCabecalho.value : this.idNfeCabecalho,
    cnpj: cnpj.present ? cnpj.value : this.cnpj,
    cpf: cpf.present ? cpf.value : this.cpf,
    nomeExpedidor:
        nomeExpedidor.present ? nomeExpedidor.value : this.nomeExpedidor,
    logradouro: logradouro.present ? logradouro.value : this.logradouro,
    numero: numero.present ? numero.value : this.numero,
    complemento: complemento.present ? complemento.value : this.complemento,
    bairro: bairro.present ? bairro.value : this.bairro,
    codigoMunicipio:
        codigoMunicipio.present ? codigoMunicipio.value : this.codigoMunicipio,
    nomeMunicipio:
        nomeMunicipio.present ? nomeMunicipio.value : this.nomeMunicipio,
    uf: uf.present ? uf.value : this.uf,
    cep: cep.present ? cep.value : this.cep,
    codigoPais: codigoPais.present ? codigoPais.value : this.codigoPais,
    nomePais: nomePais.present ? nomePais.value : this.nomePais,
    telefone: telefone.present ? telefone.value : this.telefone,
    email: email.present ? email.value : this.email,
    inscricaoEstadual:
        inscricaoEstadual.present
            ? inscricaoEstadual.value
            : this.inscricaoEstadual,
  );
  NfeLocalRetirada copyWithCompanion(NfeLocalRetiradasCompanion data) {
    return NfeLocalRetirada(
      id: data.id.present ? data.id.value : this.id,
      idNfeCabecalho:
          data.idNfeCabecalho.present
              ? data.idNfeCabecalho.value
              : this.idNfeCabecalho,
      cnpj: data.cnpj.present ? data.cnpj.value : this.cnpj,
      cpf: data.cpf.present ? data.cpf.value : this.cpf,
      nomeExpedidor:
          data.nomeExpedidor.present
              ? data.nomeExpedidor.value
              : this.nomeExpedidor,
      logradouro:
          data.logradouro.present ? data.logradouro.value : this.logradouro,
      numero: data.numero.present ? data.numero.value : this.numero,
      complemento:
          data.complemento.present ? data.complemento.value : this.complemento,
      bairro: data.bairro.present ? data.bairro.value : this.bairro,
      codigoMunicipio:
          data.codigoMunicipio.present
              ? data.codigoMunicipio.value
              : this.codigoMunicipio,
      nomeMunicipio:
          data.nomeMunicipio.present
              ? data.nomeMunicipio.value
              : this.nomeMunicipio,
      uf: data.uf.present ? data.uf.value : this.uf,
      cep: data.cep.present ? data.cep.value : this.cep,
      codigoPais:
          data.codigoPais.present ? data.codigoPais.value : this.codigoPais,
      nomePais: data.nomePais.present ? data.nomePais.value : this.nomePais,
      telefone: data.telefone.present ? data.telefone.value : this.telefone,
      email: data.email.present ? data.email.value : this.email,
      inscricaoEstadual:
          data.inscricaoEstadual.present
              ? data.inscricaoEstadual.value
              : this.inscricaoEstadual,
    );
  }

  @override
  String toString() {
    return (StringBuffer('NfeLocalRetirada(')
          ..write('id: $id, ')
          ..write('idNfeCabecalho: $idNfeCabecalho, ')
          ..write('cnpj: $cnpj, ')
          ..write('cpf: $cpf, ')
          ..write('nomeExpedidor: $nomeExpedidor, ')
          ..write('logradouro: $logradouro, ')
          ..write('numero: $numero, ')
          ..write('complemento: $complemento, ')
          ..write('bairro: $bairro, ')
          ..write('codigoMunicipio: $codigoMunicipio, ')
          ..write('nomeMunicipio: $nomeMunicipio, ')
          ..write('uf: $uf, ')
          ..write('cep: $cep, ')
          ..write('codigoPais: $codigoPais, ')
          ..write('nomePais: $nomePais, ')
          ..write('telefone: $telefone, ')
          ..write('email: $email, ')
          ..write('inscricaoEstadual: $inscricaoEstadual')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    idNfeCabecalho,
    cnpj,
    cpf,
    nomeExpedidor,
    logradouro,
    numero,
    complemento,
    bairro,
    codigoMunicipio,
    nomeMunicipio,
    uf,
    cep,
    codigoPais,
    nomePais,
    telefone,
    email,
    inscricaoEstadual,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeLocalRetirada &&
          other.id == this.id &&
          other.idNfeCabecalho == this.idNfeCabecalho &&
          other.cnpj == this.cnpj &&
          other.cpf == this.cpf &&
          other.nomeExpedidor == this.nomeExpedidor &&
          other.logradouro == this.logradouro &&
          other.numero == this.numero &&
          other.complemento == this.complemento &&
          other.bairro == this.bairro &&
          other.codigoMunicipio == this.codigoMunicipio &&
          other.nomeMunicipio == this.nomeMunicipio &&
          other.uf == this.uf &&
          other.cep == this.cep &&
          other.codigoPais == this.codigoPais &&
          other.nomePais == this.nomePais &&
          other.telefone == this.telefone &&
          other.email == this.email &&
          other.inscricaoEstadual == this.inscricaoEstadual);
}

class NfeLocalRetiradasCompanion extends UpdateCompanion<NfeLocalRetirada> {
  final Value<int?> id;
  final Value<int?> idNfeCabecalho;
  final Value<String?> cnpj;
  final Value<String?> cpf;
  final Value<String?> nomeExpedidor;
  final Value<String?> logradouro;
  final Value<String?> numero;
  final Value<String?> complemento;
  final Value<String?> bairro;
  final Value<int?> codigoMunicipio;
  final Value<String?> nomeMunicipio;
  final Value<String?> uf;
  final Value<String?> cep;
  final Value<int?> codigoPais;
  final Value<String?> nomePais;
  final Value<String?> telefone;
  final Value<String?> email;
  final Value<String?> inscricaoEstadual;
  const NfeLocalRetiradasCompanion({
    this.id = const Value.absent(),
    this.idNfeCabecalho = const Value.absent(),
    this.cnpj = const Value.absent(),
    this.cpf = const Value.absent(),
    this.nomeExpedidor = const Value.absent(),
    this.logradouro = const Value.absent(),
    this.numero = const Value.absent(),
    this.complemento = const Value.absent(),
    this.bairro = const Value.absent(),
    this.codigoMunicipio = const Value.absent(),
    this.nomeMunicipio = const Value.absent(),
    this.uf = const Value.absent(),
    this.cep = const Value.absent(),
    this.codigoPais = const Value.absent(),
    this.nomePais = const Value.absent(),
    this.telefone = const Value.absent(),
    this.email = const Value.absent(),
    this.inscricaoEstadual = const Value.absent(),
  });
  NfeLocalRetiradasCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeCabecalho = const Value.absent(),
    this.cnpj = const Value.absent(),
    this.cpf = const Value.absent(),
    this.nomeExpedidor = const Value.absent(),
    this.logradouro = const Value.absent(),
    this.numero = const Value.absent(),
    this.complemento = const Value.absent(),
    this.bairro = const Value.absent(),
    this.codigoMunicipio = const Value.absent(),
    this.nomeMunicipio = const Value.absent(),
    this.uf = const Value.absent(),
    this.cep = const Value.absent(),
    this.codigoPais = const Value.absent(),
    this.nomePais = const Value.absent(),
    this.telefone = const Value.absent(),
    this.email = const Value.absent(),
    this.inscricaoEstadual = const Value.absent(),
  });
  static Insertable<NfeLocalRetirada> custom({
    Expression<int>? id,
    Expression<int>? idNfeCabecalho,
    Expression<String>? cnpj,
    Expression<String>? cpf,
    Expression<String>? nomeExpedidor,
    Expression<String>? logradouro,
    Expression<String>? numero,
    Expression<String>? complemento,
    Expression<String>? bairro,
    Expression<int>? codigoMunicipio,
    Expression<String>? nomeMunicipio,
    Expression<String>? uf,
    Expression<String>? cep,
    Expression<int>? codigoPais,
    Expression<String>? nomePais,
    Expression<String>? telefone,
    Expression<String>? email,
    Expression<String>? inscricaoEstadual,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (idNfeCabecalho != null) 'id_nfe_cabecalho': idNfeCabecalho,
      if (cnpj != null) 'cnpj': cnpj,
      if (cpf != null) 'cpf': cpf,
      if (nomeExpedidor != null) 'nome_expedidor': nomeExpedidor,
      if (logradouro != null) 'logradouro': logradouro,
      if (numero != null) 'numero': numero,
      if (complemento != null) 'complemento': complemento,
      if (bairro != null) 'bairro': bairro,
      if (codigoMunicipio != null) 'codigo_municipio': codigoMunicipio,
      if (nomeMunicipio != null) 'nome_municipio': nomeMunicipio,
      if (uf != null) 'uf': uf,
      if (cep != null) 'cep': cep,
      if (codigoPais != null) 'codigo_pais': codigoPais,
      if (nomePais != null) 'nome_pais': nomePais,
      if (telefone != null) 'telefone': telefone,
      if (email != null) 'email': email,
      if (inscricaoEstadual != null) 'inscricao_estadual': inscricaoEstadual,
    });
  }

  NfeLocalRetiradasCompanion copyWith({
    Value<int?>? id,
    Value<int?>? idNfeCabecalho,
    Value<String?>? cnpj,
    Value<String?>? cpf,
    Value<String?>? nomeExpedidor,
    Value<String?>? logradouro,
    Value<String?>? numero,
    Value<String?>? complemento,
    Value<String?>? bairro,
    Value<int?>? codigoMunicipio,
    Value<String?>? nomeMunicipio,
    Value<String?>? uf,
    Value<String?>? cep,
    Value<int?>? codigoPais,
    Value<String?>? nomePais,
    Value<String?>? telefone,
    Value<String?>? email,
    Value<String?>? inscricaoEstadual,
  }) {
    return NfeLocalRetiradasCompanion(
      id: id ?? this.id,
      idNfeCabecalho: idNfeCabecalho ?? this.idNfeCabecalho,
      cnpj: cnpj ?? this.cnpj,
      cpf: cpf ?? this.cpf,
      nomeExpedidor: nomeExpedidor ?? this.nomeExpedidor,
      logradouro: logradouro ?? this.logradouro,
      numero: numero ?? this.numero,
      complemento: complemento ?? this.complemento,
      bairro: bairro ?? this.bairro,
      codigoMunicipio: codigoMunicipio ?? this.codigoMunicipio,
      nomeMunicipio: nomeMunicipio ?? this.nomeMunicipio,
      uf: uf ?? this.uf,
      cep: cep ?? this.cep,
      codigoPais: codigoPais ?? this.codigoPais,
      nomePais: nomePais ?? this.nomePais,
      telefone: telefone ?? this.telefone,
      email: email ?? this.email,
      inscricaoEstadual: inscricaoEstadual ?? this.inscricaoEstadual,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (idNfeCabecalho.present) {
      map['id_nfe_cabecalho'] = Variable<int>(idNfeCabecalho.value);
    }
    if (cnpj.present) {
      map['cnpj'] = Variable<String>(cnpj.value);
    }
    if (cpf.present) {
      map['cpf'] = Variable<String>(cpf.value);
    }
    if (nomeExpedidor.present) {
      map['nome_expedidor'] = Variable<String>(nomeExpedidor.value);
    }
    if (logradouro.present) {
      map['logradouro'] = Variable<String>(logradouro.value);
    }
    if (numero.present) {
      map['numero'] = Variable<String>(numero.value);
    }
    if (complemento.present) {
      map['complemento'] = Variable<String>(complemento.value);
    }
    if (bairro.present) {
      map['bairro'] = Variable<String>(bairro.value);
    }
    if (codigoMunicipio.present) {
      map['codigo_municipio'] = Variable<int>(codigoMunicipio.value);
    }
    if (nomeMunicipio.present) {
      map['nome_municipio'] = Variable<String>(nomeMunicipio.value);
    }
    if (uf.present) {
      map['uf'] = Variable<String>(uf.value);
    }
    if (cep.present) {
      map['cep'] = Variable<String>(cep.value);
    }
    if (codigoPais.present) {
      map['codigo_pais'] = Variable<int>(codigoPais.value);
    }
    if (nomePais.present) {
      map['nome_pais'] = Variable<String>(nomePais.value);
    }
    if (telefone.present) {
      map['telefone'] = Variable<String>(telefone.value);
    }
    if (email.present) {
      map['email'] = Variable<String>(email.value);
    }
    if (inscricaoEstadual.present) {
      map['inscricao_estadual'] = Variable<String>(inscricaoEstadual.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeLocalRetiradasCompanion(')
          ..write('id: $id, ')
          ..write('idNfeCabecalho: $idNfeCabecalho, ')
          ..write('cnpj: $cnpj, ')
          ..write('cpf: $cpf, ')
          ..write('nomeExpedidor: $nomeExpedidor, ')
          ..write('logradouro: $logradouro, ')
          ..write('numero: $numero, ')
          ..write('complemento: $complemento, ')
          ..write('bairro: $bairro, ')
          ..write('codigoMunicipio: $codigoMunicipio, ')
          ..write('nomeMunicipio: $nomeMunicipio, ')
          ..write('uf: $uf, ')
          ..write('cep: $cep, ')
          ..write('codigoPais: $codigoPais, ')
          ..write('nomePais: $nomePais, ')
          ..write('telefone: $telefone, ')
          ..write('email: $email, ')
          ..write('inscricaoEstadual: $inscricaoEstadual')
          ..write(')'))
        .toString();
  }
}

class $NfeLocalEntregasTable extends NfeLocalEntregas
    with TableInfo<$NfeLocalEntregasTable, NfeLocalEntrega> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeLocalEntregasTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
    'id',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idNfeCabecalhoMeta = const VerificationMeta(
    'idNfeCabecalho',
  );
  @override
  late final GeneratedColumn<int> idNfeCabecalho = GeneratedColumn<int>(
    'id_nfe_cabecalho',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _cnpjMeta = const VerificationMeta('cnpj');
  @override
  late final GeneratedColumn<String> cnpj = GeneratedColumn<String>(
    'cnpj',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 14,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _cpfMeta = const VerificationMeta('cpf');
  @override
  late final GeneratedColumn<String> cpf = GeneratedColumn<String>(
    'cpf',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 11,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _nomeRecebedorMeta = const VerificationMeta(
    'nomeRecebedor',
  );
  @override
  late final GeneratedColumn<String> nomeRecebedor = GeneratedColumn<String>(
    'nome_recebedor',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 60,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _logradouroMeta = const VerificationMeta(
    'logradouro',
  );
  @override
  late final GeneratedColumn<String> logradouro = GeneratedColumn<String>(
    'logradouro',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 60,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _numeroMeta = const VerificationMeta('numero');
  @override
  late final GeneratedColumn<String> numero = GeneratedColumn<String>(
    'numero',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 60,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _complementoMeta = const VerificationMeta(
    'complemento',
  );
  @override
  late final GeneratedColumn<String> complemento = GeneratedColumn<String>(
    'complemento',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 60,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _bairroMeta = const VerificationMeta('bairro');
  @override
  late final GeneratedColumn<String> bairro = GeneratedColumn<String>(
    'bairro',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 60,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _codigoMunicipioMeta = const VerificationMeta(
    'codigoMunicipio',
  );
  @override
  late final GeneratedColumn<int> codigoMunicipio = GeneratedColumn<int>(
    'codigo_municipio',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _nomeMunicipioMeta = const VerificationMeta(
    'nomeMunicipio',
  );
  @override
  late final GeneratedColumn<String> nomeMunicipio = GeneratedColumn<String>(
    'nome_municipio',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 60,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _ufMeta = const VerificationMeta('uf');
  @override
  late final GeneratedColumn<String> uf = GeneratedColumn<String>(
    'uf',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 2,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _cepMeta = const VerificationMeta('cep');
  @override
  late final GeneratedColumn<String> cep = GeneratedColumn<String>(
    'cep',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 8,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _codigoPaisMeta = const VerificationMeta(
    'codigoPais',
  );
  @override
  late final GeneratedColumn<int> codigoPais = GeneratedColumn<int>(
    'codigo_pais',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _nomePaisMeta = const VerificationMeta(
    'nomePais',
  );
  @override
  late final GeneratedColumn<String> nomePais = GeneratedColumn<String>(
    'nome_pais',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 60,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _telefoneMeta = const VerificationMeta(
    'telefone',
  );
  @override
  late final GeneratedColumn<String> telefone = GeneratedColumn<String>(
    'telefone',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 14,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _emailMeta = const VerificationMeta('email');
  @override
  late final GeneratedColumn<String> email = GeneratedColumn<String>(
    'email',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 60,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _inscricaoEstadualMeta = const VerificationMeta(
    'inscricaoEstadual',
  );
  @override
  late final GeneratedColumn<String> inscricaoEstadual =
      GeneratedColumn<String>(
        'inscricao_estadual',
        aliasedName,
        true,
        additionalChecks: GeneratedColumn.checkTextLength(
          minTextLength: 0,
          maxTextLength: 14,
        ),
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    idNfeCabecalho,
    cnpj,
    cpf,
    nomeRecebedor,
    logradouro,
    numero,
    complemento,
    bairro,
    codigoMunicipio,
    nomeMunicipio,
    uf,
    cep,
    codigoPais,
    nomePais,
    telefone,
    email,
    inscricaoEstadual,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'nfe_local_entrega';
  @override
  VerificationContext validateIntegrity(
    Insertable<NfeLocalEntrega> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('id_nfe_cabecalho')) {
      context.handle(
        _idNfeCabecalhoMeta,
        idNfeCabecalho.isAcceptableOrUnknown(
          data['id_nfe_cabecalho']!,
          _idNfeCabecalhoMeta,
        ),
      );
    }
    if (data.containsKey('cnpj')) {
      context.handle(
        _cnpjMeta,
        cnpj.isAcceptableOrUnknown(data['cnpj']!, _cnpjMeta),
      );
    }
    if (data.containsKey('cpf')) {
      context.handle(
        _cpfMeta,
        cpf.isAcceptableOrUnknown(data['cpf']!, _cpfMeta),
      );
    }
    if (data.containsKey('nome_recebedor')) {
      context.handle(
        _nomeRecebedorMeta,
        nomeRecebedor.isAcceptableOrUnknown(
          data['nome_recebedor']!,
          _nomeRecebedorMeta,
        ),
      );
    }
    if (data.containsKey('logradouro')) {
      context.handle(
        _logradouroMeta,
        logradouro.isAcceptableOrUnknown(data['logradouro']!, _logradouroMeta),
      );
    }
    if (data.containsKey('numero')) {
      context.handle(
        _numeroMeta,
        numero.isAcceptableOrUnknown(data['numero']!, _numeroMeta),
      );
    }
    if (data.containsKey('complemento')) {
      context.handle(
        _complementoMeta,
        complemento.isAcceptableOrUnknown(
          data['complemento']!,
          _complementoMeta,
        ),
      );
    }
    if (data.containsKey('bairro')) {
      context.handle(
        _bairroMeta,
        bairro.isAcceptableOrUnknown(data['bairro']!, _bairroMeta),
      );
    }
    if (data.containsKey('codigo_municipio')) {
      context.handle(
        _codigoMunicipioMeta,
        codigoMunicipio.isAcceptableOrUnknown(
          data['codigo_municipio']!,
          _codigoMunicipioMeta,
        ),
      );
    }
    if (data.containsKey('nome_municipio')) {
      context.handle(
        _nomeMunicipioMeta,
        nomeMunicipio.isAcceptableOrUnknown(
          data['nome_municipio']!,
          _nomeMunicipioMeta,
        ),
      );
    }
    if (data.containsKey('uf')) {
      context.handle(_ufMeta, uf.isAcceptableOrUnknown(data['uf']!, _ufMeta));
    }
    if (data.containsKey('cep')) {
      context.handle(
        _cepMeta,
        cep.isAcceptableOrUnknown(data['cep']!, _cepMeta),
      );
    }
    if (data.containsKey('codigo_pais')) {
      context.handle(
        _codigoPaisMeta,
        codigoPais.isAcceptableOrUnknown(data['codigo_pais']!, _codigoPaisMeta),
      );
    }
    if (data.containsKey('nome_pais')) {
      context.handle(
        _nomePaisMeta,
        nomePais.isAcceptableOrUnknown(data['nome_pais']!, _nomePaisMeta),
      );
    }
    if (data.containsKey('telefone')) {
      context.handle(
        _telefoneMeta,
        telefone.isAcceptableOrUnknown(data['telefone']!, _telefoneMeta),
      );
    }
    if (data.containsKey('email')) {
      context.handle(
        _emailMeta,
        email.isAcceptableOrUnknown(data['email']!, _emailMeta),
      );
    }
    if (data.containsKey('inscricao_estadual')) {
      context.handle(
        _inscricaoEstadualMeta,
        inscricaoEstadual.isAcceptableOrUnknown(
          data['inscricao_estadual']!,
          _inscricaoEstadualMeta,
        ),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeLocalEntrega map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return NfeLocalEntrega(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id'],
      ),
      idNfeCabecalho: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_nfe_cabecalho'],
      ),
      cnpj: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}cnpj'],
      ),
      cpf: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}cpf'],
      ),
      nomeRecebedor: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}nome_recebedor'],
      ),
      logradouro: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}logradouro'],
      ),
      numero: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}numero'],
      ),
      complemento: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}complemento'],
      ),
      bairro: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}bairro'],
      ),
      codigoMunicipio: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}codigo_municipio'],
      ),
      nomeMunicipio: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}nome_municipio'],
      ),
      uf: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}uf'],
      ),
      cep: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}cep'],
      ),
      codigoPais: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}codigo_pais'],
      ),
      nomePais: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}nome_pais'],
      ),
      telefone: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}telefone'],
      ),
      email: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}email'],
      ),
      inscricaoEstadual: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}inscricao_estadual'],
      ),
    );
  }

  @override
  $NfeLocalEntregasTable createAlias(String alias) {
    return $NfeLocalEntregasTable(attachedDatabase, alias);
  }
}

class NfeLocalEntrega extends DataClass implements Insertable<NfeLocalEntrega> {
  final int? id;
  final int? idNfeCabecalho;
  final String? cnpj;
  final String? cpf;
  final String? nomeRecebedor;
  final String? logradouro;
  final String? numero;
  final String? complemento;
  final String? bairro;
  final int? codigoMunicipio;
  final String? nomeMunicipio;
  final String? uf;
  final String? cep;
  final int? codigoPais;
  final String? nomePais;
  final String? telefone;
  final String? email;
  final String? inscricaoEstadual;
  const NfeLocalEntrega({
    this.id,
    this.idNfeCabecalho,
    this.cnpj,
    this.cpf,
    this.nomeRecebedor,
    this.logradouro,
    this.numero,
    this.complemento,
    this.bairro,
    this.codigoMunicipio,
    this.nomeMunicipio,
    this.uf,
    this.cep,
    this.codigoPais,
    this.nomePais,
    this.telefone,
    this.email,
    this.inscricaoEstadual,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeCabecalho != null) {
      map['id_nfe_cabecalho'] = Variable<int>(idNfeCabecalho);
    }
    if (!nullToAbsent || cnpj != null) {
      map['cnpj'] = Variable<String>(cnpj);
    }
    if (!nullToAbsent || cpf != null) {
      map['cpf'] = Variable<String>(cpf);
    }
    if (!nullToAbsent || nomeRecebedor != null) {
      map['nome_recebedor'] = Variable<String>(nomeRecebedor);
    }
    if (!nullToAbsent || logradouro != null) {
      map['logradouro'] = Variable<String>(logradouro);
    }
    if (!nullToAbsent || numero != null) {
      map['numero'] = Variable<String>(numero);
    }
    if (!nullToAbsent || complemento != null) {
      map['complemento'] = Variable<String>(complemento);
    }
    if (!nullToAbsent || bairro != null) {
      map['bairro'] = Variable<String>(bairro);
    }
    if (!nullToAbsent || codigoMunicipio != null) {
      map['codigo_municipio'] = Variable<int>(codigoMunicipio);
    }
    if (!nullToAbsent || nomeMunicipio != null) {
      map['nome_municipio'] = Variable<String>(nomeMunicipio);
    }
    if (!nullToAbsent || uf != null) {
      map['uf'] = Variable<String>(uf);
    }
    if (!nullToAbsent || cep != null) {
      map['cep'] = Variable<String>(cep);
    }
    if (!nullToAbsent || codigoPais != null) {
      map['codigo_pais'] = Variable<int>(codigoPais);
    }
    if (!nullToAbsent || nomePais != null) {
      map['nome_pais'] = Variable<String>(nomePais);
    }
    if (!nullToAbsent || telefone != null) {
      map['telefone'] = Variable<String>(telefone);
    }
    if (!nullToAbsent || email != null) {
      map['email'] = Variable<String>(email);
    }
    if (!nullToAbsent || inscricaoEstadual != null) {
      map['inscricao_estadual'] = Variable<String>(inscricaoEstadual);
    }
    return map;
  }

  factory NfeLocalEntrega.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeLocalEntrega(
      id: serializer.fromJson<int?>(json['id']),
      idNfeCabecalho: serializer.fromJson<int?>(json['idNfeCabecalho']),
      cnpj: serializer.fromJson<String?>(json['cnpj']),
      cpf: serializer.fromJson<String?>(json['cpf']),
      nomeRecebedor: serializer.fromJson<String?>(json['nomeRecebedor']),
      logradouro: serializer.fromJson<String?>(json['logradouro']),
      numero: serializer.fromJson<String?>(json['numero']),
      complemento: serializer.fromJson<String?>(json['complemento']),
      bairro: serializer.fromJson<String?>(json['bairro']),
      codigoMunicipio: serializer.fromJson<int?>(json['codigoMunicipio']),
      nomeMunicipio: serializer.fromJson<String?>(json['nomeMunicipio']),
      uf: serializer.fromJson<String?>(json['uf']),
      cep: serializer.fromJson<String?>(json['cep']),
      codigoPais: serializer.fromJson<int?>(json['codigoPais']),
      nomePais: serializer.fromJson<String?>(json['nomePais']),
      telefone: serializer.fromJson<String?>(json['telefone']),
      email: serializer.fromJson<String?>(json['email']),
      inscricaoEstadual: serializer.fromJson<String?>(
        json['inscricaoEstadual'],
      ),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeCabecalho': serializer.toJson<int?>(idNfeCabecalho),
      'cnpj': serializer.toJson<String?>(cnpj),
      'cpf': serializer.toJson<String?>(cpf),
      'nomeRecebedor': serializer.toJson<String?>(nomeRecebedor),
      'logradouro': serializer.toJson<String?>(logradouro),
      'numero': serializer.toJson<String?>(numero),
      'complemento': serializer.toJson<String?>(complemento),
      'bairro': serializer.toJson<String?>(bairro),
      'codigoMunicipio': serializer.toJson<int?>(codigoMunicipio),
      'nomeMunicipio': serializer.toJson<String?>(nomeMunicipio),
      'uf': serializer.toJson<String?>(uf),
      'cep': serializer.toJson<String?>(cep),
      'codigoPais': serializer.toJson<int?>(codigoPais),
      'nomePais': serializer.toJson<String?>(nomePais),
      'telefone': serializer.toJson<String?>(telefone),
      'email': serializer.toJson<String?>(email),
      'inscricaoEstadual': serializer.toJson<String?>(inscricaoEstadual),
    };
  }

  NfeLocalEntrega copyWith({
    Value<int?> id = const Value.absent(),
    Value<int?> idNfeCabecalho = const Value.absent(),
    Value<String?> cnpj = const Value.absent(),
    Value<String?> cpf = const Value.absent(),
    Value<String?> nomeRecebedor = const Value.absent(),
    Value<String?> logradouro = const Value.absent(),
    Value<String?> numero = const Value.absent(),
    Value<String?> complemento = const Value.absent(),
    Value<String?> bairro = const Value.absent(),
    Value<int?> codigoMunicipio = const Value.absent(),
    Value<String?> nomeMunicipio = const Value.absent(),
    Value<String?> uf = const Value.absent(),
    Value<String?> cep = const Value.absent(),
    Value<int?> codigoPais = const Value.absent(),
    Value<String?> nomePais = const Value.absent(),
    Value<String?> telefone = const Value.absent(),
    Value<String?> email = const Value.absent(),
    Value<String?> inscricaoEstadual = const Value.absent(),
  }) => NfeLocalEntrega(
    id: id.present ? id.value : this.id,
    idNfeCabecalho:
        idNfeCabecalho.present ? idNfeCabecalho.value : this.idNfeCabecalho,
    cnpj: cnpj.present ? cnpj.value : this.cnpj,
    cpf: cpf.present ? cpf.value : this.cpf,
    nomeRecebedor:
        nomeRecebedor.present ? nomeRecebedor.value : this.nomeRecebedor,
    logradouro: logradouro.present ? logradouro.value : this.logradouro,
    numero: numero.present ? numero.value : this.numero,
    complemento: complemento.present ? complemento.value : this.complemento,
    bairro: bairro.present ? bairro.value : this.bairro,
    codigoMunicipio:
        codigoMunicipio.present ? codigoMunicipio.value : this.codigoMunicipio,
    nomeMunicipio:
        nomeMunicipio.present ? nomeMunicipio.value : this.nomeMunicipio,
    uf: uf.present ? uf.value : this.uf,
    cep: cep.present ? cep.value : this.cep,
    codigoPais: codigoPais.present ? codigoPais.value : this.codigoPais,
    nomePais: nomePais.present ? nomePais.value : this.nomePais,
    telefone: telefone.present ? telefone.value : this.telefone,
    email: email.present ? email.value : this.email,
    inscricaoEstadual:
        inscricaoEstadual.present
            ? inscricaoEstadual.value
            : this.inscricaoEstadual,
  );
  NfeLocalEntrega copyWithCompanion(NfeLocalEntregasCompanion data) {
    return NfeLocalEntrega(
      id: data.id.present ? data.id.value : this.id,
      idNfeCabecalho:
          data.idNfeCabecalho.present
              ? data.idNfeCabecalho.value
              : this.idNfeCabecalho,
      cnpj: data.cnpj.present ? data.cnpj.value : this.cnpj,
      cpf: data.cpf.present ? data.cpf.value : this.cpf,
      nomeRecebedor:
          data.nomeRecebedor.present
              ? data.nomeRecebedor.value
              : this.nomeRecebedor,
      logradouro:
          data.logradouro.present ? data.logradouro.value : this.logradouro,
      numero: data.numero.present ? data.numero.value : this.numero,
      complemento:
          data.complemento.present ? data.complemento.value : this.complemento,
      bairro: data.bairro.present ? data.bairro.value : this.bairro,
      codigoMunicipio:
          data.codigoMunicipio.present
              ? data.codigoMunicipio.value
              : this.codigoMunicipio,
      nomeMunicipio:
          data.nomeMunicipio.present
              ? data.nomeMunicipio.value
              : this.nomeMunicipio,
      uf: data.uf.present ? data.uf.value : this.uf,
      cep: data.cep.present ? data.cep.value : this.cep,
      codigoPais:
          data.codigoPais.present ? data.codigoPais.value : this.codigoPais,
      nomePais: data.nomePais.present ? data.nomePais.value : this.nomePais,
      telefone: data.telefone.present ? data.telefone.value : this.telefone,
      email: data.email.present ? data.email.value : this.email,
      inscricaoEstadual:
          data.inscricaoEstadual.present
              ? data.inscricaoEstadual.value
              : this.inscricaoEstadual,
    );
  }

  @override
  String toString() {
    return (StringBuffer('NfeLocalEntrega(')
          ..write('id: $id, ')
          ..write('idNfeCabecalho: $idNfeCabecalho, ')
          ..write('cnpj: $cnpj, ')
          ..write('cpf: $cpf, ')
          ..write('nomeRecebedor: $nomeRecebedor, ')
          ..write('logradouro: $logradouro, ')
          ..write('numero: $numero, ')
          ..write('complemento: $complemento, ')
          ..write('bairro: $bairro, ')
          ..write('codigoMunicipio: $codigoMunicipio, ')
          ..write('nomeMunicipio: $nomeMunicipio, ')
          ..write('uf: $uf, ')
          ..write('cep: $cep, ')
          ..write('codigoPais: $codigoPais, ')
          ..write('nomePais: $nomePais, ')
          ..write('telefone: $telefone, ')
          ..write('email: $email, ')
          ..write('inscricaoEstadual: $inscricaoEstadual')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    idNfeCabecalho,
    cnpj,
    cpf,
    nomeRecebedor,
    logradouro,
    numero,
    complemento,
    bairro,
    codigoMunicipio,
    nomeMunicipio,
    uf,
    cep,
    codigoPais,
    nomePais,
    telefone,
    email,
    inscricaoEstadual,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeLocalEntrega &&
          other.id == this.id &&
          other.idNfeCabecalho == this.idNfeCabecalho &&
          other.cnpj == this.cnpj &&
          other.cpf == this.cpf &&
          other.nomeRecebedor == this.nomeRecebedor &&
          other.logradouro == this.logradouro &&
          other.numero == this.numero &&
          other.complemento == this.complemento &&
          other.bairro == this.bairro &&
          other.codigoMunicipio == this.codigoMunicipio &&
          other.nomeMunicipio == this.nomeMunicipio &&
          other.uf == this.uf &&
          other.cep == this.cep &&
          other.codigoPais == this.codigoPais &&
          other.nomePais == this.nomePais &&
          other.telefone == this.telefone &&
          other.email == this.email &&
          other.inscricaoEstadual == this.inscricaoEstadual);
}

class NfeLocalEntregasCompanion extends UpdateCompanion<NfeLocalEntrega> {
  final Value<int?> id;
  final Value<int?> idNfeCabecalho;
  final Value<String?> cnpj;
  final Value<String?> cpf;
  final Value<String?> nomeRecebedor;
  final Value<String?> logradouro;
  final Value<String?> numero;
  final Value<String?> complemento;
  final Value<String?> bairro;
  final Value<int?> codigoMunicipio;
  final Value<String?> nomeMunicipio;
  final Value<String?> uf;
  final Value<String?> cep;
  final Value<int?> codigoPais;
  final Value<String?> nomePais;
  final Value<String?> telefone;
  final Value<String?> email;
  final Value<String?> inscricaoEstadual;
  const NfeLocalEntregasCompanion({
    this.id = const Value.absent(),
    this.idNfeCabecalho = const Value.absent(),
    this.cnpj = const Value.absent(),
    this.cpf = const Value.absent(),
    this.nomeRecebedor = const Value.absent(),
    this.logradouro = const Value.absent(),
    this.numero = const Value.absent(),
    this.complemento = const Value.absent(),
    this.bairro = const Value.absent(),
    this.codigoMunicipio = const Value.absent(),
    this.nomeMunicipio = const Value.absent(),
    this.uf = const Value.absent(),
    this.cep = const Value.absent(),
    this.codigoPais = const Value.absent(),
    this.nomePais = const Value.absent(),
    this.telefone = const Value.absent(),
    this.email = const Value.absent(),
    this.inscricaoEstadual = const Value.absent(),
  });
  NfeLocalEntregasCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeCabecalho = const Value.absent(),
    this.cnpj = const Value.absent(),
    this.cpf = const Value.absent(),
    this.nomeRecebedor = const Value.absent(),
    this.logradouro = const Value.absent(),
    this.numero = const Value.absent(),
    this.complemento = const Value.absent(),
    this.bairro = const Value.absent(),
    this.codigoMunicipio = const Value.absent(),
    this.nomeMunicipio = const Value.absent(),
    this.uf = const Value.absent(),
    this.cep = const Value.absent(),
    this.codigoPais = const Value.absent(),
    this.nomePais = const Value.absent(),
    this.telefone = const Value.absent(),
    this.email = const Value.absent(),
    this.inscricaoEstadual = const Value.absent(),
  });
  static Insertable<NfeLocalEntrega> custom({
    Expression<int>? id,
    Expression<int>? idNfeCabecalho,
    Expression<String>? cnpj,
    Expression<String>? cpf,
    Expression<String>? nomeRecebedor,
    Expression<String>? logradouro,
    Expression<String>? numero,
    Expression<String>? complemento,
    Expression<String>? bairro,
    Expression<int>? codigoMunicipio,
    Expression<String>? nomeMunicipio,
    Expression<String>? uf,
    Expression<String>? cep,
    Expression<int>? codigoPais,
    Expression<String>? nomePais,
    Expression<String>? telefone,
    Expression<String>? email,
    Expression<String>? inscricaoEstadual,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (idNfeCabecalho != null) 'id_nfe_cabecalho': idNfeCabecalho,
      if (cnpj != null) 'cnpj': cnpj,
      if (cpf != null) 'cpf': cpf,
      if (nomeRecebedor != null) 'nome_recebedor': nomeRecebedor,
      if (logradouro != null) 'logradouro': logradouro,
      if (numero != null) 'numero': numero,
      if (complemento != null) 'complemento': complemento,
      if (bairro != null) 'bairro': bairro,
      if (codigoMunicipio != null) 'codigo_municipio': codigoMunicipio,
      if (nomeMunicipio != null) 'nome_municipio': nomeMunicipio,
      if (uf != null) 'uf': uf,
      if (cep != null) 'cep': cep,
      if (codigoPais != null) 'codigo_pais': codigoPais,
      if (nomePais != null) 'nome_pais': nomePais,
      if (telefone != null) 'telefone': telefone,
      if (email != null) 'email': email,
      if (inscricaoEstadual != null) 'inscricao_estadual': inscricaoEstadual,
    });
  }

  NfeLocalEntregasCompanion copyWith({
    Value<int?>? id,
    Value<int?>? idNfeCabecalho,
    Value<String?>? cnpj,
    Value<String?>? cpf,
    Value<String?>? nomeRecebedor,
    Value<String?>? logradouro,
    Value<String?>? numero,
    Value<String?>? complemento,
    Value<String?>? bairro,
    Value<int?>? codigoMunicipio,
    Value<String?>? nomeMunicipio,
    Value<String?>? uf,
    Value<String?>? cep,
    Value<int?>? codigoPais,
    Value<String?>? nomePais,
    Value<String?>? telefone,
    Value<String?>? email,
    Value<String?>? inscricaoEstadual,
  }) {
    return NfeLocalEntregasCompanion(
      id: id ?? this.id,
      idNfeCabecalho: idNfeCabecalho ?? this.idNfeCabecalho,
      cnpj: cnpj ?? this.cnpj,
      cpf: cpf ?? this.cpf,
      nomeRecebedor: nomeRecebedor ?? this.nomeRecebedor,
      logradouro: logradouro ?? this.logradouro,
      numero: numero ?? this.numero,
      complemento: complemento ?? this.complemento,
      bairro: bairro ?? this.bairro,
      codigoMunicipio: codigoMunicipio ?? this.codigoMunicipio,
      nomeMunicipio: nomeMunicipio ?? this.nomeMunicipio,
      uf: uf ?? this.uf,
      cep: cep ?? this.cep,
      codigoPais: codigoPais ?? this.codigoPais,
      nomePais: nomePais ?? this.nomePais,
      telefone: telefone ?? this.telefone,
      email: email ?? this.email,
      inscricaoEstadual: inscricaoEstadual ?? this.inscricaoEstadual,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (idNfeCabecalho.present) {
      map['id_nfe_cabecalho'] = Variable<int>(idNfeCabecalho.value);
    }
    if (cnpj.present) {
      map['cnpj'] = Variable<String>(cnpj.value);
    }
    if (cpf.present) {
      map['cpf'] = Variable<String>(cpf.value);
    }
    if (nomeRecebedor.present) {
      map['nome_recebedor'] = Variable<String>(nomeRecebedor.value);
    }
    if (logradouro.present) {
      map['logradouro'] = Variable<String>(logradouro.value);
    }
    if (numero.present) {
      map['numero'] = Variable<String>(numero.value);
    }
    if (complemento.present) {
      map['complemento'] = Variable<String>(complemento.value);
    }
    if (bairro.present) {
      map['bairro'] = Variable<String>(bairro.value);
    }
    if (codigoMunicipio.present) {
      map['codigo_municipio'] = Variable<int>(codigoMunicipio.value);
    }
    if (nomeMunicipio.present) {
      map['nome_municipio'] = Variable<String>(nomeMunicipio.value);
    }
    if (uf.present) {
      map['uf'] = Variable<String>(uf.value);
    }
    if (cep.present) {
      map['cep'] = Variable<String>(cep.value);
    }
    if (codigoPais.present) {
      map['codigo_pais'] = Variable<int>(codigoPais.value);
    }
    if (nomePais.present) {
      map['nome_pais'] = Variable<String>(nomePais.value);
    }
    if (telefone.present) {
      map['telefone'] = Variable<String>(telefone.value);
    }
    if (email.present) {
      map['email'] = Variable<String>(email.value);
    }
    if (inscricaoEstadual.present) {
      map['inscricao_estadual'] = Variable<String>(inscricaoEstadual.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeLocalEntregasCompanion(')
          ..write('id: $id, ')
          ..write('idNfeCabecalho: $idNfeCabecalho, ')
          ..write('cnpj: $cnpj, ')
          ..write('cpf: $cpf, ')
          ..write('nomeRecebedor: $nomeRecebedor, ')
          ..write('logradouro: $logradouro, ')
          ..write('numero: $numero, ')
          ..write('complemento: $complemento, ')
          ..write('bairro: $bairro, ')
          ..write('codigoMunicipio: $codigoMunicipio, ')
          ..write('nomeMunicipio: $nomeMunicipio, ')
          ..write('uf: $uf, ')
          ..write('cep: $cep, ')
          ..write('codigoPais: $codigoPais, ')
          ..write('nomePais: $nomePais, ')
          ..write('telefone: $telefone, ')
          ..write('email: $email, ')
          ..write('inscricaoEstadual: $inscricaoEstadual')
          ..write(')'))
        .toString();
  }
}

class $NfeDetEspecificoVeiculosTable extends NfeDetEspecificoVeiculos
    with TableInfo<$NfeDetEspecificoVeiculosTable, NfeDetEspecificoVeiculo> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeDetEspecificoVeiculosTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
    'id',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idNfeDetalheMeta = const VerificationMeta(
    'idNfeDetalhe',
  );
  @override
  late final GeneratedColumn<int> idNfeDetalhe = GeneratedColumn<int>(
    'id_nfe_detalhe',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _tipoOperacaoMeta = const VerificationMeta(
    'tipoOperacao',
  );
  @override
  late final GeneratedColumn<String> tipoOperacao = GeneratedColumn<String>(
    'tipo_operacao',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 1,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _chassiMeta = const VerificationMeta('chassi');
  @override
  late final GeneratedColumn<String> chassi = GeneratedColumn<String>(
    'chassi',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 17,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _corMeta = const VerificationMeta('cor');
  @override
  late final GeneratedColumn<String> cor = GeneratedColumn<String>(
    'cor',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 4,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _descricaoCorMeta = const VerificationMeta(
    'descricaoCor',
  );
  @override
  late final GeneratedColumn<String> descricaoCor = GeneratedColumn<String>(
    'descricao_cor',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 40,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _potenciaMotorMeta = const VerificationMeta(
    'potenciaMotor',
  );
  @override
  late final GeneratedColumn<String> potenciaMotor = GeneratedColumn<String>(
    'potencia_motor',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 4,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _cilindradasMeta = const VerificationMeta(
    'cilindradas',
  );
  @override
  late final GeneratedColumn<String> cilindradas = GeneratedColumn<String>(
    'cilindradas',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 4,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _pesoLiquidoMeta = const VerificationMeta(
    'pesoLiquido',
  );
  @override
  late final GeneratedColumn<String> pesoLiquido = GeneratedColumn<String>(
    'peso_liquido',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 9,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _pesoBrutoMeta = const VerificationMeta(
    'pesoBruto',
  );
  @override
  late final GeneratedColumn<String> pesoBruto = GeneratedColumn<String>(
    'peso_bruto',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 9,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _numeroSerieMeta = const VerificationMeta(
    'numeroSerie',
  );
  @override
  late final GeneratedColumn<String> numeroSerie = GeneratedColumn<String>(
    'numero_serie',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 9,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _tipoCombustivelMeta = const VerificationMeta(
    'tipoCombustivel',
  );
  @override
  late final GeneratedColumn<String> tipoCombustivel = GeneratedColumn<String>(
    'tipo_combustivel',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 2,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _numeroMotorMeta = const VerificationMeta(
    'numeroMotor',
  );
  @override
  late final GeneratedColumn<String> numeroMotor = GeneratedColumn<String>(
    'numero_motor',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 21,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _capacidadeMaximaTracaoMeta =
      const VerificationMeta('capacidadeMaximaTracao');
  @override
  late final GeneratedColumn<String> capacidadeMaximaTracao =
      GeneratedColumn<String>(
        'capacidade_maxima_tracao',
        aliasedName,
        true,
        additionalChecks: GeneratedColumn.checkTextLength(
          minTextLength: 0,
          maxTextLength: 9,
        ),
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _distanciaEixosMeta = const VerificationMeta(
    'distanciaEixos',
  );
  @override
  late final GeneratedColumn<String> distanciaEixos = GeneratedColumn<String>(
    'distancia_eixos',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 4,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _anoModeloMeta = const VerificationMeta(
    'anoModelo',
  );
  @override
  late final GeneratedColumn<String> anoModelo = GeneratedColumn<String>(
    'ano_modelo',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 4,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _anoFabricacaoMeta = const VerificationMeta(
    'anoFabricacao',
  );
  @override
  late final GeneratedColumn<String> anoFabricacao = GeneratedColumn<String>(
    'ano_fabricacao',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 4,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _tipoPinturaMeta = const VerificationMeta(
    'tipoPintura',
  );
  @override
  late final GeneratedColumn<String> tipoPintura = GeneratedColumn<String>(
    'tipo_pintura',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 1,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _tipoVeiculoMeta = const VerificationMeta(
    'tipoVeiculo',
  );
  @override
  late final GeneratedColumn<String> tipoVeiculo = GeneratedColumn<String>(
    'tipo_veiculo',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 2,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _especieVeiculoMeta = const VerificationMeta(
    'especieVeiculo',
  );
  @override
  late final GeneratedColumn<String> especieVeiculo = GeneratedColumn<String>(
    'especie_veiculo',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 1,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _condicaoVinMeta = const VerificationMeta(
    'condicaoVin',
  );
  @override
  late final GeneratedColumn<String> condicaoVin = GeneratedColumn<String>(
    'condicao_vin',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 1,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _condicaoVeiculoMeta = const VerificationMeta(
    'condicaoVeiculo',
  );
  @override
  late final GeneratedColumn<String> condicaoVeiculo = GeneratedColumn<String>(
    'condicao_veiculo',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 1,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _codigoMarcaModeloMeta = const VerificationMeta(
    'codigoMarcaModelo',
  );
  @override
  late final GeneratedColumn<String> codigoMarcaModelo =
      GeneratedColumn<String>(
        'codigo_marca_modelo',
        aliasedName,
        true,
        additionalChecks: GeneratedColumn.checkTextLength(
          minTextLength: 0,
          maxTextLength: 6,
        ),
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _codigoCorDenatranMeta = const VerificationMeta(
    'codigoCorDenatran',
  );
  @override
  late final GeneratedColumn<String> codigoCorDenatran =
      GeneratedColumn<String>(
        'codigo_cor_denatran',
        aliasedName,
        true,
        additionalChecks: GeneratedColumn.checkTextLength(
          minTextLength: 0,
          maxTextLength: 2,
        ),
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _lotacaoMaximaMeta = const VerificationMeta(
    'lotacaoMaxima',
  );
  @override
  late final GeneratedColumn<int> lotacaoMaxima = GeneratedColumn<int>(
    'lotacao_maxima',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _restricaoMeta = const VerificationMeta(
    'restricao',
  );
  @override
  late final GeneratedColumn<String> restricao = GeneratedColumn<String>(
    'restricao',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 1,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    idNfeDetalhe,
    tipoOperacao,
    chassi,
    cor,
    descricaoCor,
    potenciaMotor,
    cilindradas,
    pesoLiquido,
    pesoBruto,
    numeroSerie,
    tipoCombustivel,
    numeroMotor,
    capacidadeMaximaTracao,
    distanciaEixos,
    anoModelo,
    anoFabricacao,
    tipoPintura,
    tipoVeiculo,
    especieVeiculo,
    condicaoVin,
    condicaoVeiculo,
    codigoMarcaModelo,
    codigoCorDenatran,
    lotacaoMaxima,
    restricao,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'nfe_det_especifico_veiculo';
  @override
  VerificationContext validateIntegrity(
    Insertable<NfeDetEspecificoVeiculo> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('id_nfe_detalhe')) {
      context.handle(
        _idNfeDetalheMeta,
        idNfeDetalhe.isAcceptableOrUnknown(
          data['id_nfe_detalhe']!,
          _idNfeDetalheMeta,
        ),
      );
    }
    if (data.containsKey('tipo_operacao')) {
      context.handle(
        _tipoOperacaoMeta,
        tipoOperacao.isAcceptableOrUnknown(
          data['tipo_operacao']!,
          _tipoOperacaoMeta,
        ),
      );
    }
    if (data.containsKey('chassi')) {
      context.handle(
        _chassiMeta,
        chassi.isAcceptableOrUnknown(data['chassi']!, _chassiMeta),
      );
    }
    if (data.containsKey('cor')) {
      context.handle(
        _corMeta,
        cor.isAcceptableOrUnknown(data['cor']!, _corMeta),
      );
    }
    if (data.containsKey('descricao_cor')) {
      context.handle(
        _descricaoCorMeta,
        descricaoCor.isAcceptableOrUnknown(
          data['descricao_cor']!,
          _descricaoCorMeta,
        ),
      );
    }
    if (data.containsKey('potencia_motor')) {
      context.handle(
        _potenciaMotorMeta,
        potenciaMotor.isAcceptableOrUnknown(
          data['potencia_motor']!,
          _potenciaMotorMeta,
        ),
      );
    }
    if (data.containsKey('cilindradas')) {
      context.handle(
        _cilindradasMeta,
        cilindradas.isAcceptableOrUnknown(
          data['cilindradas']!,
          _cilindradasMeta,
        ),
      );
    }
    if (data.containsKey('peso_liquido')) {
      context.handle(
        _pesoLiquidoMeta,
        pesoLiquido.isAcceptableOrUnknown(
          data['peso_liquido']!,
          _pesoLiquidoMeta,
        ),
      );
    }
    if (data.containsKey('peso_bruto')) {
      context.handle(
        _pesoBrutoMeta,
        pesoBruto.isAcceptableOrUnknown(data['peso_bruto']!, _pesoBrutoMeta),
      );
    }
    if (data.containsKey('numero_serie')) {
      context.handle(
        _numeroSerieMeta,
        numeroSerie.isAcceptableOrUnknown(
          data['numero_serie']!,
          _numeroSerieMeta,
        ),
      );
    }
    if (data.containsKey('tipo_combustivel')) {
      context.handle(
        _tipoCombustivelMeta,
        tipoCombustivel.isAcceptableOrUnknown(
          data['tipo_combustivel']!,
          _tipoCombustivelMeta,
        ),
      );
    }
    if (data.containsKey('numero_motor')) {
      context.handle(
        _numeroMotorMeta,
        numeroMotor.isAcceptableOrUnknown(
          data['numero_motor']!,
          _numeroMotorMeta,
        ),
      );
    }
    if (data.containsKey('capacidade_maxima_tracao')) {
      context.handle(
        _capacidadeMaximaTracaoMeta,
        capacidadeMaximaTracao.isAcceptableOrUnknown(
          data['capacidade_maxima_tracao']!,
          _capacidadeMaximaTracaoMeta,
        ),
      );
    }
    if (data.containsKey('distancia_eixos')) {
      context.handle(
        _distanciaEixosMeta,
        distanciaEixos.isAcceptableOrUnknown(
          data['distancia_eixos']!,
          _distanciaEixosMeta,
        ),
      );
    }
    if (data.containsKey('ano_modelo')) {
      context.handle(
        _anoModeloMeta,
        anoModelo.isAcceptableOrUnknown(data['ano_modelo']!, _anoModeloMeta),
      );
    }
    if (data.containsKey('ano_fabricacao')) {
      context.handle(
        _anoFabricacaoMeta,
        anoFabricacao.isAcceptableOrUnknown(
          data['ano_fabricacao']!,
          _anoFabricacaoMeta,
        ),
      );
    }
    if (data.containsKey('tipo_pintura')) {
      context.handle(
        _tipoPinturaMeta,
        tipoPintura.isAcceptableOrUnknown(
          data['tipo_pintura']!,
          _tipoPinturaMeta,
        ),
      );
    }
    if (data.containsKey('tipo_veiculo')) {
      context.handle(
        _tipoVeiculoMeta,
        tipoVeiculo.isAcceptableOrUnknown(
          data['tipo_veiculo']!,
          _tipoVeiculoMeta,
        ),
      );
    }
    if (data.containsKey('especie_veiculo')) {
      context.handle(
        _especieVeiculoMeta,
        especieVeiculo.isAcceptableOrUnknown(
          data['especie_veiculo']!,
          _especieVeiculoMeta,
        ),
      );
    }
    if (data.containsKey('condicao_vin')) {
      context.handle(
        _condicaoVinMeta,
        condicaoVin.isAcceptableOrUnknown(
          data['condicao_vin']!,
          _condicaoVinMeta,
        ),
      );
    }
    if (data.containsKey('condicao_veiculo')) {
      context.handle(
        _condicaoVeiculoMeta,
        condicaoVeiculo.isAcceptableOrUnknown(
          data['condicao_veiculo']!,
          _condicaoVeiculoMeta,
        ),
      );
    }
    if (data.containsKey('codigo_marca_modelo')) {
      context.handle(
        _codigoMarcaModeloMeta,
        codigoMarcaModelo.isAcceptableOrUnknown(
          data['codigo_marca_modelo']!,
          _codigoMarcaModeloMeta,
        ),
      );
    }
    if (data.containsKey('codigo_cor_denatran')) {
      context.handle(
        _codigoCorDenatranMeta,
        codigoCorDenatran.isAcceptableOrUnknown(
          data['codigo_cor_denatran']!,
          _codigoCorDenatranMeta,
        ),
      );
    }
    if (data.containsKey('lotacao_maxima')) {
      context.handle(
        _lotacaoMaximaMeta,
        lotacaoMaxima.isAcceptableOrUnknown(
          data['lotacao_maxima']!,
          _lotacaoMaximaMeta,
        ),
      );
    }
    if (data.containsKey('restricao')) {
      context.handle(
        _restricaoMeta,
        restricao.isAcceptableOrUnknown(data['restricao']!, _restricaoMeta),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeDetEspecificoVeiculo map(
    Map<String, dynamic> data, {
    String? tablePrefix,
  }) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return NfeDetEspecificoVeiculo(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id'],
      ),
      idNfeDetalhe: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_nfe_detalhe'],
      ),
      tipoOperacao: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}tipo_operacao'],
      ),
      chassi: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}chassi'],
      ),
      cor: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}cor'],
      ),
      descricaoCor: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}descricao_cor'],
      ),
      potenciaMotor: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}potencia_motor'],
      ),
      cilindradas: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}cilindradas'],
      ),
      pesoLiquido: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}peso_liquido'],
      ),
      pesoBruto: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}peso_bruto'],
      ),
      numeroSerie: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}numero_serie'],
      ),
      tipoCombustivel: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}tipo_combustivel'],
      ),
      numeroMotor: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}numero_motor'],
      ),
      capacidadeMaximaTracao: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}capacidade_maxima_tracao'],
      ),
      distanciaEixos: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}distancia_eixos'],
      ),
      anoModelo: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ano_modelo'],
      ),
      anoFabricacao: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ano_fabricacao'],
      ),
      tipoPintura: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}tipo_pintura'],
      ),
      tipoVeiculo: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}tipo_veiculo'],
      ),
      especieVeiculo: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}especie_veiculo'],
      ),
      condicaoVin: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}condicao_vin'],
      ),
      condicaoVeiculo: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}condicao_veiculo'],
      ),
      codigoMarcaModelo: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}codigo_marca_modelo'],
      ),
      codigoCorDenatran: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}codigo_cor_denatran'],
      ),
      lotacaoMaxima: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}lotacao_maxima'],
      ),
      restricao: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}restricao'],
      ),
    );
  }

  @override
  $NfeDetEspecificoVeiculosTable createAlias(String alias) {
    return $NfeDetEspecificoVeiculosTable(attachedDatabase, alias);
  }
}

class NfeDetEspecificoVeiculo extends DataClass
    implements Insertable<NfeDetEspecificoVeiculo> {
  final int? id;
  final int? idNfeDetalhe;
  final String? tipoOperacao;
  final String? chassi;
  final String? cor;
  final String? descricaoCor;
  final String? potenciaMotor;
  final String? cilindradas;
  final String? pesoLiquido;
  final String? pesoBruto;
  final String? numeroSerie;
  final String? tipoCombustivel;
  final String? numeroMotor;
  final String? capacidadeMaximaTracao;
  final String? distanciaEixos;
  final String? anoModelo;
  final String? anoFabricacao;
  final String? tipoPintura;
  final String? tipoVeiculo;
  final String? especieVeiculo;
  final String? condicaoVin;
  final String? condicaoVeiculo;
  final String? codigoMarcaModelo;
  final String? codigoCorDenatran;
  final int? lotacaoMaxima;
  final String? restricao;
  const NfeDetEspecificoVeiculo({
    this.id,
    this.idNfeDetalhe,
    this.tipoOperacao,
    this.chassi,
    this.cor,
    this.descricaoCor,
    this.potenciaMotor,
    this.cilindradas,
    this.pesoLiquido,
    this.pesoBruto,
    this.numeroSerie,
    this.tipoCombustivel,
    this.numeroMotor,
    this.capacidadeMaximaTracao,
    this.distanciaEixos,
    this.anoModelo,
    this.anoFabricacao,
    this.tipoPintura,
    this.tipoVeiculo,
    this.especieVeiculo,
    this.condicaoVin,
    this.condicaoVeiculo,
    this.codigoMarcaModelo,
    this.codigoCorDenatran,
    this.lotacaoMaxima,
    this.restricao,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeDetalhe != null) {
      map['id_nfe_detalhe'] = Variable<int>(idNfeDetalhe);
    }
    if (!nullToAbsent || tipoOperacao != null) {
      map['tipo_operacao'] = Variable<String>(tipoOperacao);
    }
    if (!nullToAbsent || chassi != null) {
      map['chassi'] = Variable<String>(chassi);
    }
    if (!nullToAbsent || cor != null) {
      map['cor'] = Variable<String>(cor);
    }
    if (!nullToAbsent || descricaoCor != null) {
      map['descricao_cor'] = Variable<String>(descricaoCor);
    }
    if (!nullToAbsent || potenciaMotor != null) {
      map['potencia_motor'] = Variable<String>(potenciaMotor);
    }
    if (!nullToAbsent || cilindradas != null) {
      map['cilindradas'] = Variable<String>(cilindradas);
    }
    if (!nullToAbsent || pesoLiquido != null) {
      map['peso_liquido'] = Variable<String>(pesoLiquido);
    }
    if (!nullToAbsent || pesoBruto != null) {
      map['peso_bruto'] = Variable<String>(pesoBruto);
    }
    if (!nullToAbsent || numeroSerie != null) {
      map['numero_serie'] = Variable<String>(numeroSerie);
    }
    if (!nullToAbsent || tipoCombustivel != null) {
      map['tipo_combustivel'] = Variable<String>(tipoCombustivel);
    }
    if (!nullToAbsent || numeroMotor != null) {
      map['numero_motor'] = Variable<String>(numeroMotor);
    }
    if (!nullToAbsent || capacidadeMaximaTracao != null) {
      map['capacidade_maxima_tracao'] = Variable<String>(
        capacidadeMaximaTracao,
      );
    }
    if (!nullToAbsent || distanciaEixos != null) {
      map['distancia_eixos'] = Variable<String>(distanciaEixos);
    }
    if (!nullToAbsent || anoModelo != null) {
      map['ano_modelo'] = Variable<String>(anoModelo);
    }
    if (!nullToAbsent || anoFabricacao != null) {
      map['ano_fabricacao'] = Variable<String>(anoFabricacao);
    }
    if (!nullToAbsent || tipoPintura != null) {
      map['tipo_pintura'] = Variable<String>(tipoPintura);
    }
    if (!nullToAbsent || tipoVeiculo != null) {
      map['tipo_veiculo'] = Variable<String>(tipoVeiculo);
    }
    if (!nullToAbsent || especieVeiculo != null) {
      map['especie_veiculo'] = Variable<String>(especieVeiculo);
    }
    if (!nullToAbsent || condicaoVin != null) {
      map['condicao_vin'] = Variable<String>(condicaoVin);
    }
    if (!nullToAbsent || condicaoVeiculo != null) {
      map['condicao_veiculo'] = Variable<String>(condicaoVeiculo);
    }
    if (!nullToAbsent || codigoMarcaModelo != null) {
      map['codigo_marca_modelo'] = Variable<String>(codigoMarcaModelo);
    }
    if (!nullToAbsent || codigoCorDenatran != null) {
      map['codigo_cor_denatran'] = Variable<String>(codigoCorDenatran);
    }
    if (!nullToAbsent || lotacaoMaxima != null) {
      map['lotacao_maxima'] = Variable<int>(lotacaoMaxima);
    }
    if (!nullToAbsent || restricao != null) {
      map['restricao'] = Variable<String>(restricao);
    }
    return map;
  }

  factory NfeDetEspecificoVeiculo.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeDetEspecificoVeiculo(
      id: serializer.fromJson<int?>(json['id']),
      idNfeDetalhe: serializer.fromJson<int?>(json['idNfeDetalhe']),
      tipoOperacao: serializer.fromJson<String?>(json['tipoOperacao']),
      chassi: serializer.fromJson<String?>(json['chassi']),
      cor: serializer.fromJson<String?>(json['cor']),
      descricaoCor: serializer.fromJson<String?>(json['descricaoCor']),
      potenciaMotor: serializer.fromJson<String?>(json['potenciaMotor']),
      cilindradas: serializer.fromJson<String?>(json['cilindradas']),
      pesoLiquido: serializer.fromJson<String?>(json['pesoLiquido']),
      pesoBruto: serializer.fromJson<String?>(json['pesoBruto']),
      numeroSerie: serializer.fromJson<String?>(json['numeroSerie']),
      tipoCombustivel: serializer.fromJson<String?>(json['tipoCombustivel']),
      numeroMotor: serializer.fromJson<String?>(json['numeroMotor']),
      capacidadeMaximaTracao: serializer.fromJson<String?>(
        json['capacidadeMaximaTracao'],
      ),
      distanciaEixos: serializer.fromJson<String?>(json['distanciaEixos']),
      anoModelo: serializer.fromJson<String?>(json['anoModelo']),
      anoFabricacao: serializer.fromJson<String?>(json['anoFabricacao']),
      tipoPintura: serializer.fromJson<String?>(json['tipoPintura']),
      tipoVeiculo: serializer.fromJson<String?>(json['tipoVeiculo']),
      especieVeiculo: serializer.fromJson<String?>(json['especieVeiculo']),
      condicaoVin: serializer.fromJson<String?>(json['condicaoVin']),
      condicaoVeiculo: serializer.fromJson<String?>(json['condicaoVeiculo']),
      codigoMarcaModelo: serializer.fromJson<String?>(
        json['codigoMarcaModelo'],
      ),
      codigoCorDenatran: serializer.fromJson<String?>(
        json['codigoCorDenatran'],
      ),
      lotacaoMaxima: serializer.fromJson<int?>(json['lotacaoMaxima']),
      restricao: serializer.fromJson<String?>(json['restricao']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeDetalhe': serializer.toJson<int?>(idNfeDetalhe),
      'tipoOperacao': serializer.toJson<String?>(tipoOperacao),
      'chassi': serializer.toJson<String?>(chassi),
      'cor': serializer.toJson<String?>(cor),
      'descricaoCor': serializer.toJson<String?>(descricaoCor),
      'potenciaMotor': serializer.toJson<String?>(potenciaMotor),
      'cilindradas': serializer.toJson<String?>(cilindradas),
      'pesoLiquido': serializer.toJson<String?>(pesoLiquido),
      'pesoBruto': serializer.toJson<String?>(pesoBruto),
      'numeroSerie': serializer.toJson<String?>(numeroSerie),
      'tipoCombustivel': serializer.toJson<String?>(tipoCombustivel),
      'numeroMotor': serializer.toJson<String?>(numeroMotor),
      'capacidadeMaximaTracao': serializer.toJson<String?>(
        capacidadeMaximaTracao,
      ),
      'distanciaEixos': serializer.toJson<String?>(distanciaEixos),
      'anoModelo': serializer.toJson<String?>(anoModelo),
      'anoFabricacao': serializer.toJson<String?>(anoFabricacao),
      'tipoPintura': serializer.toJson<String?>(tipoPintura),
      'tipoVeiculo': serializer.toJson<String?>(tipoVeiculo),
      'especieVeiculo': serializer.toJson<String?>(especieVeiculo),
      'condicaoVin': serializer.toJson<String?>(condicaoVin),
      'condicaoVeiculo': serializer.toJson<String?>(condicaoVeiculo),
      'codigoMarcaModelo': serializer.toJson<String?>(codigoMarcaModelo),
      'codigoCorDenatran': serializer.toJson<String?>(codigoCorDenatran),
      'lotacaoMaxima': serializer.toJson<int?>(lotacaoMaxima),
      'restricao': serializer.toJson<String?>(restricao),
    };
  }

  NfeDetEspecificoVeiculo copyWith({
    Value<int?> id = const Value.absent(),
    Value<int?> idNfeDetalhe = const Value.absent(),
    Value<String?> tipoOperacao = const Value.absent(),
    Value<String?> chassi = const Value.absent(),
    Value<String?> cor = const Value.absent(),
    Value<String?> descricaoCor = const Value.absent(),
    Value<String?> potenciaMotor = const Value.absent(),
    Value<String?> cilindradas = const Value.absent(),
    Value<String?> pesoLiquido = const Value.absent(),
    Value<String?> pesoBruto = const Value.absent(),
    Value<String?> numeroSerie = const Value.absent(),
    Value<String?> tipoCombustivel = const Value.absent(),
    Value<String?> numeroMotor = const Value.absent(),
    Value<String?> capacidadeMaximaTracao = const Value.absent(),
    Value<String?> distanciaEixos = const Value.absent(),
    Value<String?> anoModelo = const Value.absent(),
    Value<String?> anoFabricacao = const Value.absent(),
    Value<String?> tipoPintura = const Value.absent(),
    Value<String?> tipoVeiculo = const Value.absent(),
    Value<String?> especieVeiculo = const Value.absent(),
    Value<String?> condicaoVin = const Value.absent(),
    Value<String?> condicaoVeiculo = const Value.absent(),
    Value<String?> codigoMarcaModelo = const Value.absent(),
    Value<String?> codigoCorDenatran = const Value.absent(),
    Value<int?> lotacaoMaxima = const Value.absent(),
    Value<String?> restricao = const Value.absent(),
  }) => NfeDetEspecificoVeiculo(
    id: id.present ? id.value : this.id,
    idNfeDetalhe: idNfeDetalhe.present ? idNfeDetalhe.value : this.idNfeDetalhe,
    tipoOperacao: tipoOperacao.present ? tipoOperacao.value : this.tipoOperacao,
    chassi: chassi.present ? chassi.value : this.chassi,
    cor: cor.present ? cor.value : this.cor,
    descricaoCor: descricaoCor.present ? descricaoCor.value : this.descricaoCor,
    potenciaMotor:
        potenciaMotor.present ? potenciaMotor.value : this.potenciaMotor,
    cilindradas: cilindradas.present ? cilindradas.value : this.cilindradas,
    pesoLiquido: pesoLiquido.present ? pesoLiquido.value : this.pesoLiquido,
    pesoBruto: pesoBruto.present ? pesoBruto.value : this.pesoBruto,
    numeroSerie: numeroSerie.present ? numeroSerie.value : this.numeroSerie,
    tipoCombustivel:
        tipoCombustivel.present ? tipoCombustivel.value : this.tipoCombustivel,
    numeroMotor: numeroMotor.present ? numeroMotor.value : this.numeroMotor,
    capacidadeMaximaTracao:
        capacidadeMaximaTracao.present
            ? capacidadeMaximaTracao.value
            : this.capacidadeMaximaTracao,
    distanciaEixos:
        distanciaEixos.present ? distanciaEixos.value : this.distanciaEixos,
    anoModelo: anoModelo.present ? anoModelo.value : this.anoModelo,
    anoFabricacao:
        anoFabricacao.present ? anoFabricacao.value : this.anoFabricacao,
    tipoPintura: tipoPintura.present ? tipoPintura.value : this.tipoPintura,
    tipoVeiculo: tipoVeiculo.present ? tipoVeiculo.value : this.tipoVeiculo,
    especieVeiculo:
        especieVeiculo.present ? especieVeiculo.value : this.especieVeiculo,
    condicaoVin: condicaoVin.present ? condicaoVin.value : this.condicaoVin,
    condicaoVeiculo:
        condicaoVeiculo.present ? condicaoVeiculo.value : this.condicaoVeiculo,
    codigoMarcaModelo:
        codigoMarcaModelo.present
            ? codigoMarcaModelo.value
            : this.codigoMarcaModelo,
    codigoCorDenatran:
        codigoCorDenatran.present
            ? codigoCorDenatran.value
            : this.codigoCorDenatran,
    lotacaoMaxima:
        lotacaoMaxima.present ? lotacaoMaxima.value : this.lotacaoMaxima,
    restricao: restricao.present ? restricao.value : this.restricao,
  );
  NfeDetEspecificoVeiculo copyWithCompanion(
    NfeDetEspecificoVeiculosCompanion data,
  ) {
    return NfeDetEspecificoVeiculo(
      id: data.id.present ? data.id.value : this.id,
      idNfeDetalhe:
          data.idNfeDetalhe.present
              ? data.idNfeDetalhe.value
              : this.idNfeDetalhe,
      tipoOperacao:
          data.tipoOperacao.present
              ? data.tipoOperacao.value
              : this.tipoOperacao,
      chassi: data.chassi.present ? data.chassi.value : this.chassi,
      cor: data.cor.present ? data.cor.value : this.cor,
      descricaoCor:
          data.descricaoCor.present
              ? data.descricaoCor.value
              : this.descricaoCor,
      potenciaMotor:
          data.potenciaMotor.present
              ? data.potenciaMotor.value
              : this.potenciaMotor,
      cilindradas:
          data.cilindradas.present ? data.cilindradas.value : this.cilindradas,
      pesoLiquido:
          data.pesoLiquido.present ? data.pesoLiquido.value : this.pesoLiquido,
      pesoBruto: data.pesoBruto.present ? data.pesoBruto.value : this.pesoBruto,
      numeroSerie:
          data.numeroSerie.present ? data.numeroSerie.value : this.numeroSerie,
      tipoCombustivel:
          data.tipoCombustivel.present
              ? data.tipoCombustivel.value
              : this.tipoCombustivel,
      numeroMotor:
          data.numeroMotor.present ? data.numeroMotor.value : this.numeroMotor,
      capacidadeMaximaTracao:
          data.capacidadeMaximaTracao.present
              ? data.capacidadeMaximaTracao.value
              : this.capacidadeMaximaTracao,
      distanciaEixos:
          data.distanciaEixos.present
              ? data.distanciaEixos.value
              : this.distanciaEixos,
      anoModelo: data.anoModelo.present ? data.anoModelo.value : this.anoModelo,
      anoFabricacao:
          data.anoFabricacao.present
              ? data.anoFabricacao.value
              : this.anoFabricacao,
      tipoPintura:
          data.tipoPintura.present ? data.tipoPintura.value : this.tipoPintura,
      tipoVeiculo:
          data.tipoVeiculo.present ? data.tipoVeiculo.value : this.tipoVeiculo,
      especieVeiculo:
          data.especieVeiculo.present
              ? data.especieVeiculo.value
              : this.especieVeiculo,
      condicaoVin:
          data.condicaoVin.present ? data.condicaoVin.value : this.condicaoVin,
      condicaoVeiculo:
          data.condicaoVeiculo.present
              ? data.condicaoVeiculo.value
              : this.condicaoVeiculo,
      codigoMarcaModelo:
          data.codigoMarcaModelo.present
              ? data.codigoMarcaModelo.value
              : this.codigoMarcaModelo,
      codigoCorDenatran:
          data.codigoCorDenatran.present
              ? data.codigoCorDenatran.value
              : this.codigoCorDenatran,
      lotacaoMaxima:
          data.lotacaoMaxima.present
              ? data.lotacaoMaxima.value
              : this.lotacaoMaxima,
      restricao: data.restricao.present ? data.restricao.value : this.restricao,
    );
  }

  @override
  String toString() {
    return (StringBuffer('NfeDetEspecificoVeiculo(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('tipoOperacao: $tipoOperacao, ')
          ..write('chassi: $chassi, ')
          ..write('cor: $cor, ')
          ..write('descricaoCor: $descricaoCor, ')
          ..write('potenciaMotor: $potenciaMotor, ')
          ..write('cilindradas: $cilindradas, ')
          ..write('pesoLiquido: $pesoLiquido, ')
          ..write('pesoBruto: $pesoBruto, ')
          ..write('numeroSerie: $numeroSerie, ')
          ..write('tipoCombustivel: $tipoCombustivel, ')
          ..write('numeroMotor: $numeroMotor, ')
          ..write('capacidadeMaximaTracao: $capacidadeMaximaTracao, ')
          ..write('distanciaEixos: $distanciaEixos, ')
          ..write('anoModelo: $anoModelo, ')
          ..write('anoFabricacao: $anoFabricacao, ')
          ..write('tipoPintura: $tipoPintura, ')
          ..write('tipoVeiculo: $tipoVeiculo, ')
          ..write('especieVeiculo: $especieVeiculo, ')
          ..write('condicaoVin: $condicaoVin, ')
          ..write('condicaoVeiculo: $condicaoVeiculo, ')
          ..write('codigoMarcaModelo: $codigoMarcaModelo, ')
          ..write('codigoCorDenatran: $codigoCorDenatran, ')
          ..write('lotacaoMaxima: $lotacaoMaxima, ')
          ..write('restricao: $restricao')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hashAll([
    id,
    idNfeDetalhe,
    tipoOperacao,
    chassi,
    cor,
    descricaoCor,
    potenciaMotor,
    cilindradas,
    pesoLiquido,
    pesoBruto,
    numeroSerie,
    tipoCombustivel,
    numeroMotor,
    capacidadeMaximaTracao,
    distanciaEixos,
    anoModelo,
    anoFabricacao,
    tipoPintura,
    tipoVeiculo,
    especieVeiculo,
    condicaoVin,
    condicaoVeiculo,
    codigoMarcaModelo,
    codigoCorDenatran,
    lotacaoMaxima,
    restricao,
  ]);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeDetEspecificoVeiculo &&
          other.id == this.id &&
          other.idNfeDetalhe == this.idNfeDetalhe &&
          other.tipoOperacao == this.tipoOperacao &&
          other.chassi == this.chassi &&
          other.cor == this.cor &&
          other.descricaoCor == this.descricaoCor &&
          other.potenciaMotor == this.potenciaMotor &&
          other.cilindradas == this.cilindradas &&
          other.pesoLiquido == this.pesoLiquido &&
          other.pesoBruto == this.pesoBruto &&
          other.numeroSerie == this.numeroSerie &&
          other.tipoCombustivel == this.tipoCombustivel &&
          other.numeroMotor == this.numeroMotor &&
          other.capacidadeMaximaTracao == this.capacidadeMaximaTracao &&
          other.distanciaEixos == this.distanciaEixos &&
          other.anoModelo == this.anoModelo &&
          other.anoFabricacao == this.anoFabricacao &&
          other.tipoPintura == this.tipoPintura &&
          other.tipoVeiculo == this.tipoVeiculo &&
          other.especieVeiculo == this.especieVeiculo &&
          other.condicaoVin == this.condicaoVin &&
          other.condicaoVeiculo == this.condicaoVeiculo &&
          other.codigoMarcaModelo == this.codigoMarcaModelo &&
          other.codigoCorDenatran == this.codigoCorDenatran &&
          other.lotacaoMaxima == this.lotacaoMaxima &&
          other.restricao == this.restricao);
}

class NfeDetEspecificoVeiculosCompanion
    extends UpdateCompanion<NfeDetEspecificoVeiculo> {
  final Value<int?> id;
  final Value<int?> idNfeDetalhe;
  final Value<String?> tipoOperacao;
  final Value<String?> chassi;
  final Value<String?> cor;
  final Value<String?> descricaoCor;
  final Value<String?> potenciaMotor;
  final Value<String?> cilindradas;
  final Value<String?> pesoLiquido;
  final Value<String?> pesoBruto;
  final Value<String?> numeroSerie;
  final Value<String?> tipoCombustivel;
  final Value<String?> numeroMotor;
  final Value<String?> capacidadeMaximaTracao;
  final Value<String?> distanciaEixos;
  final Value<String?> anoModelo;
  final Value<String?> anoFabricacao;
  final Value<String?> tipoPintura;
  final Value<String?> tipoVeiculo;
  final Value<String?> especieVeiculo;
  final Value<String?> condicaoVin;
  final Value<String?> condicaoVeiculo;
  final Value<String?> codigoMarcaModelo;
  final Value<String?> codigoCorDenatran;
  final Value<int?> lotacaoMaxima;
  final Value<String?> restricao;
  const NfeDetEspecificoVeiculosCompanion({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.tipoOperacao = const Value.absent(),
    this.chassi = const Value.absent(),
    this.cor = const Value.absent(),
    this.descricaoCor = const Value.absent(),
    this.potenciaMotor = const Value.absent(),
    this.cilindradas = const Value.absent(),
    this.pesoLiquido = const Value.absent(),
    this.pesoBruto = const Value.absent(),
    this.numeroSerie = const Value.absent(),
    this.tipoCombustivel = const Value.absent(),
    this.numeroMotor = const Value.absent(),
    this.capacidadeMaximaTracao = const Value.absent(),
    this.distanciaEixos = const Value.absent(),
    this.anoModelo = const Value.absent(),
    this.anoFabricacao = const Value.absent(),
    this.tipoPintura = const Value.absent(),
    this.tipoVeiculo = const Value.absent(),
    this.especieVeiculo = const Value.absent(),
    this.condicaoVin = const Value.absent(),
    this.condicaoVeiculo = const Value.absent(),
    this.codigoMarcaModelo = const Value.absent(),
    this.codigoCorDenatran = const Value.absent(),
    this.lotacaoMaxima = const Value.absent(),
    this.restricao = const Value.absent(),
  });
  NfeDetEspecificoVeiculosCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.tipoOperacao = const Value.absent(),
    this.chassi = const Value.absent(),
    this.cor = const Value.absent(),
    this.descricaoCor = const Value.absent(),
    this.potenciaMotor = const Value.absent(),
    this.cilindradas = const Value.absent(),
    this.pesoLiquido = const Value.absent(),
    this.pesoBruto = const Value.absent(),
    this.numeroSerie = const Value.absent(),
    this.tipoCombustivel = const Value.absent(),
    this.numeroMotor = const Value.absent(),
    this.capacidadeMaximaTracao = const Value.absent(),
    this.distanciaEixos = const Value.absent(),
    this.anoModelo = const Value.absent(),
    this.anoFabricacao = const Value.absent(),
    this.tipoPintura = const Value.absent(),
    this.tipoVeiculo = const Value.absent(),
    this.especieVeiculo = const Value.absent(),
    this.condicaoVin = const Value.absent(),
    this.condicaoVeiculo = const Value.absent(),
    this.codigoMarcaModelo = const Value.absent(),
    this.codigoCorDenatran = const Value.absent(),
    this.lotacaoMaxima = const Value.absent(),
    this.restricao = const Value.absent(),
  });
  static Insertable<NfeDetEspecificoVeiculo> custom({
    Expression<int>? id,
    Expression<int>? idNfeDetalhe,
    Expression<String>? tipoOperacao,
    Expression<String>? chassi,
    Expression<String>? cor,
    Expression<String>? descricaoCor,
    Expression<String>? potenciaMotor,
    Expression<String>? cilindradas,
    Expression<String>? pesoLiquido,
    Expression<String>? pesoBruto,
    Expression<String>? numeroSerie,
    Expression<String>? tipoCombustivel,
    Expression<String>? numeroMotor,
    Expression<String>? capacidadeMaximaTracao,
    Expression<String>? distanciaEixos,
    Expression<String>? anoModelo,
    Expression<String>? anoFabricacao,
    Expression<String>? tipoPintura,
    Expression<String>? tipoVeiculo,
    Expression<String>? especieVeiculo,
    Expression<String>? condicaoVin,
    Expression<String>? condicaoVeiculo,
    Expression<String>? codigoMarcaModelo,
    Expression<String>? codigoCorDenatran,
    Expression<int>? lotacaoMaxima,
    Expression<String>? restricao,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (idNfeDetalhe != null) 'id_nfe_detalhe': idNfeDetalhe,
      if (tipoOperacao != null) 'tipo_operacao': tipoOperacao,
      if (chassi != null) 'chassi': chassi,
      if (cor != null) 'cor': cor,
      if (descricaoCor != null) 'descricao_cor': descricaoCor,
      if (potenciaMotor != null) 'potencia_motor': potenciaMotor,
      if (cilindradas != null) 'cilindradas': cilindradas,
      if (pesoLiquido != null) 'peso_liquido': pesoLiquido,
      if (pesoBruto != null) 'peso_bruto': pesoBruto,
      if (numeroSerie != null) 'numero_serie': numeroSerie,
      if (tipoCombustivel != null) 'tipo_combustivel': tipoCombustivel,
      if (numeroMotor != null) 'numero_motor': numeroMotor,
      if (capacidadeMaximaTracao != null)
        'capacidade_maxima_tracao': capacidadeMaximaTracao,
      if (distanciaEixos != null) 'distancia_eixos': distanciaEixos,
      if (anoModelo != null) 'ano_modelo': anoModelo,
      if (anoFabricacao != null) 'ano_fabricacao': anoFabricacao,
      if (tipoPintura != null) 'tipo_pintura': tipoPintura,
      if (tipoVeiculo != null) 'tipo_veiculo': tipoVeiculo,
      if (especieVeiculo != null) 'especie_veiculo': especieVeiculo,
      if (condicaoVin != null) 'condicao_vin': condicaoVin,
      if (condicaoVeiculo != null) 'condicao_veiculo': condicaoVeiculo,
      if (codigoMarcaModelo != null) 'codigo_marca_modelo': codigoMarcaModelo,
      if (codigoCorDenatran != null) 'codigo_cor_denatran': codigoCorDenatran,
      if (lotacaoMaxima != null) 'lotacao_maxima': lotacaoMaxima,
      if (restricao != null) 'restricao': restricao,
    });
  }

  NfeDetEspecificoVeiculosCompanion copyWith({
    Value<int?>? id,
    Value<int?>? idNfeDetalhe,
    Value<String?>? tipoOperacao,
    Value<String?>? chassi,
    Value<String?>? cor,
    Value<String?>? descricaoCor,
    Value<String?>? potenciaMotor,
    Value<String?>? cilindradas,
    Value<String?>? pesoLiquido,
    Value<String?>? pesoBruto,
    Value<String?>? numeroSerie,
    Value<String?>? tipoCombustivel,
    Value<String?>? numeroMotor,
    Value<String?>? capacidadeMaximaTracao,
    Value<String?>? distanciaEixos,
    Value<String?>? anoModelo,
    Value<String?>? anoFabricacao,
    Value<String?>? tipoPintura,
    Value<String?>? tipoVeiculo,
    Value<String?>? especieVeiculo,
    Value<String?>? condicaoVin,
    Value<String?>? condicaoVeiculo,
    Value<String?>? codigoMarcaModelo,
    Value<String?>? codigoCorDenatran,
    Value<int?>? lotacaoMaxima,
    Value<String?>? restricao,
  }) {
    return NfeDetEspecificoVeiculosCompanion(
      id: id ?? this.id,
      idNfeDetalhe: idNfeDetalhe ?? this.idNfeDetalhe,
      tipoOperacao: tipoOperacao ?? this.tipoOperacao,
      chassi: chassi ?? this.chassi,
      cor: cor ?? this.cor,
      descricaoCor: descricaoCor ?? this.descricaoCor,
      potenciaMotor: potenciaMotor ?? this.potenciaMotor,
      cilindradas: cilindradas ?? this.cilindradas,
      pesoLiquido: pesoLiquido ?? this.pesoLiquido,
      pesoBruto: pesoBruto ?? this.pesoBruto,
      numeroSerie: numeroSerie ?? this.numeroSerie,
      tipoCombustivel: tipoCombustivel ?? this.tipoCombustivel,
      numeroMotor: numeroMotor ?? this.numeroMotor,
      capacidadeMaximaTracao:
          capacidadeMaximaTracao ?? this.capacidadeMaximaTracao,
      distanciaEixos: distanciaEixos ?? this.distanciaEixos,
      anoModelo: anoModelo ?? this.anoModelo,
      anoFabricacao: anoFabricacao ?? this.anoFabricacao,
      tipoPintura: tipoPintura ?? this.tipoPintura,
      tipoVeiculo: tipoVeiculo ?? this.tipoVeiculo,
      especieVeiculo: especieVeiculo ?? this.especieVeiculo,
      condicaoVin: condicaoVin ?? this.condicaoVin,
      condicaoVeiculo: condicaoVeiculo ?? this.condicaoVeiculo,
      codigoMarcaModelo: codigoMarcaModelo ?? this.codigoMarcaModelo,
      codigoCorDenatran: codigoCorDenatran ?? this.codigoCorDenatran,
      lotacaoMaxima: lotacaoMaxima ?? this.lotacaoMaxima,
      restricao: restricao ?? this.restricao,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (idNfeDetalhe.present) {
      map['id_nfe_detalhe'] = Variable<int>(idNfeDetalhe.value);
    }
    if (tipoOperacao.present) {
      map['tipo_operacao'] = Variable<String>(tipoOperacao.value);
    }
    if (chassi.present) {
      map['chassi'] = Variable<String>(chassi.value);
    }
    if (cor.present) {
      map['cor'] = Variable<String>(cor.value);
    }
    if (descricaoCor.present) {
      map['descricao_cor'] = Variable<String>(descricaoCor.value);
    }
    if (potenciaMotor.present) {
      map['potencia_motor'] = Variable<String>(potenciaMotor.value);
    }
    if (cilindradas.present) {
      map['cilindradas'] = Variable<String>(cilindradas.value);
    }
    if (pesoLiquido.present) {
      map['peso_liquido'] = Variable<String>(pesoLiquido.value);
    }
    if (pesoBruto.present) {
      map['peso_bruto'] = Variable<String>(pesoBruto.value);
    }
    if (numeroSerie.present) {
      map['numero_serie'] = Variable<String>(numeroSerie.value);
    }
    if (tipoCombustivel.present) {
      map['tipo_combustivel'] = Variable<String>(tipoCombustivel.value);
    }
    if (numeroMotor.present) {
      map['numero_motor'] = Variable<String>(numeroMotor.value);
    }
    if (capacidadeMaximaTracao.present) {
      map['capacidade_maxima_tracao'] = Variable<String>(
        capacidadeMaximaTracao.value,
      );
    }
    if (distanciaEixos.present) {
      map['distancia_eixos'] = Variable<String>(distanciaEixos.value);
    }
    if (anoModelo.present) {
      map['ano_modelo'] = Variable<String>(anoModelo.value);
    }
    if (anoFabricacao.present) {
      map['ano_fabricacao'] = Variable<String>(anoFabricacao.value);
    }
    if (tipoPintura.present) {
      map['tipo_pintura'] = Variable<String>(tipoPintura.value);
    }
    if (tipoVeiculo.present) {
      map['tipo_veiculo'] = Variable<String>(tipoVeiculo.value);
    }
    if (especieVeiculo.present) {
      map['especie_veiculo'] = Variable<String>(especieVeiculo.value);
    }
    if (condicaoVin.present) {
      map['condicao_vin'] = Variable<String>(condicaoVin.value);
    }
    if (condicaoVeiculo.present) {
      map['condicao_veiculo'] = Variable<String>(condicaoVeiculo.value);
    }
    if (codigoMarcaModelo.present) {
      map['codigo_marca_modelo'] = Variable<String>(codigoMarcaModelo.value);
    }
    if (codigoCorDenatran.present) {
      map['codigo_cor_denatran'] = Variable<String>(codigoCorDenatran.value);
    }
    if (lotacaoMaxima.present) {
      map['lotacao_maxima'] = Variable<int>(lotacaoMaxima.value);
    }
    if (restricao.present) {
      map['restricao'] = Variable<String>(restricao.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeDetEspecificoVeiculosCompanion(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('tipoOperacao: $tipoOperacao, ')
          ..write('chassi: $chassi, ')
          ..write('cor: $cor, ')
          ..write('descricaoCor: $descricaoCor, ')
          ..write('potenciaMotor: $potenciaMotor, ')
          ..write('cilindradas: $cilindradas, ')
          ..write('pesoLiquido: $pesoLiquido, ')
          ..write('pesoBruto: $pesoBruto, ')
          ..write('numeroSerie: $numeroSerie, ')
          ..write('tipoCombustivel: $tipoCombustivel, ')
          ..write('numeroMotor: $numeroMotor, ')
          ..write('capacidadeMaximaTracao: $capacidadeMaximaTracao, ')
          ..write('distanciaEixos: $distanciaEixos, ')
          ..write('anoModelo: $anoModelo, ')
          ..write('anoFabricacao: $anoFabricacao, ')
          ..write('tipoPintura: $tipoPintura, ')
          ..write('tipoVeiculo: $tipoVeiculo, ')
          ..write('especieVeiculo: $especieVeiculo, ')
          ..write('condicaoVin: $condicaoVin, ')
          ..write('condicaoVeiculo: $condicaoVeiculo, ')
          ..write('codigoMarcaModelo: $codigoMarcaModelo, ')
          ..write('codigoCorDenatran: $codigoCorDenatran, ')
          ..write('lotacaoMaxima: $lotacaoMaxima, ')
          ..write('restricao: $restricao')
          ..write(')'))
        .toString();
  }
}

class $NfeDetEspecificoMedicamentosTable extends NfeDetEspecificoMedicamentos
    with
        TableInfo<
          $NfeDetEspecificoMedicamentosTable,
          NfeDetEspecificoMedicamento
        > {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeDetEspecificoMedicamentosTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
    'id',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idNfeDetalheMeta = const VerificationMeta(
    'idNfeDetalhe',
  );
  @override
  late final GeneratedColumn<int> idNfeDetalhe = GeneratedColumn<int>(
    'id_nfe_detalhe',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _codigoAnvisaMeta = const VerificationMeta(
    'codigoAnvisa',
  );
  @override
  late final GeneratedColumn<String> codigoAnvisa = GeneratedColumn<String>(
    'codigo_anvisa',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 13,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _motivoIsencaoMeta = const VerificationMeta(
    'motivoIsencao',
  );
  @override
  late final GeneratedColumn<String> motivoIsencao = GeneratedColumn<String>(
    'motivo_isencao',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 250,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _precoMaximoConsumidorMeta =
      const VerificationMeta('precoMaximoConsumidor');
  @override
  late final GeneratedColumn<double> precoMaximoConsumidor =
      GeneratedColumn<double>(
        'preco_maximo_consumidor',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    idNfeDetalhe,
    codigoAnvisa,
    motivoIsencao,
    precoMaximoConsumidor,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'nfe_det_especifico_medicamento';
  @override
  VerificationContext validateIntegrity(
    Insertable<NfeDetEspecificoMedicamento> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('id_nfe_detalhe')) {
      context.handle(
        _idNfeDetalheMeta,
        idNfeDetalhe.isAcceptableOrUnknown(
          data['id_nfe_detalhe']!,
          _idNfeDetalheMeta,
        ),
      );
    }
    if (data.containsKey('codigo_anvisa')) {
      context.handle(
        _codigoAnvisaMeta,
        codigoAnvisa.isAcceptableOrUnknown(
          data['codigo_anvisa']!,
          _codigoAnvisaMeta,
        ),
      );
    }
    if (data.containsKey('motivo_isencao')) {
      context.handle(
        _motivoIsencaoMeta,
        motivoIsencao.isAcceptableOrUnknown(
          data['motivo_isencao']!,
          _motivoIsencaoMeta,
        ),
      );
    }
    if (data.containsKey('preco_maximo_consumidor')) {
      context.handle(
        _precoMaximoConsumidorMeta,
        precoMaximoConsumidor.isAcceptableOrUnknown(
          data['preco_maximo_consumidor']!,
          _precoMaximoConsumidorMeta,
        ),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeDetEspecificoMedicamento map(
    Map<String, dynamic> data, {
    String? tablePrefix,
  }) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return NfeDetEspecificoMedicamento(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id'],
      ),
      idNfeDetalhe: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_nfe_detalhe'],
      ),
      codigoAnvisa: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}codigo_anvisa'],
      ),
      motivoIsencao: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}motivo_isencao'],
      ),
      precoMaximoConsumidor: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}preco_maximo_consumidor'],
      ),
    );
  }

  @override
  $NfeDetEspecificoMedicamentosTable createAlias(String alias) {
    return $NfeDetEspecificoMedicamentosTable(attachedDatabase, alias);
  }
}

class NfeDetEspecificoMedicamento extends DataClass
    implements Insertable<NfeDetEspecificoMedicamento> {
  final int? id;
  final int? idNfeDetalhe;
  final String? codigoAnvisa;
  final String? motivoIsencao;
  final double? precoMaximoConsumidor;
  const NfeDetEspecificoMedicamento({
    this.id,
    this.idNfeDetalhe,
    this.codigoAnvisa,
    this.motivoIsencao,
    this.precoMaximoConsumidor,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeDetalhe != null) {
      map['id_nfe_detalhe'] = Variable<int>(idNfeDetalhe);
    }
    if (!nullToAbsent || codigoAnvisa != null) {
      map['codigo_anvisa'] = Variable<String>(codigoAnvisa);
    }
    if (!nullToAbsent || motivoIsencao != null) {
      map['motivo_isencao'] = Variable<String>(motivoIsencao);
    }
    if (!nullToAbsent || precoMaximoConsumidor != null) {
      map['preco_maximo_consumidor'] = Variable<double>(precoMaximoConsumidor);
    }
    return map;
  }

  factory NfeDetEspecificoMedicamento.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeDetEspecificoMedicamento(
      id: serializer.fromJson<int?>(json['id']),
      idNfeDetalhe: serializer.fromJson<int?>(json['idNfeDetalhe']),
      codigoAnvisa: serializer.fromJson<String?>(json['codigoAnvisa']),
      motivoIsencao: serializer.fromJson<String?>(json['motivoIsencao']),
      precoMaximoConsumidor: serializer.fromJson<double?>(
        json['precoMaximoConsumidor'],
      ),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeDetalhe': serializer.toJson<int?>(idNfeDetalhe),
      'codigoAnvisa': serializer.toJson<String?>(codigoAnvisa),
      'motivoIsencao': serializer.toJson<String?>(motivoIsencao),
      'precoMaximoConsumidor': serializer.toJson<double?>(
        precoMaximoConsumidor,
      ),
    };
  }

  NfeDetEspecificoMedicamento copyWith({
    Value<int?> id = const Value.absent(),
    Value<int?> idNfeDetalhe = const Value.absent(),
    Value<String?> codigoAnvisa = const Value.absent(),
    Value<String?> motivoIsencao = const Value.absent(),
    Value<double?> precoMaximoConsumidor = const Value.absent(),
  }) => NfeDetEspecificoMedicamento(
    id: id.present ? id.value : this.id,
    idNfeDetalhe: idNfeDetalhe.present ? idNfeDetalhe.value : this.idNfeDetalhe,
    codigoAnvisa: codigoAnvisa.present ? codigoAnvisa.value : this.codigoAnvisa,
    motivoIsencao:
        motivoIsencao.present ? motivoIsencao.value : this.motivoIsencao,
    precoMaximoConsumidor:
        precoMaximoConsumidor.present
            ? precoMaximoConsumidor.value
            : this.precoMaximoConsumidor,
  );
  NfeDetEspecificoMedicamento copyWithCompanion(
    NfeDetEspecificoMedicamentosCompanion data,
  ) {
    return NfeDetEspecificoMedicamento(
      id: data.id.present ? data.id.value : this.id,
      idNfeDetalhe:
          data.idNfeDetalhe.present
              ? data.idNfeDetalhe.value
              : this.idNfeDetalhe,
      codigoAnvisa:
          data.codigoAnvisa.present
              ? data.codigoAnvisa.value
              : this.codigoAnvisa,
      motivoIsencao:
          data.motivoIsencao.present
              ? data.motivoIsencao.value
              : this.motivoIsencao,
      precoMaximoConsumidor:
          data.precoMaximoConsumidor.present
              ? data.precoMaximoConsumidor.value
              : this.precoMaximoConsumidor,
    );
  }

  @override
  String toString() {
    return (StringBuffer('NfeDetEspecificoMedicamento(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('codigoAnvisa: $codigoAnvisa, ')
          ..write('motivoIsencao: $motivoIsencao, ')
          ..write('precoMaximoConsumidor: $precoMaximoConsumidor')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    idNfeDetalhe,
    codigoAnvisa,
    motivoIsencao,
    precoMaximoConsumidor,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeDetEspecificoMedicamento &&
          other.id == this.id &&
          other.idNfeDetalhe == this.idNfeDetalhe &&
          other.codigoAnvisa == this.codigoAnvisa &&
          other.motivoIsencao == this.motivoIsencao &&
          other.precoMaximoConsumidor == this.precoMaximoConsumidor);
}

class NfeDetEspecificoMedicamentosCompanion
    extends UpdateCompanion<NfeDetEspecificoMedicamento> {
  final Value<int?> id;
  final Value<int?> idNfeDetalhe;
  final Value<String?> codigoAnvisa;
  final Value<String?> motivoIsencao;
  final Value<double?> precoMaximoConsumidor;
  const NfeDetEspecificoMedicamentosCompanion({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.codigoAnvisa = const Value.absent(),
    this.motivoIsencao = const Value.absent(),
    this.precoMaximoConsumidor = const Value.absent(),
  });
  NfeDetEspecificoMedicamentosCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.codigoAnvisa = const Value.absent(),
    this.motivoIsencao = const Value.absent(),
    this.precoMaximoConsumidor = const Value.absent(),
  });
  static Insertable<NfeDetEspecificoMedicamento> custom({
    Expression<int>? id,
    Expression<int>? idNfeDetalhe,
    Expression<String>? codigoAnvisa,
    Expression<String>? motivoIsencao,
    Expression<double>? precoMaximoConsumidor,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (idNfeDetalhe != null) 'id_nfe_detalhe': idNfeDetalhe,
      if (codigoAnvisa != null) 'codigo_anvisa': codigoAnvisa,
      if (motivoIsencao != null) 'motivo_isencao': motivoIsencao,
      if (precoMaximoConsumidor != null)
        'preco_maximo_consumidor': precoMaximoConsumidor,
    });
  }

  NfeDetEspecificoMedicamentosCompanion copyWith({
    Value<int?>? id,
    Value<int?>? idNfeDetalhe,
    Value<String?>? codigoAnvisa,
    Value<String?>? motivoIsencao,
    Value<double?>? precoMaximoConsumidor,
  }) {
    return NfeDetEspecificoMedicamentosCompanion(
      id: id ?? this.id,
      idNfeDetalhe: idNfeDetalhe ?? this.idNfeDetalhe,
      codigoAnvisa: codigoAnvisa ?? this.codigoAnvisa,
      motivoIsencao: motivoIsencao ?? this.motivoIsencao,
      precoMaximoConsumidor:
          precoMaximoConsumidor ?? this.precoMaximoConsumidor,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (idNfeDetalhe.present) {
      map['id_nfe_detalhe'] = Variable<int>(idNfeDetalhe.value);
    }
    if (codigoAnvisa.present) {
      map['codigo_anvisa'] = Variable<String>(codigoAnvisa.value);
    }
    if (motivoIsencao.present) {
      map['motivo_isencao'] = Variable<String>(motivoIsencao.value);
    }
    if (precoMaximoConsumidor.present) {
      map['preco_maximo_consumidor'] = Variable<double>(
        precoMaximoConsumidor.value,
      );
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeDetEspecificoMedicamentosCompanion(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('codigoAnvisa: $codigoAnvisa, ')
          ..write('motivoIsencao: $motivoIsencao, ')
          ..write('precoMaximoConsumidor: $precoMaximoConsumidor')
          ..write(')'))
        .toString();
  }
}

class $NfeDetEspecificoArmamentosTable extends NfeDetEspecificoArmamentos
    with
        TableInfo<$NfeDetEspecificoArmamentosTable, NfeDetEspecificoArmamento> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeDetEspecificoArmamentosTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
    'id',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idNfeDetalheMeta = const VerificationMeta(
    'idNfeDetalhe',
  );
  @override
  late final GeneratedColumn<int> idNfeDetalhe = GeneratedColumn<int>(
    'id_nfe_detalhe',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _tipoArmaMeta = const VerificationMeta(
    'tipoArma',
  );
  @override
  late final GeneratedColumn<String> tipoArma = GeneratedColumn<String>(
    'tipo_arma',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 1,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _numeroSerieArmaMeta = const VerificationMeta(
    'numeroSerieArma',
  );
  @override
  late final GeneratedColumn<String> numeroSerieArma = GeneratedColumn<String>(
    'numero_serie_arma',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 15,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _numeroSerieCanoMeta = const VerificationMeta(
    'numeroSerieCano',
  );
  @override
  late final GeneratedColumn<String> numeroSerieCano = GeneratedColumn<String>(
    'numero_serie_cano',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 15,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _descricaoMeta = const VerificationMeta(
    'descricao',
  );
  @override
  late final GeneratedColumn<String> descricao = GeneratedColumn<String>(
    'descricao',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 250,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    idNfeDetalhe,
    tipoArma,
    numeroSerieArma,
    numeroSerieCano,
    descricao,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'nfe_det_especifico_armamento';
  @override
  VerificationContext validateIntegrity(
    Insertable<NfeDetEspecificoArmamento> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('id_nfe_detalhe')) {
      context.handle(
        _idNfeDetalheMeta,
        idNfeDetalhe.isAcceptableOrUnknown(
          data['id_nfe_detalhe']!,
          _idNfeDetalheMeta,
        ),
      );
    }
    if (data.containsKey('tipo_arma')) {
      context.handle(
        _tipoArmaMeta,
        tipoArma.isAcceptableOrUnknown(data['tipo_arma']!, _tipoArmaMeta),
      );
    }
    if (data.containsKey('numero_serie_arma')) {
      context.handle(
        _numeroSerieArmaMeta,
        numeroSerieArma.isAcceptableOrUnknown(
          data['numero_serie_arma']!,
          _numeroSerieArmaMeta,
        ),
      );
    }
    if (data.containsKey('numero_serie_cano')) {
      context.handle(
        _numeroSerieCanoMeta,
        numeroSerieCano.isAcceptableOrUnknown(
          data['numero_serie_cano']!,
          _numeroSerieCanoMeta,
        ),
      );
    }
    if (data.containsKey('descricao')) {
      context.handle(
        _descricaoMeta,
        descricao.isAcceptableOrUnknown(data['descricao']!, _descricaoMeta),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeDetEspecificoArmamento map(
    Map<String, dynamic> data, {
    String? tablePrefix,
  }) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return NfeDetEspecificoArmamento(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id'],
      ),
      idNfeDetalhe: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_nfe_detalhe'],
      ),
      tipoArma: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}tipo_arma'],
      ),
      numeroSerieArma: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}numero_serie_arma'],
      ),
      numeroSerieCano: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}numero_serie_cano'],
      ),
      descricao: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}descricao'],
      ),
    );
  }

  @override
  $NfeDetEspecificoArmamentosTable createAlias(String alias) {
    return $NfeDetEspecificoArmamentosTable(attachedDatabase, alias);
  }
}

class NfeDetEspecificoArmamento extends DataClass
    implements Insertable<NfeDetEspecificoArmamento> {
  final int? id;
  final int? idNfeDetalhe;
  final String? tipoArma;
  final String? numeroSerieArma;
  final String? numeroSerieCano;
  final String? descricao;
  const NfeDetEspecificoArmamento({
    this.id,
    this.idNfeDetalhe,
    this.tipoArma,
    this.numeroSerieArma,
    this.numeroSerieCano,
    this.descricao,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeDetalhe != null) {
      map['id_nfe_detalhe'] = Variable<int>(idNfeDetalhe);
    }
    if (!nullToAbsent || tipoArma != null) {
      map['tipo_arma'] = Variable<String>(tipoArma);
    }
    if (!nullToAbsent || numeroSerieArma != null) {
      map['numero_serie_arma'] = Variable<String>(numeroSerieArma);
    }
    if (!nullToAbsent || numeroSerieCano != null) {
      map['numero_serie_cano'] = Variable<String>(numeroSerieCano);
    }
    if (!nullToAbsent || descricao != null) {
      map['descricao'] = Variable<String>(descricao);
    }
    return map;
  }

  factory NfeDetEspecificoArmamento.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeDetEspecificoArmamento(
      id: serializer.fromJson<int?>(json['id']),
      idNfeDetalhe: serializer.fromJson<int?>(json['idNfeDetalhe']),
      tipoArma: serializer.fromJson<String?>(json['tipoArma']),
      numeroSerieArma: serializer.fromJson<String?>(json['numeroSerieArma']),
      numeroSerieCano: serializer.fromJson<String?>(json['numeroSerieCano']),
      descricao: serializer.fromJson<String?>(json['descricao']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeDetalhe': serializer.toJson<int?>(idNfeDetalhe),
      'tipoArma': serializer.toJson<String?>(tipoArma),
      'numeroSerieArma': serializer.toJson<String?>(numeroSerieArma),
      'numeroSerieCano': serializer.toJson<String?>(numeroSerieCano),
      'descricao': serializer.toJson<String?>(descricao),
    };
  }

  NfeDetEspecificoArmamento copyWith({
    Value<int?> id = const Value.absent(),
    Value<int?> idNfeDetalhe = const Value.absent(),
    Value<String?> tipoArma = const Value.absent(),
    Value<String?> numeroSerieArma = const Value.absent(),
    Value<String?> numeroSerieCano = const Value.absent(),
    Value<String?> descricao = const Value.absent(),
  }) => NfeDetEspecificoArmamento(
    id: id.present ? id.value : this.id,
    idNfeDetalhe: idNfeDetalhe.present ? idNfeDetalhe.value : this.idNfeDetalhe,
    tipoArma: tipoArma.present ? tipoArma.value : this.tipoArma,
    numeroSerieArma:
        numeroSerieArma.present ? numeroSerieArma.value : this.numeroSerieArma,
    numeroSerieCano:
        numeroSerieCano.present ? numeroSerieCano.value : this.numeroSerieCano,
    descricao: descricao.present ? descricao.value : this.descricao,
  );
  NfeDetEspecificoArmamento copyWithCompanion(
    NfeDetEspecificoArmamentosCompanion data,
  ) {
    return NfeDetEspecificoArmamento(
      id: data.id.present ? data.id.value : this.id,
      idNfeDetalhe:
          data.idNfeDetalhe.present
              ? data.idNfeDetalhe.value
              : this.idNfeDetalhe,
      tipoArma: data.tipoArma.present ? data.tipoArma.value : this.tipoArma,
      numeroSerieArma:
          data.numeroSerieArma.present
              ? data.numeroSerieArma.value
              : this.numeroSerieArma,
      numeroSerieCano:
          data.numeroSerieCano.present
              ? data.numeroSerieCano.value
              : this.numeroSerieCano,
      descricao: data.descricao.present ? data.descricao.value : this.descricao,
    );
  }

  @override
  String toString() {
    return (StringBuffer('NfeDetEspecificoArmamento(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('tipoArma: $tipoArma, ')
          ..write('numeroSerieArma: $numeroSerieArma, ')
          ..write('numeroSerieCano: $numeroSerieCano, ')
          ..write('descricao: $descricao')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    idNfeDetalhe,
    tipoArma,
    numeroSerieArma,
    numeroSerieCano,
    descricao,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeDetEspecificoArmamento &&
          other.id == this.id &&
          other.idNfeDetalhe == this.idNfeDetalhe &&
          other.tipoArma == this.tipoArma &&
          other.numeroSerieArma == this.numeroSerieArma &&
          other.numeroSerieCano == this.numeroSerieCano &&
          other.descricao == this.descricao);
}

class NfeDetEspecificoArmamentosCompanion
    extends UpdateCompanion<NfeDetEspecificoArmamento> {
  final Value<int?> id;
  final Value<int?> idNfeDetalhe;
  final Value<String?> tipoArma;
  final Value<String?> numeroSerieArma;
  final Value<String?> numeroSerieCano;
  final Value<String?> descricao;
  const NfeDetEspecificoArmamentosCompanion({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.tipoArma = const Value.absent(),
    this.numeroSerieArma = const Value.absent(),
    this.numeroSerieCano = const Value.absent(),
    this.descricao = const Value.absent(),
  });
  NfeDetEspecificoArmamentosCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.tipoArma = const Value.absent(),
    this.numeroSerieArma = const Value.absent(),
    this.numeroSerieCano = const Value.absent(),
    this.descricao = const Value.absent(),
  });
  static Insertable<NfeDetEspecificoArmamento> custom({
    Expression<int>? id,
    Expression<int>? idNfeDetalhe,
    Expression<String>? tipoArma,
    Expression<String>? numeroSerieArma,
    Expression<String>? numeroSerieCano,
    Expression<String>? descricao,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (idNfeDetalhe != null) 'id_nfe_detalhe': idNfeDetalhe,
      if (tipoArma != null) 'tipo_arma': tipoArma,
      if (numeroSerieArma != null) 'numero_serie_arma': numeroSerieArma,
      if (numeroSerieCano != null) 'numero_serie_cano': numeroSerieCano,
      if (descricao != null) 'descricao': descricao,
    });
  }

  NfeDetEspecificoArmamentosCompanion copyWith({
    Value<int?>? id,
    Value<int?>? idNfeDetalhe,
    Value<String?>? tipoArma,
    Value<String?>? numeroSerieArma,
    Value<String?>? numeroSerieCano,
    Value<String?>? descricao,
  }) {
    return NfeDetEspecificoArmamentosCompanion(
      id: id ?? this.id,
      idNfeDetalhe: idNfeDetalhe ?? this.idNfeDetalhe,
      tipoArma: tipoArma ?? this.tipoArma,
      numeroSerieArma: numeroSerieArma ?? this.numeroSerieArma,
      numeroSerieCano: numeroSerieCano ?? this.numeroSerieCano,
      descricao: descricao ?? this.descricao,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (idNfeDetalhe.present) {
      map['id_nfe_detalhe'] = Variable<int>(idNfeDetalhe.value);
    }
    if (tipoArma.present) {
      map['tipo_arma'] = Variable<String>(tipoArma.value);
    }
    if (numeroSerieArma.present) {
      map['numero_serie_arma'] = Variable<String>(numeroSerieArma.value);
    }
    if (numeroSerieCano.present) {
      map['numero_serie_cano'] = Variable<String>(numeroSerieCano.value);
    }
    if (descricao.present) {
      map['descricao'] = Variable<String>(descricao.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeDetEspecificoArmamentosCompanion(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('tipoArma: $tipoArma, ')
          ..write('numeroSerieArma: $numeroSerieArma, ')
          ..write('numeroSerieCano: $numeroSerieCano, ')
          ..write('descricao: $descricao')
          ..write(')'))
        .toString();
  }
}

class $NfeDuplicatasTable extends NfeDuplicatas
    with TableInfo<$NfeDuplicatasTable, NfeDuplicata> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeDuplicatasTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
    'id',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idNfeFaturaMeta = const VerificationMeta(
    'idNfeFatura',
  );
  @override
  late final GeneratedColumn<int> idNfeFatura = GeneratedColumn<int>(
    'id_nfe_fatura',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _numeroMeta = const VerificationMeta('numero');
  @override
  late final GeneratedColumn<String> numero = GeneratedColumn<String>(
    'numero',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 60,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _dataVencimentoMeta = const VerificationMeta(
    'dataVencimento',
  );
  @override
  late final GeneratedColumn<DateTime> dataVencimento =
      GeneratedColumn<DateTime>(
        'data_vencimento',
        aliasedName,
        true,
        type: DriftSqlType.dateTime,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _valorMeta = const VerificationMeta('valor');
  @override
  late final GeneratedColumn<double> valor = GeneratedColumn<double>(
    'valor',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    idNfeFatura,
    numero,
    dataVencimento,
    valor,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'nfe_duplicata';
  @override
  VerificationContext validateIntegrity(
    Insertable<NfeDuplicata> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('id_nfe_fatura')) {
      context.handle(
        _idNfeFaturaMeta,
        idNfeFatura.isAcceptableOrUnknown(
          data['id_nfe_fatura']!,
          _idNfeFaturaMeta,
        ),
      );
    }
    if (data.containsKey('numero')) {
      context.handle(
        _numeroMeta,
        numero.isAcceptableOrUnknown(data['numero']!, _numeroMeta),
      );
    }
    if (data.containsKey('data_vencimento')) {
      context.handle(
        _dataVencimentoMeta,
        dataVencimento.isAcceptableOrUnknown(
          data['data_vencimento']!,
          _dataVencimentoMeta,
        ),
      );
    }
    if (data.containsKey('valor')) {
      context.handle(
        _valorMeta,
        valor.isAcceptableOrUnknown(data['valor']!, _valorMeta),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeDuplicata map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return NfeDuplicata(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id'],
      ),
      idNfeFatura: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_nfe_fatura'],
      ),
      numero: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}numero'],
      ),
      dataVencimento: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}data_vencimento'],
      ),
      valor: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor'],
      ),
    );
  }

  @override
  $NfeDuplicatasTable createAlias(String alias) {
    return $NfeDuplicatasTable(attachedDatabase, alias);
  }
}

class NfeDuplicata extends DataClass implements Insertable<NfeDuplicata> {
  final int? id;
  final int? idNfeFatura;
  final String? numero;
  final DateTime? dataVencimento;
  final double? valor;
  const NfeDuplicata({
    this.id,
    this.idNfeFatura,
    this.numero,
    this.dataVencimento,
    this.valor,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeFatura != null) {
      map['id_nfe_fatura'] = Variable<int>(idNfeFatura);
    }
    if (!nullToAbsent || numero != null) {
      map['numero'] = Variable<String>(numero);
    }
    if (!nullToAbsent || dataVencimento != null) {
      map['data_vencimento'] = Variable<DateTime>(dataVencimento);
    }
    if (!nullToAbsent || valor != null) {
      map['valor'] = Variable<double>(valor);
    }
    return map;
  }

  factory NfeDuplicata.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeDuplicata(
      id: serializer.fromJson<int?>(json['id']),
      idNfeFatura: serializer.fromJson<int?>(json['idNfeFatura']),
      numero: serializer.fromJson<String?>(json['numero']),
      dataVencimento: serializer.fromJson<DateTime?>(json['dataVencimento']),
      valor: serializer.fromJson<double?>(json['valor']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeFatura': serializer.toJson<int?>(idNfeFatura),
      'numero': serializer.toJson<String?>(numero),
      'dataVencimento': serializer.toJson<DateTime?>(dataVencimento),
      'valor': serializer.toJson<double?>(valor),
    };
  }

  NfeDuplicata copyWith({
    Value<int?> id = const Value.absent(),
    Value<int?> idNfeFatura = const Value.absent(),
    Value<String?> numero = const Value.absent(),
    Value<DateTime?> dataVencimento = const Value.absent(),
    Value<double?> valor = const Value.absent(),
  }) => NfeDuplicata(
    id: id.present ? id.value : this.id,
    idNfeFatura: idNfeFatura.present ? idNfeFatura.value : this.idNfeFatura,
    numero: numero.present ? numero.value : this.numero,
    dataVencimento:
        dataVencimento.present ? dataVencimento.value : this.dataVencimento,
    valor: valor.present ? valor.value : this.valor,
  );
  NfeDuplicata copyWithCompanion(NfeDuplicatasCompanion data) {
    return NfeDuplicata(
      id: data.id.present ? data.id.value : this.id,
      idNfeFatura:
          data.idNfeFatura.present ? data.idNfeFatura.value : this.idNfeFatura,
      numero: data.numero.present ? data.numero.value : this.numero,
      dataVencimento:
          data.dataVencimento.present
              ? data.dataVencimento.value
              : this.dataVencimento,
      valor: data.valor.present ? data.valor.value : this.valor,
    );
  }

  @override
  String toString() {
    return (StringBuffer('NfeDuplicata(')
          ..write('id: $id, ')
          ..write('idNfeFatura: $idNfeFatura, ')
          ..write('numero: $numero, ')
          ..write('dataVencimento: $dataVencimento, ')
          ..write('valor: $valor')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode =>
      Object.hash(id, idNfeFatura, numero, dataVencimento, valor);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeDuplicata &&
          other.id == this.id &&
          other.idNfeFatura == this.idNfeFatura &&
          other.numero == this.numero &&
          other.dataVencimento == this.dataVencimento &&
          other.valor == this.valor);
}

class NfeDuplicatasCompanion extends UpdateCompanion<NfeDuplicata> {
  final Value<int?> id;
  final Value<int?> idNfeFatura;
  final Value<String?> numero;
  final Value<DateTime?> dataVencimento;
  final Value<double?> valor;
  const NfeDuplicatasCompanion({
    this.id = const Value.absent(),
    this.idNfeFatura = const Value.absent(),
    this.numero = const Value.absent(),
    this.dataVencimento = const Value.absent(),
    this.valor = const Value.absent(),
  });
  NfeDuplicatasCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeFatura = const Value.absent(),
    this.numero = const Value.absent(),
    this.dataVencimento = const Value.absent(),
    this.valor = const Value.absent(),
  });
  static Insertable<NfeDuplicata> custom({
    Expression<int>? id,
    Expression<int>? idNfeFatura,
    Expression<String>? numero,
    Expression<DateTime>? dataVencimento,
    Expression<double>? valor,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (idNfeFatura != null) 'id_nfe_fatura': idNfeFatura,
      if (numero != null) 'numero': numero,
      if (dataVencimento != null) 'data_vencimento': dataVencimento,
      if (valor != null) 'valor': valor,
    });
  }

  NfeDuplicatasCompanion copyWith({
    Value<int?>? id,
    Value<int?>? idNfeFatura,
    Value<String?>? numero,
    Value<DateTime?>? dataVencimento,
    Value<double?>? valor,
  }) {
    return NfeDuplicatasCompanion(
      id: id ?? this.id,
      idNfeFatura: idNfeFatura ?? this.idNfeFatura,
      numero: numero ?? this.numero,
      dataVencimento: dataVencimento ?? this.dataVencimento,
      valor: valor ?? this.valor,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (idNfeFatura.present) {
      map['id_nfe_fatura'] = Variable<int>(idNfeFatura.value);
    }
    if (numero.present) {
      map['numero'] = Variable<String>(numero.value);
    }
    if (dataVencimento.present) {
      map['data_vencimento'] = Variable<DateTime>(dataVencimento.value);
    }
    if (valor.present) {
      map['valor'] = Variable<double>(valor.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeDuplicatasCompanion(')
          ..write('id: $id, ')
          ..write('idNfeFatura: $idNfeFatura, ')
          ..write('numero: $numero, ')
          ..write('dataVencimento: $dataVencimento, ')
          ..write('valor: $valor')
          ..write(')'))
        .toString();
  }
}

class $NfeDeclaracaoImportacaosTable extends NfeDeclaracaoImportacaos
    with TableInfo<$NfeDeclaracaoImportacaosTable, NfeDeclaracaoImportacao> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeDeclaracaoImportacaosTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
    'id',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idNfeDetalheMeta = const VerificationMeta(
    'idNfeDetalhe',
  );
  @override
  late final GeneratedColumn<int> idNfeDetalhe = GeneratedColumn<int>(
    'id_nfe_detalhe',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _numeroDocumentoMeta = const VerificationMeta(
    'numeroDocumento',
  );
  @override
  late final GeneratedColumn<String> numeroDocumento = GeneratedColumn<String>(
    'numero_documento',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 15,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _dataRegistroMeta = const VerificationMeta(
    'dataRegistro',
  );
  @override
  late final GeneratedColumn<DateTime> dataRegistro = GeneratedColumn<DateTime>(
    'data_registro',
    aliasedName,
    true,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _localDesembaracoMeta = const VerificationMeta(
    'localDesembaraco',
  );
  @override
  late final GeneratedColumn<String> localDesembaraco = GeneratedColumn<String>(
    'local_desembaraco',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 60,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _ufDesembaracoMeta = const VerificationMeta(
    'ufDesembaraco',
  );
  @override
  late final GeneratedColumn<String> ufDesembaraco = GeneratedColumn<String>(
    'uf_desembaraco',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 2,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _dataDesembaracoMeta = const VerificationMeta(
    'dataDesembaraco',
  );
  @override
  late final GeneratedColumn<DateTime> dataDesembaraco =
      GeneratedColumn<DateTime>(
        'data_desembaraco',
        aliasedName,
        true,
        type: DriftSqlType.dateTime,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _viaTransporteMeta = const VerificationMeta(
    'viaTransporte',
  );
  @override
  late final GeneratedColumn<String> viaTransporte = GeneratedColumn<String>(
    'via_transporte',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 1,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _valorAfrmmMeta = const VerificationMeta(
    'valorAfrmm',
  );
  @override
  late final GeneratedColumn<double> valorAfrmm = GeneratedColumn<double>(
    'valor_afrmm',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _formaIntermediacaoMeta =
      const VerificationMeta('formaIntermediacao');
  @override
  late final GeneratedColumn<String> formaIntermediacao =
      GeneratedColumn<String>(
        'forma_intermediacao',
        aliasedName,
        true,
        additionalChecks: GeneratedColumn.checkTextLength(
          minTextLength: 0,
          maxTextLength: 1,
        ),
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _cnpjMeta = const VerificationMeta('cnpj');
  @override
  late final GeneratedColumn<String> cnpj = GeneratedColumn<String>(
    'cnpj',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 14,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _ufTerceiroMeta = const VerificationMeta(
    'ufTerceiro',
  );
  @override
  late final GeneratedColumn<String> ufTerceiro = GeneratedColumn<String>(
    'uf_terceiro',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 2,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _codigoExportadorMeta = const VerificationMeta(
    'codigoExportador',
  );
  @override
  late final GeneratedColumn<String> codigoExportador = GeneratedColumn<String>(
    'codigo_exportador',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 60,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _cpfMeta = const VerificationMeta('cpf');
  @override
  late final GeneratedColumn<String> cpf = GeneratedColumn<String>(
    'cpf',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 11,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    idNfeDetalhe,
    numeroDocumento,
    dataRegistro,
    localDesembaraco,
    ufDesembaraco,
    dataDesembaraco,
    viaTransporte,
    valorAfrmm,
    formaIntermediacao,
    cnpj,
    ufTerceiro,
    codigoExportador,
    cpf,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'nfe_declaracao_importacao';
  @override
  VerificationContext validateIntegrity(
    Insertable<NfeDeclaracaoImportacao> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('id_nfe_detalhe')) {
      context.handle(
        _idNfeDetalheMeta,
        idNfeDetalhe.isAcceptableOrUnknown(
          data['id_nfe_detalhe']!,
          _idNfeDetalheMeta,
        ),
      );
    }
    if (data.containsKey('numero_documento')) {
      context.handle(
        _numeroDocumentoMeta,
        numeroDocumento.isAcceptableOrUnknown(
          data['numero_documento']!,
          _numeroDocumentoMeta,
        ),
      );
    }
    if (data.containsKey('data_registro')) {
      context.handle(
        _dataRegistroMeta,
        dataRegistro.isAcceptableOrUnknown(
          data['data_registro']!,
          _dataRegistroMeta,
        ),
      );
    }
    if (data.containsKey('local_desembaraco')) {
      context.handle(
        _localDesembaracoMeta,
        localDesembaraco.isAcceptableOrUnknown(
          data['local_desembaraco']!,
          _localDesembaracoMeta,
        ),
      );
    }
    if (data.containsKey('uf_desembaraco')) {
      context.handle(
        _ufDesembaracoMeta,
        ufDesembaraco.isAcceptableOrUnknown(
          data['uf_desembaraco']!,
          _ufDesembaracoMeta,
        ),
      );
    }
    if (data.containsKey('data_desembaraco')) {
      context.handle(
        _dataDesembaracoMeta,
        dataDesembaraco.isAcceptableOrUnknown(
          data['data_desembaraco']!,
          _dataDesembaracoMeta,
        ),
      );
    }
    if (data.containsKey('via_transporte')) {
      context.handle(
        _viaTransporteMeta,
        viaTransporte.isAcceptableOrUnknown(
          data['via_transporte']!,
          _viaTransporteMeta,
        ),
      );
    }
    if (data.containsKey('valor_afrmm')) {
      context.handle(
        _valorAfrmmMeta,
        valorAfrmm.isAcceptableOrUnknown(data['valor_afrmm']!, _valorAfrmmMeta),
      );
    }
    if (data.containsKey('forma_intermediacao')) {
      context.handle(
        _formaIntermediacaoMeta,
        formaIntermediacao.isAcceptableOrUnknown(
          data['forma_intermediacao']!,
          _formaIntermediacaoMeta,
        ),
      );
    }
    if (data.containsKey('cnpj')) {
      context.handle(
        _cnpjMeta,
        cnpj.isAcceptableOrUnknown(data['cnpj']!, _cnpjMeta),
      );
    }
    if (data.containsKey('uf_terceiro')) {
      context.handle(
        _ufTerceiroMeta,
        ufTerceiro.isAcceptableOrUnknown(data['uf_terceiro']!, _ufTerceiroMeta),
      );
    }
    if (data.containsKey('codigo_exportador')) {
      context.handle(
        _codigoExportadorMeta,
        codigoExportador.isAcceptableOrUnknown(
          data['codigo_exportador']!,
          _codigoExportadorMeta,
        ),
      );
    }
    if (data.containsKey('cpf')) {
      context.handle(
        _cpfMeta,
        cpf.isAcceptableOrUnknown(data['cpf']!, _cpfMeta),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeDeclaracaoImportacao map(
    Map<String, dynamic> data, {
    String? tablePrefix,
  }) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return NfeDeclaracaoImportacao(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id'],
      ),
      idNfeDetalhe: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_nfe_detalhe'],
      ),
      numeroDocumento: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}numero_documento'],
      ),
      dataRegistro: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}data_registro'],
      ),
      localDesembaraco: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}local_desembaraco'],
      ),
      ufDesembaraco: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}uf_desembaraco'],
      ),
      dataDesembaraco: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}data_desembaraco'],
      ),
      viaTransporte: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}via_transporte'],
      ),
      valorAfrmm: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_afrmm'],
      ),
      formaIntermediacao: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}forma_intermediacao'],
      ),
      cnpj: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}cnpj'],
      ),
      ufTerceiro: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}uf_terceiro'],
      ),
      codigoExportador: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}codigo_exportador'],
      ),
      cpf: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}cpf'],
      ),
    );
  }

  @override
  $NfeDeclaracaoImportacaosTable createAlias(String alias) {
    return $NfeDeclaracaoImportacaosTable(attachedDatabase, alias);
  }
}

class NfeDeclaracaoImportacao extends DataClass
    implements Insertable<NfeDeclaracaoImportacao> {
  final int? id;
  final int? idNfeDetalhe;
  final String? numeroDocumento;
  final DateTime? dataRegistro;
  final String? localDesembaraco;
  final String? ufDesembaraco;
  final DateTime? dataDesembaraco;
  final String? viaTransporte;
  final double? valorAfrmm;
  final String? formaIntermediacao;
  final String? cnpj;
  final String? ufTerceiro;
  final String? codigoExportador;
  final String? cpf;
  const NfeDeclaracaoImportacao({
    this.id,
    this.idNfeDetalhe,
    this.numeroDocumento,
    this.dataRegistro,
    this.localDesembaraco,
    this.ufDesembaraco,
    this.dataDesembaraco,
    this.viaTransporte,
    this.valorAfrmm,
    this.formaIntermediacao,
    this.cnpj,
    this.ufTerceiro,
    this.codigoExportador,
    this.cpf,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeDetalhe != null) {
      map['id_nfe_detalhe'] = Variable<int>(idNfeDetalhe);
    }
    if (!nullToAbsent || numeroDocumento != null) {
      map['numero_documento'] = Variable<String>(numeroDocumento);
    }
    if (!nullToAbsent || dataRegistro != null) {
      map['data_registro'] = Variable<DateTime>(dataRegistro);
    }
    if (!nullToAbsent || localDesembaraco != null) {
      map['local_desembaraco'] = Variable<String>(localDesembaraco);
    }
    if (!nullToAbsent || ufDesembaraco != null) {
      map['uf_desembaraco'] = Variable<String>(ufDesembaraco);
    }
    if (!nullToAbsent || dataDesembaraco != null) {
      map['data_desembaraco'] = Variable<DateTime>(dataDesembaraco);
    }
    if (!nullToAbsent || viaTransporte != null) {
      map['via_transporte'] = Variable<String>(viaTransporte);
    }
    if (!nullToAbsent || valorAfrmm != null) {
      map['valor_afrmm'] = Variable<double>(valorAfrmm);
    }
    if (!nullToAbsent || formaIntermediacao != null) {
      map['forma_intermediacao'] = Variable<String>(formaIntermediacao);
    }
    if (!nullToAbsent || cnpj != null) {
      map['cnpj'] = Variable<String>(cnpj);
    }
    if (!nullToAbsent || ufTerceiro != null) {
      map['uf_terceiro'] = Variable<String>(ufTerceiro);
    }
    if (!nullToAbsent || codigoExportador != null) {
      map['codigo_exportador'] = Variable<String>(codigoExportador);
    }
    if (!nullToAbsent || cpf != null) {
      map['cpf'] = Variable<String>(cpf);
    }
    return map;
  }

  factory NfeDeclaracaoImportacao.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeDeclaracaoImportacao(
      id: serializer.fromJson<int?>(json['id']),
      idNfeDetalhe: serializer.fromJson<int?>(json['idNfeDetalhe']),
      numeroDocumento: serializer.fromJson<String?>(json['numeroDocumento']),
      dataRegistro: serializer.fromJson<DateTime?>(json['dataRegistro']),
      localDesembaraco: serializer.fromJson<String?>(json['localDesembaraco']),
      ufDesembaraco: serializer.fromJson<String?>(json['ufDesembaraco']),
      dataDesembaraco: serializer.fromJson<DateTime?>(json['dataDesembaraco']),
      viaTransporte: serializer.fromJson<String?>(json['viaTransporte']),
      valorAfrmm: serializer.fromJson<double?>(json['valorAfrmm']),
      formaIntermediacao: serializer.fromJson<String?>(
        json['formaIntermediacao'],
      ),
      cnpj: serializer.fromJson<String?>(json['cnpj']),
      ufTerceiro: serializer.fromJson<String?>(json['ufTerceiro']),
      codigoExportador: serializer.fromJson<String?>(json['codigoExportador']),
      cpf: serializer.fromJson<String?>(json['cpf']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeDetalhe': serializer.toJson<int?>(idNfeDetalhe),
      'numeroDocumento': serializer.toJson<String?>(numeroDocumento),
      'dataRegistro': serializer.toJson<DateTime?>(dataRegistro),
      'localDesembaraco': serializer.toJson<String?>(localDesembaraco),
      'ufDesembaraco': serializer.toJson<String?>(ufDesembaraco),
      'dataDesembaraco': serializer.toJson<DateTime?>(dataDesembaraco),
      'viaTransporte': serializer.toJson<String?>(viaTransporte),
      'valorAfrmm': serializer.toJson<double?>(valorAfrmm),
      'formaIntermediacao': serializer.toJson<String?>(formaIntermediacao),
      'cnpj': serializer.toJson<String?>(cnpj),
      'ufTerceiro': serializer.toJson<String?>(ufTerceiro),
      'codigoExportador': serializer.toJson<String?>(codigoExportador),
      'cpf': serializer.toJson<String?>(cpf),
    };
  }

  NfeDeclaracaoImportacao copyWith({
    Value<int?> id = const Value.absent(),
    Value<int?> idNfeDetalhe = const Value.absent(),
    Value<String?> numeroDocumento = const Value.absent(),
    Value<DateTime?> dataRegistro = const Value.absent(),
    Value<String?> localDesembaraco = const Value.absent(),
    Value<String?> ufDesembaraco = const Value.absent(),
    Value<DateTime?> dataDesembaraco = const Value.absent(),
    Value<String?> viaTransporte = const Value.absent(),
    Value<double?> valorAfrmm = const Value.absent(),
    Value<String?> formaIntermediacao = const Value.absent(),
    Value<String?> cnpj = const Value.absent(),
    Value<String?> ufTerceiro = const Value.absent(),
    Value<String?> codigoExportador = const Value.absent(),
    Value<String?> cpf = const Value.absent(),
  }) => NfeDeclaracaoImportacao(
    id: id.present ? id.value : this.id,
    idNfeDetalhe: idNfeDetalhe.present ? idNfeDetalhe.value : this.idNfeDetalhe,
    numeroDocumento:
        numeroDocumento.present ? numeroDocumento.value : this.numeroDocumento,
    dataRegistro: dataRegistro.present ? dataRegistro.value : this.dataRegistro,
    localDesembaraco:
        localDesembaraco.present
            ? localDesembaraco.value
            : this.localDesembaraco,
    ufDesembaraco:
        ufDesembaraco.present ? ufDesembaraco.value : this.ufDesembaraco,
    dataDesembaraco:
        dataDesembaraco.present ? dataDesembaraco.value : this.dataDesembaraco,
    viaTransporte:
        viaTransporte.present ? viaTransporte.value : this.viaTransporte,
    valorAfrmm: valorAfrmm.present ? valorAfrmm.value : this.valorAfrmm,
    formaIntermediacao:
        formaIntermediacao.present
            ? formaIntermediacao.value
            : this.formaIntermediacao,
    cnpj: cnpj.present ? cnpj.value : this.cnpj,
    ufTerceiro: ufTerceiro.present ? ufTerceiro.value : this.ufTerceiro,
    codigoExportador:
        codigoExportador.present
            ? codigoExportador.value
            : this.codigoExportador,
    cpf: cpf.present ? cpf.value : this.cpf,
  );
  NfeDeclaracaoImportacao copyWithCompanion(
    NfeDeclaracaoImportacaosCompanion data,
  ) {
    return NfeDeclaracaoImportacao(
      id: data.id.present ? data.id.value : this.id,
      idNfeDetalhe:
          data.idNfeDetalhe.present
              ? data.idNfeDetalhe.value
              : this.idNfeDetalhe,
      numeroDocumento:
          data.numeroDocumento.present
              ? data.numeroDocumento.value
              : this.numeroDocumento,
      dataRegistro:
          data.dataRegistro.present
              ? data.dataRegistro.value
              : this.dataRegistro,
      localDesembaraco:
          data.localDesembaraco.present
              ? data.localDesembaraco.value
              : this.localDesembaraco,
      ufDesembaraco:
          data.ufDesembaraco.present
              ? data.ufDesembaraco.value
              : this.ufDesembaraco,
      dataDesembaraco:
          data.dataDesembaraco.present
              ? data.dataDesembaraco.value
              : this.dataDesembaraco,
      viaTransporte:
          data.viaTransporte.present
              ? data.viaTransporte.value
              : this.viaTransporte,
      valorAfrmm:
          data.valorAfrmm.present ? data.valorAfrmm.value : this.valorAfrmm,
      formaIntermediacao:
          data.formaIntermediacao.present
              ? data.formaIntermediacao.value
              : this.formaIntermediacao,
      cnpj: data.cnpj.present ? data.cnpj.value : this.cnpj,
      ufTerceiro:
          data.ufTerceiro.present ? data.ufTerceiro.value : this.ufTerceiro,
      codigoExportador:
          data.codigoExportador.present
              ? data.codigoExportador.value
              : this.codigoExportador,
      cpf: data.cpf.present ? data.cpf.value : this.cpf,
    );
  }

  @override
  String toString() {
    return (StringBuffer('NfeDeclaracaoImportacao(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('numeroDocumento: $numeroDocumento, ')
          ..write('dataRegistro: $dataRegistro, ')
          ..write('localDesembaraco: $localDesembaraco, ')
          ..write('ufDesembaraco: $ufDesembaraco, ')
          ..write('dataDesembaraco: $dataDesembaraco, ')
          ..write('viaTransporte: $viaTransporte, ')
          ..write('valorAfrmm: $valorAfrmm, ')
          ..write('formaIntermediacao: $formaIntermediacao, ')
          ..write('cnpj: $cnpj, ')
          ..write('ufTerceiro: $ufTerceiro, ')
          ..write('codigoExportador: $codigoExportador, ')
          ..write('cpf: $cpf')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    idNfeDetalhe,
    numeroDocumento,
    dataRegistro,
    localDesembaraco,
    ufDesembaraco,
    dataDesembaraco,
    viaTransporte,
    valorAfrmm,
    formaIntermediacao,
    cnpj,
    ufTerceiro,
    codigoExportador,
    cpf,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeDeclaracaoImportacao &&
          other.id == this.id &&
          other.idNfeDetalhe == this.idNfeDetalhe &&
          other.numeroDocumento == this.numeroDocumento &&
          other.dataRegistro == this.dataRegistro &&
          other.localDesembaraco == this.localDesembaraco &&
          other.ufDesembaraco == this.ufDesembaraco &&
          other.dataDesembaraco == this.dataDesembaraco &&
          other.viaTransporte == this.viaTransporte &&
          other.valorAfrmm == this.valorAfrmm &&
          other.formaIntermediacao == this.formaIntermediacao &&
          other.cnpj == this.cnpj &&
          other.ufTerceiro == this.ufTerceiro &&
          other.codigoExportador == this.codigoExportador &&
          other.cpf == this.cpf);
}

class NfeDeclaracaoImportacaosCompanion
    extends UpdateCompanion<NfeDeclaracaoImportacao> {
  final Value<int?> id;
  final Value<int?> idNfeDetalhe;
  final Value<String?> numeroDocumento;
  final Value<DateTime?> dataRegistro;
  final Value<String?> localDesembaraco;
  final Value<String?> ufDesembaraco;
  final Value<DateTime?> dataDesembaraco;
  final Value<String?> viaTransporte;
  final Value<double?> valorAfrmm;
  final Value<String?> formaIntermediacao;
  final Value<String?> cnpj;
  final Value<String?> ufTerceiro;
  final Value<String?> codigoExportador;
  final Value<String?> cpf;
  const NfeDeclaracaoImportacaosCompanion({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.numeroDocumento = const Value.absent(),
    this.dataRegistro = const Value.absent(),
    this.localDesembaraco = const Value.absent(),
    this.ufDesembaraco = const Value.absent(),
    this.dataDesembaraco = const Value.absent(),
    this.viaTransporte = const Value.absent(),
    this.valorAfrmm = const Value.absent(),
    this.formaIntermediacao = const Value.absent(),
    this.cnpj = const Value.absent(),
    this.ufTerceiro = const Value.absent(),
    this.codigoExportador = const Value.absent(),
    this.cpf = const Value.absent(),
  });
  NfeDeclaracaoImportacaosCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.numeroDocumento = const Value.absent(),
    this.dataRegistro = const Value.absent(),
    this.localDesembaraco = const Value.absent(),
    this.ufDesembaraco = const Value.absent(),
    this.dataDesembaraco = const Value.absent(),
    this.viaTransporte = const Value.absent(),
    this.valorAfrmm = const Value.absent(),
    this.formaIntermediacao = const Value.absent(),
    this.cnpj = const Value.absent(),
    this.ufTerceiro = const Value.absent(),
    this.codigoExportador = const Value.absent(),
    this.cpf = const Value.absent(),
  });
  static Insertable<NfeDeclaracaoImportacao> custom({
    Expression<int>? id,
    Expression<int>? idNfeDetalhe,
    Expression<String>? numeroDocumento,
    Expression<DateTime>? dataRegistro,
    Expression<String>? localDesembaraco,
    Expression<String>? ufDesembaraco,
    Expression<DateTime>? dataDesembaraco,
    Expression<String>? viaTransporte,
    Expression<double>? valorAfrmm,
    Expression<String>? formaIntermediacao,
    Expression<String>? cnpj,
    Expression<String>? ufTerceiro,
    Expression<String>? codigoExportador,
    Expression<String>? cpf,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (idNfeDetalhe != null) 'id_nfe_detalhe': idNfeDetalhe,
      if (numeroDocumento != null) 'numero_documento': numeroDocumento,
      if (dataRegistro != null) 'data_registro': dataRegistro,
      if (localDesembaraco != null) 'local_desembaraco': localDesembaraco,
      if (ufDesembaraco != null) 'uf_desembaraco': ufDesembaraco,
      if (dataDesembaraco != null) 'data_desembaraco': dataDesembaraco,
      if (viaTransporte != null) 'via_transporte': viaTransporte,
      if (valorAfrmm != null) 'valor_afrmm': valorAfrmm,
      if (formaIntermediacao != null) 'forma_intermediacao': formaIntermediacao,
      if (cnpj != null) 'cnpj': cnpj,
      if (ufTerceiro != null) 'uf_terceiro': ufTerceiro,
      if (codigoExportador != null) 'codigo_exportador': codigoExportador,
      if (cpf != null) 'cpf': cpf,
    });
  }

  NfeDeclaracaoImportacaosCompanion copyWith({
    Value<int?>? id,
    Value<int?>? idNfeDetalhe,
    Value<String?>? numeroDocumento,
    Value<DateTime?>? dataRegistro,
    Value<String?>? localDesembaraco,
    Value<String?>? ufDesembaraco,
    Value<DateTime?>? dataDesembaraco,
    Value<String?>? viaTransporte,
    Value<double?>? valorAfrmm,
    Value<String?>? formaIntermediacao,
    Value<String?>? cnpj,
    Value<String?>? ufTerceiro,
    Value<String?>? codigoExportador,
    Value<String?>? cpf,
  }) {
    return NfeDeclaracaoImportacaosCompanion(
      id: id ?? this.id,
      idNfeDetalhe: idNfeDetalhe ?? this.idNfeDetalhe,
      numeroDocumento: numeroDocumento ?? this.numeroDocumento,
      dataRegistro: dataRegistro ?? this.dataRegistro,
      localDesembaraco: localDesembaraco ?? this.localDesembaraco,
      ufDesembaraco: ufDesembaraco ?? this.ufDesembaraco,
      dataDesembaraco: dataDesembaraco ?? this.dataDesembaraco,
      viaTransporte: viaTransporte ?? this.viaTransporte,
      valorAfrmm: valorAfrmm ?? this.valorAfrmm,
      formaIntermediacao: formaIntermediacao ?? this.formaIntermediacao,
      cnpj: cnpj ?? this.cnpj,
      ufTerceiro: ufTerceiro ?? this.ufTerceiro,
      codigoExportador: codigoExportador ?? this.codigoExportador,
      cpf: cpf ?? this.cpf,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (idNfeDetalhe.present) {
      map['id_nfe_detalhe'] = Variable<int>(idNfeDetalhe.value);
    }
    if (numeroDocumento.present) {
      map['numero_documento'] = Variable<String>(numeroDocumento.value);
    }
    if (dataRegistro.present) {
      map['data_registro'] = Variable<DateTime>(dataRegistro.value);
    }
    if (localDesembaraco.present) {
      map['local_desembaraco'] = Variable<String>(localDesembaraco.value);
    }
    if (ufDesembaraco.present) {
      map['uf_desembaraco'] = Variable<String>(ufDesembaraco.value);
    }
    if (dataDesembaraco.present) {
      map['data_desembaraco'] = Variable<DateTime>(dataDesembaraco.value);
    }
    if (viaTransporte.present) {
      map['via_transporte'] = Variable<String>(viaTransporte.value);
    }
    if (valorAfrmm.present) {
      map['valor_afrmm'] = Variable<double>(valorAfrmm.value);
    }
    if (formaIntermediacao.present) {
      map['forma_intermediacao'] = Variable<String>(formaIntermediacao.value);
    }
    if (cnpj.present) {
      map['cnpj'] = Variable<String>(cnpj.value);
    }
    if (ufTerceiro.present) {
      map['uf_terceiro'] = Variable<String>(ufTerceiro.value);
    }
    if (codigoExportador.present) {
      map['codigo_exportador'] = Variable<String>(codigoExportador.value);
    }
    if (cpf.present) {
      map['cpf'] = Variable<String>(cpf.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeDeclaracaoImportacaosCompanion(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('numeroDocumento: $numeroDocumento, ')
          ..write('dataRegistro: $dataRegistro, ')
          ..write('localDesembaraco: $localDesembaraco, ')
          ..write('ufDesembaraco: $ufDesembaraco, ')
          ..write('dataDesembaraco: $dataDesembaraco, ')
          ..write('viaTransporte: $viaTransporte, ')
          ..write('valorAfrmm: $valorAfrmm, ')
          ..write('formaIntermediacao: $formaIntermediacao, ')
          ..write('cnpj: $cnpj, ')
          ..write('ufTerceiro: $ufTerceiro, ')
          ..write('codigoExportador: $codigoExportador, ')
          ..write('cpf: $cpf')
          ..write(')'))
        .toString();
  }
}

class $NfeCanaFornecimentoDiariosTable extends NfeCanaFornecimentoDiarios
    with
        TableInfo<$NfeCanaFornecimentoDiariosTable, NfeCanaFornecimentoDiario> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeCanaFornecimentoDiariosTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
    'id',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idNfeCanaMeta = const VerificationMeta(
    'idNfeCana',
  );
  @override
  late final GeneratedColumn<int> idNfeCana = GeneratedColumn<int>(
    'id_nfe_cana',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _diaMeta = const VerificationMeta('dia');
  @override
  late final GeneratedColumn<String> dia = GeneratedColumn<String>(
    'dia',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 2,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _quantidadeMeta = const VerificationMeta(
    'quantidade',
  );
  @override
  late final GeneratedColumn<double> quantidade = GeneratedColumn<double>(
    'quantidade',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _quantidadeTotalMesMeta =
      const VerificationMeta('quantidadeTotalMes');
  @override
  late final GeneratedColumn<double> quantidadeTotalMes =
      GeneratedColumn<double>(
        'quantidade_total_mes',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _quantidadeTotalAnteriorMeta =
      const VerificationMeta('quantidadeTotalAnterior');
  @override
  late final GeneratedColumn<double> quantidadeTotalAnterior =
      GeneratedColumn<double>(
        'quantidade_total_anterior',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _quantidadeTotalGeralMeta =
      const VerificationMeta('quantidadeTotalGeral');
  @override
  late final GeneratedColumn<double> quantidadeTotalGeral =
      GeneratedColumn<double>(
        'quantidade_total_geral',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    idNfeCana,
    dia,
    quantidade,
    quantidadeTotalMes,
    quantidadeTotalAnterior,
    quantidadeTotalGeral,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'nfe_cana_fornecimento_diario';
  @override
  VerificationContext validateIntegrity(
    Insertable<NfeCanaFornecimentoDiario> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('id_nfe_cana')) {
      context.handle(
        _idNfeCanaMeta,
        idNfeCana.isAcceptableOrUnknown(data['id_nfe_cana']!, _idNfeCanaMeta),
      );
    }
    if (data.containsKey('dia')) {
      context.handle(
        _diaMeta,
        dia.isAcceptableOrUnknown(data['dia']!, _diaMeta),
      );
    }
    if (data.containsKey('quantidade')) {
      context.handle(
        _quantidadeMeta,
        quantidade.isAcceptableOrUnknown(data['quantidade']!, _quantidadeMeta),
      );
    }
    if (data.containsKey('quantidade_total_mes')) {
      context.handle(
        _quantidadeTotalMesMeta,
        quantidadeTotalMes.isAcceptableOrUnknown(
          data['quantidade_total_mes']!,
          _quantidadeTotalMesMeta,
        ),
      );
    }
    if (data.containsKey('quantidade_total_anterior')) {
      context.handle(
        _quantidadeTotalAnteriorMeta,
        quantidadeTotalAnterior.isAcceptableOrUnknown(
          data['quantidade_total_anterior']!,
          _quantidadeTotalAnteriorMeta,
        ),
      );
    }
    if (data.containsKey('quantidade_total_geral')) {
      context.handle(
        _quantidadeTotalGeralMeta,
        quantidadeTotalGeral.isAcceptableOrUnknown(
          data['quantidade_total_geral']!,
          _quantidadeTotalGeralMeta,
        ),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeCanaFornecimentoDiario map(
    Map<String, dynamic> data, {
    String? tablePrefix,
  }) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return NfeCanaFornecimentoDiario(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id'],
      ),
      idNfeCana: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_nfe_cana'],
      ),
      dia: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}dia'],
      ),
      quantidade: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}quantidade'],
      ),
      quantidadeTotalMes: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}quantidade_total_mes'],
      ),
      quantidadeTotalAnterior: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}quantidade_total_anterior'],
      ),
      quantidadeTotalGeral: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}quantidade_total_geral'],
      ),
    );
  }

  @override
  $NfeCanaFornecimentoDiariosTable createAlias(String alias) {
    return $NfeCanaFornecimentoDiariosTable(attachedDatabase, alias);
  }
}

class NfeCanaFornecimentoDiario extends DataClass
    implements Insertable<NfeCanaFornecimentoDiario> {
  final int? id;
  final int? idNfeCana;
  final String? dia;
  final double? quantidade;
  final double? quantidadeTotalMes;
  final double? quantidadeTotalAnterior;
  final double? quantidadeTotalGeral;
  const NfeCanaFornecimentoDiario({
    this.id,
    this.idNfeCana,
    this.dia,
    this.quantidade,
    this.quantidadeTotalMes,
    this.quantidadeTotalAnterior,
    this.quantidadeTotalGeral,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeCana != null) {
      map['id_nfe_cana'] = Variable<int>(idNfeCana);
    }
    if (!nullToAbsent || dia != null) {
      map['dia'] = Variable<String>(dia);
    }
    if (!nullToAbsent || quantidade != null) {
      map['quantidade'] = Variable<double>(quantidade);
    }
    if (!nullToAbsent || quantidadeTotalMes != null) {
      map['quantidade_total_mes'] = Variable<double>(quantidadeTotalMes);
    }
    if (!nullToAbsent || quantidadeTotalAnterior != null) {
      map['quantidade_total_anterior'] = Variable<double>(
        quantidadeTotalAnterior,
      );
    }
    if (!nullToAbsent || quantidadeTotalGeral != null) {
      map['quantidade_total_geral'] = Variable<double>(quantidadeTotalGeral);
    }
    return map;
  }

  factory NfeCanaFornecimentoDiario.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeCanaFornecimentoDiario(
      id: serializer.fromJson<int?>(json['id']),
      idNfeCana: serializer.fromJson<int?>(json['idNfeCana']),
      dia: serializer.fromJson<String?>(json['dia']),
      quantidade: serializer.fromJson<double?>(json['quantidade']),
      quantidadeTotalMes: serializer.fromJson<double?>(
        json['quantidadeTotalMes'],
      ),
      quantidadeTotalAnterior: serializer.fromJson<double?>(
        json['quantidadeTotalAnterior'],
      ),
      quantidadeTotalGeral: serializer.fromJson<double?>(
        json['quantidadeTotalGeral'],
      ),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeCana': serializer.toJson<int?>(idNfeCana),
      'dia': serializer.toJson<String?>(dia),
      'quantidade': serializer.toJson<double?>(quantidade),
      'quantidadeTotalMes': serializer.toJson<double?>(quantidadeTotalMes),
      'quantidadeTotalAnterior': serializer.toJson<double?>(
        quantidadeTotalAnterior,
      ),
      'quantidadeTotalGeral': serializer.toJson<double?>(quantidadeTotalGeral),
    };
  }

  NfeCanaFornecimentoDiario copyWith({
    Value<int?> id = const Value.absent(),
    Value<int?> idNfeCana = const Value.absent(),
    Value<String?> dia = const Value.absent(),
    Value<double?> quantidade = const Value.absent(),
    Value<double?> quantidadeTotalMes = const Value.absent(),
    Value<double?> quantidadeTotalAnterior = const Value.absent(),
    Value<double?> quantidadeTotalGeral = const Value.absent(),
  }) => NfeCanaFornecimentoDiario(
    id: id.present ? id.value : this.id,
    idNfeCana: idNfeCana.present ? idNfeCana.value : this.idNfeCana,
    dia: dia.present ? dia.value : this.dia,
    quantidade: quantidade.present ? quantidade.value : this.quantidade,
    quantidadeTotalMes:
        quantidadeTotalMes.present
            ? quantidadeTotalMes.value
            : this.quantidadeTotalMes,
    quantidadeTotalAnterior:
        quantidadeTotalAnterior.present
            ? quantidadeTotalAnterior.value
            : this.quantidadeTotalAnterior,
    quantidadeTotalGeral:
        quantidadeTotalGeral.present
            ? quantidadeTotalGeral.value
            : this.quantidadeTotalGeral,
  );
  NfeCanaFornecimentoDiario copyWithCompanion(
    NfeCanaFornecimentoDiariosCompanion data,
  ) {
    return NfeCanaFornecimentoDiario(
      id: data.id.present ? data.id.value : this.id,
      idNfeCana: data.idNfeCana.present ? data.idNfeCana.value : this.idNfeCana,
      dia: data.dia.present ? data.dia.value : this.dia,
      quantidade:
          data.quantidade.present ? data.quantidade.value : this.quantidade,
      quantidadeTotalMes:
          data.quantidadeTotalMes.present
              ? data.quantidadeTotalMes.value
              : this.quantidadeTotalMes,
      quantidadeTotalAnterior:
          data.quantidadeTotalAnterior.present
              ? data.quantidadeTotalAnterior.value
              : this.quantidadeTotalAnterior,
      quantidadeTotalGeral:
          data.quantidadeTotalGeral.present
              ? data.quantidadeTotalGeral.value
              : this.quantidadeTotalGeral,
    );
  }

  @override
  String toString() {
    return (StringBuffer('NfeCanaFornecimentoDiario(')
          ..write('id: $id, ')
          ..write('idNfeCana: $idNfeCana, ')
          ..write('dia: $dia, ')
          ..write('quantidade: $quantidade, ')
          ..write('quantidadeTotalMes: $quantidadeTotalMes, ')
          ..write('quantidadeTotalAnterior: $quantidadeTotalAnterior, ')
          ..write('quantidadeTotalGeral: $quantidadeTotalGeral')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    idNfeCana,
    dia,
    quantidade,
    quantidadeTotalMes,
    quantidadeTotalAnterior,
    quantidadeTotalGeral,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeCanaFornecimentoDiario &&
          other.id == this.id &&
          other.idNfeCana == this.idNfeCana &&
          other.dia == this.dia &&
          other.quantidade == this.quantidade &&
          other.quantidadeTotalMes == this.quantidadeTotalMes &&
          other.quantidadeTotalAnterior == this.quantidadeTotalAnterior &&
          other.quantidadeTotalGeral == this.quantidadeTotalGeral);
}

class NfeCanaFornecimentoDiariosCompanion
    extends UpdateCompanion<NfeCanaFornecimentoDiario> {
  final Value<int?> id;
  final Value<int?> idNfeCana;
  final Value<String?> dia;
  final Value<double?> quantidade;
  final Value<double?> quantidadeTotalMes;
  final Value<double?> quantidadeTotalAnterior;
  final Value<double?> quantidadeTotalGeral;
  const NfeCanaFornecimentoDiariosCompanion({
    this.id = const Value.absent(),
    this.idNfeCana = const Value.absent(),
    this.dia = const Value.absent(),
    this.quantidade = const Value.absent(),
    this.quantidadeTotalMes = const Value.absent(),
    this.quantidadeTotalAnterior = const Value.absent(),
    this.quantidadeTotalGeral = const Value.absent(),
  });
  NfeCanaFornecimentoDiariosCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeCana = const Value.absent(),
    this.dia = const Value.absent(),
    this.quantidade = const Value.absent(),
    this.quantidadeTotalMes = const Value.absent(),
    this.quantidadeTotalAnterior = const Value.absent(),
    this.quantidadeTotalGeral = const Value.absent(),
  });
  static Insertable<NfeCanaFornecimentoDiario> custom({
    Expression<int>? id,
    Expression<int>? idNfeCana,
    Expression<String>? dia,
    Expression<double>? quantidade,
    Expression<double>? quantidadeTotalMes,
    Expression<double>? quantidadeTotalAnterior,
    Expression<double>? quantidadeTotalGeral,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (idNfeCana != null) 'id_nfe_cana': idNfeCana,
      if (dia != null) 'dia': dia,
      if (quantidade != null) 'quantidade': quantidade,
      if (quantidadeTotalMes != null)
        'quantidade_total_mes': quantidadeTotalMes,
      if (quantidadeTotalAnterior != null)
        'quantidade_total_anterior': quantidadeTotalAnterior,
      if (quantidadeTotalGeral != null)
        'quantidade_total_geral': quantidadeTotalGeral,
    });
  }

  NfeCanaFornecimentoDiariosCompanion copyWith({
    Value<int?>? id,
    Value<int?>? idNfeCana,
    Value<String?>? dia,
    Value<double?>? quantidade,
    Value<double?>? quantidadeTotalMes,
    Value<double?>? quantidadeTotalAnterior,
    Value<double?>? quantidadeTotalGeral,
  }) {
    return NfeCanaFornecimentoDiariosCompanion(
      id: id ?? this.id,
      idNfeCana: idNfeCana ?? this.idNfeCana,
      dia: dia ?? this.dia,
      quantidade: quantidade ?? this.quantidade,
      quantidadeTotalMes: quantidadeTotalMes ?? this.quantidadeTotalMes,
      quantidadeTotalAnterior:
          quantidadeTotalAnterior ?? this.quantidadeTotalAnterior,
      quantidadeTotalGeral: quantidadeTotalGeral ?? this.quantidadeTotalGeral,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (idNfeCana.present) {
      map['id_nfe_cana'] = Variable<int>(idNfeCana.value);
    }
    if (dia.present) {
      map['dia'] = Variable<String>(dia.value);
    }
    if (quantidade.present) {
      map['quantidade'] = Variable<double>(quantidade.value);
    }
    if (quantidadeTotalMes.present) {
      map['quantidade_total_mes'] = Variable<double>(quantidadeTotalMes.value);
    }
    if (quantidadeTotalAnterior.present) {
      map['quantidade_total_anterior'] = Variable<double>(
        quantidadeTotalAnterior.value,
      );
    }
    if (quantidadeTotalGeral.present) {
      map['quantidade_total_geral'] = Variable<double>(
        quantidadeTotalGeral.value,
      );
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeCanaFornecimentoDiariosCompanion(')
          ..write('id: $id, ')
          ..write('idNfeCana: $idNfeCana, ')
          ..write('dia: $dia, ')
          ..write('quantidade: $quantidade, ')
          ..write('quantidadeTotalMes: $quantidadeTotalMes, ')
          ..write('quantidadeTotalAnterior: $quantidadeTotalAnterior, ')
          ..write('quantidadeTotalGeral: $quantidadeTotalGeral')
          ..write(')'))
        .toString();
  }
}

class $NfeCanaDeducoesSafrasTable extends NfeCanaDeducoesSafras
    with TableInfo<$NfeCanaDeducoesSafrasTable, NfeCanaDeducoesSafra> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeCanaDeducoesSafrasTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
    'id',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idNfeCanaMeta = const VerificationMeta(
    'idNfeCana',
  );
  @override
  late final GeneratedColumn<int> idNfeCana = GeneratedColumn<int>(
    'id_nfe_cana',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _decricaoMeta = const VerificationMeta(
    'decricao',
  );
  @override
  late final GeneratedColumn<String> decricao = GeneratedColumn<String>(
    'decricao',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 60,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _valorDeducaoMeta = const VerificationMeta(
    'valorDeducao',
  );
  @override
  late final GeneratedColumn<double> valorDeducao = GeneratedColumn<double>(
    'valor_deducao',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _valorFornecimentoMeta = const VerificationMeta(
    'valorFornecimento',
  );
  @override
  late final GeneratedColumn<double> valorFornecimento =
      GeneratedColumn<double>(
        'valor_fornecimento',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _valorTotalDeducaoMeta = const VerificationMeta(
    'valorTotalDeducao',
  );
  @override
  late final GeneratedColumn<double> valorTotalDeducao =
      GeneratedColumn<double>(
        'valor_total_deducao',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _valorLiquidoFornecimentoMeta =
      const VerificationMeta('valorLiquidoFornecimento');
  @override
  late final GeneratedColumn<double> valorLiquidoFornecimento =
      GeneratedColumn<double>(
        'valor_liquido_fornecimento',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    idNfeCana,
    decricao,
    valorDeducao,
    valorFornecimento,
    valorTotalDeducao,
    valorLiquidoFornecimento,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'nfe_cana_deducoes_safra';
  @override
  VerificationContext validateIntegrity(
    Insertable<NfeCanaDeducoesSafra> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('id_nfe_cana')) {
      context.handle(
        _idNfeCanaMeta,
        idNfeCana.isAcceptableOrUnknown(data['id_nfe_cana']!, _idNfeCanaMeta),
      );
    }
    if (data.containsKey('decricao')) {
      context.handle(
        _decricaoMeta,
        decricao.isAcceptableOrUnknown(data['decricao']!, _decricaoMeta),
      );
    }
    if (data.containsKey('valor_deducao')) {
      context.handle(
        _valorDeducaoMeta,
        valorDeducao.isAcceptableOrUnknown(
          data['valor_deducao']!,
          _valorDeducaoMeta,
        ),
      );
    }
    if (data.containsKey('valor_fornecimento')) {
      context.handle(
        _valorFornecimentoMeta,
        valorFornecimento.isAcceptableOrUnknown(
          data['valor_fornecimento']!,
          _valorFornecimentoMeta,
        ),
      );
    }
    if (data.containsKey('valor_total_deducao')) {
      context.handle(
        _valorTotalDeducaoMeta,
        valorTotalDeducao.isAcceptableOrUnknown(
          data['valor_total_deducao']!,
          _valorTotalDeducaoMeta,
        ),
      );
    }
    if (data.containsKey('valor_liquido_fornecimento')) {
      context.handle(
        _valorLiquidoFornecimentoMeta,
        valorLiquidoFornecimento.isAcceptableOrUnknown(
          data['valor_liquido_fornecimento']!,
          _valorLiquidoFornecimentoMeta,
        ),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeCanaDeducoesSafra map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return NfeCanaDeducoesSafra(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id'],
      ),
      idNfeCana: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_nfe_cana'],
      ),
      decricao: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}decricao'],
      ),
      valorDeducao: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_deducao'],
      ),
      valorFornecimento: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_fornecimento'],
      ),
      valorTotalDeducao: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_total_deducao'],
      ),
      valorLiquidoFornecimento: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_liquido_fornecimento'],
      ),
    );
  }

  @override
  $NfeCanaDeducoesSafrasTable createAlias(String alias) {
    return $NfeCanaDeducoesSafrasTable(attachedDatabase, alias);
  }
}

class NfeCanaDeducoesSafra extends DataClass
    implements Insertable<NfeCanaDeducoesSafra> {
  final int? id;
  final int? idNfeCana;
  final String? decricao;
  final double? valorDeducao;
  final double? valorFornecimento;
  final double? valorTotalDeducao;
  final double? valorLiquidoFornecimento;
  const NfeCanaDeducoesSafra({
    this.id,
    this.idNfeCana,
    this.decricao,
    this.valorDeducao,
    this.valorFornecimento,
    this.valorTotalDeducao,
    this.valorLiquidoFornecimento,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeCana != null) {
      map['id_nfe_cana'] = Variable<int>(idNfeCana);
    }
    if (!nullToAbsent || decricao != null) {
      map['decricao'] = Variable<String>(decricao);
    }
    if (!nullToAbsent || valorDeducao != null) {
      map['valor_deducao'] = Variable<double>(valorDeducao);
    }
    if (!nullToAbsent || valorFornecimento != null) {
      map['valor_fornecimento'] = Variable<double>(valorFornecimento);
    }
    if (!nullToAbsent || valorTotalDeducao != null) {
      map['valor_total_deducao'] = Variable<double>(valorTotalDeducao);
    }
    if (!nullToAbsent || valorLiquidoFornecimento != null) {
      map['valor_liquido_fornecimento'] = Variable<double>(
        valorLiquidoFornecimento,
      );
    }
    return map;
  }

  factory NfeCanaDeducoesSafra.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeCanaDeducoesSafra(
      id: serializer.fromJson<int?>(json['id']),
      idNfeCana: serializer.fromJson<int?>(json['idNfeCana']),
      decricao: serializer.fromJson<String?>(json['decricao']),
      valorDeducao: serializer.fromJson<double?>(json['valorDeducao']),
      valorFornecimento: serializer.fromJson<double?>(
        json['valorFornecimento'],
      ),
      valorTotalDeducao: serializer.fromJson<double?>(
        json['valorTotalDeducao'],
      ),
      valorLiquidoFornecimento: serializer.fromJson<double?>(
        json['valorLiquidoFornecimento'],
      ),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeCana': serializer.toJson<int?>(idNfeCana),
      'decricao': serializer.toJson<String?>(decricao),
      'valorDeducao': serializer.toJson<double?>(valorDeducao),
      'valorFornecimento': serializer.toJson<double?>(valorFornecimento),
      'valorTotalDeducao': serializer.toJson<double?>(valorTotalDeducao),
      'valorLiquidoFornecimento': serializer.toJson<double?>(
        valorLiquidoFornecimento,
      ),
    };
  }

  NfeCanaDeducoesSafra copyWith({
    Value<int?> id = const Value.absent(),
    Value<int?> idNfeCana = const Value.absent(),
    Value<String?> decricao = const Value.absent(),
    Value<double?> valorDeducao = const Value.absent(),
    Value<double?> valorFornecimento = const Value.absent(),
    Value<double?> valorTotalDeducao = const Value.absent(),
    Value<double?> valorLiquidoFornecimento = const Value.absent(),
  }) => NfeCanaDeducoesSafra(
    id: id.present ? id.value : this.id,
    idNfeCana: idNfeCana.present ? idNfeCana.value : this.idNfeCana,
    decricao: decricao.present ? decricao.value : this.decricao,
    valorDeducao: valorDeducao.present ? valorDeducao.value : this.valorDeducao,
    valorFornecimento:
        valorFornecimento.present
            ? valorFornecimento.value
            : this.valorFornecimento,
    valorTotalDeducao:
        valorTotalDeducao.present
            ? valorTotalDeducao.value
            : this.valorTotalDeducao,
    valorLiquidoFornecimento:
        valorLiquidoFornecimento.present
            ? valorLiquidoFornecimento.value
            : this.valorLiquidoFornecimento,
  );
  NfeCanaDeducoesSafra copyWithCompanion(NfeCanaDeducoesSafrasCompanion data) {
    return NfeCanaDeducoesSafra(
      id: data.id.present ? data.id.value : this.id,
      idNfeCana: data.idNfeCana.present ? data.idNfeCana.value : this.idNfeCana,
      decricao: data.decricao.present ? data.decricao.value : this.decricao,
      valorDeducao:
          data.valorDeducao.present
              ? data.valorDeducao.value
              : this.valorDeducao,
      valorFornecimento:
          data.valorFornecimento.present
              ? data.valorFornecimento.value
              : this.valorFornecimento,
      valorTotalDeducao:
          data.valorTotalDeducao.present
              ? data.valorTotalDeducao.value
              : this.valorTotalDeducao,
      valorLiquidoFornecimento:
          data.valorLiquidoFornecimento.present
              ? data.valorLiquidoFornecimento.value
              : this.valorLiquidoFornecimento,
    );
  }

  @override
  String toString() {
    return (StringBuffer('NfeCanaDeducoesSafra(')
          ..write('id: $id, ')
          ..write('idNfeCana: $idNfeCana, ')
          ..write('decricao: $decricao, ')
          ..write('valorDeducao: $valorDeducao, ')
          ..write('valorFornecimento: $valorFornecimento, ')
          ..write('valorTotalDeducao: $valorTotalDeducao, ')
          ..write('valorLiquidoFornecimento: $valorLiquidoFornecimento')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    idNfeCana,
    decricao,
    valorDeducao,
    valorFornecimento,
    valorTotalDeducao,
    valorLiquidoFornecimento,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeCanaDeducoesSafra &&
          other.id == this.id &&
          other.idNfeCana == this.idNfeCana &&
          other.decricao == this.decricao &&
          other.valorDeducao == this.valorDeducao &&
          other.valorFornecimento == this.valorFornecimento &&
          other.valorTotalDeducao == this.valorTotalDeducao &&
          other.valorLiquidoFornecimento == this.valorLiquidoFornecimento);
}

class NfeCanaDeducoesSafrasCompanion
    extends UpdateCompanion<NfeCanaDeducoesSafra> {
  final Value<int?> id;
  final Value<int?> idNfeCana;
  final Value<String?> decricao;
  final Value<double?> valorDeducao;
  final Value<double?> valorFornecimento;
  final Value<double?> valorTotalDeducao;
  final Value<double?> valorLiquidoFornecimento;
  const NfeCanaDeducoesSafrasCompanion({
    this.id = const Value.absent(),
    this.idNfeCana = const Value.absent(),
    this.decricao = const Value.absent(),
    this.valorDeducao = const Value.absent(),
    this.valorFornecimento = const Value.absent(),
    this.valorTotalDeducao = const Value.absent(),
    this.valorLiquidoFornecimento = const Value.absent(),
  });
  NfeCanaDeducoesSafrasCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeCana = const Value.absent(),
    this.decricao = const Value.absent(),
    this.valorDeducao = const Value.absent(),
    this.valorFornecimento = const Value.absent(),
    this.valorTotalDeducao = const Value.absent(),
    this.valorLiquidoFornecimento = const Value.absent(),
  });
  static Insertable<NfeCanaDeducoesSafra> custom({
    Expression<int>? id,
    Expression<int>? idNfeCana,
    Expression<String>? decricao,
    Expression<double>? valorDeducao,
    Expression<double>? valorFornecimento,
    Expression<double>? valorTotalDeducao,
    Expression<double>? valorLiquidoFornecimento,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (idNfeCana != null) 'id_nfe_cana': idNfeCana,
      if (decricao != null) 'decricao': decricao,
      if (valorDeducao != null) 'valor_deducao': valorDeducao,
      if (valorFornecimento != null) 'valor_fornecimento': valorFornecimento,
      if (valorTotalDeducao != null) 'valor_total_deducao': valorTotalDeducao,
      if (valorLiquidoFornecimento != null)
        'valor_liquido_fornecimento': valorLiquidoFornecimento,
    });
  }

  NfeCanaDeducoesSafrasCompanion copyWith({
    Value<int?>? id,
    Value<int?>? idNfeCana,
    Value<String?>? decricao,
    Value<double?>? valorDeducao,
    Value<double?>? valorFornecimento,
    Value<double?>? valorTotalDeducao,
    Value<double?>? valorLiquidoFornecimento,
  }) {
    return NfeCanaDeducoesSafrasCompanion(
      id: id ?? this.id,
      idNfeCana: idNfeCana ?? this.idNfeCana,
      decricao: decricao ?? this.decricao,
      valorDeducao: valorDeducao ?? this.valorDeducao,
      valorFornecimento: valorFornecimento ?? this.valorFornecimento,
      valorTotalDeducao: valorTotalDeducao ?? this.valorTotalDeducao,
      valorLiquidoFornecimento:
          valorLiquidoFornecimento ?? this.valorLiquidoFornecimento,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (idNfeCana.present) {
      map['id_nfe_cana'] = Variable<int>(idNfeCana.value);
    }
    if (decricao.present) {
      map['decricao'] = Variable<String>(decricao.value);
    }
    if (valorDeducao.present) {
      map['valor_deducao'] = Variable<double>(valorDeducao.value);
    }
    if (valorFornecimento.present) {
      map['valor_fornecimento'] = Variable<double>(valorFornecimento.value);
    }
    if (valorTotalDeducao.present) {
      map['valor_total_deducao'] = Variable<double>(valorTotalDeducao.value);
    }
    if (valorLiquidoFornecimento.present) {
      map['valor_liquido_fornecimento'] = Variable<double>(
        valorLiquidoFornecimento.value,
      );
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeCanaDeducoesSafrasCompanion(')
          ..write('id: $id, ')
          ..write('idNfeCana: $idNfeCana, ')
          ..write('decricao: $decricao, ')
          ..write('valorDeducao: $valorDeducao, ')
          ..write('valorFornecimento: $valorFornecimento, ')
          ..write('valorTotalDeducao: $valorTotalDeducao, ')
          ..write('valorLiquidoFornecimento: $valorLiquidoFornecimento')
          ..write(')'))
        .toString();
  }
}

class $NfeCupomFiscalReferenciadosTable extends NfeCupomFiscalReferenciados
    with
        TableInfo<
          $NfeCupomFiscalReferenciadosTable,
          NfeCupomFiscalReferenciado
        > {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeCupomFiscalReferenciadosTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
    'id',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idNfeCabecalhoMeta = const VerificationMeta(
    'idNfeCabecalho',
  );
  @override
  late final GeneratedColumn<int> idNfeCabecalho = GeneratedColumn<int>(
    'id_nfe_cabecalho',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _modeloDocumentoFiscalMeta =
      const VerificationMeta('modeloDocumentoFiscal');
  @override
  late final GeneratedColumn<String> modeloDocumentoFiscal =
      GeneratedColumn<String>(
        'modelo_documento_fiscal',
        aliasedName,
        true,
        additionalChecks: GeneratedColumn.checkTextLength(
          minTextLength: 0,
          maxTextLength: 2,
        ),
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _numeroOrdemEcfMeta = const VerificationMeta(
    'numeroOrdemEcf',
  );
  @override
  late final GeneratedColumn<int> numeroOrdemEcf = GeneratedColumn<int>(
    'numero_ordem_ecf',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _cooMeta = const VerificationMeta('coo');
  @override
  late final GeneratedColumn<int> coo = GeneratedColumn<int>(
    'coo',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _dataEmissaoCupomMeta = const VerificationMeta(
    'dataEmissaoCupom',
  );
  @override
  late final GeneratedColumn<DateTime> dataEmissaoCupom =
      GeneratedColumn<DateTime>(
        'data_emissao_cupom',
        aliasedName,
        true,
        type: DriftSqlType.dateTime,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _numeroCaixaMeta = const VerificationMeta(
    'numeroCaixa',
  );
  @override
  late final GeneratedColumn<int> numeroCaixa = GeneratedColumn<int>(
    'numero_caixa',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _numeroSerieEcfMeta = const VerificationMeta(
    'numeroSerieEcf',
  );
  @override
  late final GeneratedColumn<String> numeroSerieEcf = GeneratedColumn<String>(
    'numero_serie_ecf',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 21,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    idNfeCabecalho,
    modeloDocumentoFiscal,
    numeroOrdemEcf,
    coo,
    dataEmissaoCupom,
    numeroCaixa,
    numeroSerieEcf,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'nfe_cupom_fiscal_referenciado';
  @override
  VerificationContext validateIntegrity(
    Insertable<NfeCupomFiscalReferenciado> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('id_nfe_cabecalho')) {
      context.handle(
        _idNfeCabecalhoMeta,
        idNfeCabecalho.isAcceptableOrUnknown(
          data['id_nfe_cabecalho']!,
          _idNfeCabecalhoMeta,
        ),
      );
    }
    if (data.containsKey('modelo_documento_fiscal')) {
      context.handle(
        _modeloDocumentoFiscalMeta,
        modeloDocumentoFiscal.isAcceptableOrUnknown(
          data['modelo_documento_fiscal']!,
          _modeloDocumentoFiscalMeta,
        ),
      );
    }
    if (data.containsKey('numero_ordem_ecf')) {
      context.handle(
        _numeroOrdemEcfMeta,
        numeroOrdemEcf.isAcceptableOrUnknown(
          data['numero_ordem_ecf']!,
          _numeroOrdemEcfMeta,
        ),
      );
    }
    if (data.containsKey('coo')) {
      context.handle(
        _cooMeta,
        coo.isAcceptableOrUnknown(data['coo']!, _cooMeta),
      );
    }
    if (data.containsKey('data_emissao_cupom')) {
      context.handle(
        _dataEmissaoCupomMeta,
        dataEmissaoCupom.isAcceptableOrUnknown(
          data['data_emissao_cupom']!,
          _dataEmissaoCupomMeta,
        ),
      );
    }
    if (data.containsKey('numero_caixa')) {
      context.handle(
        _numeroCaixaMeta,
        numeroCaixa.isAcceptableOrUnknown(
          data['numero_caixa']!,
          _numeroCaixaMeta,
        ),
      );
    }
    if (data.containsKey('numero_serie_ecf')) {
      context.handle(
        _numeroSerieEcfMeta,
        numeroSerieEcf.isAcceptableOrUnknown(
          data['numero_serie_ecf']!,
          _numeroSerieEcfMeta,
        ),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeCupomFiscalReferenciado map(
    Map<String, dynamic> data, {
    String? tablePrefix,
  }) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return NfeCupomFiscalReferenciado(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id'],
      ),
      idNfeCabecalho: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_nfe_cabecalho'],
      ),
      modeloDocumentoFiscal: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}modelo_documento_fiscal'],
      ),
      numeroOrdemEcf: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}numero_ordem_ecf'],
      ),
      coo: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}coo'],
      ),
      dataEmissaoCupom: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}data_emissao_cupom'],
      ),
      numeroCaixa: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}numero_caixa'],
      ),
      numeroSerieEcf: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}numero_serie_ecf'],
      ),
    );
  }

  @override
  $NfeCupomFiscalReferenciadosTable createAlias(String alias) {
    return $NfeCupomFiscalReferenciadosTable(attachedDatabase, alias);
  }
}

class NfeCupomFiscalReferenciado extends DataClass
    implements Insertable<NfeCupomFiscalReferenciado> {
  final int? id;
  final int? idNfeCabecalho;
  final String? modeloDocumentoFiscal;
  final int? numeroOrdemEcf;
  final int? coo;
  final DateTime? dataEmissaoCupom;
  final int? numeroCaixa;
  final String? numeroSerieEcf;
  const NfeCupomFiscalReferenciado({
    this.id,
    this.idNfeCabecalho,
    this.modeloDocumentoFiscal,
    this.numeroOrdemEcf,
    this.coo,
    this.dataEmissaoCupom,
    this.numeroCaixa,
    this.numeroSerieEcf,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeCabecalho != null) {
      map['id_nfe_cabecalho'] = Variable<int>(idNfeCabecalho);
    }
    if (!nullToAbsent || modeloDocumentoFiscal != null) {
      map['modelo_documento_fiscal'] = Variable<String>(modeloDocumentoFiscal);
    }
    if (!nullToAbsent || numeroOrdemEcf != null) {
      map['numero_ordem_ecf'] = Variable<int>(numeroOrdemEcf);
    }
    if (!nullToAbsent || coo != null) {
      map['coo'] = Variable<int>(coo);
    }
    if (!nullToAbsent || dataEmissaoCupom != null) {
      map['data_emissao_cupom'] = Variable<DateTime>(dataEmissaoCupom);
    }
    if (!nullToAbsent || numeroCaixa != null) {
      map['numero_caixa'] = Variable<int>(numeroCaixa);
    }
    if (!nullToAbsent || numeroSerieEcf != null) {
      map['numero_serie_ecf'] = Variable<String>(numeroSerieEcf);
    }
    return map;
  }

  factory NfeCupomFiscalReferenciado.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeCupomFiscalReferenciado(
      id: serializer.fromJson<int?>(json['id']),
      idNfeCabecalho: serializer.fromJson<int?>(json['idNfeCabecalho']),
      modeloDocumentoFiscal: serializer.fromJson<String?>(
        json['modeloDocumentoFiscal'],
      ),
      numeroOrdemEcf: serializer.fromJson<int?>(json['numeroOrdemEcf']),
      coo: serializer.fromJson<int?>(json['coo']),
      dataEmissaoCupom: serializer.fromJson<DateTime?>(
        json['dataEmissaoCupom'],
      ),
      numeroCaixa: serializer.fromJson<int?>(json['numeroCaixa']),
      numeroSerieEcf: serializer.fromJson<String?>(json['numeroSerieEcf']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeCabecalho': serializer.toJson<int?>(idNfeCabecalho),
      'modeloDocumentoFiscal': serializer.toJson<String?>(
        modeloDocumentoFiscal,
      ),
      'numeroOrdemEcf': serializer.toJson<int?>(numeroOrdemEcf),
      'coo': serializer.toJson<int?>(coo),
      'dataEmissaoCupom': serializer.toJson<DateTime?>(dataEmissaoCupom),
      'numeroCaixa': serializer.toJson<int?>(numeroCaixa),
      'numeroSerieEcf': serializer.toJson<String?>(numeroSerieEcf),
    };
  }

  NfeCupomFiscalReferenciado copyWith({
    Value<int?> id = const Value.absent(),
    Value<int?> idNfeCabecalho = const Value.absent(),
    Value<String?> modeloDocumentoFiscal = const Value.absent(),
    Value<int?> numeroOrdemEcf = const Value.absent(),
    Value<int?> coo = const Value.absent(),
    Value<DateTime?> dataEmissaoCupom = const Value.absent(),
    Value<int?> numeroCaixa = const Value.absent(),
    Value<String?> numeroSerieEcf = const Value.absent(),
  }) => NfeCupomFiscalReferenciado(
    id: id.present ? id.value : this.id,
    idNfeCabecalho:
        idNfeCabecalho.present ? idNfeCabecalho.value : this.idNfeCabecalho,
    modeloDocumentoFiscal:
        modeloDocumentoFiscal.present
            ? modeloDocumentoFiscal.value
            : this.modeloDocumentoFiscal,
    numeroOrdemEcf:
        numeroOrdemEcf.present ? numeroOrdemEcf.value : this.numeroOrdemEcf,
    coo: coo.present ? coo.value : this.coo,
    dataEmissaoCupom:
        dataEmissaoCupom.present
            ? dataEmissaoCupom.value
            : this.dataEmissaoCupom,
    numeroCaixa: numeroCaixa.present ? numeroCaixa.value : this.numeroCaixa,
    numeroSerieEcf:
        numeroSerieEcf.present ? numeroSerieEcf.value : this.numeroSerieEcf,
  );
  NfeCupomFiscalReferenciado copyWithCompanion(
    NfeCupomFiscalReferenciadosCompanion data,
  ) {
    return NfeCupomFiscalReferenciado(
      id: data.id.present ? data.id.value : this.id,
      idNfeCabecalho:
          data.idNfeCabecalho.present
              ? data.idNfeCabecalho.value
              : this.idNfeCabecalho,
      modeloDocumentoFiscal:
          data.modeloDocumentoFiscal.present
              ? data.modeloDocumentoFiscal.value
              : this.modeloDocumentoFiscal,
      numeroOrdemEcf:
          data.numeroOrdemEcf.present
              ? data.numeroOrdemEcf.value
              : this.numeroOrdemEcf,
      coo: data.coo.present ? data.coo.value : this.coo,
      dataEmissaoCupom:
          data.dataEmissaoCupom.present
              ? data.dataEmissaoCupom.value
              : this.dataEmissaoCupom,
      numeroCaixa:
          data.numeroCaixa.present ? data.numeroCaixa.value : this.numeroCaixa,
      numeroSerieEcf:
          data.numeroSerieEcf.present
              ? data.numeroSerieEcf.value
              : this.numeroSerieEcf,
    );
  }

  @override
  String toString() {
    return (StringBuffer('NfeCupomFiscalReferenciado(')
          ..write('id: $id, ')
          ..write('idNfeCabecalho: $idNfeCabecalho, ')
          ..write('modeloDocumentoFiscal: $modeloDocumentoFiscal, ')
          ..write('numeroOrdemEcf: $numeroOrdemEcf, ')
          ..write('coo: $coo, ')
          ..write('dataEmissaoCupom: $dataEmissaoCupom, ')
          ..write('numeroCaixa: $numeroCaixa, ')
          ..write('numeroSerieEcf: $numeroSerieEcf')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    idNfeCabecalho,
    modeloDocumentoFiscal,
    numeroOrdemEcf,
    coo,
    dataEmissaoCupom,
    numeroCaixa,
    numeroSerieEcf,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeCupomFiscalReferenciado &&
          other.id == this.id &&
          other.idNfeCabecalho == this.idNfeCabecalho &&
          other.modeloDocumentoFiscal == this.modeloDocumentoFiscal &&
          other.numeroOrdemEcf == this.numeroOrdemEcf &&
          other.coo == this.coo &&
          other.dataEmissaoCupom == this.dataEmissaoCupom &&
          other.numeroCaixa == this.numeroCaixa &&
          other.numeroSerieEcf == this.numeroSerieEcf);
}

class NfeCupomFiscalReferenciadosCompanion
    extends UpdateCompanion<NfeCupomFiscalReferenciado> {
  final Value<int?> id;
  final Value<int?> idNfeCabecalho;
  final Value<String?> modeloDocumentoFiscal;
  final Value<int?> numeroOrdemEcf;
  final Value<int?> coo;
  final Value<DateTime?> dataEmissaoCupom;
  final Value<int?> numeroCaixa;
  final Value<String?> numeroSerieEcf;
  const NfeCupomFiscalReferenciadosCompanion({
    this.id = const Value.absent(),
    this.idNfeCabecalho = const Value.absent(),
    this.modeloDocumentoFiscal = const Value.absent(),
    this.numeroOrdemEcf = const Value.absent(),
    this.coo = const Value.absent(),
    this.dataEmissaoCupom = const Value.absent(),
    this.numeroCaixa = const Value.absent(),
    this.numeroSerieEcf = const Value.absent(),
  });
  NfeCupomFiscalReferenciadosCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeCabecalho = const Value.absent(),
    this.modeloDocumentoFiscal = const Value.absent(),
    this.numeroOrdemEcf = const Value.absent(),
    this.coo = const Value.absent(),
    this.dataEmissaoCupom = const Value.absent(),
    this.numeroCaixa = const Value.absent(),
    this.numeroSerieEcf = const Value.absent(),
  });
  static Insertable<NfeCupomFiscalReferenciado> custom({
    Expression<int>? id,
    Expression<int>? idNfeCabecalho,
    Expression<String>? modeloDocumentoFiscal,
    Expression<int>? numeroOrdemEcf,
    Expression<int>? coo,
    Expression<DateTime>? dataEmissaoCupom,
    Expression<int>? numeroCaixa,
    Expression<String>? numeroSerieEcf,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (idNfeCabecalho != null) 'id_nfe_cabecalho': idNfeCabecalho,
      if (modeloDocumentoFiscal != null)
        'modelo_documento_fiscal': modeloDocumentoFiscal,
      if (numeroOrdemEcf != null) 'numero_ordem_ecf': numeroOrdemEcf,
      if (coo != null) 'coo': coo,
      if (dataEmissaoCupom != null) 'data_emissao_cupom': dataEmissaoCupom,
      if (numeroCaixa != null) 'numero_caixa': numeroCaixa,
      if (numeroSerieEcf != null) 'numero_serie_ecf': numeroSerieEcf,
    });
  }

  NfeCupomFiscalReferenciadosCompanion copyWith({
    Value<int?>? id,
    Value<int?>? idNfeCabecalho,
    Value<String?>? modeloDocumentoFiscal,
    Value<int?>? numeroOrdemEcf,
    Value<int?>? coo,
    Value<DateTime?>? dataEmissaoCupom,
    Value<int?>? numeroCaixa,
    Value<String?>? numeroSerieEcf,
  }) {
    return NfeCupomFiscalReferenciadosCompanion(
      id: id ?? this.id,
      idNfeCabecalho: idNfeCabecalho ?? this.idNfeCabecalho,
      modeloDocumentoFiscal:
          modeloDocumentoFiscal ?? this.modeloDocumentoFiscal,
      numeroOrdemEcf: numeroOrdemEcf ?? this.numeroOrdemEcf,
      coo: coo ?? this.coo,
      dataEmissaoCupom: dataEmissaoCupom ?? this.dataEmissaoCupom,
      numeroCaixa: numeroCaixa ?? this.numeroCaixa,
      numeroSerieEcf: numeroSerieEcf ?? this.numeroSerieEcf,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (idNfeCabecalho.present) {
      map['id_nfe_cabecalho'] = Variable<int>(idNfeCabecalho.value);
    }
    if (modeloDocumentoFiscal.present) {
      map['modelo_documento_fiscal'] = Variable<String>(
        modeloDocumentoFiscal.value,
      );
    }
    if (numeroOrdemEcf.present) {
      map['numero_ordem_ecf'] = Variable<int>(numeroOrdemEcf.value);
    }
    if (coo.present) {
      map['coo'] = Variable<int>(coo.value);
    }
    if (dataEmissaoCupom.present) {
      map['data_emissao_cupom'] = Variable<DateTime>(dataEmissaoCupom.value);
    }
    if (numeroCaixa.present) {
      map['numero_caixa'] = Variable<int>(numeroCaixa.value);
    }
    if (numeroSerieEcf.present) {
      map['numero_serie_ecf'] = Variable<String>(numeroSerieEcf.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeCupomFiscalReferenciadosCompanion(')
          ..write('id: $id, ')
          ..write('idNfeCabecalho: $idNfeCabecalho, ')
          ..write('modeloDocumentoFiscal: $modeloDocumentoFiscal, ')
          ..write('numeroOrdemEcf: $numeroOrdemEcf, ')
          ..write('coo: $coo, ')
          ..write('dataEmissaoCupom: $dataEmissaoCupom, ')
          ..write('numeroCaixa: $numeroCaixa, ')
          ..write('numeroSerieEcf: $numeroSerieEcf')
          ..write(')'))
        .toString();
  }
}

class $NfeProdRuralReferenciadasTable extends NfeProdRuralReferenciadas
    with TableInfo<$NfeProdRuralReferenciadasTable, NfeProdRuralReferenciada> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeProdRuralReferenciadasTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
    'id',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idNfeCabecalhoMeta = const VerificationMeta(
    'idNfeCabecalho',
  );
  @override
  late final GeneratedColumn<int> idNfeCabecalho = GeneratedColumn<int>(
    'id_nfe_cabecalho',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _codigoUfMeta = const VerificationMeta(
    'codigoUf',
  );
  @override
  late final GeneratedColumn<int> codigoUf = GeneratedColumn<int>(
    'codigo_uf',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _anoMesMeta = const VerificationMeta('anoMes');
  @override
  late final GeneratedColumn<String> anoMes = GeneratedColumn<String>(
    'ano_mes',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 4,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _cnpjMeta = const VerificationMeta('cnpj');
  @override
  late final GeneratedColumn<String> cnpj = GeneratedColumn<String>(
    'cnpj',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 14,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _cpfMeta = const VerificationMeta('cpf');
  @override
  late final GeneratedColumn<String> cpf = GeneratedColumn<String>(
    'cpf',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 11,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _inscricaoEstadualMeta = const VerificationMeta(
    'inscricaoEstadual',
  );
  @override
  late final GeneratedColumn<String> inscricaoEstadual =
      GeneratedColumn<String>(
        'inscricao_estadual',
        aliasedName,
        true,
        additionalChecks: GeneratedColumn.checkTextLength(
          minTextLength: 0,
          maxTextLength: 14,
        ),
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _modeloMeta = const VerificationMeta('modelo');
  @override
  late final GeneratedColumn<String> modelo = GeneratedColumn<String>(
    'modelo',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 2,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _serieMeta = const VerificationMeta('serie');
  @override
  late final GeneratedColumn<String> serie = GeneratedColumn<String>(
    'serie',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 3,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _numeroNfMeta = const VerificationMeta(
    'numeroNf',
  );
  @override
  late final GeneratedColumn<int> numeroNf = GeneratedColumn<int>(
    'numero_nf',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _cteMeta = const VerificationMeta('cte');
  @override
  late final GeneratedColumn<String> cte = GeneratedColumn<String>(
    'cte',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 44,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    idNfeCabecalho,
    codigoUf,
    anoMes,
    cnpj,
    cpf,
    inscricaoEstadual,
    modelo,
    serie,
    numeroNf,
    cte,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'nfe_prod_rural_referenciada';
  @override
  VerificationContext validateIntegrity(
    Insertable<NfeProdRuralReferenciada> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('id_nfe_cabecalho')) {
      context.handle(
        _idNfeCabecalhoMeta,
        idNfeCabecalho.isAcceptableOrUnknown(
          data['id_nfe_cabecalho']!,
          _idNfeCabecalhoMeta,
        ),
      );
    }
    if (data.containsKey('codigo_uf')) {
      context.handle(
        _codigoUfMeta,
        codigoUf.isAcceptableOrUnknown(data['codigo_uf']!, _codigoUfMeta),
      );
    }
    if (data.containsKey('ano_mes')) {
      context.handle(
        _anoMesMeta,
        anoMes.isAcceptableOrUnknown(data['ano_mes']!, _anoMesMeta),
      );
    }
    if (data.containsKey('cnpj')) {
      context.handle(
        _cnpjMeta,
        cnpj.isAcceptableOrUnknown(data['cnpj']!, _cnpjMeta),
      );
    }
    if (data.containsKey('cpf')) {
      context.handle(
        _cpfMeta,
        cpf.isAcceptableOrUnknown(data['cpf']!, _cpfMeta),
      );
    }
    if (data.containsKey('inscricao_estadual')) {
      context.handle(
        _inscricaoEstadualMeta,
        inscricaoEstadual.isAcceptableOrUnknown(
          data['inscricao_estadual']!,
          _inscricaoEstadualMeta,
        ),
      );
    }
    if (data.containsKey('modelo')) {
      context.handle(
        _modeloMeta,
        modelo.isAcceptableOrUnknown(data['modelo']!, _modeloMeta),
      );
    }
    if (data.containsKey('serie')) {
      context.handle(
        _serieMeta,
        serie.isAcceptableOrUnknown(data['serie']!, _serieMeta),
      );
    }
    if (data.containsKey('numero_nf')) {
      context.handle(
        _numeroNfMeta,
        numeroNf.isAcceptableOrUnknown(data['numero_nf']!, _numeroNfMeta),
      );
    }
    if (data.containsKey('cte')) {
      context.handle(
        _cteMeta,
        cte.isAcceptableOrUnknown(data['cte']!, _cteMeta),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeProdRuralReferenciada map(
    Map<String, dynamic> data, {
    String? tablePrefix,
  }) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return NfeProdRuralReferenciada(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id'],
      ),
      idNfeCabecalho: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_nfe_cabecalho'],
      ),
      codigoUf: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}codigo_uf'],
      ),
      anoMes: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ano_mes'],
      ),
      cnpj: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}cnpj'],
      ),
      cpf: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}cpf'],
      ),
      inscricaoEstadual: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}inscricao_estadual'],
      ),
      modelo: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}modelo'],
      ),
      serie: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}serie'],
      ),
      numeroNf: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}numero_nf'],
      ),
      cte: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}cte'],
      ),
    );
  }

  @override
  $NfeProdRuralReferenciadasTable createAlias(String alias) {
    return $NfeProdRuralReferenciadasTable(attachedDatabase, alias);
  }
}

class NfeProdRuralReferenciada extends DataClass
    implements Insertable<NfeProdRuralReferenciada> {
  final int? id;
  final int? idNfeCabecalho;
  final int? codigoUf;
  final String? anoMes;
  final String? cnpj;
  final String? cpf;
  final String? inscricaoEstadual;
  final String? modelo;
  final String? serie;
  final int? numeroNf;
  final String? cte;
  const NfeProdRuralReferenciada({
    this.id,
    this.idNfeCabecalho,
    this.codigoUf,
    this.anoMes,
    this.cnpj,
    this.cpf,
    this.inscricaoEstadual,
    this.modelo,
    this.serie,
    this.numeroNf,
    this.cte,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeCabecalho != null) {
      map['id_nfe_cabecalho'] = Variable<int>(idNfeCabecalho);
    }
    if (!nullToAbsent || codigoUf != null) {
      map['codigo_uf'] = Variable<int>(codigoUf);
    }
    if (!nullToAbsent || anoMes != null) {
      map['ano_mes'] = Variable<String>(anoMes);
    }
    if (!nullToAbsent || cnpj != null) {
      map['cnpj'] = Variable<String>(cnpj);
    }
    if (!nullToAbsent || cpf != null) {
      map['cpf'] = Variable<String>(cpf);
    }
    if (!nullToAbsent || inscricaoEstadual != null) {
      map['inscricao_estadual'] = Variable<String>(inscricaoEstadual);
    }
    if (!nullToAbsent || modelo != null) {
      map['modelo'] = Variable<String>(modelo);
    }
    if (!nullToAbsent || serie != null) {
      map['serie'] = Variable<String>(serie);
    }
    if (!nullToAbsent || numeroNf != null) {
      map['numero_nf'] = Variable<int>(numeroNf);
    }
    if (!nullToAbsent || cte != null) {
      map['cte'] = Variable<String>(cte);
    }
    return map;
  }

  factory NfeProdRuralReferenciada.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeProdRuralReferenciada(
      id: serializer.fromJson<int?>(json['id']),
      idNfeCabecalho: serializer.fromJson<int?>(json['idNfeCabecalho']),
      codigoUf: serializer.fromJson<int?>(json['codigoUf']),
      anoMes: serializer.fromJson<String?>(json['anoMes']),
      cnpj: serializer.fromJson<String?>(json['cnpj']),
      cpf: serializer.fromJson<String?>(json['cpf']),
      inscricaoEstadual: serializer.fromJson<String?>(
        json['inscricaoEstadual'],
      ),
      modelo: serializer.fromJson<String?>(json['modelo']),
      serie: serializer.fromJson<String?>(json['serie']),
      numeroNf: serializer.fromJson<int?>(json['numeroNf']),
      cte: serializer.fromJson<String?>(json['cte']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeCabecalho': serializer.toJson<int?>(idNfeCabecalho),
      'codigoUf': serializer.toJson<int?>(codigoUf),
      'anoMes': serializer.toJson<String?>(anoMes),
      'cnpj': serializer.toJson<String?>(cnpj),
      'cpf': serializer.toJson<String?>(cpf),
      'inscricaoEstadual': serializer.toJson<String?>(inscricaoEstadual),
      'modelo': serializer.toJson<String?>(modelo),
      'serie': serializer.toJson<String?>(serie),
      'numeroNf': serializer.toJson<int?>(numeroNf),
      'cte': serializer.toJson<String?>(cte),
    };
  }

  NfeProdRuralReferenciada copyWith({
    Value<int?> id = const Value.absent(),
    Value<int?> idNfeCabecalho = const Value.absent(),
    Value<int?> codigoUf = const Value.absent(),
    Value<String?> anoMes = const Value.absent(),
    Value<String?> cnpj = const Value.absent(),
    Value<String?> cpf = const Value.absent(),
    Value<String?> inscricaoEstadual = const Value.absent(),
    Value<String?> modelo = const Value.absent(),
    Value<String?> serie = const Value.absent(),
    Value<int?> numeroNf = const Value.absent(),
    Value<String?> cte = const Value.absent(),
  }) => NfeProdRuralReferenciada(
    id: id.present ? id.value : this.id,
    idNfeCabecalho:
        idNfeCabecalho.present ? idNfeCabecalho.value : this.idNfeCabecalho,
    codigoUf: codigoUf.present ? codigoUf.value : this.codigoUf,
    anoMes: anoMes.present ? anoMes.value : this.anoMes,
    cnpj: cnpj.present ? cnpj.value : this.cnpj,
    cpf: cpf.present ? cpf.value : this.cpf,
    inscricaoEstadual:
        inscricaoEstadual.present
            ? inscricaoEstadual.value
            : this.inscricaoEstadual,
    modelo: modelo.present ? modelo.value : this.modelo,
    serie: serie.present ? serie.value : this.serie,
    numeroNf: numeroNf.present ? numeroNf.value : this.numeroNf,
    cte: cte.present ? cte.value : this.cte,
  );
  NfeProdRuralReferenciada copyWithCompanion(
    NfeProdRuralReferenciadasCompanion data,
  ) {
    return NfeProdRuralReferenciada(
      id: data.id.present ? data.id.value : this.id,
      idNfeCabecalho:
          data.idNfeCabecalho.present
              ? data.idNfeCabecalho.value
              : this.idNfeCabecalho,
      codigoUf: data.codigoUf.present ? data.codigoUf.value : this.codigoUf,
      anoMes: data.anoMes.present ? data.anoMes.value : this.anoMes,
      cnpj: data.cnpj.present ? data.cnpj.value : this.cnpj,
      cpf: data.cpf.present ? data.cpf.value : this.cpf,
      inscricaoEstadual:
          data.inscricaoEstadual.present
              ? data.inscricaoEstadual.value
              : this.inscricaoEstadual,
      modelo: data.modelo.present ? data.modelo.value : this.modelo,
      serie: data.serie.present ? data.serie.value : this.serie,
      numeroNf: data.numeroNf.present ? data.numeroNf.value : this.numeroNf,
      cte: data.cte.present ? data.cte.value : this.cte,
    );
  }

  @override
  String toString() {
    return (StringBuffer('NfeProdRuralReferenciada(')
          ..write('id: $id, ')
          ..write('idNfeCabecalho: $idNfeCabecalho, ')
          ..write('codigoUf: $codigoUf, ')
          ..write('anoMes: $anoMes, ')
          ..write('cnpj: $cnpj, ')
          ..write('cpf: $cpf, ')
          ..write('inscricaoEstadual: $inscricaoEstadual, ')
          ..write('modelo: $modelo, ')
          ..write('serie: $serie, ')
          ..write('numeroNf: $numeroNf, ')
          ..write('cte: $cte')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    idNfeCabecalho,
    codigoUf,
    anoMes,
    cnpj,
    cpf,
    inscricaoEstadual,
    modelo,
    serie,
    numeroNf,
    cte,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeProdRuralReferenciada &&
          other.id == this.id &&
          other.idNfeCabecalho == this.idNfeCabecalho &&
          other.codigoUf == this.codigoUf &&
          other.anoMes == this.anoMes &&
          other.cnpj == this.cnpj &&
          other.cpf == this.cpf &&
          other.inscricaoEstadual == this.inscricaoEstadual &&
          other.modelo == this.modelo &&
          other.serie == this.serie &&
          other.numeroNf == this.numeroNf &&
          other.cte == this.cte);
}

class NfeProdRuralReferenciadasCompanion
    extends UpdateCompanion<NfeProdRuralReferenciada> {
  final Value<int?> id;
  final Value<int?> idNfeCabecalho;
  final Value<int?> codigoUf;
  final Value<String?> anoMes;
  final Value<String?> cnpj;
  final Value<String?> cpf;
  final Value<String?> inscricaoEstadual;
  final Value<String?> modelo;
  final Value<String?> serie;
  final Value<int?> numeroNf;
  final Value<String?> cte;
  const NfeProdRuralReferenciadasCompanion({
    this.id = const Value.absent(),
    this.idNfeCabecalho = const Value.absent(),
    this.codigoUf = const Value.absent(),
    this.anoMes = const Value.absent(),
    this.cnpj = const Value.absent(),
    this.cpf = const Value.absent(),
    this.inscricaoEstadual = const Value.absent(),
    this.modelo = const Value.absent(),
    this.serie = const Value.absent(),
    this.numeroNf = const Value.absent(),
    this.cte = const Value.absent(),
  });
  NfeProdRuralReferenciadasCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeCabecalho = const Value.absent(),
    this.codigoUf = const Value.absent(),
    this.anoMes = const Value.absent(),
    this.cnpj = const Value.absent(),
    this.cpf = const Value.absent(),
    this.inscricaoEstadual = const Value.absent(),
    this.modelo = const Value.absent(),
    this.serie = const Value.absent(),
    this.numeroNf = const Value.absent(),
    this.cte = const Value.absent(),
  });
  static Insertable<NfeProdRuralReferenciada> custom({
    Expression<int>? id,
    Expression<int>? idNfeCabecalho,
    Expression<int>? codigoUf,
    Expression<String>? anoMes,
    Expression<String>? cnpj,
    Expression<String>? cpf,
    Expression<String>? inscricaoEstadual,
    Expression<String>? modelo,
    Expression<String>? serie,
    Expression<int>? numeroNf,
    Expression<String>? cte,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (idNfeCabecalho != null) 'id_nfe_cabecalho': idNfeCabecalho,
      if (codigoUf != null) 'codigo_uf': codigoUf,
      if (anoMes != null) 'ano_mes': anoMes,
      if (cnpj != null) 'cnpj': cnpj,
      if (cpf != null) 'cpf': cpf,
      if (inscricaoEstadual != null) 'inscricao_estadual': inscricaoEstadual,
      if (modelo != null) 'modelo': modelo,
      if (serie != null) 'serie': serie,
      if (numeroNf != null) 'numero_nf': numeroNf,
      if (cte != null) 'cte': cte,
    });
  }

  NfeProdRuralReferenciadasCompanion copyWith({
    Value<int?>? id,
    Value<int?>? idNfeCabecalho,
    Value<int?>? codigoUf,
    Value<String?>? anoMes,
    Value<String?>? cnpj,
    Value<String?>? cpf,
    Value<String?>? inscricaoEstadual,
    Value<String?>? modelo,
    Value<String?>? serie,
    Value<int?>? numeroNf,
    Value<String?>? cte,
  }) {
    return NfeProdRuralReferenciadasCompanion(
      id: id ?? this.id,
      idNfeCabecalho: idNfeCabecalho ?? this.idNfeCabecalho,
      codigoUf: codigoUf ?? this.codigoUf,
      anoMes: anoMes ?? this.anoMes,
      cnpj: cnpj ?? this.cnpj,
      cpf: cpf ?? this.cpf,
      inscricaoEstadual: inscricaoEstadual ?? this.inscricaoEstadual,
      modelo: modelo ?? this.modelo,
      serie: serie ?? this.serie,
      numeroNf: numeroNf ?? this.numeroNf,
      cte: cte ?? this.cte,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (idNfeCabecalho.present) {
      map['id_nfe_cabecalho'] = Variable<int>(idNfeCabecalho.value);
    }
    if (codigoUf.present) {
      map['codigo_uf'] = Variable<int>(codigoUf.value);
    }
    if (anoMes.present) {
      map['ano_mes'] = Variable<String>(anoMes.value);
    }
    if (cnpj.present) {
      map['cnpj'] = Variable<String>(cnpj.value);
    }
    if (cpf.present) {
      map['cpf'] = Variable<String>(cpf.value);
    }
    if (inscricaoEstadual.present) {
      map['inscricao_estadual'] = Variable<String>(inscricaoEstadual.value);
    }
    if (modelo.present) {
      map['modelo'] = Variable<String>(modelo.value);
    }
    if (serie.present) {
      map['serie'] = Variable<String>(serie.value);
    }
    if (numeroNf.present) {
      map['numero_nf'] = Variable<int>(numeroNf.value);
    }
    if (cte.present) {
      map['cte'] = Variable<String>(cte.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeProdRuralReferenciadasCompanion(')
          ..write('id: $id, ')
          ..write('idNfeCabecalho: $idNfeCabecalho, ')
          ..write('codigoUf: $codigoUf, ')
          ..write('anoMes: $anoMes, ')
          ..write('cnpj: $cnpj, ')
          ..write('cpf: $cpf, ')
          ..write('inscricaoEstadual: $inscricaoEstadual, ')
          ..write('modelo: $modelo, ')
          ..write('serie: $serie, ')
          ..write('numeroNf: $numeroNf, ')
          ..write('cte: $cte')
          ..write(')'))
        .toString();
  }
}

class $NfeNfReferenciadasTable extends NfeNfReferenciadas
    with TableInfo<$NfeNfReferenciadasTable, NfeNfReferenciada> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeNfReferenciadasTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
    'id',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idNfeCabecalhoMeta = const VerificationMeta(
    'idNfeCabecalho',
  );
  @override
  late final GeneratedColumn<int> idNfeCabecalho = GeneratedColumn<int>(
    'id_nfe_cabecalho',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _codigoUfMeta = const VerificationMeta(
    'codigoUf',
  );
  @override
  late final GeneratedColumn<int> codigoUf = GeneratedColumn<int>(
    'codigo_uf',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _anoMesMeta = const VerificationMeta('anoMes');
  @override
  late final GeneratedColumn<String> anoMes = GeneratedColumn<String>(
    'ano_mes',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 4,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _cnpjMeta = const VerificationMeta('cnpj');
  @override
  late final GeneratedColumn<String> cnpj = GeneratedColumn<String>(
    'cnpj',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 14,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _modeloMeta = const VerificationMeta('modelo');
  @override
  late final GeneratedColumn<String> modelo = GeneratedColumn<String>(
    'modelo',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 2,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _serieMeta = const VerificationMeta('serie');
  @override
  late final GeneratedColumn<String> serie = GeneratedColumn<String>(
    'serie',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 3,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _numeroNfMeta = const VerificationMeta(
    'numeroNf',
  );
  @override
  late final GeneratedColumn<int> numeroNf = GeneratedColumn<int>(
    'numero_nf',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    idNfeCabecalho,
    codigoUf,
    anoMes,
    cnpj,
    modelo,
    serie,
    numeroNf,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'nfe_nf_referenciada';
  @override
  VerificationContext validateIntegrity(
    Insertable<NfeNfReferenciada> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('id_nfe_cabecalho')) {
      context.handle(
        _idNfeCabecalhoMeta,
        idNfeCabecalho.isAcceptableOrUnknown(
          data['id_nfe_cabecalho']!,
          _idNfeCabecalhoMeta,
        ),
      );
    }
    if (data.containsKey('codigo_uf')) {
      context.handle(
        _codigoUfMeta,
        codigoUf.isAcceptableOrUnknown(data['codigo_uf']!, _codigoUfMeta),
      );
    }
    if (data.containsKey('ano_mes')) {
      context.handle(
        _anoMesMeta,
        anoMes.isAcceptableOrUnknown(data['ano_mes']!, _anoMesMeta),
      );
    }
    if (data.containsKey('cnpj')) {
      context.handle(
        _cnpjMeta,
        cnpj.isAcceptableOrUnknown(data['cnpj']!, _cnpjMeta),
      );
    }
    if (data.containsKey('modelo')) {
      context.handle(
        _modeloMeta,
        modelo.isAcceptableOrUnknown(data['modelo']!, _modeloMeta),
      );
    }
    if (data.containsKey('serie')) {
      context.handle(
        _serieMeta,
        serie.isAcceptableOrUnknown(data['serie']!, _serieMeta),
      );
    }
    if (data.containsKey('numero_nf')) {
      context.handle(
        _numeroNfMeta,
        numeroNf.isAcceptableOrUnknown(data['numero_nf']!, _numeroNfMeta),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeNfReferenciada map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return NfeNfReferenciada(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id'],
      ),
      idNfeCabecalho: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_nfe_cabecalho'],
      ),
      codigoUf: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}codigo_uf'],
      ),
      anoMes: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ano_mes'],
      ),
      cnpj: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}cnpj'],
      ),
      modelo: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}modelo'],
      ),
      serie: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}serie'],
      ),
      numeroNf: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}numero_nf'],
      ),
    );
  }

  @override
  $NfeNfReferenciadasTable createAlias(String alias) {
    return $NfeNfReferenciadasTable(attachedDatabase, alias);
  }
}

class NfeNfReferenciada extends DataClass
    implements Insertable<NfeNfReferenciada> {
  final int? id;
  final int? idNfeCabecalho;
  final int? codigoUf;
  final String? anoMes;
  final String? cnpj;
  final String? modelo;
  final String? serie;
  final int? numeroNf;
  const NfeNfReferenciada({
    this.id,
    this.idNfeCabecalho,
    this.codigoUf,
    this.anoMes,
    this.cnpj,
    this.modelo,
    this.serie,
    this.numeroNf,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeCabecalho != null) {
      map['id_nfe_cabecalho'] = Variable<int>(idNfeCabecalho);
    }
    if (!nullToAbsent || codigoUf != null) {
      map['codigo_uf'] = Variable<int>(codigoUf);
    }
    if (!nullToAbsent || anoMes != null) {
      map['ano_mes'] = Variable<String>(anoMes);
    }
    if (!nullToAbsent || cnpj != null) {
      map['cnpj'] = Variable<String>(cnpj);
    }
    if (!nullToAbsent || modelo != null) {
      map['modelo'] = Variable<String>(modelo);
    }
    if (!nullToAbsent || serie != null) {
      map['serie'] = Variable<String>(serie);
    }
    if (!nullToAbsent || numeroNf != null) {
      map['numero_nf'] = Variable<int>(numeroNf);
    }
    return map;
  }

  factory NfeNfReferenciada.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeNfReferenciada(
      id: serializer.fromJson<int?>(json['id']),
      idNfeCabecalho: serializer.fromJson<int?>(json['idNfeCabecalho']),
      codigoUf: serializer.fromJson<int?>(json['codigoUf']),
      anoMes: serializer.fromJson<String?>(json['anoMes']),
      cnpj: serializer.fromJson<String?>(json['cnpj']),
      modelo: serializer.fromJson<String?>(json['modelo']),
      serie: serializer.fromJson<String?>(json['serie']),
      numeroNf: serializer.fromJson<int?>(json['numeroNf']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeCabecalho': serializer.toJson<int?>(idNfeCabecalho),
      'codigoUf': serializer.toJson<int?>(codigoUf),
      'anoMes': serializer.toJson<String?>(anoMes),
      'cnpj': serializer.toJson<String?>(cnpj),
      'modelo': serializer.toJson<String?>(modelo),
      'serie': serializer.toJson<String?>(serie),
      'numeroNf': serializer.toJson<int?>(numeroNf),
    };
  }

  NfeNfReferenciada copyWith({
    Value<int?> id = const Value.absent(),
    Value<int?> idNfeCabecalho = const Value.absent(),
    Value<int?> codigoUf = const Value.absent(),
    Value<String?> anoMes = const Value.absent(),
    Value<String?> cnpj = const Value.absent(),
    Value<String?> modelo = const Value.absent(),
    Value<String?> serie = const Value.absent(),
    Value<int?> numeroNf = const Value.absent(),
  }) => NfeNfReferenciada(
    id: id.present ? id.value : this.id,
    idNfeCabecalho:
        idNfeCabecalho.present ? idNfeCabecalho.value : this.idNfeCabecalho,
    codigoUf: codigoUf.present ? codigoUf.value : this.codigoUf,
    anoMes: anoMes.present ? anoMes.value : this.anoMes,
    cnpj: cnpj.present ? cnpj.value : this.cnpj,
    modelo: modelo.present ? modelo.value : this.modelo,
    serie: serie.present ? serie.value : this.serie,
    numeroNf: numeroNf.present ? numeroNf.value : this.numeroNf,
  );
  NfeNfReferenciada copyWithCompanion(NfeNfReferenciadasCompanion data) {
    return NfeNfReferenciada(
      id: data.id.present ? data.id.value : this.id,
      idNfeCabecalho:
          data.idNfeCabecalho.present
              ? data.idNfeCabecalho.value
              : this.idNfeCabecalho,
      codigoUf: data.codigoUf.present ? data.codigoUf.value : this.codigoUf,
      anoMes: data.anoMes.present ? data.anoMes.value : this.anoMes,
      cnpj: data.cnpj.present ? data.cnpj.value : this.cnpj,
      modelo: data.modelo.present ? data.modelo.value : this.modelo,
      serie: data.serie.present ? data.serie.value : this.serie,
      numeroNf: data.numeroNf.present ? data.numeroNf.value : this.numeroNf,
    );
  }

  @override
  String toString() {
    return (StringBuffer('NfeNfReferenciada(')
          ..write('id: $id, ')
          ..write('idNfeCabecalho: $idNfeCabecalho, ')
          ..write('codigoUf: $codigoUf, ')
          ..write('anoMes: $anoMes, ')
          ..write('cnpj: $cnpj, ')
          ..write('modelo: $modelo, ')
          ..write('serie: $serie, ')
          ..write('numeroNf: $numeroNf')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    idNfeCabecalho,
    codigoUf,
    anoMes,
    cnpj,
    modelo,
    serie,
    numeroNf,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeNfReferenciada &&
          other.id == this.id &&
          other.idNfeCabecalho == this.idNfeCabecalho &&
          other.codigoUf == this.codigoUf &&
          other.anoMes == this.anoMes &&
          other.cnpj == this.cnpj &&
          other.modelo == this.modelo &&
          other.serie == this.serie &&
          other.numeroNf == this.numeroNf);
}

class NfeNfReferenciadasCompanion extends UpdateCompanion<NfeNfReferenciada> {
  final Value<int?> id;
  final Value<int?> idNfeCabecalho;
  final Value<int?> codigoUf;
  final Value<String?> anoMes;
  final Value<String?> cnpj;
  final Value<String?> modelo;
  final Value<String?> serie;
  final Value<int?> numeroNf;
  const NfeNfReferenciadasCompanion({
    this.id = const Value.absent(),
    this.idNfeCabecalho = const Value.absent(),
    this.codigoUf = const Value.absent(),
    this.anoMes = const Value.absent(),
    this.cnpj = const Value.absent(),
    this.modelo = const Value.absent(),
    this.serie = const Value.absent(),
    this.numeroNf = const Value.absent(),
  });
  NfeNfReferenciadasCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeCabecalho = const Value.absent(),
    this.codigoUf = const Value.absent(),
    this.anoMes = const Value.absent(),
    this.cnpj = const Value.absent(),
    this.modelo = const Value.absent(),
    this.serie = const Value.absent(),
    this.numeroNf = const Value.absent(),
  });
  static Insertable<NfeNfReferenciada> custom({
    Expression<int>? id,
    Expression<int>? idNfeCabecalho,
    Expression<int>? codigoUf,
    Expression<String>? anoMes,
    Expression<String>? cnpj,
    Expression<String>? modelo,
    Expression<String>? serie,
    Expression<int>? numeroNf,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (idNfeCabecalho != null) 'id_nfe_cabecalho': idNfeCabecalho,
      if (codigoUf != null) 'codigo_uf': codigoUf,
      if (anoMes != null) 'ano_mes': anoMes,
      if (cnpj != null) 'cnpj': cnpj,
      if (modelo != null) 'modelo': modelo,
      if (serie != null) 'serie': serie,
      if (numeroNf != null) 'numero_nf': numeroNf,
    });
  }

  NfeNfReferenciadasCompanion copyWith({
    Value<int?>? id,
    Value<int?>? idNfeCabecalho,
    Value<int?>? codigoUf,
    Value<String?>? anoMes,
    Value<String?>? cnpj,
    Value<String?>? modelo,
    Value<String?>? serie,
    Value<int?>? numeroNf,
  }) {
    return NfeNfReferenciadasCompanion(
      id: id ?? this.id,
      idNfeCabecalho: idNfeCabecalho ?? this.idNfeCabecalho,
      codigoUf: codigoUf ?? this.codigoUf,
      anoMes: anoMes ?? this.anoMes,
      cnpj: cnpj ?? this.cnpj,
      modelo: modelo ?? this.modelo,
      serie: serie ?? this.serie,
      numeroNf: numeroNf ?? this.numeroNf,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (idNfeCabecalho.present) {
      map['id_nfe_cabecalho'] = Variable<int>(idNfeCabecalho.value);
    }
    if (codigoUf.present) {
      map['codigo_uf'] = Variable<int>(codigoUf.value);
    }
    if (anoMes.present) {
      map['ano_mes'] = Variable<String>(anoMes.value);
    }
    if (cnpj.present) {
      map['cnpj'] = Variable<String>(cnpj.value);
    }
    if (modelo.present) {
      map['modelo'] = Variable<String>(modelo.value);
    }
    if (serie.present) {
      map['serie'] = Variable<String>(serie.value);
    }
    if (numeroNf.present) {
      map['numero_nf'] = Variable<int>(numeroNf.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeNfReferenciadasCompanion(')
          ..write('id: $id, ')
          ..write('idNfeCabecalho: $idNfeCabecalho, ')
          ..write('codigoUf: $codigoUf, ')
          ..write('anoMes: $anoMes, ')
          ..write('cnpj: $cnpj, ')
          ..write('modelo: $modelo, ')
          ..write('serie: $serie, ')
          ..write('numeroNf: $numeroNf')
          ..write(')'))
        .toString();
  }
}

class $NfeDetalheImpostoIcmssTable extends NfeDetalheImpostoIcmss
    with TableInfo<$NfeDetalheImpostoIcmssTable, NfeDetalheImpostoIcms> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeDetalheImpostoIcmssTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
    'id',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idNfeDetalheMeta = const VerificationMeta(
    'idNfeDetalhe',
  );
  @override
  late final GeneratedColumn<int> idNfeDetalhe = GeneratedColumn<int>(
    'id_nfe_detalhe',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _origemMercadoriaMeta = const VerificationMeta(
    'origemMercadoria',
  );
  @override
  late final GeneratedColumn<String> origemMercadoria = GeneratedColumn<String>(
    'origem_mercadoria',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 1,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _cstIcmsMeta = const VerificationMeta(
    'cstIcms',
  );
  @override
  late final GeneratedColumn<String> cstIcms = GeneratedColumn<String>(
    'cst_icms',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 2,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _csosnMeta = const VerificationMeta('csosn');
  @override
  late final GeneratedColumn<String> csosn = GeneratedColumn<String>(
    'csosn',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 3,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _modalidadeBcIcmsMeta = const VerificationMeta(
    'modalidadeBcIcms',
  );
  @override
  late final GeneratedColumn<String> modalidadeBcIcms = GeneratedColumn<String>(
    'modalidade_bc_icms',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 1,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _percentualReducaoBcIcmsMeta =
      const VerificationMeta('percentualReducaoBcIcms');
  @override
  late final GeneratedColumn<double> percentualReducaoBcIcms =
      GeneratedColumn<double>(
        'percentual_reducao_bc_icms',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _valorBcIcmsMeta = const VerificationMeta(
    'valorBcIcms',
  );
  @override
  late final GeneratedColumn<double> valorBcIcms = GeneratedColumn<double>(
    'valor_bc_icms',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _aliquotaIcmsMeta = const VerificationMeta(
    'aliquotaIcms',
  );
  @override
  late final GeneratedColumn<double> aliquotaIcms = GeneratedColumn<double>(
    'aliquota_icms',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _valorIcmsOperacaoMeta = const VerificationMeta(
    'valorIcmsOperacao',
  );
  @override
  late final GeneratedColumn<double> valorIcmsOperacao =
      GeneratedColumn<double>(
        'valor_icms_operacao',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _percentualDiferimentoMeta =
      const VerificationMeta('percentualDiferimento');
  @override
  late final GeneratedColumn<double> percentualDiferimento =
      GeneratedColumn<double>(
        'percentual_diferimento',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _valorIcmsDiferidoMeta = const VerificationMeta(
    'valorIcmsDiferido',
  );
  @override
  late final GeneratedColumn<double> valorIcmsDiferido =
      GeneratedColumn<double>(
        'valor_icms_diferido',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _valorIcmsMeta = const VerificationMeta(
    'valorIcms',
  );
  @override
  late final GeneratedColumn<double> valorIcms = GeneratedColumn<double>(
    'valor_icms',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _baseCalculoFcpMeta = const VerificationMeta(
    'baseCalculoFcp',
  );
  @override
  late final GeneratedColumn<double> baseCalculoFcp = GeneratedColumn<double>(
    'base_calculo_fcp',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _percentualFcpMeta = const VerificationMeta(
    'percentualFcp',
  );
  @override
  late final GeneratedColumn<double> percentualFcp = GeneratedColumn<double>(
    'percentual_fcp',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _valorFcpMeta = const VerificationMeta(
    'valorFcp',
  );
  @override
  late final GeneratedColumn<double> valorFcp = GeneratedColumn<double>(
    'valor_fcp',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _modalidadeBcIcmsStMeta =
      const VerificationMeta('modalidadeBcIcmsSt');
  @override
  late final GeneratedColumn<String> modalidadeBcIcmsSt =
      GeneratedColumn<String>(
        'modalidade_bc_icms_st',
        aliasedName,
        true,
        additionalChecks: GeneratedColumn.checkTextLength(
          minTextLength: 0,
          maxTextLength: 1,
        ),
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _percentualMvaIcmsStMeta =
      const VerificationMeta('percentualMvaIcmsSt');
  @override
  late final GeneratedColumn<double> percentualMvaIcmsSt =
      GeneratedColumn<double>(
        'percentual_mva_icms_st',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _percentualReducaoBcIcmsStMeta =
      const VerificationMeta('percentualReducaoBcIcmsSt');
  @override
  late final GeneratedColumn<double> percentualReducaoBcIcmsSt =
      GeneratedColumn<double>(
        'percentual_reducao_bc_icms_st',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _valorBaseCalculoIcmsStMeta =
      const VerificationMeta('valorBaseCalculoIcmsSt');
  @override
  late final GeneratedColumn<double> valorBaseCalculoIcmsSt =
      GeneratedColumn<double>(
        'valor_base_calculo_icms_st',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _aliquotaIcmsStMeta = const VerificationMeta(
    'aliquotaIcmsSt',
  );
  @override
  late final GeneratedColumn<double> aliquotaIcmsSt = GeneratedColumn<double>(
    'aliquota_icms_st',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _valorIcmsStMeta = const VerificationMeta(
    'valorIcmsSt',
  );
  @override
  late final GeneratedColumn<double> valorIcmsSt = GeneratedColumn<double>(
    'valor_icms_st',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _baseCalculoFcpStMeta = const VerificationMeta(
    'baseCalculoFcpSt',
  );
  @override
  late final GeneratedColumn<double> baseCalculoFcpSt = GeneratedColumn<double>(
    'base_calculo_fcp_st',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _percentualFcpStMeta = const VerificationMeta(
    'percentualFcpSt',
  );
  @override
  late final GeneratedColumn<double> percentualFcpSt = GeneratedColumn<double>(
    'percentual_fcp_st',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _valorFcpStMeta = const VerificationMeta(
    'valorFcpSt',
  );
  @override
  late final GeneratedColumn<double> valorFcpSt = GeneratedColumn<double>(
    'valor_fcp_st',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _ufStMeta = const VerificationMeta('ufSt');
  @override
  late final GeneratedColumn<String> ufSt = GeneratedColumn<String>(
    'uf_st',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 2,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _percentualBcOperacaoPropriaMeta =
      const VerificationMeta('percentualBcOperacaoPropria');
  @override
  late final GeneratedColumn<double> percentualBcOperacaoPropria =
      GeneratedColumn<double>(
        'percentual_bc_operacao_propria',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _valorBcIcmsStRetidoMeta =
      const VerificationMeta('valorBcIcmsStRetido');
  @override
  late final GeneratedColumn<double> valorBcIcmsStRetido =
      GeneratedColumn<double>(
        'valor_bc_icms_st_retido',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _aliquotaSuportadaConsumidorMeta =
      const VerificationMeta('aliquotaSuportadaConsumidor');
  @override
  late final GeneratedColumn<double> aliquotaSuportadaConsumidor =
      GeneratedColumn<double>(
        'aliquota_suportada_consumidor',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _valorIcmsSubstitutoMeta =
      const VerificationMeta('valorIcmsSubstituto');
  @override
  late final GeneratedColumn<double> valorIcmsSubstituto =
      GeneratedColumn<double>(
        'valor_icms_substituto',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _valorIcmsStRetidoMeta = const VerificationMeta(
    'valorIcmsStRetido',
  );
  @override
  late final GeneratedColumn<double> valorIcmsStRetido =
      GeneratedColumn<double>(
        'valor_icms_st_retido',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _baseCalculoFcpStRetidoMeta =
      const VerificationMeta('baseCalculoFcpStRetido');
  @override
  late final GeneratedColumn<double> baseCalculoFcpStRetido =
      GeneratedColumn<double>(
        'base_calculo_fcp_st_retido',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _percentualFcpStRetidoMeta =
      const VerificationMeta('percentualFcpStRetido');
  @override
  late final GeneratedColumn<double> percentualFcpStRetido =
      GeneratedColumn<double>(
        'percentual_fcp_st_retido',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _valorFcpStRetidoMeta = const VerificationMeta(
    'valorFcpStRetido',
  );
  @override
  late final GeneratedColumn<double> valorFcpStRetido = GeneratedColumn<double>(
    'valor_fcp_st_retido',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _motivoDesoneracaoIcmsMeta =
      const VerificationMeta('motivoDesoneracaoIcms');
  @override
  late final GeneratedColumn<String> motivoDesoneracaoIcms =
      GeneratedColumn<String>(
        'motivo_desoneracao_icms',
        aliasedName,
        true,
        additionalChecks: GeneratedColumn.checkTextLength(
          minTextLength: 0,
          maxTextLength: 2,
        ),
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _valorIcmsDesoneradoMeta =
      const VerificationMeta('valorIcmsDesonerado');
  @override
  late final GeneratedColumn<double> valorIcmsDesonerado =
      GeneratedColumn<double>(
        'valor_icms_desonerado',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _aliquotaCreditoIcmsSnMeta =
      const VerificationMeta('aliquotaCreditoIcmsSn');
  @override
  late final GeneratedColumn<double> aliquotaCreditoIcmsSn =
      GeneratedColumn<double>(
        'aliquota_credito_icms_sn',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _valorCreditoIcmsSnMeta =
      const VerificationMeta('valorCreditoIcmsSn');
  @override
  late final GeneratedColumn<double> valorCreditoIcmsSn =
      GeneratedColumn<double>(
        'valor_credito_icms_sn',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _valorBcIcmsStDestinoMeta =
      const VerificationMeta('valorBcIcmsStDestino');
  @override
  late final GeneratedColumn<double> valorBcIcmsStDestino =
      GeneratedColumn<double>(
        'valor_bc_icms_st_destino',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _valorIcmsStDestinoMeta =
      const VerificationMeta('valorIcmsStDestino');
  @override
  late final GeneratedColumn<double> valorIcmsStDestino =
      GeneratedColumn<double>(
        'valor_icms_st_destino',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _percentualReducaoBcEfetivoMeta =
      const VerificationMeta('percentualReducaoBcEfetivo');
  @override
  late final GeneratedColumn<double> percentualReducaoBcEfetivo =
      GeneratedColumn<double>(
        'percentual_reducao_bc_efetivo',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _valorBcEfetivoMeta = const VerificationMeta(
    'valorBcEfetivo',
  );
  @override
  late final GeneratedColumn<double> valorBcEfetivo = GeneratedColumn<double>(
    'valor_bc_efetivo',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _aliquotaIcmsEfetivoMeta =
      const VerificationMeta('aliquotaIcmsEfetivo');
  @override
  late final GeneratedColumn<double> aliquotaIcmsEfetivo =
      GeneratedColumn<double>(
        'aliquota_icms_efetivo',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _valorIcmsEfetivoMeta = const VerificationMeta(
    'valorIcmsEfetivo',
  );
  @override
  late final GeneratedColumn<double> valorIcmsEfetivo = GeneratedColumn<double>(
    'valor_icms_efetivo',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _valorIcmsStDesoneradoMeta =
      const VerificationMeta('valorIcmsStDesonerado');
  @override
  late final GeneratedColumn<double> valorIcmsStDesonerado =
      GeneratedColumn<double>(
        'valor_icms_st_desonerado',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _motivoDesoneracaoIcmsStMeta =
      const VerificationMeta('motivoDesoneracaoIcmsSt');
  @override
  late final GeneratedColumn<String> motivoDesoneracaoIcmsSt =
      GeneratedColumn<String>(
        'motivo_desoneracao_icms_st',
        aliasedName,
        true,
        additionalChecks: GeneratedColumn.checkTextLength(
          minTextLength: 0,
          maxTextLength: 1,
        ),
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _taxaFcpDiferidoMeta = const VerificationMeta(
    'taxaFcpDiferido',
  );
  @override
  late final GeneratedColumn<double> taxaFcpDiferido = GeneratedColumn<double>(
    'taxa_fcp_diferido',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _valorFcpDiferidoMeta = const VerificationMeta(
    'valorFcpDiferido',
  );
  @override
  late final GeneratedColumn<double> valorFcpDiferido = GeneratedColumn<double>(
    'valor_fcp_diferido',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _valorFcpEfetivoMeta = const VerificationMeta(
    'valorFcpEfetivo',
  );
  @override
  late final GeneratedColumn<double> valorFcpEfetivo = GeneratedColumn<double>(
    'valor_fcp_efetivo',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _desoneradoDeduzMeta = const VerificationMeta(
    'desoneradoDeduz',
  );
  @override
  late final GeneratedColumn<String> desoneradoDeduz = GeneratedColumn<String>(
    'desonerado_deduz',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 1,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _quantidadeTributadaMeta =
      const VerificationMeta('quantidadeTributada');
  @override
  late final GeneratedColumn<double> quantidadeTributada =
      GeneratedColumn<double>(
        'quantidade_tributada',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _aliquotaAdRemMeta = const VerificationMeta(
    'aliquotaAdRem',
  );
  @override
  late final GeneratedColumn<double> aliquotaAdRem = GeneratedColumn<double>(
    'aliquota_ad_rem',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _valorIcmsMonoMeta = const VerificationMeta(
    'valorIcmsMono',
  );
  @override
  late final GeneratedColumn<double> valorIcmsMono = GeneratedColumn<double>(
    'valor_icms_mono',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _quantidadeSujeitaRetencaoMeta =
      const VerificationMeta('quantidadeSujeitaRetencao');
  @override
  late final GeneratedColumn<double> quantidadeSujeitaRetencao =
      GeneratedColumn<double>(
        'quantidade_sujeita_retencao',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _aliquotaAdRemRetencaoMeta =
      const VerificationMeta('aliquotaAdRemRetencao');
  @override
  late final GeneratedColumn<double> aliquotaAdRemRetencao =
      GeneratedColumn<double>(
        'aliquota_ad_rem_retencao',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _valorIcmsMonoRetencaoMeta =
      const VerificationMeta('valorIcmsMonoRetencao');
  @override
  late final GeneratedColumn<double> valorIcmsMonoRetencao =
      GeneratedColumn<double>(
        'valor_icms_mono_retencao',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _percentualReducaoAdRemMeta =
      const VerificationMeta('percentualReducaoAdRem');
  @override
  late final GeneratedColumn<double> percentualReducaoAdRem =
      GeneratedColumn<double>(
        'percentual_reducao_ad_rem',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _motivoReducaoAdRemMeta =
      const VerificationMeta('motivoReducaoAdRem');
  @override
  late final GeneratedColumn<String> motivoReducaoAdRem =
      GeneratedColumn<String>(
        'motivo_reducao_ad_rem',
        aliasedName,
        true,
        additionalChecks: GeneratedColumn.checkTextLength(
          minTextLength: 0,
          maxTextLength: 1,
        ),
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _valorIcmsMonoOperacaoMeta =
      const VerificationMeta('valorIcmsMonoOperacao');
  @override
  late final GeneratedColumn<double> valorIcmsMonoOperacao =
      GeneratedColumn<double>(
        'valor_icms_mono_operacao',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _percentualDiferimentoMonoMeta =
      const VerificationMeta('percentualDiferimentoMono');
  @override
  late final GeneratedColumn<double> percentualDiferimentoMono =
      GeneratedColumn<double>(
        'percentual_diferimento_mono',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _valorIcmsDiferidoMonoMeta =
      const VerificationMeta('valorIcmsDiferidoMono');
  @override
  late final GeneratedColumn<double> valorIcmsDiferidoMono =
      GeneratedColumn<double>(
        'valor_icms_diferido_mono',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _quantidadeTributadaRetidaMeta =
      const VerificationMeta('quantidadeTributadaRetida');
  @override
  late final GeneratedColumn<double> quantidadeTributadaRetida =
      GeneratedColumn<double>(
        'quantidade_tributada_retida',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _aliquotaAdRemRetidaMeta =
      const VerificationMeta('aliquotaAdRemRetida');
  @override
  late final GeneratedColumn<double> aliquotaAdRemRetida =
      GeneratedColumn<double>(
        'aliquota_ad_rem_retida',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _valorIcmsRetidoMeta = const VerificationMeta(
    'valorIcmsRetido',
  );
  @override
  late final GeneratedColumn<double> valorIcmsRetido = GeneratedColumn<double>(
    'valor_icms_retido',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    idNfeDetalhe,
    origemMercadoria,
    cstIcms,
    csosn,
    modalidadeBcIcms,
    percentualReducaoBcIcms,
    valorBcIcms,
    aliquotaIcms,
    valorIcmsOperacao,
    percentualDiferimento,
    valorIcmsDiferido,
    valorIcms,
    baseCalculoFcp,
    percentualFcp,
    valorFcp,
    modalidadeBcIcmsSt,
    percentualMvaIcmsSt,
    percentualReducaoBcIcmsSt,
    valorBaseCalculoIcmsSt,
    aliquotaIcmsSt,
    valorIcmsSt,
    baseCalculoFcpSt,
    percentualFcpSt,
    valorFcpSt,
    ufSt,
    percentualBcOperacaoPropria,
    valorBcIcmsStRetido,
    aliquotaSuportadaConsumidor,
    valorIcmsSubstituto,
    valorIcmsStRetido,
    baseCalculoFcpStRetido,
    percentualFcpStRetido,
    valorFcpStRetido,
    motivoDesoneracaoIcms,
    valorIcmsDesonerado,
    aliquotaCreditoIcmsSn,
    valorCreditoIcmsSn,
    valorBcIcmsStDestino,
    valorIcmsStDestino,
    percentualReducaoBcEfetivo,
    valorBcEfetivo,
    aliquotaIcmsEfetivo,
    valorIcmsEfetivo,
    valorIcmsStDesonerado,
    motivoDesoneracaoIcmsSt,
    taxaFcpDiferido,
    valorFcpDiferido,
    valorFcpEfetivo,
    desoneradoDeduz,
    quantidadeTributada,
    aliquotaAdRem,
    valorIcmsMono,
    quantidadeSujeitaRetencao,
    aliquotaAdRemRetencao,
    valorIcmsMonoRetencao,
    percentualReducaoAdRem,
    motivoReducaoAdRem,
    valorIcmsMonoOperacao,
    percentualDiferimentoMono,
    valorIcmsDiferidoMono,
    quantidadeTributadaRetida,
    aliquotaAdRemRetida,
    valorIcmsRetido,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'nfe_detalhe_imposto_icms';
  @override
  VerificationContext validateIntegrity(
    Insertable<NfeDetalheImpostoIcms> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('id_nfe_detalhe')) {
      context.handle(
        _idNfeDetalheMeta,
        idNfeDetalhe.isAcceptableOrUnknown(
          data['id_nfe_detalhe']!,
          _idNfeDetalheMeta,
        ),
      );
    }
    if (data.containsKey('origem_mercadoria')) {
      context.handle(
        _origemMercadoriaMeta,
        origemMercadoria.isAcceptableOrUnknown(
          data['origem_mercadoria']!,
          _origemMercadoriaMeta,
        ),
      );
    }
    if (data.containsKey('cst_icms')) {
      context.handle(
        _cstIcmsMeta,
        cstIcms.isAcceptableOrUnknown(data['cst_icms']!, _cstIcmsMeta),
      );
    }
    if (data.containsKey('csosn')) {
      context.handle(
        _csosnMeta,
        csosn.isAcceptableOrUnknown(data['csosn']!, _csosnMeta),
      );
    }
    if (data.containsKey('modalidade_bc_icms')) {
      context.handle(
        _modalidadeBcIcmsMeta,
        modalidadeBcIcms.isAcceptableOrUnknown(
          data['modalidade_bc_icms']!,
          _modalidadeBcIcmsMeta,
        ),
      );
    }
    if (data.containsKey('percentual_reducao_bc_icms')) {
      context.handle(
        _percentualReducaoBcIcmsMeta,
        percentualReducaoBcIcms.isAcceptableOrUnknown(
          data['percentual_reducao_bc_icms']!,
          _percentualReducaoBcIcmsMeta,
        ),
      );
    }
    if (data.containsKey('valor_bc_icms')) {
      context.handle(
        _valorBcIcmsMeta,
        valorBcIcms.isAcceptableOrUnknown(
          data['valor_bc_icms']!,
          _valorBcIcmsMeta,
        ),
      );
    }
    if (data.containsKey('aliquota_icms')) {
      context.handle(
        _aliquotaIcmsMeta,
        aliquotaIcms.isAcceptableOrUnknown(
          data['aliquota_icms']!,
          _aliquotaIcmsMeta,
        ),
      );
    }
    if (data.containsKey('valor_icms_operacao')) {
      context.handle(
        _valorIcmsOperacaoMeta,
        valorIcmsOperacao.isAcceptableOrUnknown(
          data['valor_icms_operacao']!,
          _valorIcmsOperacaoMeta,
        ),
      );
    }
    if (data.containsKey('percentual_diferimento')) {
      context.handle(
        _percentualDiferimentoMeta,
        percentualDiferimento.isAcceptableOrUnknown(
          data['percentual_diferimento']!,
          _percentualDiferimentoMeta,
        ),
      );
    }
    if (data.containsKey('valor_icms_diferido')) {
      context.handle(
        _valorIcmsDiferidoMeta,
        valorIcmsDiferido.isAcceptableOrUnknown(
          data['valor_icms_diferido']!,
          _valorIcmsDiferidoMeta,
        ),
      );
    }
    if (data.containsKey('valor_icms')) {
      context.handle(
        _valorIcmsMeta,
        valorIcms.isAcceptableOrUnknown(data['valor_icms']!, _valorIcmsMeta),
      );
    }
    if (data.containsKey('base_calculo_fcp')) {
      context.handle(
        _baseCalculoFcpMeta,
        baseCalculoFcp.isAcceptableOrUnknown(
          data['base_calculo_fcp']!,
          _baseCalculoFcpMeta,
        ),
      );
    }
    if (data.containsKey('percentual_fcp')) {
      context.handle(
        _percentualFcpMeta,
        percentualFcp.isAcceptableOrUnknown(
          data['percentual_fcp']!,
          _percentualFcpMeta,
        ),
      );
    }
    if (data.containsKey('valor_fcp')) {
      context.handle(
        _valorFcpMeta,
        valorFcp.isAcceptableOrUnknown(data['valor_fcp']!, _valorFcpMeta),
      );
    }
    if (data.containsKey('modalidade_bc_icms_st')) {
      context.handle(
        _modalidadeBcIcmsStMeta,
        modalidadeBcIcmsSt.isAcceptableOrUnknown(
          data['modalidade_bc_icms_st']!,
          _modalidadeBcIcmsStMeta,
        ),
      );
    }
    if (data.containsKey('percentual_mva_icms_st')) {
      context.handle(
        _percentualMvaIcmsStMeta,
        percentualMvaIcmsSt.isAcceptableOrUnknown(
          data['percentual_mva_icms_st']!,
          _percentualMvaIcmsStMeta,
        ),
      );
    }
    if (data.containsKey('percentual_reducao_bc_icms_st')) {
      context.handle(
        _percentualReducaoBcIcmsStMeta,
        percentualReducaoBcIcmsSt.isAcceptableOrUnknown(
          data['percentual_reducao_bc_icms_st']!,
          _percentualReducaoBcIcmsStMeta,
        ),
      );
    }
    if (data.containsKey('valor_base_calculo_icms_st')) {
      context.handle(
        _valorBaseCalculoIcmsStMeta,
        valorBaseCalculoIcmsSt.isAcceptableOrUnknown(
          data['valor_base_calculo_icms_st']!,
          _valorBaseCalculoIcmsStMeta,
        ),
      );
    }
    if (data.containsKey('aliquota_icms_st')) {
      context.handle(
        _aliquotaIcmsStMeta,
        aliquotaIcmsSt.isAcceptableOrUnknown(
          data['aliquota_icms_st']!,
          _aliquotaIcmsStMeta,
        ),
      );
    }
    if (data.containsKey('valor_icms_st')) {
      context.handle(
        _valorIcmsStMeta,
        valorIcmsSt.isAcceptableOrUnknown(
          data['valor_icms_st']!,
          _valorIcmsStMeta,
        ),
      );
    }
    if (data.containsKey('base_calculo_fcp_st')) {
      context.handle(
        _baseCalculoFcpStMeta,
        baseCalculoFcpSt.isAcceptableOrUnknown(
          data['base_calculo_fcp_st']!,
          _baseCalculoFcpStMeta,
        ),
      );
    }
    if (data.containsKey('percentual_fcp_st')) {
      context.handle(
        _percentualFcpStMeta,
        percentualFcpSt.isAcceptableOrUnknown(
          data['percentual_fcp_st']!,
          _percentualFcpStMeta,
        ),
      );
    }
    if (data.containsKey('valor_fcp_st')) {
      context.handle(
        _valorFcpStMeta,
        valorFcpSt.isAcceptableOrUnknown(
          data['valor_fcp_st']!,
          _valorFcpStMeta,
        ),
      );
    }
    if (data.containsKey('uf_st')) {
      context.handle(
        _ufStMeta,
        ufSt.isAcceptableOrUnknown(data['uf_st']!, _ufStMeta),
      );
    }
    if (data.containsKey('percentual_bc_operacao_propria')) {
      context.handle(
        _percentualBcOperacaoPropriaMeta,
        percentualBcOperacaoPropria.isAcceptableOrUnknown(
          data['percentual_bc_operacao_propria']!,
          _percentualBcOperacaoPropriaMeta,
        ),
      );
    }
    if (data.containsKey('valor_bc_icms_st_retido')) {
      context.handle(
        _valorBcIcmsStRetidoMeta,
        valorBcIcmsStRetido.isAcceptableOrUnknown(
          data['valor_bc_icms_st_retido']!,
          _valorBcIcmsStRetidoMeta,
        ),
      );
    }
    if (data.containsKey('aliquota_suportada_consumidor')) {
      context.handle(
        _aliquotaSuportadaConsumidorMeta,
        aliquotaSuportadaConsumidor.isAcceptableOrUnknown(
          data['aliquota_suportada_consumidor']!,
          _aliquotaSuportadaConsumidorMeta,
        ),
      );
    }
    if (data.containsKey('valor_icms_substituto')) {
      context.handle(
        _valorIcmsSubstitutoMeta,
        valorIcmsSubstituto.isAcceptableOrUnknown(
          data['valor_icms_substituto']!,
          _valorIcmsSubstitutoMeta,
        ),
      );
    }
    if (data.containsKey('valor_icms_st_retido')) {
      context.handle(
        _valorIcmsStRetidoMeta,
        valorIcmsStRetido.isAcceptableOrUnknown(
          data['valor_icms_st_retido']!,
          _valorIcmsStRetidoMeta,
        ),
      );
    }
    if (data.containsKey('base_calculo_fcp_st_retido')) {
      context.handle(
        _baseCalculoFcpStRetidoMeta,
        baseCalculoFcpStRetido.isAcceptableOrUnknown(
          data['base_calculo_fcp_st_retido']!,
          _baseCalculoFcpStRetidoMeta,
        ),
      );
    }
    if (data.containsKey('percentual_fcp_st_retido')) {
      context.handle(
        _percentualFcpStRetidoMeta,
        percentualFcpStRetido.isAcceptableOrUnknown(
          data['percentual_fcp_st_retido']!,
          _percentualFcpStRetidoMeta,
        ),
      );
    }
    if (data.containsKey('valor_fcp_st_retido')) {
      context.handle(
        _valorFcpStRetidoMeta,
        valorFcpStRetido.isAcceptableOrUnknown(
          data['valor_fcp_st_retido']!,
          _valorFcpStRetidoMeta,
        ),
      );
    }
    if (data.containsKey('motivo_desoneracao_icms')) {
      context.handle(
        _motivoDesoneracaoIcmsMeta,
        motivoDesoneracaoIcms.isAcceptableOrUnknown(
          data['motivo_desoneracao_icms']!,
          _motivoDesoneracaoIcmsMeta,
        ),
      );
    }
    if (data.containsKey('valor_icms_desonerado')) {
      context.handle(
        _valorIcmsDesoneradoMeta,
        valorIcmsDesonerado.isAcceptableOrUnknown(
          data['valor_icms_desonerado']!,
          _valorIcmsDesoneradoMeta,
        ),
      );
    }
    if (data.containsKey('aliquota_credito_icms_sn')) {
      context.handle(
        _aliquotaCreditoIcmsSnMeta,
        aliquotaCreditoIcmsSn.isAcceptableOrUnknown(
          data['aliquota_credito_icms_sn']!,
          _aliquotaCreditoIcmsSnMeta,
        ),
      );
    }
    if (data.containsKey('valor_credito_icms_sn')) {
      context.handle(
        _valorCreditoIcmsSnMeta,
        valorCreditoIcmsSn.isAcceptableOrUnknown(
          data['valor_credito_icms_sn']!,
          _valorCreditoIcmsSnMeta,
        ),
      );
    }
    if (data.containsKey('valor_bc_icms_st_destino')) {
      context.handle(
        _valorBcIcmsStDestinoMeta,
        valorBcIcmsStDestino.isAcceptableOrUnknown(
          data['valor_bc_icms_st_destino']!,
          _valorBcIcmsStDestinoMeta,
        ),
      );
    }
    if (data.containsKey('valor_icms_st_destino')) {
      context.handle(
        _valorIcmsStDestinoMeta,
        valorIcmsStDestino.isAcceptableOrUnknown(
          data['valor_icms_st_destino']!,
          _valorIcmsStDestinoMeta,
        ),
      );
    }
    if (data.containsKey('percentual_reducao_bc_efetivo')) {
      context.handle(
        _percentualReducaoBcEfetivoMeta,
        percentualReducaoBcEfetivo.isAcceptableOrUnknown(
          data['percentual_reducao_bc_efetivo']!,
          _percentualReducaoBcEfetivoMeta,
        ),
      );
    }
    if (data.containsKey('valor_bc_efetivo')) {
      context.handle(
        _valorBcEfetivoMeta,
        valorBcEfetivo.isAcceptableOrUnknown(
          data['valor_bc_efetivo']!,
          _valorBcEfetivoMeta,
        ),
      );
    }
    if (data.containsKey('aliquota_icms_efetivo')) {
      context.handle(
        _aliquotaIcmsEfetivoMeta,
        aliquotaIcmsEfetivo.isAcceptableOrUnknown(
          data['aliquota_icms_efetivo']!,
          _aliquotaIcmsEfetivoMeta,
        ),
      );
    }
    if (data.containsKey('valor_icms_efetivo')) {
      context.handle(
        _valorIcmsEfetivoMeta,
        valorIcmsEfetivo.isAcceptableOrUnknown(
          data['valor_icms_efetivo']!,
          _valorIcmsEfetivoMeta,
        ),
      );
    }
    if (data.containsKey('valor_icms_st_desonerado')) {
      context.handle(
        _valorIcmsStDesoneradoMeta,
        valorIcmsStDesonerado.isAcceptableOrUnknown(
          data['valor_icms_st_desonerado']!,
          _valorIcmsStDesoneradoMeta,
        ),
      );
    }
    if (data.containsKey('motivo_desoneracao_icms_st')) {
      context.handle(
        _motivoDesoneracaoIcmsStMeta,
        motivoDesoneracaoIcmsSt.isAcceptableOrUnknown(
          data['motivo_desoneracao_icms_st']!,
          _motivoDesoneracaoIcmsStMeta,
        ),
      );
    }
    if (data.containsKey('taxa_fcp_diferido')) {
      context.handle(
        _taxaFcpDiferidoMeta,
        taxaFcpDiferido.isAcceptableOrUnknown(
          data['taxa_fcp_diferido']!,
          _taxaFcpDiferidoMeta,
        ),
      );
    }
    if (data.containsKey('valor_fcp_diferido')) {
      context.handle(
        _valorFcpDiferidoMeta,
        valorFcpDiferido.isAcceptableOrUnknown(
          data['valor_fcp_diferido']!,
          _valorFcpDiferidoMeta,
        ),
      );
    }
    if (data.containsKey('valor_fcp_efetivo')) {
      context.handle(
        _valorFcpEfetivoMeta,
        valorFcpEfetivo.isAcceptableOrUnknown(
          data['valor_fcp_efetivo']!,
          _valorFcpEfetivoMeta,
        ),
      );
    }
    if (data.containsKey('desonerado_deduz')) {
      context.handle(
        _desoneradoDeduzMeta,
        desoneradoDeduz.isAcceptableOrUnknown(
          data['desonerado_deduz']!,
          _desoneradoDeduzMeta,
        ),
      );
    }
    if (data.containsKey('quantidade_tributada')) {
      context.handle(
        _quantidadeTributadaMeta,
        quantidadeTributada.isAcceptableOrUnknown(
          data['quantidade_tributada']!,
          _quantidadeTributadaMeta,
        ),
      );
    }
    if (data.containsKey('aliquota_ad_rem')) {
      context.handle(
        _aliquotaAdRemMeta,
        aliquotaAdRem.isAcceptableOrUnknown(
          data['aliquota_ad_rem']!,
          _aliquotaAdRemMeta,
        ),
      );
    }
    if (data.containsKey('valor_icms_mono')) {
      context.handle(
        _valorIcmsMonoMeta,
        valorIcmsMono.isAcceptableOrUnknown(
          data['valor_icms_mono']!,
          _valorIcmsMonoMeta,
        ),
      );
    }
    if (data.containsKey('quantidade_sujeita_retencao')) {
      context.handle(
        _quantidadeSujeitaRetencaoMeta,
        quantidadeSujeitaRetencao.isAcceptableOrUnknown(
          data['quantidade_sujeita_retencao']!,
          _quantidadeSujeitaRetencaoMeta,
        ),
      );
    }
    if (data.containsKey('aliquota_ad_rem_retencao')) {
      context.handle(
        _aliquotaAdRemRetencaoMeta,
        aliquotaAdRemRetencao.isAcceptableOrUnknown(
          data['aliquota_ad_rem_retencao']!,
          _aliquotaAdRemRetencaoMeta,
        ),
      );
    }
    if (data.containsKey('valor_icms_mono_retencao')) {
      context.handle(
        _valorIcmsMonoRetencaoMeta,
        valorIcmsMonoRetencao.isAcceptableOrUnknown(
          data['valor_icms_mono_retencao']!,
          _valorIcmsMonoRetencaoMeta,
        ),
      );
    }
    if (data.containsKey('percentual_reducao_ad_rem')) {
      context.handle(
        _percentualReducaoAdRemMeta,
        percentualReducaoAdRem.isAcceptableOrUnknown(
          data['percentual_reducao_ad_rem']!,
          _percentualReducaoAdRemMeta,
        ),
      );
    }
    if (data.containsKey('motivo_reducao_ad_rem')) {
      context.handle(
        _motivoReducaoAdRemMeta,
        motivoReducaoAdRem.isAcceptableOrUnknown(
          data['motivo_reducao_ad_rem']!,
          _motivoReducaoAdRemMeta,
        ),
      );
    }
    if (data.containsKey('valor_icms_mono_operacao')) {
      context.handle(
        _valorIcmsMonoOperacaoMeta,
        valorIcmsMonoOperacao.isAcceptableOrUnknown(
          data['valor_icms_mono_operacao']!,
          _valorIcmsMonoOperacaoMeta,
        ),
      );
    }
    if (data.containsKey('percentual_diferimento_mono')) {
      context.handle(
        _percentualDiferimentoMonoMeta,
        percentualDiferimentoMono.isAcceptableOrUnknown(
          data['percentual_diferimento_mono']!,
          _percentualDiferimentoMonoMeta,
        ),
      );
    }
    if (data.containsKey('valor_icms_diferido_mono')) {
      context.handle(
        _valorIcmsDiferidoMonoMeta,
        valorIcmsDiferidoMono.isAcceptableOrUnknown(
          data['valor_icms_diferido_mono']!,
          _valorIcmsDiferidoMonoMeta,
        ),
      );
    }
    if (data.containsKey('quantidade_tributada_retida')) {
      context.handle(
        _quantidadeTributadaRetidaMeta,
        quantidadeTributadaRetida.isAcceptableOrUnknown(
          data['quantidade_tributada_retida']!,
          _quantidadeTributadaRetidaMeta,
        ),
      );
    }
    if (data.containsKey('aliquota_ad_rem_retida')) {
      context.handle(
        _aliquotaAdRemRetidaMeta,
        aliquotaAdRemRetida.isAcceptableOrUnknown(
          data['aliquota_ad_rem_retida']!,
          _aliquotaAdRemRetidaMeta,
        ),
      );
    }
    if (data.containsKey('valor_icms_retido')) {
      context.handle(
        _valorIcmsRetidoMeta,
        valorIcmsRetido.isAcceptableOrUnknown(
          data['valor_icms_retido']!,
          _valorIcmsRetidoMeta,
        ),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeDetalheImpostoIcms map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return NfeDetalheImpostoIcms(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id'],
      ),
      idNfeDetalhe: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_nfe_detalhe'],
      ),
      origemMercadoria: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}origem_mercadoria'],
      ),
      cstIcms: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}cst_icms'],
      ),
      csosn: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}csosn'],
      ),
      modalidadeBcIcms: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}modalidade_bc_icms'],
      ),
      percentualReducaoBcIcms: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}percentual_reducao_bc_icms'],
      ),
      valorBcIcms: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_bc_icms'],
      ),
      aliquotaIcms: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}aliquota_icms'],
      ),
      valorIcmsOperacao: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_icms_operacao'],
      ),
      percentualDiferimento: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}percentual_diferimento'],
      ),
      valorIcmsDiferido: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_icms_diferido'],
      ),
      valorIcms: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_icms'],
      ),
      baseCalculoFcp: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}base_calculo_fcp'],
      ),
      percentualFcp: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}percentual_fcp'],
      ),
      valorFcp: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_fcp'],
      ),
      modalidadeBcIcmsSt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}modalidade_bc_icms_st'],
      ),
      percentualMvaIcmsSt: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}percentual_mva_icms_st'],
      ),
      percentualReducaoBcIcmsSt: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}percentual_reducao_bc_icms_st'],
      ),
      valorBaseCalculoIcmsSt: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_base_calculo_icms_st'],
      ),
      aliquotaIcmsSt: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}aliquota_icms_st'],
      ),
      valorIcmsSt: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_icms_st'],
      ),
      baseCalculoFcpSt: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}base_calculo_fcp_st'],
      ),
      percentualFcpSt: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}percentual_fcp_st'],
      ),
      valorFcpSt: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_fcp_st'],
      ),
      ufSt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}uf_st'],
      ),
      percentualBcOperacaoPropria: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}percentual_bc_operacao_propria'],
      ),
      valorBcIcmsStRetido: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_bc_icms_st_retido'],
      ),
      aliquotaSuportadaConsumidor: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}aliquota_suportada_consumidor'],
      ),
      valorIcmsSubstituto: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_icms_substituto'],
      ),
      valorIcmsStRetido: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_icms_st_retido'],
      ),
      baseCalculoFcpStRetido: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}base_calculo_fcp_st_retido'],
      ),
      percentualFcpStRetido: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}percentual_fcp_st_retido'],
      ),
      valorFcpStRetido: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_fcp_st_retido'],
      ),
      motivoDesoneracaoIcms: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}motivo_desoneracao_icms'],
      ),
      valorIcmsDesonerado: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_icms_desonerado'],
      ),
      aliquotaCreditoIcmsSn: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}aliquota_credito_icms_sn'],
      ),
      valorCreditoIcmsSn: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_credito_icms_sn'],
      ),
      valorBcIcmsStDestino: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_bc_icms_st_destino'],
      ),
      valorIcmsStDestino: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_icms_st_destino'],
      ),
      percentualReducaoBcEfetivo: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}percentual_reducao_bc_efetivo'],
      ),
      valorBcEfetivo: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_bc_efetivo'],
      ),
      aliquotaIcmsEfetivo: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}aliquota_icms_efetivo'],
      ),
      valorIcmsEfetivo: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_icms_efetivo'],
      ),
      valorIcmsStDesonerado: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_icms_st_desonerado'],
      ),
      motivoDesoneracaoIcmsSt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}motivo_desoneracao_icms_st'],
      ),
      taxaFcpDiferido: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}taxa_fcp_diferido'],
      ),
      valorFcpDiferido: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_fcp_diferido'],
      ),
      valorFcpEfetivo: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_fcp_efetivo'],
      ),
      desoneradoDeduz: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}desonerado_deduz'],
      ),
      quantidadeTributada: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}quantidade_tributada'],
      ),
      aliquotaAdRem: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}aliquota_ad_rem'],
      ),
      valorIcmsMono: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_icms_mono'],
      ),
      quantidadeSujeitaRetencao: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}quantidade_sujeita_retencao'],
      ),
      aliquotaAdRemRetencao: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}aliquota_ad_rem_retencao'],
      ),
      valorIcmsMonoRetencao: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_icms_mono_retencao'],
      ),
      percentualReducaoAdRem: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}percentual_reducao_ad_rem'],
      ),
      motivoReducaoAdRem: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}motivo_reducao_ad_rem'],
      ),
      valorIcmsMonoOperacao: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_icms_mono_operacao'],
      ),
      percentualDiferimentoMono: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}percentual_diferimento_mono'],
      ),
      valorIcmsDiferidoMono: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_icms_diferido_mono'],
      ),
      quantidadeTributadaRetida: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}quantidade_tributada_retida'],
      ),
      aliquotaAdRemRetida: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}aliquota_ad_rem_retida'],
      ),
      valorIcmsRetido: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_icms_retido'],
      ),
    );
  }

  @override
  $NfeDetalheImpostoIcmssTable createAlias(String alias) {
    return $NfeDetalheImpostoIcmssTable(attachedDatabase, alias);
  }
}

class NfeDetalheImpostoIcms extends DataClass
    implements Insertable<NfeDetalheImpostoIcms> {
  final int? id;
  final int? idNfeDetalhe;
  final String? origemMercadoria;
  final String? cstIcms;
  final String? csosn;
  final String? modalidadeBcIcms;
  final double? percentualReducaoBcIcms;
  final double? valorBcIcms;
  final double? aliquotaIcms;
  final double? valorIcmsOperacao;
  final double? percentualDiferimento;
  final double? valorIcmsDiferido;
  final double? valorIcms;
  final double? baseCalculoFcp;
  final double? percentualFcp;
  final double? valorFcp;
  final String? modalidadeBcIcmsSt;
  final double? percentualMvaIcmsSt;
  final double? percentualReducaoBcIcmsSt;
  final double? valorBaseCalculoIcmsSt;
  final double? aliquotaIcmsSt;
  final double? valorIcmsSt;
  final double? baseCalculoFcpSt;
  final double? percentualFcpSt;
  final double? valorFcpSt;
  final String? ufSt;
  final double? percentualBcOperacaoPropria;
  final double? valorBcIcmsStRetido;
  final double? aliquotaSuportadaConsumidor;
  final double? valorIcmsSubstituto;
  final double? valorIcmsStRetido;
  final double? baseCalculoFcpStRetido;
  final double? percentualFcpStRetido;
  final double? valorFcpStRetido;
  final String? motivoDesoneracaoIcms;
  final double? valorIcmsDesonerado;
  final double? aliquotaCreditoIcmsSn;
  final double? valorCreditoIcmsSn;
  final double? valorBcIcmsStDestino;
  final double? valorIcmsStDestino;
  final double? percentualReducaoBcEfetivo;
  final double? valorBcEfetivo;
  final double? aliquotaIcmsEfetivo;
  final double? valorIcmsEfetivo;
  final double? valorIcmsStDesonerado;
  final String? motivoDesoneracaoIcmsSt;
  final double? taxaFcpDiferido;
  final double? valorFcpDiferido;
  final double? valorFcpEfetivo;
  final String? desoneradoDeduz;
  final double? quantidadeTributada;
  final double? aliquotaAdRem;
  final double? valorIcmsMono;
  final double? quantidadeSujeitaRetencao;
  final double? aliquotaAdRemRetencao;
  final double? valorIcmsMonoRetencao;
  final double? percentualReducaoAdRem;
  final String? motivoReducaoAdRem;
  final double? valorIcmsMonoOperacao;
  final double? percentualDiferimentoMono;
  final double? valorIcmsDiferidoMono;
  final double? quantidadeTributadaRetida;
  final double? aliquotaAdRemRetida;
  final double? valorIcmsRetido;
  const NfeDetalheImpostoIcms({
    this.id,
    this.idNfeDetalhe,
    this.origemMercadoria,
    this.cstIcms,
    this.csosn,
    this.modalidadeBcIcms,
    this.percentualReducaoBcIcms,
    this.valorBcIcms,
    this.aliquotaIcms,
    this.valorIcmsOperacao,
    this.percentualDiferimento,
    this.valorIcmsDiferido,
    this.valorIcms,
    this.baseCalculoFcp,
    this.percentualFcp,
    this.valorFcp,
    this.modalidadeBcIcmsSt,
    this.percentualMvaIcmsSt,
    this.percentualReducaoBcIcmsSt,
    this.valorBaseCalculoIcmsSt,
    this.aliquotaIcmsSt,
    this.valorIcmsSt,
    this.baseCalculoFcpSt,
    this.percentualFcpSt,
    this.valorFcpSt,
    this.ufSt,
    this.percentualBcOperacaoPropria,
    this.valorBcIcmsStRetido,
    this.aliquotaSuportadaConsumidor,
    this.valorIcmsSubstituto,
    this.valorIcmsStRetido,
    this.baseCalculoFcpStRetido,
    this.percentualFcpStRetido,
    this.valorFcpStRetido,
    this.motivoDesoneracaoIcms,
    this.valorIcmsDesonerado,
    this.aliquotaCreditoIcmsSn,
    this.valorCreditoIcmsSn,
    this.valorBcIcmsStDestino,
    this.valorIcmsStDestino,
    this.percentualReducaoBcEfetivo,
    this.valorBcEfetivo,
    this.aliquotaIcmsEfetivo,
    this.valorIcmsEfetivo,
    this.valorIcmsStDesonerado,
    this.motivoDesoneracaoIcmsSt,
    this.taxaFcpDiferido,
    this.valorFcpDiferido,
    this.valorFcpEfetivo,
    this.desoneradoDeduz,
    this.quantidadeTributada,
    this.aliquotaAdRem,
    this.valorIcmsMono,
    this.quantidadeSujeitaRetencao,
    this.aliquotaAdRemRetencao,
    this.valorIcmsMonoRetencao,
    this.percentualReducaoAdRem,
    this.motivoReducaoAdRem,
    this.valorIcmsMonoOperacao,
    this.percentualDiferimentoMono,
    this.valorIcmsDiferidoMono,
    this.quantidadeTributadaRetida,
    this.aliquotaAdRemRetida,
    this.valorIcmsRetido,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeDetalhe != null) {
      map['id_nfe_detalhe'] = Variable<int>(idNfeDetalhe);
    }
    if (!nullToAbsent || origemMercadoria != null) {
      map['origem_mercadoria'] = Variable<String>(origemMercadoria);
    }
    if (!nullToAbsent || cstIcms != null) {
      map['cst_icms'] = Variable<String>(cstIcms);
    }
    if (!nullToAbsent || csosn != null) {
      map['csosn'] = Variable<String>(csosn);
    }
    if (!nullToAbsent || modalidadeBcIcms != null) {
      map['modalidade_bc_icms'] = Variable<String>(modalidadeBcIcms);
    }
    if (!nullToAbsent || percentualReducaoBcIcms != null) {
      map['percentual_reducao_bc_icms'] = Variable<double>(
        percentualReducaoBcIcms,
      );
    }
    if (!nullToAbsent || valorBcIcms != null) {
      map['valor_bc_icms'] = Variable<double>(valorBcIcms);
    }
    if (!nullToAbsent || aliquotaIcms != null) {
      map['aliquota_icms'] = Variable<double>(aliquotaIcms);
    }
    if (!nullToAbsent || valorIcmsOperacao != null) {
      map['valor_icms_operacao'] = Variable<double>(valorIcmsOperacao);
    }
    if (!nullToAbsent || percentualDiferimento != null) {
      map['percentual_diferimento'] = Variable<double>(percentualDiferimento);
    }
    if (!nullToAbsent || valorIcmsDiferido != null) {
      map['valor_icms_diferido'] = Variable<double>(valorIcmsDiferido);
    }
    if (!nullToAbsent || valorIcms != null) {
      map['valor_icms'] = Variable<double>(valorIcms);
    }
    if (!nullToAbsent || baseCalculoFcp != null) {
      map['base_calculo_fcp'] = Variable<double>(baseCalculoFcp);
    }
    if (!nullToAbsent || percentualFcp != null) {
      map['percentual_fcp'] = Variable<double>(percentualFcp);
    }
    if (!nullToAbsent || valorFcp != null) {
      map['valor_fcp'] = Variable<double>(valorFcp);
    }
    if (!nullToAbsent || modalidadeBcIcmsSt != null) {
      map['modalidade_bc_icms_st'] = Variable<String>(modalidadeBcIcmsSt);
    }
    if (!nullToAbsent || percentualMvaIcmsSt != null) {
      map['percentual_mva_icms_st'] = Variable<double>(percentualMvaIcmsSt);
    }
    if (!nullToAbsent || percentualReducaoBcIcmsSt != null) {
      map['percentual_reducao_bc_icms_st'] = Variable<double>(
        percentualReducaoBcIcmsSt,
      );
    }
    if (!nullToAbsent || valorBaseCalculoIcmsSt != null) {
      map['valor_base_calculo_icms_st'] = Variable<double>(
        valorBaseCalculoIcmsSt,
      );
    }
    if (!nullToAbsent || aliquotaIcmsSt != null) {
      map['aliquota_icms_st'] = Variable<double>(aliquotaIcmsSt);
    }
    if (!nullToAbsent || valorIcmsSt != null) {
      map['valor_icms_st'] = Variable<double>(valorIcmsSt);
    }
    if (!nullToAbsent || baseCalculoFcpSt != null) {
      map['base_calculo_fcp_st'] = Variable<double>(baseCalculoFcpSt);
    }
    if (!nullToAbsent || percentualFcpSt != null) {
      map['percentual_fcp_st'] = Variable<double>(percentualFcpSt);
    }
    if (!nullToAbsent || valorFcpSt != null) {
      map['valor_fcp_st'] = Variable<double>(valorFcpSt);
    }
    if (!nullToAbsent || ufSt != null) {
      map['uf_st'] = Variable<String>(ufSt);
    }
    if (!nullToAbsent || percentualBcOperacaoPropria != null) {
      map['percentual_bc_operacao_propria'] = Variable<double>(
        percentualBcOperacaoPropria,
      );
    }
    if (!nullToAbsent || valorBcIcmsStRetido != null) {
      map['valor_bc_icms_st_retido'] = Variable<double>(valorBcIcmsStRetido);
    }
    if (!nullToAbsent || aliquotaSuportadaConsumidor != null) {
      map['aliquota_suportada_consumidor'] = Variable<double>(
        aliquotaSuportadaConsumidor,
      );
    }
    if (!nullToAbsent || valorIcmsSubstituto != null) {
      map['valor_icms_substituto'] = Variable<double>(valorIcmsSubstituto);
    }
    if (!nullToAbsent || valorIcmsStRetido != null) {
      map['valor_icms_st_retido'] = Variable<double>(valorIcmsStRetido);
    }
    if (!nullToAbsent || baseCalculoFcpStRetido != null) {
      map['base_calculo_fcp_st_retido'] = Variable<double>(
        baseCalculoFcpStRetido,
      );
    }
    if (!nullToAbsent || percentualFcpStRetido != null) {
      map['percentual_fcp_st_retido'] = Variable<double>(percentualFcpStRetido);
    }
    if (!nullToAbsent || valorFcpStRetido != null) {
      map['valor_fcp_st_retido'] = Variable<double>(valorFcpStRetido);
    }
    if (!nullToAbsent || motivoDesoneracaoIcms != null) {
      map['motivo_desoneracao_icms'] = Variable<String>(motivoDesoneracaoIcms);
    }
    if (!nullToAbsent || valorIcmsDesonerado != null) {
      map['valor_icms_desonerado'] = Variable<double>(valorIcmsDesonerado);
    }
    if (!nullToAbsent || aliquotaCreditoIcmsSn != null) {
      map['aliquota_credito_icms_sn'] = Variable<double>(aliquotaCreditoIcmsSn);
    }
    if (!nullToAbsent || valorCreditoIcmsSn != null) {
      map['valor_credito_icms_sn'] = Variable<double>(valorCreditoIcmsSn);
    }
    if (!nullToAbsent || valorBcIcmsStDestino != null) {
      map['valor_bc_icms_st_destino'] = Variable<double>(valorBcIcmsStDestino);
    }
    if (!nullToAbsent || valorIcmsStDestino != null) {
      map['valor_icms_st_destino'] = Variable<double>(valorIcmsStDestino);
    }
    if (!nullToAbsent || percentualReducaoBcEfetivo != null) {
      map['percentual_reducao_bc_efetivo'] = Variable<double>(
        percentualReducaoBcEfetivo,
      );
    }
    if (!nullToAbsent || valorBcEfetivo != null) {
      map['valor_bc_efetivo'] = Variable<double>(valorBcEfetivo);
    }
    if (!nullToAbsent || aliquotaIcmsEfetivo != null) {
      map['aliquota_icms_efetivo'] = Variable<double>(aliquotaIcmsEfetivo);
    }
    if (!nullToAbsent || valorIcmsEfetivo != null) {
      map['valor_icms_efetivo'] = Variable<double>(valorIcmsEfetivo);
    }
    if (!nullToAbsent || valorIcmsStDesonerado != null) {
      map['valor_icms_st_desonerado'] = Variable<double>(valorIcmsStDesonerado);
    }
    if (!nullToAbsent || motivoDesoneracaoIcmsSt != null) {
      map['motivo_desoneracao_icms_st'] = Variable<String>(
        motivoDesoneracaoIcmsSt,
      );
    }
    if (!nullToAbsent || taxaFcpDiferido != null) {
      map['taxa_fcp_diferido'] = Variable<double>(taxaFcpDiferido);
    }
    if (!nullToAbsent || valorFcpDiferido != null) {
      map['valor_fcp_diferido'] = Variable<double>(valorFcpDiferido);
    }
    if (!nullToAbsent || valorFcpEfetivo != null) {
      map['valor_fcp_efetivo'] = Variable<double>(valorFcpEfetivo);
    }
    if (!nullToAbsent || desoneradoDeduz != null) {
      map['desonerado_deduz'] = Variable<String>(desoneradoDeduz);
    }
    if (!nullToAbsent || quantidadeTributada != null) {
      map['quantidade_tributada'] = Variable<double>(quantidadeTributada);
    }
    if (!nullToAbsent || aliquotaAdRem != null) {
      map['aliquota_ad_rem'] = Variable<double>(aliquotaAdRem);
    }
    if (!nullToAbsent || valorIcmsMono != null) {
      map['valor_icms_mono'] = Variable<double>(valorIcmsMono);
    }
    if (!nullToAbsent || quantidadeSujeitaRetencao != null) {
      map['quantidade_sujeita_retencao'] = Variable<double>(
        quantidadeSujeitaRetencao,
      );
    }
    if (!nullToAbsent || aliquotaAdRemRetencao != null) {
      map['aliquota_ad_rem_retencao'] = Variable<double>(aliquotaAdRemRetencao);
    }
    if (!nullToAbsent || valorIcmsMonoRetencao != null) {
      map['valor_icms_mono_retencao'] = Variable<double>(valorIcmsMonoRetencao);
    }
    if (!nullToAbsent || percentualReducaoAdRem != null) {
      map['percentual_reducao_ad_rem'] = Variable<double>(
        percentualReducaoAdRem,
      );
    }
    if (!nullToAbsent || motivoReducaoAdRem != null) {
      map['motivo_reducao_ad_rem'] = Variable<String>(motivoReducaoAdRem);
    }
    if (!nullToAbsent || valorIcmsMonoOperacao != null) {
      map['valor_icms_mono_operacao'] = Variable<double>(valorIcmsMonoOperacao);
    }
    if (!nullToAbsent || percentualDiferimentoMono != null) {
      map['percentual_diferimento_mono'] = Variable<double>(
        percentualDiferimentoMono,
      );
    }
    if (!nullToAbsent || valorIcmsDiferidoMono != null) {
      map['valor_icms_diferido_mono'] = Variable<double>(valorIcmsDiferidoMono);
    }
    if (!nullToAbsent || quantidadeTributadaRetida != null) {
      map['quantidade_tributada_retida'] = Variable<double>(
        quantidadeTributadaRetida,
      );
    }
    if (!nullToAbsent || aliquotaAdRemRetida != null) {
      map['aliquota_ad_rem_retida'] = Variable<double>(aliquotaAdRemRetida);
    }
    if (!nullToAbsent || valorIcmsRetido != null) {
      map['valor_icms_retido'] = Variable<double>(valorIcmsRetido);
    }
    return map;
  }

  factory NfeDetalheImpostoIcms.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeDetalheImpostoIcms(
      id: serializer.fromJson<int?>(json['id']),
      idNfeDetalhe: serializer.fromJson<int?>(json['idNfeDetalhe']),
      origemMercadoria: serializer.fromJson<String?>(json['origemMercadoria']),
      cstIcms: serializer.fromJson<String?>(json['cstIcms']),
      csosn: serializer.fromJson<String?>(json['csosn']),
      modalidadeBcIcms: serializer.fromJson<String?>(json['modalidadeBcIcms']),
      percentualReducaoBcIcms: serializer.fromJson<double?>(
        json['percentualReducaoBcIcms'],
      ),
      valorBcIcms: serializer.fromJson<double?>(json['valorBcIcms']),
      aliquotaIcms: serializer.fromJson<double?>(json['aliquotaIcms']),
      valorIcmsOperacao: serializer.fromJson<double?>(
        json['valorIcmsOperacao'],
      ),
      percentualDiferimento: serializer.fromJson<double?>(
        json['percentualDiferimento'],
      ),
      valorIcmsDiferido: serializer.fromJson<double?>(
        json['valorIcmsDiferido'],
      ),
      valorIcms: serializer.fromJson<double?>(json['valorIcms']),
      baseCalculoFcp: serializer.fromJson<double?>(json['baseCalculoFcp']),
      percentualFcp: serializer.fromJson<double?>(json['percentualFcp']),
      valorFcp: serializer.fromJson<double?>(json['valorFcp']),
      modalidadeBcIcmsSt: serializer.fromJson<String?>(
        json['modalidadeBcIcmsSt'],
      ),
      percentualMvaIcmsSt: serializer.fromJson<double?>(
        json['percentualMvaIcmsSt'],
      ),
      percentualReducaoBcIcmsSt: serializer.fromJson<double?>(
        json['percentualReducaoBcIcmsSt'],
      ),
      valorBaseCalculoIcmsSt: serializer.fromJson<double?>(
        json['valorBaseCalculoIcmsSt'],
      ),
      aliquotaIcmsSt: serializer.fromJson<double?>(json['aliquotaIcmsSt']),
      valorIcmsSt: serializer.fromJson<double?>(json['valorIcmsSt']),
      baseCalculoFcpSt: serializer.fromJson<double?>(json['baseCalculoFcpSt']),
      percentualFcpSt: serializer.fromJson<double?>(json['percentualFcpSt']),
      valorFcpSt: serializer.fromJson<double?>(json['valorFcpSt']),
      ufSt: serializer.fromJson<String?>(json['ufSt']),
      percentualBcOperacaoPropria: serializer.fromJson<double?>(
        json['percentualBcOperacaoPropria'],
      ),
      valorBcIcmsStRetido: serializer.fromJson<double?>(
        json['valorBcIcmsStRetido'],
      ),
      aliquotaSuportadaConsumidor: serializer.fromJson<double?>(
        json['aliquotaSuportadaConsumidor'],
      ),
      valorIcmsSubstituto: serializer.fromJson<double?>(
        json['valorIcmsSubstituto'],
      ),
      valorIcmsStRetido: serializer.fromJson<double?>(
        json['valorIcmsStRetido'],
      ),
      baseCalculoFcpStRetido: serializer.fromJson<double?>(
        json['baseCalculoFcpStRetido'],
      ),
      percentualFcpStRetido: serializer.fromJson<double?>(
        json['percentualFcpStRetido'],
      ),
      valorFcpStRetido: serializer.fromJson<double?>(json['valorFcpStRetido']),
      motivoDesoneracaoIcms: serializer.fromJson<String?>(
        json['motivoDesoneracaoIcms'],
      ),
      valorIcmsDesonerado: serializer.fromJson<double?>(
        json['valorIcmsDesonerado'],
      ),
      aliquotaCreditoIcmsSn: serializer.fromJson<double?>(
        json['aliquotaCreditoIcmsSn'],
      ),
      valorCreditoIcmsSn: serializer.fromJson<double?>(
        json['valorCreditoIcmsSn'],
      ),
      valorBcIcmsStDestino: serializer.fromJson<double?>(
        json['valorBcIcmsStDestino'],
      ),
      valorIcmsStDestino: serializer.fromJson<double?>(
        json['valorIcmsStDestino'],
      ),
      percentualReducaoBcEfetivo: serializer.fromJson<double?>(
        json['percentualReducaoBcEfetivo'],
      ),
      valorBcEfetivo: serializer.fromJson<double?>(json['valorBcEfetivo']),
      aliquotaIcmsEfetivo: serializer.fromJson<double?>(
        json['aliquotaIcmsEfetivo'],
      ),
      valorIcmsEfetivo: serializer.fromJson<double?>(json['valorIcmsEfetivo']),
      valorIcmsStDesonerado: serializer.fromJson<double?>(
        json['valorIcmsStDesonerado'],
      ),
      motivoDesoneracaoIcmsSt: serializer.fromJson<String?>(
        json['motivoDesoneracaoIcmsSt'],
      ),
      taxaFcpDiferido: serializer.fromJson<double?>(json['taxaFcpDiferido']),
      valorFcpDiferido: serializer.fromJson<double?>(json['valorFcpDiferido']),
      valorFcpEfetivo: serializer.fromJson<double?>(json['valorFcpEfetivo']),
      desoneradoDeduz: serializer.fromJson<String?>(json['desoneradoDeduz']),
      quantidadeTributada: serializer.fromJson<double?>(
        json['quantidadeTributada'],
      ),
      aliquotaAdRem: serializer.fromJson<double?>(json['aliquotaAdRem']),
      valorIcmsMono: serializer.fromJson<double?>(json['valorIcmsMono']),
      quantidadeSujeitaRetencao: serializer.fromJson<double?>(
        json['quantidadeSujeitaRetencao'],
      ),
      aliquotaAdRemRetencao: serializer.fromJson<double?>(
        json['aliquotaAdRemRetencao'],
      ),
      valorIcmsMonoRetencao: serializer.fromJson<double?>(
        json['valorIcmsMonoRetencao'],
      ),
      percentualReducaoAdRem: serializer.fromJson<double?>(
        json['percentualReducaoAdRem'],
      ),
      motivoReducaoAdRem: serializer.fromJson<String?>(
        json['motivoReducaoAdRem'],
      ),
      valorIcmsMonoOperacao: serializer.fromJson<double?>(
        json['valorIcmsMonoOperacao'],
      ),
      percentualDiferimentoMono: serializer.fromJson<double?>(
        json['percentualDiferimentoMono'],
      ),
      valorIcmsDiferidoMono: serializer.fromJson<double?>(
        json['valorIcmsDiferidoMono'],
      ),
      quantidadeTributadaRetida: serializer.fromJson<double?>(
        json['quantidadeTributadaRetida'],
      ),
      aliquotaAdRemRetida: serializer.fromJson<double?>(
        json['aliquotaAdRemRetida'],
      ),
      valorIcmsRetido: serializer.fromJson<double?>(json['valorIcmsRetido']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeDetalhe': serializer.toJson<int?>(idNfeDetalhe),
      'origemMercadoria': serializer.toJson<String?>(origemMercadoria),
      'cstIcms': serializer.toJson<String?>(cstIcms),
      'csosn': serializer.toJson<String?>(csosn),
      'modalidadeBcIcms': serializer.toJson<String?>(modalidadeBcIcms),
      'percentualReducaoBcIcms': serializer.toJson<double?>(
        percentualReducaoBcIcms,
      ),
      'valorBcIcms': serializer.toJson<double?>(valorBcIcms),
      'aliquotaIcms': serializer.toJson<double?>(aliquotaIcms),
      'valorIcmsOperacao': serializer.toJson<double?>(valorIcmsOperacao),
      'percentualDiferimento': serializer.toJson<double?>(
        percentualDiferimento,
      ),
      'valorIcmsDiferido': serializer.toJson<double?>(valorIcmsDiferido),
      'valorIcms': serializer.toJson<double?>(valorIcms),
      'baseCalculoFcp': serializer.toJson<double?>(baseCalculoFcp),
      'percentualFcp': serializer.toJson<double?>(percentualFcp),
      'valorFcp': serializer.toJson<double?>(valorFcp),
      'modalidadeBcIcmsSt': serializer.toJson<String?>(modalidadeBcIcmsSt),
      'percentualMvaIcmsSt': serializer.toJson<double?>(percentualMvaIcmsSt),
      'percentualReducaoBcIcmsSt': serializer.toJson<double?>(
        percentualReducaoBcIcmsSt,
      ),
      'valorBaseCalculoIcmsSt': serializer.toJson<double?>(
        valorBaseCalculoIcmsSt,
      ),
      'aliquotaIcmsSt': serializer.toJson<double?>(aliquotaIcmsSt),
      'valorIcmsSt': serializer.toJson<double?>(valorIcmsSt),
      'baseCalculoFcpSt': serializer.toJson<double?>(baseCalculoFcpSt),
      'percentualFcpSt': serializer.toJson<double?>(percentualFcpSt),
      'valorFcpSt': serializer.toJson<double?>(valorFcpSt),
      'ufSt': serializer.toJson<String?>(ufSt),
      'percentualBcOperacaoPropria': serializer.toJson<double?>(
        percentualBcOperacaoPropria,
      ),
      'valorBcIcmsStRetido': serializer.toJson<double?>(valorBcIcmsStRetido),
      'aliquotaSuportadaConsumidor': serializer.toJson<double?>(
        aliquotaSuportadaConsumidor,
      ),
      'valorIcmsSubstituto': serializer.toJson<double?>(valorIcmsSubstituto),
      'valorIcmsStRetido': serializer.toJson<double?>(valorIcmsStRetido),
      'baseCalculoFcpStRetido': serializer.toJson<double?>(
        baseCalculoFcpStRetido,
      ),
      'percentualFcpStRetido': serializer.toJson<double?>(
        percentualFcpStRetido,
      ),
      'valorFcpStRetido': serializer.toJson<double?>(valorFcpStRetido),
      'motivoDesoneracaoIcms': serializer.toJson<String?>(
        motivoDesoneracaoIcms,
      ),
      'valorIcmsDesonerado': serializer.toJson<double?>(valorIcmsDesonerado),
      'aliquotaCreditoIcmsSn': serializer.toJson<double?>(
        aliquotaCreditoIcmsSn,
      ),
      'valorCreditoIcmsSn': serializer.toJson<double?>(valorCreditoIcmsSn),
      'valorBcIcmsStDestino': serializer.toJson<double?>(valorBcIcmsStDestino),
      'valorIcmsStDestino': serializer.toJson<double?>(valorIcmsStDestino),
      'percentualReducaoBcEfetivo': serializer.toJson<double?>(
        percentualReducaoBcEfetivo,
      ),
      'valorBcEfetivo': serializer.toJson<double?>(valorBcEfetivo),
      'aliquotaIcmsEfetivo': serializer.toJson<double?>(aliquotaIcmsEfetivo),
      'valorIcmsEfetivo': serializer.toJson<double?>(valorIcmsEfetivo),
      'valorIcmsStDesonerado': serializer.toJson<double?>(
        valorIcmsStDesonerado,
      ),
      'motivoDesoneracaoIcmsSt': serializer.toJson<String?>(
        motivoDesoneracaoIcmsSt,
      ),
      'taxaFcpDiferido': serializer.toJson<double?>(taxaFcpDiferido),
      'valorFcpDiferido': serializer.toJson<double?>(valorFcpDiferido),
      'valorFcpEfetivo': serializer.toJson<double?>(valorFcpEfetivo),
      'desoneradoDeduz': serializer.toJson<String?>(desoneradoDeduz),
      'quantidadeTributada': serializer.toJson<double?>(quantidadeTributada),
      'aliquotaAdRem': serializer.toJson<double?>(aliquotaAdRem),
      'valorIcmsMono': serializer.toJson<double?>(valorIcmsMono),
      'quantidadeSujeitaRetencao': serializer.toJson<double?>(
        quantidadeSujeitaRetencao,
      ),
      'aliquotaAdRemRetencao': serializer.toJson<double?>(
        aliquotaAdRemRetencao,
      ),
      'valorIcmsMonoRetencao': serializer.toJson<double?>(
        valorIcmsMonoRetencao,
      ),
      'percentualReducaoAdRem': serializer.toJson<double?>(
        percentualReducaoAdRem,
      ),
      'motivoReducaoAdRem': serializer.toJson<String?>(motivoReducaoAdRem),
      'valorIcmsMonoOperacao': serializer.toJson<double?>(
        valorIcmsMonoOperacao,
      ),
      'percentualDiferimentoMono': serializer.toJson<double?>(
        percentualDiferimentoMono,
      ),
      'valorIcmsDiferidoMono': serializer.toJson<double?>(
        valorIcmsDiferidoMono,
      ),
      'quantidadeTributadaRetida': serializer.toJson<double?>(
        quantidadeTributadaRetida,
      ),
      'aliquotaAdRemRetida': serializer.toJson<double?>(aliquotaAdRemRetida),
      'valorIcmsRetido': serializer.toJson<double?>(valorIcmsRetido),
    };
  }

  NfeDetalheImpostoIcms copyWith({
    Value<int?> id = const Value.absent(),
    Value<int?> idNfeDetalhe = const Value.absent(),
    Value<String?> origemMercadoria = const Value.absent(),
    Value<String?> cstIcms = const Value.absent(),
    Value<String?> csosn = const Value.absent(),
    Value<String?> modalidadeBcIcms = const Value.absent(),
    Value<double?> percentualReducaoBcIcms = const Value.absent(),
    Value<double?> valorBcIcms = const Value.absent(),
    Value<double?> aliquotaIcms = const Value.absent(),
    Value<double?> valorIcmsOperacao = const Value.absent(),
    Value<double?> percentualDiferimento = const Value.absent(),
    Value<double?> valorIcmsDiferido = const Value.absent(),
    Value<double?> valorIcms = const Value.absent(),
    Value<double?> baseCalculoFcp = const Value.absent(),
    Value<double?> percentualFcp = const Value.absent(),
    Value<double?> valorFcp = const Value.absent(),
    Value<String?> modalidadeBcIcmsSt = const Value.absent(),
    Value<double?> percentualMvaIcmsSt = const Value.absent(),
    Value<double?> percentualReducaoBcIcmsSt = const Value.absent(),
    Value<double?> valorBaseCalculoIcmsSt = const Value.absent(),
    Value<double?> aliquotaIcmsSt = const Value.absent(),
    Value<double?> valorIcmsSt = const Value.absent(),
    Value<double?> baseCalculoFcpSt = const Value.absent(),
    Value<double?> percentualFcpSt = const Value.absent(),
    Value<double?> valorFcpSt = const Value.absent(),
    Value<String?> ufSt = const Value.absent(),
    Value<double?> percentualBcOperacaoPropria = const Value.absent(),
    Value<double?> valorBcIcmsStRetido = const Value.absent(),
    Value<double?> aliquotaSuportadaConsumidor = const Value.absent(),
    Value<double?> valorIcmsSubstituto = const Value.absent(),
    Value<double?> valorIcmsStRetido = const Value.absent(),
    Value<double?> baseCalculoFcpStRetido = const Value.absent(),
    Value<double?> percentualFcpStRetido = const Value.absent(),
    Value<double?> valorFcpStRetido = const Value.absent(),
    Value<String?> motivoDesoneracaoIcms = const Value.absent(),
    Value<double?> valorIcmsDesonerado = const Value.absent(),
    Value<double?> aliquotaCreditoIcmsSn = const Value.absent(),
    Value<double?> valorCreditoIcmsSn = const Value.absent(),
    Value<double?> valorBcIcmsStDestino = const Value.absent(),
    Value<double?> valorIcmsStDestino = const Value.absent(),
    Value<double?> percentualReducaoBcEfetivo = const Value.absent(),
    Value<double?> valorBcEfetivo = const Value.absent(),
    Value<double?> aliquotaIcmsEfetivo = const Value.absent(),
    Value<double?> valorIcmsEfetivo = const Value.absent(),
    Value<double?> valorIcmsStDesonerado = const Value.absent(),
    Value<String?> motivoDesoneracaoIcmsSt = const Value.absent(),
    Value<double?> taxaFcpDiferido = const Value.absent(),
    Value<double?> valorFcpDiferido = const Value.absent(),
    Value<double?> valorFcpEfetivo = const Value.absent(),
    Value<String?> desoneradoDeduz = const Value.absent(),
    Value<double?> quantidadeTributada = const Value.absent(),
    Value<double?> aliquotaAdRem = const Value.absent(),
    Value<double?> valorIcmsMono = const Value.absent(),
    Value<double?> quantidadeSujeitaRetencao = const Value.absent(),
    Value<double?> aliquotaAdRemRetencao = const Value.absent(),
    Value<double?> valorIcmsMonoRetencao = const Value.absent(),
    Value<double?> percentualReducaoAdRem = const Value.absent(),
    Value<String?> motivoReducaoAdRem = const Value.absent(),
    Value<double?> valorIcmsMonoOperacao = const Value.absent(),
    Value<double?> percentualDiferimentoMono = const Value.absent(),
    Value<double?> valorIcmsDiferidoMono = const Value.absent(),
    Value<double?> quantidadeTributadaRetida = const Value.absent(),
    Value<double?> aliquotaAdRemRetida = const Value.absent(),
    Value<double?> valorIcmsRetido = const Value.absent(),
  }) => NfeDetalheImpostoIcms(
    id: id.present ? id.value : this.id,
    idNfeDetalhe: idNfeDetalhe.present ? idNfeDetalhe.value : this.idNfeDetalhe,
    origemMercadoria:
        origemMercadoria.present
            ? origemMercadoria.value
            : this.origemMercadoria,
    cstIcms: cstIcms.present ? cstIcms.value : this.cstIcms,
    csosn: csosn.present ? csosn.value : this.csosn,
    modalidadeBcIcms:
        modalidadeBcIcms.present
            ? modalidadeBcIcms.value
            : this.modalidadeBcIcms,
    percentualReducaoBcIcms:
        percentualReducaoBcIcms.present
            ? percentualReducaoBcIcms.value
            : this.percentualReducaoBcIcms,
    valorBcIcms: valorBcIcms.present ? valorBcIcms.value : this.valorBcIcms,
    aliquotaIcms: aliquotaIcms.present ? aliquotaIcms.value : this.aliquotaIcms,
    valorIcmsOperacao:
        valorIcmsOperacao.present
            ? valorIcmsOperacao.value
            : this.valorIcmsOperacao,
    percentualDiferimento:
        percentualDiferimento.present
            ? percentualDiferimento.value
            : this.percentualDiferimento,
    valorIcmsDiferido:
        valorIcmsDiferido.present
            ? valorIcmsDiferido.value
            : this.valorIcmsDiferido,
    valorIcms: valorIcms.present ? valorIcms.value : this.valorIcms,
    baseCalculoFcp:
        baseCalculoFcp.present ? baseCalculoFcp.value : this.baseCalculoFcp,
    percentualFcp:
        percentualFcp.present ? percentualFcp.value : this.percentualFcp,
    valorFcp: valorFcp.present ? valorFcp.value : this.valorFcp,
    modalidadeBcIcmsSt:
        modalidadeBcIcmsSt.present
            ? modalidadeBcIcmsSt.value
            : this.modalidadeBcIcmsSt,
    percentualMvaIcmsSt:
        percentualMvaIcmsSt.present
            ? percentualMvaIcmsSt.value
            : this.percentualMvaIcmsSt,
    percentualReducaoBcIcmsSt:
        percentualReducaoBcIcmsSt.present
            ? percentualReducaoBcIcmsSt.value
            : this.percentualReducaoBcIcmsSt,
    valorBaseCalculoIcmsSt:
        valorBaseCalculoIcmsSt.present
            ? valorBaseCalculoIcmsSt.value
            : this.valorBaseCalculoIcmsSt,
    aliquotaIcmsSt:
        aliquotaIcmsSt.present ? aliquotaIcmsSt.value : this.aliquotaIcmsSt,
    valorIcmsSt: valorIcmsSt.present ? valorIcmsSt.value : this.valorIcmsSt,
    baseCalculoFcpSt:
        baseCalculoFcpSt.present
            ? baseCalculoFcpSt.value
            : this.baseCalculoFcpSt,
    percentualFcpSt:
        percentualFcpSt.present ? percentualFcpSt.value : this.percentualFcpSt,
    valorFcpSt: valorFcpSt.present ? valorFcpSt.value : this.valorFcpSt,
    ufSt: ufSt.present ? ufSt.value : this.ufSt,
    percentualBcOperacaoPropria:
        percentualBcOperacaoPropria.present
            ? percentualBcOperacaoPropria.value
            : this.percentualBcOperacaoPropria,
    valorBcIcmsStRetido:
        valorBcIcmsStRetido.present
            ? valorBcIcmsStRetido.value
            : this.valorBcIcmsStRetido,
    aliquotaSuportadaConsumidor:
        aliquotaSuportadaConsumidor.present
            ? aliquotaSuportadaConsumidor.value
            : this.aliquotaSuportadaConsumidor,
    valorIcmsSubstituto:
        valorIcmsSubstituto.present
            ? valorIcmsSubstituto.value
            : this.valorIcmsSubstituto,
    valorIcmsStRetido:
        valorIcmsStRetido.present
            ? valorIcmsStRetido.value
            : this.valorIcmsStRetido,
    baseCalculoFcpStRetido:
        baseCalculoFcpStRetido.present
            ? baseCalculoFcpStRetido.value
            : this.baseCalculoFcpStRetido,
    percentualFcpStRetido:
        percentualFcpStRetido.present
            ? percentualFcpStRetido.value
            : this.percentualFcpStRetido,
    valorFcpStRetido:
        valorFcpStRetido.present
            ? valorFcpStRetido.value
            : this.valorFcpStRetido,
    motivoDesoneracaoIcms:
        motivoDesoneracaoIcms.present
            ? motivoDesoneracaoIcms.value
            : this.motivoDesoneracaoIcms,
    valorIcmsDesonerado:
        valorIcmsDesonerado.present
            ? valorIcmsDesonerado.value
            : this.valorIcmsDesonerado,
    aliquotaCreditoIcmsSn:
        aliquotaCreditoIcmsSn.present
            ? aliquotaCreditoIcmsSn.value
            : this.aliquotaCreditoIcmsSn,
    valorCreditoIcmsSn:
        valorCreditoIcmsSn.present
            ? valorCreditoIcmsSn.value
            : this.valorCreditoIcmsSn,
    valorBcIcmsStDestino:
        valorBcIcmsStDestino.present
            ? valorBcIcmsStDestino.value
            : this.valorBcIcmsStDestino,
    valorIcmsStDestino:
        valorIcmsStDestino.present
            ? valorIcmsStDestino.value
            : this.valorIcmsStDestino,
    percentualReducaoBcEfetivo:
        percentualReducaoBcEfetivo.present
            ? percentualReducaoBcEfetivo.value
            : this.percentualReducaoBcEfetivo,
    valorBcEfetivo:
        valorBcEfetivo.present ? valorBcEfetivo.value : this.valorBcEfetivo,
    aliquotaIcmsEfetivo:
        aliquotaIcmsEfetivo.present
            ? aliquotaIcmsEfetivo.value
            : this.aliquotaIcmsEfetivo,
    valorIcmsEfetivo:
        valorIcmsEfetivo.present
            ? valorIcmsEfetivo.value
            : this.valorIcmsEfetivo,
    valorIcmsStDesonerado:
        valorIcmsStDesonerado.present
            ? valorIcmsStDesonerado.value
            : this.valorIcmsStDesonerado,
    motivoDesoneracaoIcmsSt:
        motivoDesoneracaoIcmsSt.present
            ? motivoDesoneracaoIcmsSt.value
            : this.motivoDesoneracaoIcmsSt,
    taxaFcpDiferido:
        taxaFcpDiferido.present ? taxaFcpDiferido.value : this.taxaFcpDiferido,
    valorFcpDiferido:
        valorFcpDiferido.present
            ? valorFcpDiferido.value
            : this.valorFcpDiferido,
    valorFcpEfetivo:
        valorFcpEfetivo.present ? valorFcpEfetivo.value : this.valorFcpEfetivo,
    desoneradoDeduz:
        desoneradoDeduz.present ? desoneradoDeduz.value : this.desoneradoDeduz,
    quantidadeTributada:
        quantidadeTributada.present
            ? quantidadeTributada.value
            : this.quantidadeTributada,
    aliquotaAdRem:
        aliquotaAdRem.present ? aliquotaAdRem.value : this.aliquotaAdRem,
    valorIcmsMono:
        valorIcmsMono.present ? valorIcmsMono.value : this.valorIcmsMono,
    quantidadeSujeitaRetencao:
        quantidadeSujeitaRetencao.present
            ? quantidadeSujeitaRetencao.value
            : this.quantidadeSujeitaRetencao,
    aliquotaAdRemRetencao:
        aliquotaAdRemRetencao.present
            ? aliquotaAdRemRetencao.value
            : this.aliquotaAdRemRetencao,
    valorIcmsMonoRetencao:
        valorIcmsMonoRetencao.present
            ? valorIcmsMonoRetencao.value
            : this.valorIcmsMonoRetencao,
    percentualReducaoAdRem:
        percentualReducaoAdRem.present
            ? percentualReducaoAdRem.value
            : this.percentualReducaoAdRem,
    motivoReducaoAdRem:
        motivoReducaoAdRem.present
            ? motivoReducaoAdRem.value
            : this.motivoReducaoAdRem,
    valorIcmsMonoOperacao:
        valorIcmsMonoOperacao.present
            ? valorIcmsMonoOperacao.value
            : this.valorIcmsMonoOperacao,
    percentualDiferimentoMono:
        percentualDiferimentoMono.present
            ? percentualDiferimentoMono.value
            : this.percentualDiferimentoMono,
    valorIcmsDiferidoMono:
        valorIcmsDiferidoMono.present
            ? valorIcmsDiferidoMono.value
            : this.valorIcmsDiferidoMono,
    quantidadeTributadaRetida:
        quantidadeTributadaRetida.present
            ? quantidadeTributadaRetida.value
            : this.quantidadeTributadaRetida,
    aliquotaAdRemRetida:
        aliquotaAdRemRetida.present
            ? aliquotaAdRemRetida.value
            : this.aliquotaAdRemRetida,
    valorIcmsRetido:
        valorIcmsRetido.present ? valorIcmsRetido.value : this.valorIcmsRetido,
  );
  NfeDetalheImpostoIcms copyWithCompanion(
    NfeDetalheImpostoIcmssCompanion data,
  ) {
    return NfeDetalheImpostoIcms(
      id: data.id.present ? data.id.value : this.id,
      idNfeDetalhe:
          data.idNfeDetalhe.present
              ? data.idNfeDetalhe.value
              : this.idNfeDetalhe,
      origemMercadoria:
          data.origemMercadoria.present
              ? data.origemMercadoria.value
              : this.origemMercadoria,
      cstIcms: data.cstIcms.present ? data.cstIcms.value : this.cstIcms,
      csosn: data.csosn.present ? data.csosn.value : this.csosn,
      modalidadeBcIcms:
          data.modalidadeBcIcms.present
              ? data.modalidadeBcIcms.value
              : this.modalidadeBcIcms,
      percentualReducaoBcIcms:
          data.percentualReducaoBcIcms.present
              ? data.percentualReducaoBcIcms.value
              : this.percentualReducaoBcIcms,
      valorBcIcms:
          data.valorBcIcms.present ? data.valorBcIcms.value : this.valorBcIcms,
      aliquotaIcms:
          data.aliquotaIcms.present
              ? data.aliquotaIcms.value
              : this.aliquotaIcms,
      valorIcmsOperacao:
          data.valorIcmsOperacao.present
              ? data.valorIcmsOperacao.value
              : this.valorIcmsOperacao,
      percentualDiferimento:
          data.percentualDiferimento.present
              ? data.percentualDiferimento.value
              : this.percentualDiferimento,
      valorIcmsDiferido:
          data.valorIcmsDiferido.present
              ? data.valorIcmsDiferido.value
              : this.valorIcmsDiferido,
      valorIcms: data.valorIcms.present ? data.valorIcms.value : this.valorIcms,
      baseCalculoFcp:
          data.baseCalculoFcp.present
              ? data.baseCalculoFcp.value
              : this.baseCalculoFcp,
      percentualFcp:
          data.percentualFcp.present
              ? data.percentualFcp.value
              : this.percentualFcp,
      valorFcp: data.valorFcp.present ? data.valorFcp.value : this.valorFcp,
      modalidadeBcIcmsSt:
          data.modalidadeBcIcmsSt.present
              ? data.modalidadeBcIcmsSt.value
              : this.modalidadeBcIcmsSt,
      percentualMvaIcmsSt:
          data.percentualMvaIcmsSt.present
              ? data.percentualMvaIcmsSt.value
              : this.percentualMvaIcmsSt,
      percentualReducaoBcIcmsSt:
          data.percentualReducaoBcIcmsSt.present
              ? data.percentualReducaoBcIcmsSt.value
              : this.percentualReducaoBcIcmsSt,
      valorBaseCalculoIcmsSt:
          data.valorBaseCalculoIcmsSt.present
              ? data.valorBaseCalculoIcmsSt.value
              : this.valorBaseCalculoIcmsSt,
      aliquotaIcmsSt:
          data.aliquotaIcmsSt.present
              ? data.aliquotaIcmsSt.value
              : this.aliquotaIcmsSt,
      valorIcmsSt:
          data.valorIcmsSt.present ? data.valorIcmsSt.value : this.valorIcmsSt,
      baseCalculoFcpSt:
          data.baseCalculoFcpSt.present
              ? data.baseCalculoFcpSt.value
              : this.baseCalculoFcpSt,
      percentualFcpSt:
          data.percentualFcpSt.present
              ? data.percentualFcpSt.value
              : this.percentualFcpSt,
      valorFcpSt:
          data.valorFcpSt.present ? data.valorFcpSt.value : this.valorFcpSt,
      ufSt: data.ufSt.present ? data.ufSt.value : this.ufSt,
      percentualBcOperacaoPropria:
          data.percentualBcOperacaoPropria.present
              ? data.percentualBcOperacaoPropria.value
              : this.percentualBcOperacaoPropria,
      valorBcIcmsStRetido:
          data.valorBcIcmsStRetido.present
              ? data.valorBcIcmsStRetido.value
              : this.valorBcIcmsStRetido,
      aliquotaSuportadaConsumidor:
          data.aliquotaSuportadaConsumidor.present
              ? data.aliquotaSuportadaConsumidor.value
              : this.aliquotaSuportadaConsumidor,
      valorIcmsSubstituto:
          data.valorIcmsSubstituto.present
              ? data.valorIcmsSubstituto.value
              : this.valorIcmsSubstituto,
      valorIcmsStRetido:
          data.valorIcmsStRetido.present
              ? data.valorIcmsStRetido.value
              : this.valorIcmsStRetido,
      baseCalculoFcpStRetido:
          data.baseCalculoFcpStRetido.present
              ? data.baseCalculoFcpStRetido.value
              : this.baseCalculoFcpStRetido,
      percentualFcpStRetido:
          data.percentualFcpStRetido.present
              ? data.percentualFcpStRetido.value
              : this.percentualFcpStRetido,
      valorFcpStRetido:
          data.valorFcpStRetido.present
              ? data.valorFcpStRetido.value
              : this.valorFcpStRetido,
      motivoDesoneracaoIcms:
          data.motivoDesoneracaoIcms.present
              ? data.motivoDesoneracaoIcms.value
              : this.motivoDesoneracaoIcms,
      valorIcmsDesonerado:
          data.valorIcmsDesonerado.present
              ? data.valorIcmsDesonerado.value
              : this.valorIcmsDesonerado,
      aliquotaCreditoIcmsSn:
          data.aliquotaCreditoIcmsSn.present
              ? data.aliquotaCreditoIcmsSn.value
              : this.aliquotaCreditoIcmsSn,
      valorCreditoIcmsSn:
          data.valorCreditoIcmsSn.present
              ? data.valorCreditoIcmsSn.value
              : this.valorCreditoIcmsSn,
      valorBcIcmsStDestino:
          data.valorBcIcmsStDestino.present
              ? data.valorBcIcmsStDestino.value
              : this.valorBcIcmsStDestino,
      valorIcmsStDestino:
          data.valorIcmsStDestino.present
              ? data.valorIcmsStDestino.value
              : this.valorIcmsStDestino,
      percentualReducaoBcEfetivo:
          data.percentualReducaoBcEfetivo.present
              ? data.percentualReducaoBcEfetivo.value
              : this.percentualReducaoBcEfetivo,
      valorBcEfetivo:
          data.valorBcEfetivo.present
              ? data.valorBcEfetivo.value
              : this.valorBcEfetivo,
      aliquotaIcmsEfetivo:
          data.aliquotaIcmsEfetivo.present
              ? data.aliquotaIcmsEfetivo.value
              : this.aliquotaIcmsEfetivo,
      valorIcmsEfetivo:
          data.valorIcmsEfetivo.present
              ? data.valorIcmsEfetivo.value
              : this.valorIcmsEfetivo,
      valorIcmsStDesonerado:
          data.valorIcmsStDesonerado.present
              ? data.valorIcmsStDesonerado.value
              : this.valorIcmsStDesonerado,
      motivoDesoneracaoIcmsSt:
          data.motivoDesoneracaoIcmsSt.present
              ? data.motivoDesoneracaoIcmsSt.value
              : this.motivoDesoneracaoIcmsSt,
      taxaFcpDiferido:
          data.taxaFcpDiferido.present
              ? data.taxaFcpDiferido.value
              : this.taxaFcpDiferido,
      valorFcpDiferido:
          data.valorFcpDiferido.present
              ? data.valorFcpDiferido.value
              : this.valorFcpDiferido,
      valorFcpEfetivo:
          data.valorFcpEfetivo.present
              ? data.valorFcpEfetivo.value
              : this.valorFcpEfetivo,
      desoneradoDeduz:
          data.desoneradoDeduz.present
              ? data.desoneradoDeduz.value
              : this.desoneradoDeduz,
      quantidadeTributada:
          data.quantidadeTributada.present
              ? data.quantidadeTributada.value
              : this.quantidadeTributada,
      aliquotaAdRem:
          data.aliquotaAdRem.present
              ? data.aliquotaAdRem.value
              : this.aliquotaAdRem,
      valorIcmsMono:
          data.valorIcmsMono.present
              ? data.valorIcmsMono.value
              : this.valorIcmsMono,
      quantidadeSujeitaRetencao:
          data.quantidadeSujeitaRetencao.present
              ? data.quantidadeSujeitaRetencao.value
              : this.quantidadeSujeitaRetencao,
      aliquotaAdRemRetencao:
          data.aliquotaAdRemRetencao.present
              ? data.aliquotaAdRemRetencao.value
              : this.aliquotaAdRemRetencao,
      valorIcmsMonoRetencao:
          data.valorIcmsMonoRetencao.present
              ? data.valorIcmsMonoRetencao.value
              : this.valorIcmsMonoRetencao,
      percentualReducaoAdRem:
          data.percentualReducaoAdRem.present
              ? data.percentualReducaoAdRem.value
              : this.percentualReducaoAdRem,
      motivoReducaoAdRem:
          data.motivoReducaoAdRem.present
              ? data.motivoReducaoAdRem.value
              : this.motivoReducaoAdRem,
      valorIcmsMonoOperacao:
          data.valorIcmsMonoOperacao.present
              ? data.valorIcmsMonoOperacao.value
              : this.valorIcmsMonoOperacao,
      percentualDiferimentoMono:
          data.percentualDiferimentoMono.present
              ? data.percentualDiferimentoMono.value
              : this.percentualDiferimentoMono,
      valorIcmsDiferidoMono:
          data.valorIcmsDiferidoMono.present
              ? data.valorIcmsDiferidoMono.value
              : this.valorIcmsDiferidoMono,
      quantidadeTributadaRetida:
          data.quantidadeTributadaRetida.present
              ? data.quantidadeTributadaRetida.value
              : this.quantidadeTributadaRetida,
      aliquotaAdRemRetida:
          data.aliquotaAdRemRetida.present
              ? data.aliquotaAdRemRetida.value
              : this.aliquotaAdRemRetida,
      valorIcmsRetido:
          data.valorIcmsRetido.present
              ? data.valorIcmsRetido.value
              : this.valorIcmsRetido,
    );
  }

  @override
  String toString() {
    return (StringBuffer('NfeDetalheImpostoIcms(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('origemMercadoria: $origemMercadoria, ')
          ..write('cstIcms: $cstIcms, ')
          ..write('csosn: $csosn, ')
          ..write('modalidadeBcIcms: $modalidadeBcIcms, ')
          ..write('percentualReducaoBcIcms: $percentualReducaoBcIcms, ')
          ..write('valorBcIcms: $valorBcIcms, ')
          ..write('aliquotaIcms: $aliquotaIcms, ')
          ..write('valorIcmsOperacao: $valorIcmsOperacao, ')
          ..write('percentualDiferimento: $percentualDiferimento, ')
          ..write('valorIcmsDiferido: $valorIcmsDiferido, ')
          ..write('valorIcms: $valorIcms, ')
          ..write('baseCalculoFcp: $baseCalculoFcp, ')
          ..write('percentualFcp: $percentualFcp, ')
          ..write('valorFcp: $valorFcp, ')
          ..write('modalidadeBcIcmsSt: $modalidadeBcIcmsSt, ')
          ..write('percentualMvaIcmsSt: $percentualMvaIcmsSt, ')
          ..write('percentualReducaoBcIcmsSt: $percentualReducaoBcIcmsSt, ')
          ..write('valorBaseCalculoIcmsSt: $valorBaseCalculoIcmsSt, ')
          ..write('aliquotaIcmsSt: $aliquotaIcmsSt, ')
          ..write('valorIcmsSt: $valorIcmsSt, ')
          ..write('baseCalculoFcpSt: $baseCalculoFcpSt, ')
          ..write('percentualFcpSt: $percentualFcpSt, ')
          ..write('valorFcpSt: $valorFcpSt, ')
          ..write('ufSt: $ufSt, ')
          ..write('percentualBcOperacaoPropria: $percentualBcOperacaoPropria, ')
          ..write('valorBcIcmsStRetido: $valorBcIcmsStRetido, ')
          ..write('aliquotaSuportadaConsumidor: $aliquotaSuportadaConsumidor, ')
          ..write('valorIcmsSubstituto: $valorIcmsSubstituto, ')
          ..write('valorIcmsStRetido: $valorIcmsStRetido, ')
          ..write('baseCalculoFcpStRetido: $baseCalculoFcpStRetido, ')
          ..write('percentualFcpStRetido: $percentualFcpStRetido, ')
          ..write('valorFcpStRetido: $valorFcpStRetido, ')
          ..write('motivoDesoneracaoIcms: $motivoDesoneracaoIcms, ')
          ..write('valorIcmsDesonerado: $valorIcmsDesonerado, ')
          ..write('aliquotaCreditoIcmsSn: $aliquotaCreditoIcmsSn, ')
          ..write('valorCreditoIcmsSn: $valorCreditoIcmsSn, ')
          ..write('valorBcIcmsStDestino: $valorBcIcmsStDestino, ')
          ..write('valorIcmsStDestino: $valorIcmsStDestino, ')
          ..write('percentualReducaoBcEfetivo: $percentualReducaoBcEfetivo, ')
          ..write('valorBcEfetivo: $valorBcEfetivo, ')
          ..write('aliquotaIcmsEfetivo: $aliquotaIcmsEfetivo, ')
          ..write('valorIcmsEfetivo: $valorIcmsEfetivo, ')
          ..write('valorIcmsStDesonerado: $valorIcmsStDesonerado, ')
          ..write('motivoDesoneracaoIcmsSt: $motivoDesoneracaoIcmsSt, ')
          ..write('taxaFcpDiferido: $taxaFcpDiferido, ')
          ..write('valorFcpDiferido: $valorFcpDiferido, ')
          ..write('valorFcpEfetivo: $valorFcpEfetivo, ')
          ..write('desoneradoDeduz: $desoneradoDeduz, ')
          ..write('quantidadeTributada: $quantidadeTributada, ')
          ..write('aliquotaAdRem: $aliquotaAdRem, ')
          ..write('valorIcmsMono: $valorIcmsMono, ')
          ..write('quantidadeSujeitaRetencao: $quantidadeSujeitaRetencao, ')
          ..write('aliquotaAdRemRetencao: $aliquotaAdRemRetencao, ')
          ..write('valorIcmsMonoRetencao: $valorIcmsMonoRetencao, ')
          ..write('percentualReducaoAdRem: $percentualReducaoAdRem, ')
          ..write('motivoReducaoAdRem: $motivoReducaoAdRem, ')
          ..write('valorIcmsMonoOperacao: $valorIcmsMonoOperacao, ')
          ..write('percentualDiferimentoMono: $percentualDiferimentoMono, ')
          ..write('valorIcmsDiferidoMono: $valorIcmsDiferidoMono, ')
          ..write('quantidadeTributadaRetida: $quantidadeTributadaRetida, ')
          ..write('aliquotaAdRemRetida: $aliquotaAdRemRetida, ')
          ..write('valorIcmsRetido: $valorIcmsRetido')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hashAll([
    id,
    idNfeDetalhe,
    origemMercadoria,
    cstIcms,
    csosn,
    modalidadeBcIcms,
    percentualReducaoBcIcms,
    valorBcIcms,
    aliquotaIcms,
    valorIcmsOperacao,
    percentualDiferimento,
    valorIcmsDiferido,
    valorIcms,
    baseCalculoFcp,
    percentualFcp,
    valorFcp,
    modalidadeBcIcmsSt,
    percentualMvaIcmsSt,
    percentualReducaoBcIcmsSt,
    valorBaseCalculoIcmsSt,
    aliquotaIcmsSt,
    valorIcmsSt,
    baseCalculoFcpSt,
    percentualFcpSt,
    valorFcpSt,
    ufSt,
    percentualBcOperacaoPropria,
    valorBcIcmsStRetido,
    aliquotaSuportadaConsumidor,
    valorIcmsSubstituto,
    valorIcmsStRetido,
    baseCalculoFcpStRetido,
    percentualFcpStRetido,
    valorFcpStRetido,
    motivoDesoneracaoIcms,
    valorIcmsDesonerado,
    aliquotaCreditoIcmsSn,
    valorCreditoIcmsSn,
    valorBcIcmsStDestino,
    valorIcmsStDestino,
    percentualReducaoBcEfetivo,
    valorBcEfetivo,
    aliquotaIcmsEfetivo,
    valorIcmsEfetivo,
    valorIcmsStDesonerado,
    motivoDesoneracaoIcmsSt,
    taxaFcpDiferido,
    valorFcpDiferido,
    valorFcpEfetivo,
    desoneradoDeduz,
    quantidadeTributada,
    aliquotaAdRem,
    valorIcmsMono,
    quantidadeSujeitaRetencao,
    aliquotaAdRemRetencao,
    valorIcmsMonoRetencao,
    percentualReducaoAdRem,
    motivoReducaoAdRem,
    valorIcmsMonoOperacao,
    percentualDiferimentoMono,
    valorIcmsDiferidoMono,
    quantidadeTributadaRetida,
    aliquotaAdRemRetida,
    valorIcmsRetido,
  ]);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeDetalheImpostoIcms &&
          other.id == this.id &&
          other.idNfeDetalhe == this.idNfeDetalhe &&
          other.origemMercadoria == this.origemMercadoria &&
          other.cstIcms == this.cstIcms &&
          other.csosn == this.csosn &&
          other.modalidadeBcIcms == this.modalidadeBcIcms &&
          other.percentualReducaoBcIcms == this.percentualReducaoBcIcms &&
          other.valorBcIcms == this.valorBcIcms &&
          other.aliquotaIcms == this.aliquotaIcms &&
          other.valorIcmsOperacao == this.valorIcmsOperacao &&
          other.percentualDiferimento == this.percentualDiferimento &&
          other.valorIcmsDiferido == this.valorIcmsDiferido &&
          other.valorIcms == this.valorIcms &&
          other.baseCalculoFcp == this.baseCalculoFcp &&
          other.percentualFcp == this.percentualFcp &&
          other.valorFcp == this.valorFcp &&
          other.modalidadeBcIcmsSt == this.modalidadeBcIcmsSt &&
          other.percentualMvaIcmsSt == this.percentualMvaIcmsSt &&
          other.percentualReducaoBcIcmsSt == this.percentualReducaoBcIcmsSt &&
          other.valorBaseCalculoIcmsSt == this.valorBaseCalculoIcmsSt &&
          other.aliquotaIcmsSt == this.aliquotaIcmsSt &&
          other.valorIcmsSt == this.valorIcmsSt &&
          other.baseCalculoFcpSt == this.baseCalculoFcpSt &&
          other.percentualFcpSt == this.percentualFcpSt &&
          other.valorFcpSt == this.valorFcpSt &&
          other.ufSt == this.ufSt &&
          other.percentualBcOperacaoPropria ==
              this.percentualBcOperacaoPropria &&
          other.valorBcIcmsStRetido == this.valorBcIcmsStRetido &&
          other.aliquotaSuportadaConsumidor ==
              this.aliquotaSuportadaConsumidor &&
          other.valorIcmsSubstituto == this.valorIcmsSubstituto &&
          other.valorIcmsStRetido == this.valorIcmsStRetido &&
          other.baseCalculoFcpStRetido == this.baseCalculoFcpStRetido &&
          other.percentualFcpStRetido == this.percentualFcpStRetido &&
          other.valorFcpStRetido == this.valorFcpStRetido &&
          other.motivoDesoneracaoIcms == this.motivoDesoneracaoIcms &&
          other.valorIcmsDesonerado == this.valorIcmsDesonerado &&
          other.aliquotaCreditoIcmsSn == this.aliquotaCreditoIcmsSn &&
          other.valorCreditoIcmsSn == this.valorCreditoIcmsSn &&
          other.valorBcIcmsStDestino == this.valorBcIcmsStDestino &&
          other.valorIcmsStDestino == this.valorIcmsStDestino &&
          other.percentualReducaoBcEfetivo == this.percentualReducaoBcEfetivo &&
          other.valorBcEfetivo == this.valorBcEfetivo &&
          other.aliquotaIcmsEfetivo == this.aliquotaIcmsEfetivo &&
          other.valorIcmsEfetivo == this.valorIcmsEfetivo &&
          other.valorIcmsStDesonerado == this.valorIcmsStDesonerado &&
          other.motivoDesoneracaoIcmsSt == this.motivoDesoneracaoIcmsSt &&
          other.taxaFcpDiferido == this.taxaFcpDiferido &&
          other.valorFcpDiferido == this.valorFcpDiferido &&
          other.valorFcpEfetivo == this.valorFcpEfetivo &&
          other.desoneradoDeduz == this.desoneradoDeduz &&
          other.quantidadeTributada == this.quantidadeTributada &&
          other.aliquotaAdRem == this.aliquotaAdRem &&
          other.valorIcmsMono == this.valorIcmsMono &&
          other.quantidadeSujeitaRetencao == this.quantidadeSujeitaRetencao &&
          other.aliquotaAdRemRetencao == this.aliquotaAdRemRetencao &&
          other.valorIcmsMonoRetencao == this.valorIcmsMonoRetencao &&
          other.percentualReducaoAdRem == this.percentualReducaoAdRem &&
          other.motivoReducaoAdRem == this.motivoReducaoAdRem &&
          other.valorIcmsMonoOperacao == this.valorIcmsMonoOperacao &&
          other.percentualDiferimentoMono == this.percentualDiferimentoMono &&
          other.valorIcmsDiferidoMono == this.valorIcmsDiferidoMono &&
          other.quantidadeTributadaRetida == this.quantidadeTributadaRetida &&
          other.aliquotaAdRemRetida == this.aliquotaAdRemRetida &&
          other.valorIcmsRetido == this.valorIcmsRetido);
}

class NfeDetalheImpostoIcmssCompanion
    extends UpdateCompanion<NfeDetalheImpostoIcms> {
  final Value<int?> id;
  final Value<int?> idNfeDetalhe;
  final Value<String?> origemMercadoria;
  final Value<String?> cstIcms;
  final Value<String?> csosn;
  final Value<String?> modalidadeBcIcms;
  final Value<double?> percentualReducaoBcIcms;
  final Value<double?> valorBcIcms;
  final Value<double?> aliquotaIcms;
  final Value<double?> valorIcmsOperacao;
  final Value<double?> percentualDiferimento;
  final Value<double?> valorIcmsDiferido;
  final Value<double?> valorIcms;
  final Value<double?> baseCalculoFcp;
  final Value<double?> percentualFcp;
  final Value<double?> valorFcp;
  final Value<String?> modalidadeBcIcmsSt;
  final Value<double?> percentualMvaIcmsSt;
  final Value<double?> percentualReducaoBcIcmsSt;
  final Value<double?> valorBaseCalculoIcmsSt;
  final Value<double?> aliquotaIcmsSt;
  final Value<double?> valorIcmsSt;
  final Value<double?> baseCalculoFcpSt;
  final Value<double?> percentualFcpSt;
  final Value<double?> valorFcpSt;
  final Value<String?> ufSt;
  final Value<double?> percentualBcOperacaoPropria;
  final Value<double?> valorBcIcmsStRetido;
  final Value<double?> aliquotaSuportadaConsumidor;
  final Value<double?> valorIcmsSubstituto;
  final Value<double?> valorIcmsStRetido;
  final Value<double?> baseCalculoFcpStRetido;
  final Value<double?> percentualFcpStRetido;
  final Value<double?> valorFcpStRetido;
  final Value<String?> motivoDesoneracaoIcms;
  final Value<double?> valorIcmsDesonerado;
  final Value<double?> aliquotaCreditoIcmsSn;
  final Value<double?> valorCreditoIcmsSn;
  final Value<double?> valorBcIcmsStDestino;
  final Value<double?> valorIcmsStDestino;
  final Value<double?> percentualReducaoBcEfetivo;
  final Value<double?> valorBcEfetivo;
  final Value<double?> aliquotaIcmsEfetivo;
  final Value<double?> valorIcmsEfetivo;
  final Value<double?> valorIcmsStDesonerado;
  final Value<String?> motivoDesoneracaoIcmsSt;
  final Value<double?> taxaFcpDiferido;
  final Value<double?> valorFcpDiferido;
  final Value<double?> valorFcpEfetivo;
  final Value<String?> desoneradoDeduz;
  final Value<double?> quantidadeTributada;
  final Value<double?> aliquotaAdRem;
  final Value<double?> valorIcmsMono;
  final Value<double?> quantidadeSujeitaRetencao;
  final Value<double?> aliquotaAdRemRetencao;
  final Value<double?> valorIcmsMonoRetencao;
  final Value<double?> percentualReducaoAdRem;
  final Value<String?> motivoReducaoAdRem;
  final Value<double?> valorIcmsMonoOperacao;
  final Value<double?> percentualDiferimentoMono;
  final Value<double?> valorIcmsDiferidoMono;
  final Value<double?> quantidadeTributadaRetida;
  final Value<double?> aliquotaAdRemRetida;
  final Value<double?> valorIcmsRetido;
  const NfeDetalheImpostoIcmssCompanion({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.origemMercadoria = const Value.absent(),
    this.cstIcms = const Value.absent(),
    this.csosn = const Value.absent(),
    this.modalidadeBcIcms = const Value.absent(),
    this.percentualReducaoBcIcms = const Value.absent(),
    this.valorBcIcms = const Value.absent(),
    this.aliquotaIcms = const Value.absent(),
    this.valorIcmsOperacao = const Value.absent(),
    this.percentualDiferimento = const Value.absent(),
    this.valorIcmsDiferido = const Value.absent(),
    this.valorIcms = const Value.absent(),
    this.baseCalculoFcp = const Value.absent(),
    this.percentualFcp = const Value.absent(),
    this.valorFcp = const Value.absent(),
    this.modalidadeBcIcmsSt = const Value.absent(),
    this.percentualMvaIcmsSt = const Value.absent(),
    this.percentualReducaoBcIcmsSt = const Value.absent(),
    this.valorBaseCalculoIcmsSt = const Value.absent(),
    this.aliquotaIcmsSt = const Value.absent(),
    this.valorIcmsSt = const Value.absent(),
    this.baseCalculoFcpSt = const Value.absent(),
    this.percentualFcpSt = const Value.absent(),
    this.valorFcpSt = const Value.absent(),
    this.ufSt = const Value.absent(),
    this.percentualBcOperacaoPropria = const Value.absent(),
    this.valorBcIcmsStRetido = const Value.absent(),
    this.aliquotaSuportadaConsumidor = const Value.absent(),
    this.valorIcmsSubstituto = const Value.absent(),
    this.valorIcmsStRetido = const Value.absent(),
    this.baseCalculoFcpStRetido = const Value.absent(),
    this.percentualFcpStRetido = const Value.absent(),
    this.valorFcpStRetido = const Value.absent(),
    this.motivoDesoneracaoIcms = const Value.absent(),
    this.valorIcmsDesonerado = const Value.absent(),
    this.aliquotaCreditoIcmsSn = const Value.absent(),
    this.valorCreditoIcmsSn = const Value.absent(),
    this.valorBcIcmsStDestino = const Value.absent(),
    this.valorIcmsStDestino = const Value.absent(),
    this.percentualReducaoBcEfetivo = const Value.absent(),
    this.valorBcEfetivo = const Value.absent(),
    this.aliquotaIcmsEfetivo = const Value.absent(),
    this.valorIcmsEfetivo = const Value.absent(),
    this.valorIcmsStDesonerado = const Value.absent(),
    this.motivoDesoneracaoIcmsSt = const Value.absent(),
    this.taxaFcpDiferido = const Value.absent(),
    this.valorFcpDiferido = const Value.absent(),
    this.valorFcpEfetivo = const Value.absent(),
    this.desoneradoDeduz = const Value.absent(),
    this.quantidadeTributada = const Value.absent(),
    this.aliquotaAdRem = const Value.absent(),
    this.valorIcmsMono = const Value.absent(),
    this.quantidadeSujeitaRetencao = const Value.absent(),
    this.aliquotaAdRemRetencao = const Value.absent(),
    this.valorIcmsMonoRetencao = const Value.absent(),
    this.percentualReducaoAdRem = const Value.absent(),
    this.motivoReducaoAdRem = const Value.absent(),
    this.valorIcmsMonoOperacao = const Value.absent(),
    this.percentualDiferimentoMono = const Value.absent(),
    this.valorIcmsDiferidoMono = const Value.absent(),
    this.quantidadeTributadaRetida = const Value.absent(),
    this.aliquotaAdRemRetida = const Value.absent(),
    this.valorIcmsRetido = const Value.absent(),
  });
  NfeDetalheImpostoIcmssCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.origemMercadoria = const Value.absent(),
    this.cstIcms = const Value.absent(),
    this.csosn = const Value.absent(),
    this.modalidadeBcIcms = const Value.absent(),
    this.percentualReducaoBcIcms = const Value.absent(),
    this.valorBcIcms = const Value.absent(),
    this.aliquotaIcms = const Value.absent(),
    this.valorIcmsOperacao = const Value.absent(),
    this.percentualDiferimento = const Value.absent(),
    this.valorIcmsDiferido = const Value.absent(),
    this.valorIcms = const Value.absent(),
    this.baseCalculoFcp = const Value.absent(),
    this.percentualFcp = const Value.absent(),
    this.valorFcp = const Value.absent(),
    this.modalidadeBcIcmsSt = const Value.absent(),
    this.percentualMvaIcmsSt = const Value.absent(),
    this.percentualReducaoBcIcmsSt = const Value.absent(),
    this.valorBaseCalculoIcmsSt = const Value.absent(),
    this.aliquotaIcmsSt = const Value.absent(),
    this.valorIcmsSt = const Value.absent(),
    this.baseCalculoFcpSt = const Value.absent(),
    this.percentualFcpSt = const Value.absent(),
    this.valorFcpSt = const Value.absent(),
    this.ufSt = const Value.absent(),
    this.percentualBcOperacaoPropria = const Value.absent(),
    this.valorBcIcmsStRetido = const Value.absent(),
    this.aliquotaSuportadaConsumidor = const Value.absent(),
    this.valorIcmsSubstituto = const Value.absent(),
    this.valorIcmsStRetido = const Value.absent(),
    this.baseCalculoFcpStRetido = const Value.absent(),
    this.percentualFcpStRetido = const Value.absent(),
    this.valorFcpStRetido = const Value.absent(),
    this.motivoDesoneracaoIcms = const Value.absent(),
    this.valorIcmsDesonerado = const Value.absent(),
    this.aliquotaCreditoIcmsSn = const Value.absent(),
    this.valorCreditoIcmsSn = const Value.absent(),
    this.valorBcIcmsStDestino = const Value.absent(),
    this.valorIcmsStDestino = const Value.absent(),
    this.percentualReducaoBcEfetivo = const Value.absent(),
    this.valorBcEfetivo = const Value.absent(),
    this.aliquotaIcmsEfetivo = const Value.absent(),
    this.valorIcmsEfetivo = const Value.absent(),
    this.valorIcmsStDesonerado = const Value.absent(),
    this.motivoDesoneracaoIcmsSt = const Value.absent(),
    this.taxaFcpDiferido = const Value.absent(),
    this.valorFcpDiferido = const Value.absent(),
    this.valorFcpEfetivo = const Value.absent(),
    this.desoneradoDeduz = const Value.absent(),
    this.quantidadeTributada = const Value.absent(),
    this.aliquotaAdRem = const Value.absent(),
    this.valorIcmsMono = const Value.absent(),
    this.quantidadeSujeitaRetencao = const Value.absent(),
    this.aliquotaAdRemRetencao = const Value.absent(),
    this.valorIcmsMonoRetencao = const Value.absent(),
    this.percentualReducaoAdRem = const Value.absent(),
    this.motivoReducaoAdRem = const Value.absent(),
    this.valorIcmsMonoOperacao = const Value.absent(),
    this.percentualDiferimentoMono = const Value.absent(),
    this.valorIcmsDiferidoMono = const Value.absent(),
    this.quantidadeTributadaRetida = const Value.absent(),
    this.aliquotaAdRemRetida = const Value.absent(),
    this.valorIcmsRetido = const Value.absent(),
  });
  static Insertable<NfeDetalheImpostoIcms> custom({
    Expression<int>? id,
    Expression<int>? idNfeDetalhe,
    Expression<String>? origemMercadoria,
    Expression<String>? cstIcms,
    Expression<String>? csosn,
    Expression<String>? modalidadeBcIcms,
    Expression<double>? percentualReducaoBcIcms,
    Expression<double>? valorBcIcms,
    Expression<double>? aliquotaIcms,
    Expression<double>? valorIcmsOperacao,
    Expression<double>? percentualDiferimento,
    Expression<double>? valorIcmsDiferido,
    Expression<double>? valorIcms,
    Expression<double>? baseCalculoFcp,
    Expression<double>? percentualFcp,
    Expression<double>? valorFcp,
    Expression<String>? modalidadeBcIcmsSt,
    Expression<double>? percentualMvaIcmsSt,
    Expression<double>? percentualReducaoBcIcmsSt,
    Expression<double>? valorBaseCalculoIcmsSt,
    Expression<double>? aliquotaIcmsSt,
    Expression<double>? valorIcmsSt,
    Expression<double>? baseCalculoFcpSt,
    Expression<double>? percentualFcpSt,
    Expression<double>? valorFcpSt,
    Expression<String>? ufSt,
    Expression<double>? percentualBcOperacaoPropria,
    Expression<double>? valorBcIcmsStRetido,
    Expression<double>? aliquotaSuportadaConsumidor,
    Expression<double>? valorIcmsSubstituto,
    Expression<double>? valorIcmsStRetido,
    Expression<double>? baseCalculoFcpStRetido,
    Expression<double>? percentualFcpStRetido,
    Expression<double>? valorFcpStRetido,
    Expression<String>? motivoDesoneracaoIcms,
    Expression<double>? valorIcmsDesonerado,
    Expression<double>? aliquotaCreditoIcmsSn,
    Expression<double>? valorCreditoIcmsSn,
    Expression<double>? valorBcIcmsStDestino,
    Expression<double>? valorIcmsStDestino,
    Expression<double>? percentualReducaoBcEfetivo,
    Expression<double>? valorBcEfetivo,
    Expression<double>? aliquotaIcmsEfetivo,
    Expression<double>? valorIcmsEfetivo,
    Expression<double>? valorIcmsStDesonerado,
    Expression<String>? motivoDesoneracaoIcmsSt,
    Expression<double>? taxaFcpDiferido,
    Expression<double>? valorFcpDiferido,
    Expression<double>? valorFcpEfetivo,
    Expression<String>? desoneradoDeduz,
    Expression<double>? quantidadeTributada,
    Expression<double>? aliquotaAdRem,
    Expression<double>? valorIcmsMono,
    Expression<double>? quantidadeSujeitaRetencao,
    Expression<double>? aliquotaAdRemRetencao,
    Expression<double>? valorIcmsMonoRetencao,
    Expression<double>? percentualReducaoAdRem,
    Expression<String>? motivoReducaoAdRem,
    Expression<double>? valorIcmsMonoOperacao,
    Expression<double>? percentualDiferimentoMono,
    Expression<double>? valorIcmsDiferidoMono,
    Expression<double>? quantidadeTributadaRetida,
    Expression<double>? aliquotaAdRemRetida,
    Expression<double>? valorIcmsRetido,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (idNfeDetalhe != null) 'id_nfe_detalhe': idNfeDetalhe,
      if (origemMercadoria != null) 'origem_mercadoria': origemMercadoria,
      if (cstIcms != null) 'cst_icms': cstIcms,
      if (csosn != null) 'csosn': csosn,
      if (modalidadeBcIcms != null) 'modalidade_bc_icms': modalidadeBcIcms,
      if (percentualReducaoBcIcms != null)
        'percentual_reducao_bc_icms': percentualReducaoBcIcms,
      if (valorBcIcms != null) 'valor_bc_icms': valorBcIcms,
      if (aliquotaIcms != null) 'aliquota_icms': aliquotaIcms,
      if (valorIcmsOperacao != null) 'valor_icms_operacao': valorIcmsOperacao,
      if (percentualDiferimento != null)
        'percentual_diferimento': percentualDiferimento,
      if (valorIcmsDiferido != null) 'valor_icms_diferido': valorIcmsDiferido,
      if (valorIcms != null) 'valor_icms': valorIcms,
      if (baseCalculoFcp != null) 'base_calculo_fcp': baseCalculoFcp,
      if (percentualFcp != null) 'percentual_fcp': percentualFcp,
      if (valorFcp != null) 'valor_fcp': valorFcp,
      if (modalidadeBcIcmsSt != null)
        'modalidade_bc_icms_st': modalidadeBcIcmsSt,
      if (percentualMvaIcmsSt != null)
        'percentual_mva_icms_st': percentualMvaIcmsSt,
      if (percentualReducaoBcIcmsSt != null)
        'percentual_reducao_bc_icms_st': percentualReducaoBcIcmsSt,
      if (valorBaseCalculoIcmsSt != null)
        'valor_base_calculo_icms_st': valorBaseCalculoIcmsSt,
      if (aliquotaIcmsSt != null) 'aliquota_icms_st': aliquotaIcmsSt,
      if (valorIcmsSt != null) 'valor_icms_st': valorIcmsSt,
      if (baseCalculoFcpSt != null) 'base_calculo_fcp_st': baseCalculoFcpSt,
      if (percentualFcpSt != null) 'percentual_fcp_st': percentualFcpSt,
      if (valorFcpSt != null) 'valor_fcp_st': valorFcpSt,
      if (ufSt != null) 'uf_st': ufSt,
      if (percentualBcOperacaoPropria != null)
        'percentual_bc_operacao_propria': percentualBcOperacaoPropria,
      if (valorBcIcmsStRetido != null)
        'valor_bc_icms_st_retido': valorBcIcmsStRetido,
      if (aliquotaSuportadaConsumidor != null)
        'aliquota_suportada_consumidor': aliquotaSuportadaConsumidor,
      if (valorIcmsSubstituto != null)
        'valor_icms_substituto': valorIcmsSubstituto,
      if (valorIcmsStRetido != null) 'valor_icms_st_retido': valorIcmsStRetido,
      if (baseCalculoFcpStRetido != null)
        'base_calculo_fcp_st_retido': baseCalculoFcpStRetido,
      if (percentualFcpStRetido != null)
        'percentual_fcp_st_retido': percentualFcpStRetido,
      if (valorFcpStRetido != null) 'valor_fcp_st_retido': valorFcpStRetido,
      if (motivoDesoneracaoIcms != null)
        'motivo_desoneracao_icms': motivoDesoneracaoIcms,
      if (valorIcmsDesonerado != null)
        'valor_icms_desonerado': valorIcmsDesonerado,
      if (aliquotaCreditoIcmsSn != null)
        'aliquota_credito_icms_sn': aliquotaCreditoIcmsSn,
      if (valorCreditoIcmsSn != null)
        'valor_credito_icms_sn': valorCreditoIcmsSn,
      if (valorBcIcmsStDestino != null)
        'valor_bc_icms_st_destino': valorBcIcmsStDestino,
      if (valorIcmsStDestino != null)
        'valor_icms_st_destino': valorIcmsStDestino,
      if (percentualReducaoBcEfetivo != null)
        'percentual_reducao_bc_efetivo': percentualReducaoBcEfetivo,
      if (valorBcEfetivo != null) 'valor_bc_efetivo': valorBcEfetivo,
      if (aliquotaIcmsEfetivo != null)
        'aliquota_icms_efetivo': aliquotaIcmsEfetivo,
      if (valorIcmsEfetivo != null) 'valor_icms_efetivo': valorIcmsEfetivo,
      if (valorIcmsStDesonerado != null)
        'valor_icms_st_desonerado': valorIcmsStDesonerado,
      if (motivoDesoneracaoIcmsSt != null)
        'motivo_desoneracao_icms_st': motivoDesoneracaoIcmsSt,
      if (taxaFcpDiferido != null) 'taxa_fcp_diferido': taxaFcpDiferido,
      if (valorFcpDiferido != null) 'valor_fcp_diferido': valorFcpDiferido,
      if (valorFcpEfetivo != null) 'valor_fcp_efetivo': valorFcpEfetivo,
      if (desoneradoDeduz != null) 'desonerado_deduz': desoneradoDeduz,
      if (quantidadeTributada != null)
        'quantidade_tributada': quantidadeTributada,
      if (aliquotaAdRem != null) 'aliquota_ad_rem': aliquotaAdRem,
      if (valorIcmsMono != null) 'valor_icms_mono': valorIcmsMono,
      if (quantidadeSujeitaRetencao != null)
        'quantidade_sujeita_retencao': quantidadeSujeitaRetencao,
      if (aliquotaAdRemRetencao != null)
        'aliquota_ad_rem_retencao': aliquotaAdRemRetencao,
      if (valorIcmsMonoRetencao != null)
        'valor_icms_mono_retencao': valorIcmsMonoRetencao,
      if (percentualReducaoAdRem != null)
        'percentual_reducao_ad_rem': percentualReducaoAdRem,
      if (motivoReducaoAdRem != null)
        'motivo_reducao_ad_rem': motivoReducaoAdRem,
      if (valorIcmsMonoOperacao != null)
        'valor_icms_mono_operacao': valorIcmsMonoOperacao,
      if (percentualDiferimentoMono != null)
        'percentual_diferimento_mono': percentualDiferimentoMono,
      if (valorIcmsDiferidoMono != null)
        'valor_icms_diferido_mono': valorIcmsDiferidoMono,
      if (quantidadeTributadaRetida != null)
        'quantidade_tributada_retida': quantidadeTributadaRetida,
      if (aliquotaAdRemRetida != null)
        'aliquota_ad_rem_retida': aliquotaAdRemRetida,
      if (valorIcmsRetido != null) 'valor_icms_retido': valorIcmsRetido,
    });
  }

  NfeDetalheImpostoIcmssCompanion copyWith({
    Value<int?>? id,
    Value<int?>? idNfeDetalhe,
    Value<String?>? origemMercadoria,
    Value<String?>? cstIcms,
    Value<String?>? csosn,
    Value<String?>? modalidadeBcIcms,
    Value<double?>? percentualReducaoBcIcms,
    Value<double?>? valorBcIcms,
    Value<double?>? aliquotaIcms,
    Value<double?>? valorIcmsOperacao,
    Value<double?>? percentualDiferimento,
    Value<double?>? valorIcmsDiferido,
    Value<double?>? valorIcms,
    Value<double?>? baseCalculoFcp,
    Value<double?>? percentualFcp,
    Value<double?>? valorFcp,
    Value<String?>? modalidadeBcIcmsSt,
    Value<double?>? percentualMvaIcmsSt,
    Value<double?>? percentualReducaoBcIcmsSt,
    Value<double?>? valorBaseCalculoIcmsSt,
    Value<double?>? aliquotaIcmsSt,
    Value<double?>? valorIcmsSt,
    Value<double?>? baseCalculoFcpSt,
    Value<double?>? percentualFcpSt,
    Value<double?>? valorFcpSt,
    Value<String?>? ufSt,
    Value<double?>? percentualBcOperacaoPropria,
    Value<double?>? valorBcIcmsStRetido,
    Value<double?>? aliquotaSuportadaConsumidor,
    Value<double?>? valorIcmsSubstituto,
    Value<double?>? valorIcmsStRetido,
    Value<double?>? baseCalculoFcpStRetido,
    Value<double?>? percentualFcpStRetido,
    Value<double?>? valorFcpStRetido,
    Value<String?>? motivoDesoneracaoIcms,
    Value<double?>? valorIcmsDesonerado,
    Value<double?>? aliquotaCreditoIcmsSn,
    Value<double?>? valorCreditoIcmsSn,
    Value<double?>? valorBcIcmsStDestino,
    Value<double?>? valorIcmsStDestino,
    Value<double?>? percentualReducaoBcEfetivo,
    Value<double?>? valorBcEfetivo,
    Value<double?>? aliquotaIcmsEfetivo,
    Value<double?>? valorIcmsEfetivo,
    Value<double?>? valorIcmsStDesonerado,
    Value<String?>? motivoDesoneracaoIcmsSt,
    Value<double?>? taxaFcpDiferido,
    Value<double?>? valorFcpDiferido,
    Value<double?>? valorFcpEfetivo,
    Value<String?>? desoneradoDeduz,
    Value<double?>? quantidadeTributada,
    Value<double?>? aliquotaAdRem,
    Value<double?>? valorIcmsMono,
    Value<double?>? quantidadeSujeitaRetencao,
    Value<double?>? aliquotaAdRemRetencao,
    Value<double?>? valorIcmsMonoRetencao,
    Value<double?>? percentualReducaoAdRem,
    Value<String?>? motivoReducaoAdRem,
    Value<double?>? valorIcmsMonoOperacao,
    Value<double?>? percentualDiferimentoMono,
    Value<double?>? valorIcmsDiferidoMono,
    Value<double?>? quantidadeTributadaRetida,
    Value<double?>? aliquotaAdRemRetida,
    Value<double?>? valorIcmsRetido,
  }) {
    return NfeDetalheImpostoIcmssCompanion(
      id: id ?? this.id,
      idNfeDetalhe: idNfeDetalhe ?? this.idNfeDetalhe,
      origemMercadoria: origemMercadoria ?? this.origemMercadoria,
      cstIcms: cstIcms ?? this.cstIcms,
      csosn: csosn ?? this.csosn,
      modalidadeBcIcms: modalidadeBcIcms ?? this.modalidadeBcIcms,
      percentualReducaoBcIcms:
          percentualReducaoBcIcms ?? this.percentualReducaoBcIcms,
      valorBcIcms: valorBcIcms ?? this.valorBcIcms,
      aliquotaIcms: aliquotaIcms ?? this.aliquotaIcms,
      valorIcmsOperacao: valorIcmsOperacao ?? this.valorIcmsOperacao,
      percentualDiferimento:
          percentualDiferimento ?? this.percentualDiferimento,
      valorIcmsDiferido: valorIcmsDiferido ?? this.valorIcmsDiferido,
      valorIcms: valorIcms ?? this.valorIcms,
      baseCalculoFcp: baseCalculoFcp ?? this.baseCalculoFcp,
      percentualFcp: percentualFcp ?? this.percentualFcp,
      valorFcp: valorFcp ?? this.valorFcp,
      modalidadeBcIcmsSt: modalidadeBcIcmsSt ?? this.modalidadeBcIcmsSt,
      percentualMvaIcmsSt: percentualMvaIcmsSt ?? this.percentualMvaIcmsSt,
      percentualReducaoBcIcmsSt:
          percentualReducaoBcIcmsSt ?? this.percentualReducaoBcIcmsSt,
      valorBaseCalculoIcmsSt:
          valorBaseCalculoIcmsSt ?? this.valorBaseCalculoIcmsSt,
      aliquotaIcmsSt: aliquotaIcmsSt ?? this.aliquotaIcmsSt,
      valorIcmsSt: valorIcmsSt ?? this.valorIcmsSt,
      baseCalculoFcpSt: baseCalculoFcpSt ?? this.baseCalculoFcpSt,
      percentualFcpSt: percentualFcpSt ?? this.percentualFcpSt,
      valorFcpSt: valorFcpSt ?? this.valorFcpSt,
      ufSt: ufSt ?? this.ufSt,
      percentualBcOperacaoPropria:
          percentualBcOperacaoPropria ?? this.percentualBcOperacaoPropria,
      valorBcIcmsStRetido: valorBcIcmsStRetido ?? this.valorBcIcmsStRetido,
      aliquotaSuportadaConsumidor:
          aliquotaSuportadaConsumidor ?? this.aliquotaSuportadaConsumidor,
      valorIcmsSubstituto: valorIcmsSubstituto ?? this.valorIcmsSubstituto,
      valorIcmsStRetido: valorIcmsStRetido ?? this.valorIcmsStRetido,
      baseCalculoFcpStRetido:
          baseCalculoFcpStRetido ?? this.baseCalculoFcpStRetido,
      percentualFcpStRetido:
          percentualFcpStRetido ?? this.percentualFcpStRetido,
      valorFcpStRetido: valorFcpStRetido ?? this.valorFcpStRetido,
      motivoDesoneracaoIcms:
          motivoDesoneracaoIcms ?? this.motivoDesoneracaoIcms,
      valorIcmsDesonerado: valorIcmsDesonerado ?? this.valorIcmsDesonerado,
      aliquotaCreditoIcmsSn:
          aliquotaCreditoIcmsSn ?? this.aliquotaCreditoIcmsSn,
      valorCreditoIcmsSn: valorCreditoIcmsSn ?? this.valorCreditoIcmsSn,
      valorBcIcmsStDestino: valorBcIcmsStDestino ?? this.valorBcIcmsStDestino,
      valorIcmsStDestino: valorIcmsStDestino ?? this.valorIcmsStDestino,
      percentualReducaoBcEfetivo:
          percentualReducaoBcEfetivo ?? this.percentualReducaoBcEfetivo,
      valorBcEfetivo: valorBcEfetivo ?? this.valorBcEfetivo,
      aliquotaIcmsEfetivo: aliquotaIcmsEfetivo ?? this.aliquotaIcmsEfetivo,
      valorIcmsEfetivo: valorIcmsEfetivo ?? this.valorIcmsEfetivo,
      valorIcmsStDesonerado:
          valorIcmsStDesonerado ?? this.valorIcmsStDesonerado,
      motivoDesoneracaoIcmsSt:
          motivoDesoneracaoIcmsSt ?? this.motivoDesoneracaoIcmsSt,
      taxaFcpDiferido: taxaFcpDiferido ?? this.taxaFcpDiferido,
      valorFcpDiferido: valorFcpDiferido ?? this.valorFcpDiferido,
      valorFcpEfetivo: valorFcpEfetivo ?? this.valorFcpEfetivo,
      desoneradoDeduz: desoneradoDeduz ?? this.desoneradoDeduz,
      quantidadeTributada: quantidadeTributada ?? this.quantidadeTributada,
      aliquotaAdRem: aliquotaAdRem ?? this.aliquotaAdRem,
      valorIcmsMono: valorIcmsMono ?? this.valorIcmsMono,
      quantidadeSujeitaRetencao:
          quantidadeSujeitaRetencao ?? this.quantidadeSujeitaRetencao,
      aliquotaAdRemRetencao:
          aliquotaAdRemRetencao ?? this.aliquotaAdRemRetencao,
      valorIcmsMonoRetencao:
          valorIcmsMonoRetencao ?? this.valorIcmsMonoRetencao,
      percentualReducaoAdRem:
          percentualReducaoAdRem ?? this.percentualReducaoAdRem,
      motivoReducaoAdRem: motivoReducaoAdRem ?? this.motivoReducaoAdRem,
      valorIcmsMonoOperacao:
          valorIcmsMonoOperacao ?? this.valorIcmsMonoOperacao,
      percentualDiferimentoMono:
          percentualDiferimentoMono ?? this.percentualDiferimentoMono,
      valorIcmsDiferidoMono:
          valorIcmsDiferidoMono ?? this.valorIcmsDiferidoMono,
      quantidadeTributadaRetida:
          quantidadeTributadaRetida ?? this.quantidadeTributadaRetida,
      aliquotaAdRemRetida: aliquotaAdRemRetida ?? this.aliquotaAdRemRetida,
      valorIcmsRetido: valorIcmsRetido ?? this.valorIcmsRetido,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (idNfeDetalhe.present) {
      map['id_nfe_detalhe'] = Variable<int>(idNfeDetalhe.value);
    }
    if (origemMercadoria.present) {
      map['origem_mercadoria'] = Variable<String>(origemMercadoria.value);
    }
    if (cstIcms.present) {
      map['cst_icms'] = Variable<String>(cstIcms.value);
    }
    if (csosn.present) {
      map['csosn'] = Variable<String>(csosn.value);
    }
    if (modalidadeBcIcms.present) {
      map['modalidade_bc_icms'] = Variable<String>(modalidadeBcIcms.value);
    }
    if (percentualReducaoBcIcms.present) {
      map['percentual_reducao_bc_icms'] = Variable<double>(
        percentualReducaoBcIcms.value,
      );
    }
    if (valorBcIcms.present) {
      map['valor_bc_icms'] = Variable<double>(valorBcIcms.value);
    }
    if (aliquotaIcms.present) {
      map['aliquota_icms'] = Variable<double>(aliquotaIcms.value);
    }
    if (valorIcmsOperacao.present) {
      map['valor_icms_operacao'] = Variable<double>(valorIcmsOperacao.value);
    }
    if (percentualDiferimento.present) {
      map['percentual_diferimento'] = Variable<double>(
        percentualDiferimento.value,
      );
    }
    if (valorIcmsDiferido.present) {
      map['valor_icms_diferido'] = Variable<double>(valorIcmsDiferido.value);
    }
    if (valorIcms.present) {
      map['valor_icms'] = Variable<double>(valorIcms.value);
    }
    if (baseCalculoFcp.present) {
      map['base_calculo_fcp'] = Variable<double>(baseCalculoFcp.value);
    }
    if (percentualFcp.present) {
      map['percentual_fcp'] = Variable<double>(percentualFcp.value);
    }
    if (valorFcp.present) {
      map['valor_fcp'] = Variable<double>(valorFcp.value);
    }
    if (modalidadeBcIcmsSt.present) {
      map['modalidade_bc_icms_st'] = Variable<String>(modalidadeBcIcmsSt.value);
    }
    if (percentualMvaIcmsSt.present) {
      map['percentual_mva_icms_st'] = Variable<double>(
        percentualMvaIcmsSt.value,
      );
    }
    if (percentualReducaoBcIcmsSt.present) {
      map['percentual_reducao_bc_icms_st'] = Variable<double>(
        percentualReducaoBcIcmsSt.value,
      );
    }
    if (valorBaseCalculoIcmsSt.present) {
      map['valor_base_calculo_icms_st'] = Variable<double>(
        valorBaseCalculoIcmsSt.value,
      );
    }
    if (aliquotaIcmsSt.present) {
      map['aliquota_icms_st'] = Variable<double>(aliquotaIcmsSt.value);
    }
    if (valorIcmsSt.present) {
      map['valor_icms_st'] = Variable<double>(valorIcmsSt.value);
    }
    if (baseCalculoFcpSt.present) {
      map['base_calculo_fcp_st'] = Variable<double>(baseCalculoFcpSt.value);
    }
    if (percentualFcpSt.present) {
      map['percentual_fcp_st'] = Variable<double>(percentualFcpSt.value);
    }
    if (valorFcpSt.present) {
      map['valor_fcp_st'] = Variable<double>(valorFcpSt.value);
    }
    if (ufSt.present) {
      map['uf_st'] = Variable<String>(ufSt.value);
    }
    if (percentualBcOperacaoPropria.present) {
      map['percentual_bc_operacao_propria'] = Variable<double>(
        percentualBcOperacaoPropria.value,
      );
    }
    if (valorBcIcmsStRetido.present) {
      map['valor_bc_icms_st_retido'] = Variable<double>(
        valorBcIcmsStRetido.value,
      );
    }
    if (aliquotaSuportadaConsumidor.present) {
      map['aliquota_suportada_consumidor'] = Variable<double>(
        aliquotaSuportadaConsumidor.value,
      );
    }
    if (valorIcmsSubstituto.present) {
      map['valor_icms_substituto'] = Variable<double>(
        valorIcmsSubstituto.value,
      );
    }
    if (valorIcmsStRetido.present) {
      map['valor_icms_st_retido'] = Variable<double>(valorIcmsStRetido.value);
    }
    if (baseCalculoFcpStRetido.present) {
      map['base_calculo_fcp_st_retido'] = Variable<double>(
        baseCalculoFcpStRetido.value,
      );
    }
    if (percentualFcpStRetido.present) {
      map['percentual_fcp_st_retido'] = Variable<double>(
        percentualFcpStRetido.value,
      );
    }
    if (valorFcpStRetido.present) {
      map['valor_fcp_st_retido'] = Variable<double>(valorFcpStRetido.value);
    }
    if (motivoDesoneracaoIcms.present) {
      map['motivo_desoneracao_icms'] = Variable<String>(
        motivoDesoneracaoIcms.value,
      );
    }
    if (valorIcmsDesonerado.present) {
      map['valor_icms_desonerado'] = Variable<double>(
        valorIcmsDesonerado.value,
      );
    }
    if (aliquotaCreditoIcmsSn.present) {
      map['aliquota_credito_icms_sn'] = Variable<double>(
        aliquotaCreditoIcmsSn.value,
      );
    }
    if (valorCreditoIcmsSn.present) {
      map['valor_credito_icms_sn'] = Variable<double>(valorCreditoIcmsSn.value);
    }
    if (valorBcIcmsStDestino.present) {
      map['valor_bc_icms_st_destino'] = Variable<double>(
        valorBcIcmsStDestino.value,
      );
    }
    if (valorIcmsStDestino.present) {
      map['valor_icms_st_destino'] = Variable<double>(valorIcmsStDestino.value);
    }
    if (percentualReducaoBcEfetivo.present) {
      map['percentual_reducao_bc_efetivo'] = Variable<double>(
        percentualReducaoBcEfetivo.value,
      );
    }
    if (valorBcEfetivo.present) {
      map['valor_bc_efetivo'] = Variable<double>(valorBcEfetivo.value);
    }
    if (aliquotaIcmsEfetivo.present) {
      map['aliquota_icms_efetivo'] = Variable<double>(
        aliquotaIcmsEfetivo.value,
      );
    }
    if (valorIcmsEfetivo.present) {
      map['valor_icms_efetivo'] = Variable<double>(valorIcmsEfetivo.value);
    }
    if (valorIcmsStDesonerado.present) {
      map['valor_icms_st_desonerado'] = Variable<double>(
        valorIcmsStDesonerado.value,
      );
    }
    if (motivoDesoneracaoIcmsSt.present) {
      map['motivo_desoneracao_icms_st'] = Variable<String>(
        motivoDesoneracaoIcmsSt.value,
      );
    }
    if (taxaFcpDiferido.present) {
      map['taxa_fcp_diferido'] = Variable<double>(taxaFcpDiferido.value);
    }
    if (valorFcpDiferido.present) {
      map['valor_fcp_diferido'] = Variable<double>(valorFcpDiferido.value);
    }
    if (valorFcpEfetivo.present) {
      map['valor_fcp_efetivo'] = Variable<double>(valorFcpEfetivo.value);
    }
    if (desoneradoDeduz.present) {
      map['desonerado_deduz'] = Variable<String>(desoneradoDeduz.value);
    }
    if (quantidadeTributada.present) {
      map['quantidade_tributada'] = Variable<double>(quantidadeTributada.value);
    }
    if (aliquotaAdRem.present) {
      map['aliquota_ad_rem'] = Variable<double>(aliquotaAdRem.value);
    }
    if (valorIcmsMono.present) {
      map['valor_icms_mono'] = Variable<double>(valorIcmsMono.value);
    }
    if (quantidadeSujeitaRetencao.present) {
      map['quantidade_sujeita_retencao'] = Variable<double>(
        quantidadeSujeitaRetencao.value,
      );
    }
    if (aliquotaAdRemRetencao.present) {
      map['aliquota_ad_rem_retencao'] = Variable<double>(
        aliquotaAdRemRetencao.value,
      );
    }
    if (valorIcmsMonoRetencao.present) {
      map['valor_icms_mono_retencao'] = Variable<double>(
        valorIcmsMonoRetencao.value,
      );
    }
    if (percentualReducaoAdRem.present) {
      map['percentual_reducao_ad_rem'] = Variable<double>(
        percentualReducaoAdRem.value,
      );
    }
    if (motivoReducaoAdRem.present) {
      map['motivo_reducao_ad_rem'] = Variable<String>(motivoReducaoAdRem.value);
    }
    if (valorIcmsMonoOperacao.present) {
      map['valor_icms_mono_operacao'] = Variable<double>(
        valorIcmsMonoOperacao.value,
      );
    }
    if (percentualDiferimentoMono.present) {
      map['percentual_diferimento_mono'] = Variable<double>(
        percentualDiferimentoMono.value,
      );
    }
    if (valorIcmsDiferidoMono.present) {
      map['valor_icms_diferido_mono'] = Variable<double>(
        valorIcmsDiferidoMono.value,
      );
    }
    if (quantidadeTributadaRetida.present) {
      map['quantidade_tributada_retida'] = Variable<double>(
        quantidadeTributadaRetida.value,
      );
    }
    if (aliquotaAdRemRetida.present) {
      map['aliquota_ad_rem_retida'] = Variable<double>(
        aliquotaAdRemRetida.value,
      );
    }
    if (valorIcmsRetido.present) {
      map['valor_icms_retido'] = Variable<double>(valorIcmsRetido.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeDetalheImpostoIcmssCompanion(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('origemMercadoria: $origemMercadoria, ')
          ..write('cstIcms: $cstIcms, ')
          ..write('csosn: $csosn, ')
          ..write('modalidadeBcIcms: $modalidadeBcIcms, ')
          ..write('percentualReducaoBcIcms: $percentualReducaoBcIcms, ')
          ..write('valorBcIcms: $valorBcIcms, ')
          ..write('aliquotaIcms: $aliquotaIcms, ')
          ..write('valorIcmsOperacao: $valorIcmsOperacao, ')
          ..write('percentualDiferimento: $percentualDiferimento, ')
          ..write('valorIcmsDiferido: $valorIcmsDiferido, ')
          ..write('valorIcms: $valorIcms, ')
          ..write('baseCalculoFcp: $baseCalculoFcp, ')
          ..write('percentualFcp: $percentualFcp, ')
          ..write('valorFcp: $valorFcp, ')
          ..write('modalidadeBcIcmsSt: $modalidadeBcIcmsSt, ')
          ..write('percentualMvaIcmsSt: $percentualMvaIcmsSt, ')
          ..write('percentualReducaoBcIcmsSt: $percentualReducaoBcIcmsSt, ')
          ..write('valorBaseCalculoIcmsSt: $valorBaseCalculoIcmsSt, ')
          ..write('aliquotaIcmsSt: $aliquotaIcmsSt, ')
          ..write('valorIcmsSt: $valorIcmsSt, ')
          ..write('baseCalculoFcpSt: $baseCalculoFcpSt, ')
          ..write('percentualFcpSt: $percentualFcpSt, ')
          ..write('valorFcpSt: $valorFcpSt, ')
          ..write('ufSt: $ufSt, ')
          ..write('percentualBcOperacaoPropria: $percentualBcOperacaoPropria, ')
          ..write('valorBcIcmsStRetido: $valorBcIcmsStRetido, ')
          ..write('aliquotaSuportadaConsumidor: $aliquotaSuportadaConsumidor, ')
          ..write('valorIcmsSubstituto: $valorIcmsSubstituto, ')
          ..write('valorIcmsStRetido: $valorIcmsStRetido, ')
          ..write('baseCalculoFcpStRetido: $baseCalculoFcpStRetido, ')
          ..write('percentualFcpStRetido: $percentualFcpStRetido, ')
          ..write('valorFcpStRetido: $valorFcpStRetido, ')
          ..write('motivoDesoneracaoIcms: $motivoDesoneracaoIcms, ')
          ..write('valorIcmsDesonerado: $valorIcmsDesonerado, ')
          ..write('aliquotaCreditoIcmsSn: $aliquotaCreditoIcmsSn, ')
          ..write('valorCreditoIcmsSn: $valorCreditoIcmsSn, ')
          ..write('valorBcIcmsStDestino: $valorBcIcmsStDestino, ')
          ..write('valorIcmsStDestino: $valorIcmsStDestino, ')
          ..write('percentualReducaoBcEfetivo: $percentualReducaoBcEfetivo, ')
          ..write('valorBcEfetivo: $valorBcEfetivo, ')
          ..write('aliquotaIcmsEfetivo: $aliquotaIcmsEfetivo, ')
          ..write('valorIcmsEfetivo: $valorIcmsEfetivo, ')
          ..write('valorIcmsStDesonerado: $valorIcmsStDesonerado, ')
          ..write('motivoDesoneracaoIcmsSt: $motivoDesoneracaoIcmsSt, ')
          ..write('taxaFcpDiferido: $taxaFcpDiferido, ')
          ..write('valorFcpDiferido: $valorFcpDiferido, ')
          ..write('valorFcpEfetivo: $valorFcpEfetivo, ')
          ..write('desoneradoDeduz: $desoneradoDeduz, ')
          ..write('quantidadeTributada: $quantidadeTributada, ')
          ..write('aliquotaAdRem: $aliquotaAdRem, ')
          ..write('valorIcmsMono: $valorIcmsMono, ')
          ..write('quantidadeSujeitaRetencao: $quantidadeSujeitaRetencao, ')
          ..write('aliquotaAdRemRetencao: $aliquotaAdRemRetencao, ')
          ..write('valorIcmsMonoRetencao: $valorIcmsMonoRetencao, ')
          ..write('percentualReducaoAdRem: $percentualReducaoAdRem, ')
          ..write('motivoReducaoAdRem: $motivoReducaoAdRem, ')
          ..write('valorIcmsMonoOperacao: $valorIcmsMonoOperacao, ')
          ..write('percentualDiferimentoMono: $percentualDiferimentoMono, ')
          ..write('valorIcmsDiferidoMono: $valorIcmsDiferidoMono, ')
          ..write('quantidadeTributadaRetida: $quantidadeTributadaRetida, ')
          ..write('aliquotaAdRemRetida: $aliquotaAdRemRetida, ')
          ..write('valorIcmsRetido: $valorIcmsRetido')
          ..write(')'))
        .toString();
  }
}

class $NfeDetalheImpostoIpisTable extends NfeDetalheImpostoIpis
    with TableInfo<$NfeDetalheImpostoIpisTable, NfeDetalheImpostoIpi> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeDetalheImpostoIpisTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
    'id',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idNfeDetalheMeta = const VerificationMeta(
    'idNfeDetalhe',
  );
  @override
  late final GeneratedColumn<int> idNfeDetalhe = GeneratedColumn<int>(
    'id_nfe_detalhe',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _cnpjProdutorMeta = const VerificationMeta(
    'cnpjProdutor',
  );
  @override
  late final GeneratedColumn<String> cnpjProdutor = GeneratedColumn<String>(
    'cnpj_produtor',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 14,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _codigoSeloIpiMeta = const VerificationMeta(
    'codigoSeloIpi',
  );
  @override
  late final GeneratedColumn<String> codigoSeloIpi = GeneratedColumn<String>(
    'codigo_selo_ipi',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 60,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _quantidadeSeloIpiMeta = const VerificationMeta(
    'quantidadeSeloIpi',
  );
  @override
  late final GeneratedColumn<int> quantidadeSeloIpi = GeneratedColumn<int>(
    'quantidade_selo_ipi',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _enquadramentoLegalIpiMeta =
      const VerificationMeta('enquadramentoLegalIpi');
  @override
  late final GeneratedColumn<String> enquadramentoLegalIpi =
      GeneratedColumn<String>(
        'enquadramento_legal_ipi',
        aliasedName,
        true,
        additionalChecks: GeneratedColumn.checkTextLength(
          minTextLength: 0,
          maxTextLength: 3,
        ),
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _cstIpiMeta = const VerificationMeta('cstIpi');
  @override
  late final GeneratedColumn<String> cstIpi = GeneratedColumn<String>(
    'cst_ipi',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 2,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _valorBaseCalculoIpiMeta =
      const VerificationMeta('valorBaseCalculoIpi');
  @override
  late final GeneratedColumn<double> valorBaseCalculoIpi =
      GeneratedColumn<double>(
        'valor_base_calculo_ipi',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _quantidadeUnidadeTributavelMeta =
      const VerificationMeta('quantidadeUnidadeTributavel');
  @override
  late final GeneratedColumn<double> quantidadeUnidadeTributavel =
      GeneratedColumn<double>(
        'quantidade_unidade_tributavel',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _valorUnidadeTributavelMeta =
      const VerificationMeta('valorUnidadeTributavel');
  @override
  late final GeneratedColumn<double> valorUnidadeTributavel =
      GeneratedColumn<double>(
        'valor_unidade_tributavel',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _aliquotaIpiMeta = const VerificationMeta(
    'aliquotaIpi',
  );
  @override
  late final GeneratedColumn<double> aliquotaIpi = GeneratedColumn<double>(
    'aliquota_ipi',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _valorIpiMeta = const VerificationMeta(
    'valorIpi',
  );
  @override
  late final GeneratedColumn<double> valorIpi = GeneratedColumn<double>(
    'valor_ipi',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    idNfeDetalhe,
    cnpjProdutor,
    codigoSeloIpi,
    quantidadeSeloIpi,
    enquadramentoLegalIpi,
    cstIpi,
    valorBaseCalculoIpi,
    quantidadeUnidadeTributavel,
    valorUnidadeTributavel,
    aliquotaIpi,
    valorIpi,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'nfe_detalhe_imposto_ipi';
  @override
  VerificationContext validateIntegrity(
    Insertable<NfeDetalheImpostoIpi> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('id_nfe_detalhe')) {
      context.handle(
        _idNfeDetalheMeta,
        idNfeDetalhe.isAcceptableOrUnknown(
          data['id_nfe_detalhe']!,
          _idNfeDetalheMeta,
        ),
      );
    }
    if (data.containsKey('cnpj_produtor')) {
      context.handle(
        _cnpjProdutorMeta,
        cnpjProdutor.isAcceptableOrUnknown(
          data['cnpj_produtor']!,
          _cnpjProdutorMeta,
        ),
      );
    }
    if (data.containsKey('codigo_selo_ipi')) {
      context.handle(
        _codigoSeloIpiMeta,
        codigoSeloIpi.isAcceptableOrUnknown(
          data['codigo_selo_ipi']!,
          _codigoSeloIpiMeta,
        ),
      );
    }
    if (data.containsKey('quantidade_selo_ipi')) {
      context.handle(
        _quantidadeSeloIpiMeta,
        quantidadeSeloIpi.isAcceptableOrUnknown(
          data['quantidade_selo_ipi']!,
          _quantidadeSeloIpiMeta,
        ),
      );
    }
    if (data.containsKey('enquadramento_legal_ipi')) {
      context.handle(
        _enquadramentoLegalIpiMeta,
        enquadramentoLegalIpi.isAcceptableOrUnknown(
          data['enquadramento_legal_ipi']!,
          _enquadramentoLegalIpiMeta,
        ),
      );
    }
    if (data.containsKey('cst_ipi')) {
      context.handle(
        _cstIpiMeta,
        cstIpi.isAcceptableOrUnknown(data['cst_ipi']!, _cstIpiMeta),
      );
    }
    if (data.containsKey('valor_base_calculo_ipi')) {
      context.handle(
        _valorBaseCalculoIpiMeta,
        valorBaseCalculoIpi.isAcceptableOrUnknown(
          data['valor_base_calculo_ipi']!,
          _valorBaseCalculoIpiMeta,
        ),
      );
    }
    if (data.containsKey('quantidade_unidade_tributavel')) {
      context.handle(
        _quantidadeUnidadeTributavelMeta,
        quantidadeUnidadeTributavel.isAcceptableOrUnknown(
          data['quantidade_unidade_tributavel']!,
          _quantidadeUnidadeTributavelMeta,
        ),
      );
    }
    if (data.containsKey('valor_unidade_tributavel')) {
      context.handle(
        _valorUnidadeTributavelMeta,
        valorUnidadeTributavel.isAcceptableOrUnknown(
          data['valor_unidade_tributavel']!,
          _valorUnidadeTributavelMeta,
        ),
      );
    }
    if (data.containsKey('aliquota_ipi')) {
      context.handle(
        _aliquotaIpiMeta,
        aliquotaIpi.isAcceptableOrUnknown(
          data['aliquota_ipi']!,
          _aliquotaIpiMeta,
        ),
      );
    }
    if (data.containsKey('valor_ipi')) {
      context.handle(
        _valorIpiMeta,
        valorIpi.isAcceptableOrUnknown(data['valor_ipi']!, _valorIpiMeta),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeDetalheImpostoIpi map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return NfeDetalheImpostoIpi(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id'],
      ),
      idNfeDetalhe: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_nfe_detalhe'],
      ),
      cnpjProdutor: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}cnpj_produtor'],
      ),
      codigoSeloIpi: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}codigo_selo_ipi'],
      ),
      quantidadeSeloIpi: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}quantidade_selo_ipi'],
      ),
      enquadramentoLegalIpi: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}enquadramento_legal_ipi'],
      ),
      cstIpi: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}cst_ipi'],
      ),
      valorBaseCalculoIpi: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_base_calculo_ipi'],
      ),
      quantidadeUnidadeTributavel: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}quantidade_unidade_tributavel'],
      ),
      valorUnidadeTributavel: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_unidade_tributavel'],
      ),
      aliquotaIpi: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}aliquota_ipi'],
      ),
      valorIpi: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_ipi'],
      ),
    );
  }

  @override
  $NfeDetalheImpostoIpisTable createAlias(String alias) {
    return $NfeDetalheImpostoIpisTable(attachedDatabase, alias);
  }
}

class NfeDetalheImpostoIpi extends DataClass
    implements Insertable<NfeDetalheImpostoIpi> {
  final int? id;
  final int? idNfeDetalhe;
  final String? cnpjProdutor;
  final String? codigoSeloIpi;
  final int? quantidadeSeloIpi;
  final String? enquadramentoLegalIpi;
  final String? cstIpi;
  final double? valorBaseCalculoIpi;
  final double? quantidadeUnidadeTributavel;
  final double? valorUnidadeTributavel;
  final double? aliquotaIpi;
  final double? valorIpi;
  const NfeDetalheImpostoIpi({
    this.id,
    this.idNfeDetalhe,
    this.cnpjProdutor,
    this.codigoSeloIpi,
    this.quantidadeSeloIpi,
    this.enquadramentoLegalIpi,
    this.cstIpi,
    this.valorBaseCalculoIpi,
    this.quantidadeUnidadeTributavel,
    this.valorUnidadeTributavel,
    this.aliquotaIpi,
    this.valorIpi,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeDetalhe != null) {
      map['id_nfe_detalhe'] = Variable<int>(idNfeDetalhe);
    }
    if (!nullToAbsent || cnpjProdutor != null) {
      map['cnpj_produtor'] = Variable<String>(cnpjProdutor);
    }
    if (!nullToAbsent || codigoSeloIpi != null) {
      map['codigo_selo_ipi'] = Variable<String>(codigoSeloIpi);
    }
    if (!nullToAbsent || quantidadeSeloIpi != null) {
      map['quantidade_selo_ipi'] = Variable<int>(quantidadeSeloIpi);
    }
    if (!nullToAbsent || enquadramentoLegalIpi != null) {
      map['enquadramento_legal_ipi'] = Variable<String>(enquadramentoLegalIpi);
    }
    if (!nullToAbsent || cstIpi != null) {
      map['cst_ipi'] = Variable<String>(cstIpi);
    }
    if (!nullToAbsent || valorBaseCalculoIpi != null) {
      map['valor_base_calculo_ipi'] = Variable<double>(valorBaseCalculoIpi);
    }
    if (!nullToAbsent || quantidadeUnidadeTributavel != null) {
      map['quantidade_unidade_tributavel'] = Variable<double>(
        quantidadeUnidadeTributavel,
      );
    }
    if (!nullToAbsent || valorUnidadeTributavel != null) {
      map['valor_unidade_tributavel'] = Variable<double>(
        valorUnidadeTributavel,
      );
    }
    if (!nullToAbsent || aliquotaIpi != null) {
      map['aliquota_ipi'] = Variable<double>(aliquotaIpi);
    }
    if (!nullToAbsent || valorIpi != null) {
      map['valor_ipi'] = Variable<double>(valorIpi);
    }
    return map;
  }

  factory NfeDetalheImpostoIpi.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeDetalheImpostoIpi(
      id: serializer.fromJson<int?>(json['id']),
      idNfeDetalhe: serializer.fromJson<int?>(json['idNfeDetalhe']),
      cnpjProdutor: serializer.fromJson<String?>(json['cnpjProdutor']),
      codigoSeloIpi: serializer.fromJson<String?>(json['codigoSeloIpi']),
      quantidadeSeloIpi: serializer.fromJson<int?>(json['quantidadeSeloIpi']),
      enquadramentoLegalIpi: serializer.fromJson<String?>(
        json['enquadramentoLegalIpi'],
      ),
      cstIpi: serializer.fromJson<String?>(json['cstIpi']),
      valorBaseCalculoIpi: serializer.fromJson<double?>(
        json['valorBaseCalculoIpi'],
      ),
      quantidadeUnidadeTributavel: serializer.fromJson<double?>(
        json['quantidadeUnidadeTributavel'],
      ),
      valorUnidadeTributavel: serializer.fromJson<double?>(
        json['valorUnidadeTributavel'],
      ),
      aliquotaIpi: serializer.fromJson<double?>(json['aliquotaIpi']),
      valorIpi: serializer.fromJson<double?>(json['valorIpi']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeDetalhe': serializer.toJson<int?>(idNfeDetalhe),
      'cnpjProdutor': serializer.toJson<String?>(cnpjProdutor),
      'codigoSeloIpi': serializer.toJson<String?>(codigoSeloIpi),
      'quantidadeSeloIpi': serializer.toJson<int?>(quantidadeSeloIpi),
      'enquadramentoLegalIpi': serializer.toJson<String?>(
        enquadramentoLegalIpi,
      ),
      'cstIpi': serializer.toJson<String?>(cstIpi),
      'valorBaseCalculoIpi': serializer.toJson<double?>(valorBaseCalculoIpi),
      'quantidadeUnidadeTributavel': serializer.toJson<double?>(
        quantidadeUnidadeTributavel,
      ),
      'valorUnidadeTributavel': serializer.toJson<double?>(
        valorUnidadeTributavel,
      ),
      'aliquotaIpi': serializer.toJson<double?>(aliquotaIpi),
      'valorIpi': serializer.toJson<double?>(valorIpi),
    };
  }

  NfeDetalheImpostoIpi copyWith({
    Value<int?> id = const Value.absent(),
    Value<int?> idNfeDetalhe = const Value.absent(),
    Value<String?> cnpjProdutor = const Value.absent(),
    Value<String?> codigoSeloIpi = const Value.absent(),
    Value<int?> quantidadeSeloIpi = const Value.absent(),
    Value<String?> enquadramentoLegalIpi = const Value.absent(),
    Value<String?> cstIpi = const Value.absent(),
    Value<double?> valorBaseCalculoIpi = const Value.absent(),
    Value<double?> quantidadeUnidadeTributavel = const Value.absent(),
    Value<double?> valorUnidadeTributavel = const Value.absent(),
    Value<double?> aliquotaIpi = const Value.absent(),
    Value<double?> valorIpi = const Value.absent(),
  }) => NfeDetalheImpostoIpi(
    id: id.present ? id.value : this.id,
    idNfeDetalhe: idNfeDetalhe.present ? idNfeDetalhe.value : this.idNfeDetalhe,
    cnpjProdutor: cnpjProdutor.present ? cnpjProdutor.value : this.cnpjProdutor,
    codigoSeloIpi:
        codigoSeloIpi.present ? codigoSeloIpi.value : this.codigoSeloIpi,
    quantidadeSeloIpi:
        quantidadeSeloIpi.present
            ? quantidadeSeloIpi.value
            : this.quantidadeSeloIpi,
    enquadramentoLegalIpi:
        enquadramentoLegalIpi.present
            ? enquadramentoLegalIpi.value
            : this.enquadramentoLegalIpi,
    cstIpi: cstIpi.present ? cstIpi.value : this.cstIpi,
    valorBaseCalculoIpi:
        valorBaseCalculoIpi.present
            ? valorBaseCalculoIpi.value
            : this.valorBaseCalculoIpi,
    quantidadeUnidadeTributavel:
        quantidadeUnidadeTributavel.present
            ? quantidadeUnidadeTributavel.value
            : this.quantidadeUnidadeTributavel,
    valorUnidadeTributavel:
        valorUnidadeTributavel.present
            ? valorUnidadeTributavel.value
            : this.valorUnidadeTributavel,
    aliquotaIpi: aliquotaIpi.present ? aliquotaIpi.value : this.aliquotaIpi,
    valorIpi: valorIpi.present ? valorIpi.value : this.valorIpi,
  );
  NfeDetalheImpostoIpi copyWithCompanion(NfeDetalheImpostoIpisCompanion data) {
    return NfeDetalheImpostoIpi(
      id: data.id.present ? data.id.value : this.id,
      idNfeDetalhe:
          data.idNfeDetalhe.present
              ? data.idNfeDetalhe.value
              : this.idNfeDetalhe,
      cnpjProdutor:
          data.cnpjProdutor.present
              ? data.cnpjProdutor.value
              : this.cnpjProdutor,
      codigoSeloIpi:
          data.codigoSeloIpi.present
              ? data.codigoSeloIpi.value
              : this.codigoSeloIpi,
      quantidadeSeloIpi:
          data.quantidadeSeloIpi.present
              ? data.quantidadeSeloIpi.value
              : this.quantidadeSeloIpi,
      enquadramentoLegalIpi:
          data.enquadramentoLegalIpi.present
              ? data.enquadramentoLegalIpi.value
              : this.enquadramentoLegalIpi,
      cstIpi: data.cstIpi.present ? data.cstIpi.value : this.cstIpi,
      valorBaseCalculoIpi:
          data.valorBaseCalculoIpi.present
              ? data.valorBaseCalculoIpi.value
              : this.valorBaseCalculoIpi,
      quantidadeUnidadeTributavel:
          data.quantidadeUnidadeTributavel.present
              ? data.quantidadeUnidadeTributavel.value
              : this.quantidadeUnidadeTributavel,
      valorUnidadeTributavel:
          data.valorUnidadeTributavel.present
              ? data.valorUnidadeTributavel.value
              : this.valorUnidadeTributavel,
      aliquotaIpi:
          data.aliquotaIpi.present ? data.aliquotaIpi.value : this.aliquotaIpi,
      valorIpi: data.valorIpi.present ? data.valorIpi.value : this.valorIpi,
    );
  }

  @override
  String toString() {
    return (StringBuffer('NfeDetalheImpostoIpi(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('cnpjProdutor: $cnpjProdutor, ')
          ..write('codigoSeloIpi: $codigoSeloIpi, ')
          ..write('quantidadeSeloIpi: $quantidadeSeloIpi, ')
          ..write('enquadramentoLegalIpi: $enquadramentoLegalIpi, ')
          ..write('cstIpi: $cstIpi, ')
          ..write('valorBaseCalculoIpi: $valorBaseCalculoIpi, ')
          ..write('quantidadeUnidadeTributavel: $quantidadeUnidadeTributavel, ')
          ..write('valorUnidadeTributavel: $valorUnidadeTributavel, ')
          ..write('aliquotaIpi: $aliquotaIpi, ')
          ..write('valorIpi: $valorIpi')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    idNfeDetalhe,
    cnpjProdutor,
    codigoSeloIpi,
    quantidadeSeloIpi,
    enquadramentoLegalIpi,
    cstIpi,
    valorBaseCalculoIpi,
    quantidadeUnidadeTributavel,
    valorUnidadeTributavel,
    aliquotaIpi,
    valorIpi,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeDetalheImpostoIpi &&
          other.id == this.id &&
          other.idNfeDetalhe == this.idNfeDetalhe &&
          other.cnpjProdutor == this.cnpjProdutor &&
          other.codigoSeloIpi == this.codigoSeloIpi &&
          other.quantidadeSeloIpi == this.quantidadeSeloIpi &&
          other.enquadramentoLegalIpi == this.enquadramentoLegalIpi &&
          other.cstIpi == this.cstIpi &&
          other.valorBaseCalculoIpi == this.valorBaseCalculoIpi &&
          other.quantidadeUnidadeTributavel ==
              this.quantidadeUnidadeTributavel &&
          other.valorUnidadeTributavel == this.valorUnidadeTributavel &&
          other.aliquotaIpi == this.aliquotaIpi &&
          other.valorIpi == this.valorIpi);
}

class NfeDetalheImpostoIpisCompanion
    extends UpdateCompanion<NfeDetalheImpostoIpi> {
  final Value<int?> id;
  final Value<int?> idNfeDetalhe;
  final Value<String?> cnpjProdutor;
  final Value<String?> codigoSeloIpi;
  final Value<int?> quantidadeSeloIpi;
  final Value<String?> enquadramentoLegalIpi;
  final Value<String?> cstIpi;
  final Value<double?> valorBaseCalculoIpi;
  final Value<double?> quantidadeUnidadeTributavel;
  final Value<double?> valorUnidadeTributavel;
  final Value<double?> aliquotaIpi;
  final Value<double?> valorIpi;
  const NfeDetalheImpostoIpisCompanion({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.cnpjProdutor = const Value.absent(),
    this.codigoSeloIpi = const Value.absent(),
    this.quantidadeSeloIpi = const Value.absent(),
    this.enquadramentoLegalIpi = const Value.absent(),
    this.cstIpi = const Value.absent(),
    this.valorBaseCalculoIpi = const Value.absent(),
    this.quantidadeUnidadeTributavel = const Value.absent(),
    this.valorUnidadeTributavel = const Value.absent(),
    this.aliquotaIpi = const Value.absent(),
    this.valorIpi = const Value.absent(),
  });
  NfeDetalheImpostoIpisCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.cnpjProdutor = const Value.absent(),
    this.codigoSeloIpi = const Value.absent(),
    this.quantidadeSeloIpi = const Value.absent(),
    this.enquadramentoLegalIpi = const Value.absent(),
    this.cstIpi = const Value.absent(),
    this.valorBaseCalculoIpi = const Value.absent(),
    this.quantidadeUnidadeTributavel = const Value.absent(),
    this.valorUnidadeTributavel = const Value.absent(),
    this.aliquotaIpi = const Value.absent(),
    this.valorIpi = const Value.absent(),
  });
  static Insertable<NfeDetalheImpostoIpi> custom({
    Expression<int>? id,
    Expression<int>? idNfeDetalhe,
    Expression<String>? cnpjProdutor,
    Expression<String>? codigoSeloIpi,
    Expression<int>? quantidadeSeloIpi,
    Expression<String>? enquadramentoLegalIpi,
    Expression<String>? cstIpi,
    Expression<double>? valorBaseCalculoIpi,
    Expression<double>? quantidadeUnidadeTributavel,
    Expression<double>? valorUnidadeTributavel,
    Expression<double>? aliquotaIpi,
    Expression<double>? valorIpi,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (idNfeDetalhe != null) 'id_nfe_detalhe': idNfeDetalhe,
      if (cnpjProdutor != null) 'cnpj_produtor': cnpjProdutor,
      if (codigoSeloIpi != null) 'codigo_selo_ipi': codigoSeloIpi,
      if (quantidadeSeloIpi != null) 'quantidade_selo_ipi': quantidadeSeloIpi,
      if (enquadramentoLegalIpi != null)
        'enquadramento_legal_ipi': enquadramentoLegalIpi,
      if (cstIpi != null) 'cst_ipi': cstIpi,
      if (valorBaseCalculoIpi != null)
        'valor_base_calculo_ipi': valorBaseCalculoIpi,
      if (quantidadeUnidadeTributavel != null)
        'quantidade_unidade_tributavel': quantidadeUnidadeTributavel,
      if (valorUnidadeTributavel != null)
        'valor_unidade_tributavel': valorUnidadeTributavel,
      if (aliquotaIpi != null) 'aliquota_ipi': aliquotaIpi,
      if (valorIpi != null) 'valor_ipi': valorIpi,
    });
  }

  NfeDetalheImpostoIpisCompanion copyWith({
    Value<int?>? id,
    Value<int?>? idNfeDetalhe,
    Value<String?>? cnpjProdutor,
    Value<String?>? codigoSeloIpi,
    Value<int?>? quantidadeSeloIpi,
    Value<String?>? enquadramentoLegalIpi,
    Value<String?>? cstIpi,
    Value<double?>? valorBaseCalculoIpi,
    Value<double?>? quantidadeUnidadeTributavel,
    Value<double?>? valorUnidadeTributavel,
    Value<double?>? aliquotaIpi,
    Value<double?>? valorIpi,
  }) {
    return NfeDetalheImpostoIpisCompanion(
      id: id ?? this.id,
      idNfeDetalhe: idNfeDetalhe ?? this.idNfeDetalhe,
      cnpjProdutor: cnpjProdutor ?? this.cnpjProdutor,
      codigoSeloIpi: codigoSeloIpi ?? this.codigoSeloIpi,
      quantidadeSeloIpi: quantidadeSeloIpi ?? this.quantidadeSeloIpi,
      enquadramentoLegalIpi:
          enquadramentoLegalIpi ?? this.enquadramentoLegalIpi,
      cstIpi: cstIpi ?? this.cstIpi,
      valorBaseCalculoIpi: valorBaseCalculoIpi ?? this.valorBaseCalculoIpi,
      quantidadeUnidadeTributavel:
          quantidadeUnidadeTributavel ?? this.quantidadeUnidadeTributavel,
      valorUnidadeTributavel:
          valorUnidadeTributavel ?? this.valorUnidadeTributavel,
      aliquotaIpi: aliquotaIpi ?? this.aliquotaIpi,
      valorIpi: valorIpi ?? this.valorIpi,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (idNfeDetalhe.present) {
      map['id_nfe_detalhe'] = Variable<int>(idNfeDetalhe.value);
    }
    if (cnpjProdutor.present) {
      map['cnpj_produtor'] = Variable<String>(cnpjProdutor.value);
    }
    if (codigoSeloIpi.present) {
      map['codigo_selo_ipi'] = Variable<String>(codigoSeloIpi.value);
    }
    if (quantidadeSeloIpi.present) {
      map['quantidade_selo_ipi'] = Variable<int>(quantidadeSeloIpi.value);
    }
    if (enquadramentoLegalIpi.present) {
      map['enquadramento_legal_ipi'] = Variable<String>(
        enquadramentoLegalIpi.value,
      );
    }
    if (cstIpi.present) {
      map['cst_ipi'] = Variable<String>(cstIpi.value);
    }
    if (valorBaseCalculoIpi.present) {
      map['valor_base_calculo_ipi'] = Variable<double>(
        valorBaseCalculoIpi.value,
      );
    }
    if (quantidadeUnidadeTributavel.present) {
      map['quantidade_unidade_tributavel'] = Variable<double>(
        quantidadeUnidadeTributavel.value,
      );
    }
    if (valorUnidadeTributavel.present) {
      map['valor_unidade_tributavel'] = Variable<double>(
        valorUnidadeTributavel.value,
      );
    }
    if (aliquotaIpi.present) {
      map['aliquota_ipi'] = Variable<double>(aliquotaIpi.value);
    }
    if (valorIpi.present) {
      map['valor_ipi'] = Variable<double>(valorIpi.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeDetalheImpostoIpisCompanion(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('cnpjProdutor: $cnpjProdutor, ')
          ..write('codigoSeloIpi: $codigoSeloIpi, ')
          ..write('quantidadeSeloIpi: $quantidadeSeloIpi, ')
          ..write('enquadramentoLegalIpi: $enquadramentoLegalIpi, ')
          ..write('cstIpi: $cstIpi, ')
          ..write('valorBaseCalculoIpi: $valorBaseCalculoIpi, ')
          ..write('quantidadeUnidadeTributavel: $quantidadeUnidadeTributavel, ')
          ..write('valorUnidadeTributavel: $valorUnidadeTributavel, ')
          ..write('aliquotaIpi: $aliquotaIpi, ')
          ..write('valorIpi: $valorIpi')
          ..write(')'))
        .toString();
  }
}

class $NfeDetalheImpostoIisTable extends NfeDetalheImpostoIis
    with TableInfo<$NfeDetalheImpostoIisTable, NfeDetalheImpostoIi> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeDetalheImpostoIisTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
    'id',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idNfeDetalheMeta = const VerificationMeta(
    'idNfeDetalhe',
  );
  @override
  late final GeneratedColumn<int> idNfeDetalhe = GeneratedColumn<int>(
    'id_nfe_detalhe',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _valorBcIiMeta = const VerificationMeta(
    'valorBcIi',
  );
  @override
  late final GeneratedColumn<double> valorBcIi = GeneratedColumn<double>(
    'valor_bc_ii',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _valorDespesasAduaneirasMeta =
      const VerificationMeta('valorDespesasAduaneiras');
  @override
  late final GeneratedColumn<double> valorDespesasAduaneiras =
      GeneratedColumn<double>(
        'valor_despesas_aduaneiras',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _valorImpostoImportacaoMeta =
      const VerificationMeta('valorImpostoImportacao');
  @override
  late final GeneratedColumn<double> valorImpostoImportacao =
      GeneratedColumn<double>(
        'valor_imposto_importacao',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _valorIofMeta = const VerificationMeta(
    'valorIof',
  );
  @override
  late final GeneratedColumn<double> valorIof = GeneratedColumn<double>(
    'valor_iof',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    idNfeDetalhe,
    valorBcIi,
    valorDespesasAduaneiras,
    valorImpostoImportacao,
    valorIof,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'nfe_detalhe_imposto_ii';
  @override
  VerificationContext validateIntegrity(
    Insertable<NfeDetalheImpostoIi> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('id_nfe_detalhe')) {
      context.handle(
        _idNfeDetalheMeta,
        idNfeDetalhe.isAcceptableOrUnknown(
          data['id_nfe_detalhe']!,
          _idNfeDetalheMeta,
        ),
      );
    }
    if (data.containsKey('valor_bc_ii')) {
      context.handle(
        _valorBcIiMeta,
        valorBcIi.isAcceptableOrUnknown(data['valor_bc_ii']!, _valorBcIiMeta),
      );
    }
    if (data.containsKey('valor_despesas_aduaneiras')) {
      context.handle(
        _valorDespesasAduaneirasMeta,
        valorDespesasAduaneiras.isAcceptableOrUnknown(
          data['valor_despesas_aduaneiras']!,
          _valorDespesasAduaneirasMeta,
        ),
      );
    }
    if (data.containsKey('valor_imposto_importacao')) {
      context.handle(
        _valorImpostoImportacaoMeta,
        valorImpostoImportacao.isAcceptableOrUnknown(
          data['valor_imposto_importacao']!,
          _valorImpostoImportacaoMeta,
        ),
      );
    }
    if (data.containsKey('valor_iof')) {
      context.handle(
        _valorIofMeta,
        valorIof.isAcceptableOrUnknown(data['valor_iof']!, _valorIofMeta),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeDetalheImpostoIi map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return NfeDetalheImpostoIi(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id'],
      ),
      idNfeDetalhe: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_nfe_detalhe'],
      ),
      valorBcIi: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_bc_ii'],
      ),
      valorDespesasAduaneiras: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_despesas_aduaneiras'],
      ),
      valorImpostoImportacao: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_imposto_importacao'],
      ),
      valorIof: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_iof'],
      ),
    );
  }

  @override
  $NfeDetalheImpostoIisTable createAlias(String alias) {
    return $NfeDetalheImpostoIisTable(attachedDatabase, alias);
  }
}

class NfeDetalheImpostoIi extends DataClass
    implements Insertable<NfeDetalheImpostoIi> {
  final int? id;
  final int? idNfeDetalhe;
  final double? valorBcIi;
  final double? valorDespesasAduaneiras;
  final double? valorImpostoImportacao;
  final double? valorIof;
  const NfeDetalheImpostoIi({
    this.id,
    this.idNfeDetalhe,
    this.valorBcIi,
    this.valorDespesasAduaneiras,
    this.valorImpostoImportacao,
    this.valorIof,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeDetalhe != null) {
      map['id_nfe_detalhe'] = Variable<int>(idNfeDetalhe);
    }
    if (!nullToAbsent || valorBcIi != null) {
      map['valor_bc_ii'] = Variable<double>(valorBcIi);
    }
    if (!nullToAbsent || valorDespesasAduaneiras != null) {
      map['valor_despesas_aduaneiras'] = Variable<double>(
        valorDespesasAduaneiras,
      );
    }
    if (!nullToAbsent || valorImpostoImportacao != null) {
      map['valor_imposto_importacao'] = Variable<double>(
        valorImpostoImportacao,
      );
    }
    if (!nullToAbsent || valorIof != null) {
      map['valor_iof'] = Variable<double>(valorIof);
    }
    return map;
  }

  factory NfeDetalheImpostoIi.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeDetalheImpostoIi(
      id: serializer.fromJson<int?>(json['id']),
      idNfeDetalhe: serializer.fromJson<int?>(json['idNfeDetalhe']),
      valorBcIi: serializer.fromJson<double?>(json['valorBcIi']),
      valorDespesasAduaneiras: serializer.fromJson<double?>(
        json['valorDespesasAduaneiras'],
      ),
      valorImpostoImportacao: serializer.fromJson<double?>(
        json['valorImpostoImportacao'],
      ),
      valorIof: serializer.fromJson<double?>(json['valorIof']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeDetalhe': serializer.toJson<int?>(idNfeDetalhe),
      'valorBcIi': serializer.toJson<double?>(valorBcIi),
      'valorDespesasAduaneiras': serializer.toJson<double?>(
        valorDespesasAduaneiras,
      ),
      'valorImpostoImportacao': serializer.toJson<double?>(
        valorImpostoImportacao,
      ),
      'valorIof': serializer.toJson<double?>(valorIof),
    };
  }

  NfeDetalheImpostoIi copyWith({
    Value<int?> id = const Value.absent(),
    Value<int?> idNfeDetalhe = const Value.absent(),
    Value<double?> valorBcIi = const Value.absent(),
    Value<double?> valorDespesasAduaneiras = const Value.absent(),
    Value<double?> valorImpostoImportacao = const Value.absent(),
    Value<double?> valorIof = const Value.absent(),
  }) => NfeDetalheImpostoIi(
    id: id.present ? id.value : this.id,
    idNfeDetalhe: idNfeDetalhe.present ? idNfeDetalhe.value : this.idNfeDetalhe,
    valorBcIi: valorBcIi.present ? valorBcIi.value : this.valorBcIi,
    valorDespesasAduaneiras:
        valorDespesasAduaneiras.present
            ? valorDespesasAduaneiras.value
            : this.valorDespesasAduaneiras,
    valorImpostoImportacao:
        valorImpostoImportacao.present
            ? valorImpostoImportacao.value
            : this.valorImpostoImportacao,
    valorIof: valorIof.present ? valorIof.value : this.valorIof,
  );
  NfeDetalheImpostoIi copyWithCompanion(NfeDetalheImpostoIisCompanion data) {
    return NfeDetalheImpostoIi(
      id: data.id.present ? data.id.value : this.id,
      idNfeDetalhe:
          data.idNfeDetalhe.present
              ? data.idNfeDetalhe.value
              : this.idNfeDetalhe,
      valorBcIi: data.valorBcIi.present ? data.valorBcIi.value : this.valorBcIi,
      valorDespesasAduaneiras:
          data.valorDespesasAduaneiras.present
              ? data.valorDespesasAduaneiras.value
              : this.valorDespesasAduaneiras,
      valorImpostoImportacao:
          data.valorImpostoImportacao.present
              ? data.valorImpostoImportacao.value
              : this.valorImpostoImportacao,
      valorIof: data.valorIof.present ? data.valorIof.value : this.valorIof,
    );
  }

  @override
  String toString() {
    return (StringBuffer('NfeDetalheImpostoIi(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('valorBcIi: $valorBcIi, ')
          ..write('valorDespesasAduaneiras: $valorDespesasAduaneiras, ')
          ..write('valorImpostoImportacao: $valorImpostoImportacao, ')
          ..write('valorIof: $valorIof')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    idNfeDetalhe,
    valorBcIi,
    valorDespesasAduaneiras,
    valorImpostoImportacao,
    valorIof,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeDetalheImpostoIi &&
          other.id == this.id &&
          other.idNfeDetalhe == this.idNfeDetalhe &&
          other.valorBcIi == this.valorBcIi &&
          other.valorDespesasAduaneiras == this.valorDespesasAduaneiras &&
          other.valorImpostoImportacao == this.valorImpostoImportacao &&
          other.valorIof == this.valorIof);
}

class NfeDetalheImpostoIisCompanion
    extends UpdateCompanion<NfeDetalheImpostoIi> {
  final Value<int?> id;
  final Value<int?> idNfeDetalhe;
  final Value<double?> valorBcIi;
  final Value<double?> valorDespesasAduaneiras;
  final Value<double?> valorImpostoImportacao;
  final Value<double?> valorIof;
  const NfeDetalheImpostoIisCompanion({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.valorBcIi = const Value.absent(),
    this.valorDespesasAduaneiras = const Value.absent(),
    this.valorImpostoImportacao = const Value.absent(),
    this.valorIof = const Value.absent(),
  });
  NfeDetalheImpostoIisCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.valorBcIi = const Value.absent(),
    this.valorDespesasAduaneiras = const Value.absent(),
    this.valorImpostoImportacao = const Value.absent(),
    this.valorIof = const Value.absent(),
  });
  static Insertable<NfeDetalheImpostoIi> custom({
    Expression<int>? id,
    Expression<int>? idNfeDetalhe,
    Expression<double>? valorBcIi,
    Expression<double>? valorDespesasAduaneiras,
    Expression<double>? valorImpostoImportacao,
    Expression<double>? valorIof,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (idNfeDetalhe != null) 'id_nfe_detalhe': idNfeDetalhe,
      if (valorBcIi != null) 'valor_bc_ii': valorBcIi,
      if (valorDespesasAduaneiras != null)
        'valor_despesas_aduaneiras': valorDespesasAduaneiras,
      if (valorImpostoImportacao != null)
        'valor_imposto_importacao': valorImpostoImportacao,
      if (valorIof != null) 'valor_iof': valorIof,
    });
  }

  NfeDetalheImpostoIisCompanion copyWith({
    Value<int?>? id,
    Value<int?>? idNfeDetalhe,
    Value<double?>? valorBcIi,
    Value<double?>? valorDespesasAduaneiras,
    Value<double?>? valorImpostoImportacao,
    Value<double?>? valorIof,
  }) {
    return NfeDetalheImpostoIisCompanion(
      id: id ?? this.id,
      idNfeDetalhe: idNfeDetalhe ?? this.idNfeDetalhe,
      valorBcIi: valorBcIi ?? this.valorBcIi,
      valorDespesasAduaneiras:
          valorDespesasAduaneiras ?? this.valorDespesasAduaneiras,
      valorImpostoImportacao:
          valorImpostoImportacao ?? this.valorImpostoImportacao,
      valorIof: valorIof ?? this.valorIof,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (idNfeDetalhe.present) {
      map['id_nfe_detalhe'] = Variable<int>(idNfeDetalhe.value);
    }
    if (valorBcIi.present) {
      map['valor_bc_ii'] = Variable<double>(valorBcIi.value);
    }
    if (valorDespesasAduaneiras.present) {
      map['valor_despesas_aduaneiras'] = Variable<double>(
        valorDespesasAduaneiras.value,
      );
    }
    if (valorImpostoImportacao.present) {
      map['valor_imposto_importacao'] = Variable<double>(
        valorImpostoImportacao.value,
      );
    }
    if (valorIof.present) {
      map['valor_iof'] = Variable<double>(valorIof.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeDetalheImpostoIisCompanion(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('valorBcIi: $valorBcIi, ')
          ..write('valorDespesasAduaneiras: $valorDespesasAduaneiras, ')
          ..write('valorImpostoImportacao: $valorImpostoImportacao, ')
          ..write('valorIof: $valorIof')
          ..write(')'))
        .toString();
  }
}

class $NfeDetalheImpostoPissTable extends NfeDetalheImpostoPiss
    with TableInfo<$NfeDetalheImpostoPissTable, NfeDetalheImpostoPis> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeDetalheImpostoPissTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
    'id',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idNfeDetalheMeta = const VerificationMeta(
    'idNfeDetalhe',
  );
  @override
  late final GeneratedColumn<int> idNfeDetalhe = GeneratedColumn<int>(
    'id_nfe_detalhe',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _cstPisMeta = const VerificationMeta('cstPis');
  @override
  late final GeneratedColumn<String> cstPis = GeneratedColumn<String>(
    'cst_pis',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 2,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _valorBaseCalculoPisMeta =
      const VerificationMeta('valorBaseCalculoPis');
  @override
  late final GeneratedColumn<double> valorBaseCalculoPis =
      GeneratedColumn<double>(
        'valor_base_calculo_pis',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _aliquotaPisPercentualMeta =
      const VerificationMeta('aliquotaPisPercentual');
  @override
  late final GeneratedColumn<double> aliquotaPisPercentual =
      GeneratedColumn<double>(
        'aliquota_pis_percentual',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _valorPisMeta = const VerificationMeta(
    'valorPis',
  );
  @override
  late final GeneratedColumn<double> valorPis = GeneratedColumn<double>(
    'valor_pis',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _quantidadeVendidaMeta = const VerificationMeta(
    'quantidadeVendida',
  );
  @override
  late final GeneratedColumn<double> quantidadeVendida =
      GeneratedColumn<double>(
        'quantidade_vendida',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _aliquotaPisReaisMeta = const VerificationMeta(
    'aliquotaPisReais',
  );
  @override
  late final GeneratedColumn<double> aliquotaPisReais = GeneratedColumn<double>(
    'aliquota_pis_reais',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    idNfeDetalhe,
    cstPis,
    valorBaseCalculoPis,
    aliquotaPisPercentual,
    valorPis,
    quantidadeVendida,
    aliquotaPisReais,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'nfe_detalhe_imposto_pis';
  @override
  VerificationContext validateIntegrity(
    Insertable<NfeDetalheImpostoPis> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('id_nfe_detalhe')) {
      context.handle(
        _idNfeDetalheMeta,
        idNfeDetalhe.isAcceptableOrUnknown(
          data['id_nfe_detalhe']!,
          _idNfeDetalheMeta,
        ),
      );
    }
    if (data.containsKey('cst_pis')) {
      context.handle(
        _cstPisMeta,
        cstPis.isAcceptableOrUnknown(data['cst_pis']!, _cstPisMeta),
      );
    }
    if (data.containsKey('valor_base_calculo_pis')) {
      context.handle(
        _valorBaseCalculoPisMeta,
        valorBaseCalculoPis.isAcceptableOrUnknown(
          data['valor_base_calculo_pis']!,
          _valorBaseCalculoPisMeta,
        ),
      );
    }
    if (data.containsKey('aliquota_pis_percentual')) {
      context.handle(
        _aliquotaPisPercentualMeta,
        aliquotaPisPercentual.isAcceptableOrUnknown(
          data['aliquota_pis_percentual']!,
          _aliquotaPisPercentualMeta,
        ),
      );
    }
    if (data.containsKey('valor_pis')) {
      context.handle(
        _valorPisMeta,
        valorPis.isAcceptableOrUnknown(data['valor_pis']!, _valorPisMeta),
      );
    }
    if (data.containsKey('quantidade_vendida')) {
      context.handle(
        _quantidadeVendidaMeta,
        quantidadeVendida.isAcceptableOrUnknown(
          data['quantidade_vendida']!,
          _quantidadeVendidaMeta,
        ),
      );
    }
    if (data.containsKey('aliquota_pis_reais')) {
      context.handle(
        _aliquotaPisReaisMeta,
        aliquotaPisReais.isAcceptableOrUnknown(
          data['aliquota_pis_reais']!,
          _aliquotaPisReaisMeta,
        ),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeDetalheImpostoPis map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return NfeDetalheImpostoPis(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id'],
      ),
      idNfeDetalhe: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_nfe_detalhe'],
      ),
      cstPis: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}cst_pis'],
      ),
      valorBaseCalculoPis: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_base_calculo_pis'],
      ),
      aliquotaPisPercentual: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}aliquota_pis_percentual'],
      ),
      valorPis: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_pis'],
      ),
      quantidadeVendida: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}quantidade_vendida'],
      ),
      aliquotaPisReais: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}aliquota_pis_reais'],
      ),
    );
  }

  @override
  $NfeDetalheImpostoPissTable createAlias(String alias) {
    return $NfeDetalheImpostoPissTable(attachedDatabase, alias);
  }
}

class NfeDetalheImpostoPis extends DataClass
    implements Insertable<NfeDetalheImpostoPis> {
  final int? id;
  final int? idNfeDetalhe;
  final String? cstPis;
  final double? valorBaseCalculoPis;
  final double? aliquotaPisPercentual;
  final double? valorPis;
  final double? quantidadeVendida;
  final double? aliquotaPisReais;
  const NfeDetalheImpostoPis({
    this.id,
    this.idNfeDetalhe,
    this.cstPis,
    this.valorBaseCalculoPis,
    this.aliquotaPisPercentual,
    this.valorPis,
    this.quantidadeVendida,
    this.aliquotaPisReais,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeDetalhe != null) {
      map['id_nfe_detalhe'] = Variable<int>(idNfeDetalhe);
    }
    if (!nullToAbsent || cstPis != null) {
      map['cst_pis'] = Variable<String>(cstPis);
    }
    if (!nullToAbsent || valorBaseCalculoPis != null) {
      map['valor_base_calculo_pis'] = Variable<double>(valorBaseCalculoPis);
    }
    if (!nullToAbsent || aliquotaPisPercentual != null) {
      map['aliquota_pis_percentual'] = Variable<double>(aliquotaPisPercentual);
    }
    if (!nullToAbsent || valorPis != null) {
      map['valor_pis'] = Variable<double>(valorPis);
    }
    if (!nullToAbsent || quantidadeVendida != null) {
      map['quantidade_vendida'] = Variable<double>(quantidadeVendida);
    }
    if (!nullToAbsent || aliquotaPisReais != null) {
      map['aliquota_pis_reais'] = Variable<double>(aliquotaPisReais);
    }
    return map;
  }

  factory NfeDetalheImpostoPis.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeDetalheImpostoPis(
      id: serializer.fromJson<int?>(json['id']),
      idNfeDetalhe: serializer.fromJson<int?>(json['idNfeDetalhe']),
      cstPis: serializer.fromJson<String?>(json['cstPis']),
      valorBaseCalculoPis: serializer.fromJson<double?>(
        json['valorBaseCalculoPis'],
      ),
      aliquotaPisPercentual: serializer.fromJson<double?>(
        json['aliquotaPisPercentual'],
      ),
      valorPis: serializer.fromJson<double?>(json['valorPis']),
      quantidadeVendida: serializer.fromJson<double?>(
        json['quantidadeVendida'],
      ),
      aliquotaPisReais: serializer.fromJson<double?>(json['aliquotaPisReais']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeDetalhe': serializer.toJson<int?>(idNfeDetalhe),
      'cstPis': serializer.toJson<String?>(cstPis),
      'valorBaseCalculoPis': serializer.toJson<double?>(valorBaseCalculoPis),
      'aliquotaPisPercentual': serializer.toJson<double?>(
        aliquotaPisPercentual,
      ),
      'valorPis': serializer.toJson<double?>(valorPis),
      'quantidadeVendida': serializer.toJson<double?>(quantidadeVendida),
      'aliquotaPisReais': serializer.toJson<double?>(aliquotaPisReais),
    };
  }

  NfeDetalheImpostoPis copyWith({
    Value<int?> id = const Value.absent(),
    Value<int?> idNfeDetalhe = const Value.absent(),
    Value<String?> cstPis = const Value.absent(),
    Value<double?> valorBaseCalculoPis = const Value.absent(),
    Value<double?> aliquotaPisPercentual = const Value.absent(),
    Value<double?> valorPis = const Value.absent(),
    Value<double?> quantidadeVendida = const Value.absent(),
    Value<double?> aliquotaPisReais = const Value.absent(),
  }) => NfeDetalheImpostoPis(
    id: id.present ? id.value : this.id,
    idNfeDetalhe: idNfeDetalhe.present ? idNfeDetalhe.value : this.idNfeDetalhe,
    cstPis: cstPis.present ? cstPis.value : this.cstPis,
    valorBaseCalculoPis:
        valorBaseCalculoPis.present
            ? valorBaseCalculoPis.value
            : this.valorBaseCalculoPis,
    aliquotaPisPercentual:
        aliquotaPisPercentual.present
            ? aliquotaPisPercentual.value
            : this.aliquotaPisPercentual,
    valorPis: valorPis.present ? valorPis.value : this.valorPis,
    quantidadeVendida:
        quantidadeVendida.present
            ? quantidadeVendida.value
            : this.quantidadeVendida,
    aliquotaPisReais:
        aliquotaPisReais.present
            ? aliquotaPisReais.value
            : this.aliquotaPisReais,
  );
  NfeDetalheImpostoPis copyWithCompanion(NfeDetalheImpostoPissCompanion data) {
    return NfeDetalheImpostoPis(
      id: data.id.present ? data.id.value : this.id,
      idNfeDetalhe:
          data.idNfeDetalhe.present
              ? data.idNfeDetalhe.value
              : this.idNfeDetalhe,
      cstPis: data.cstPis.present ? data.cstPis.value : this.cstPis,
      valorBaseCalculoPis:
          data.valorBaseCalculoPis.present
              ? data.valorBaseCalculoPis.value
              : this.valorBaseCalculoPis,
      aliquotaPisPercentual:
          data.aliquotaPisPercentual.present
              ? data.aliquotaPisPercentual.value
              : this.aliquotaPisPercentual,
      valorPis: data.valorPis.present ? data.valorPis.value : this.valorPis,
      quantidadeVendida:
          data.quantidadeVendida.present
              ? data.quantidadeVendida.value
              : this.quantidadeVendida,
      aliquotaPisReais:
          data.aliquotaPisReais.present
              ? data.aliquotaPisReais.value
              : this.aliquotaPisReais,
    );
  }

  @override
  String toString() {
    return (StringBuffer('NfeDetalheImpostoPis(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('cstPis: $cstPis, ')
          ..write('valorBaseCalculoPis: $valorBaseCalculoPis, ')
          ..write('aliquotaPisPercentual: $aliquotaPisPercentual, ')
          ..write('valorPis: $valorPis, ')
          ..write('quantidadeVendida: $quantidadeVendida, ')
          ..write('aliquotaPisReais: $aliquotaPisReais')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    idNfeDetalhe,
    cstPis,
    valorBaseCalculoPis,
    aliquotaPisPercentual,
    valorPis,
    quantidadeVendida,
    aliquotaPisReais,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeDetalheImpostoPis &&
          other.id == this.id &&
          other.idNfeDetalhe == this.idNfeDetalhe &&
          other.cstPis == this.cstPis &&
          other.valorBaseCalculoPis == this.valorBaseCalculoPis &&
          other.aliquotaPisPercentual == this.aliquotaPisPercentual &&
          other.valorPis == this.valorPis &&
          other.quantidadeVendida == this.quantidadeVendida &&
          other.aliquotaPisReais == this.aliquotaPisReais);
}

class NfeDetalheImpostoPissCompanion
    extends UpdateCompanion<NfeDetalheImpostoPis> {
  final Value<int?> id;
  final Value<int?> idNfeDetalhe;
  final Value<String?> cstPis;
  final Value<double?> valorBaseCalculoPis;
  final Value<double?> aliquotaPisPercentual;
  final Value<double?> valorPis;
  final Value<double?> quantidadeVendida;
  final Value<double?> aliquotaPisReais;
  const NfeDetalheImpostoPissCompanion({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.cstPis = const Value.absent(),
    this.valorBaseCalculoPis = const Value.absent(),
    this.aliquotaPisPercentual = const Value.absent(),
    this.valorPis = const Value.absent(),
    this.quantidadeVendida = const Value.absent(),
    this.aliquotaPisReais = const Value.absent(),
  });
  NfeDetalheImpostoPissCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.cstPis = const Value.absent(),
    this.valorBaseCalculoPis = const Value.absent(),
    this.aliquotaPisPercentual = const Value.absent(),
    this.valorPis = const Value.absent(),
    this.quantidadeVendida = const Value.absent(),
    this.aliquotaPisReais = const Value.absent(),
  });
  static Insertable<NfeDetalheImpostoPis> custom({
    Expression<int>? id,
    Expression<int>? idNfeDetalhe,
    Expression<String>? cstPis,
    Expression<double>? valorBaseCalculoPis,
    Expression<double>? aliquotaPisPercentual,
    Expression<double>? valorPis,
    Expression<double>? quantidadeVendida,
    Expression<double>? aliquotaPisReais,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (idNfeDetalhe != null) 'id_nfe_detalhe': idNfeDetalhe,
      if (cstPis != null) 'cst_pis': cstPis,
      if (valorBaseCalculoPis != null)
        'valor_base_calculo_pis': valorBaseCalculoPis,
      if (aliquotaPisPercentual != null)
        'aliquota_pis_percentual': aliquotaPisPercentual,
      if (valorPis != null) 'valor_pis': valorPis,
      if (quantidadeVendida != null) 'quantidade_vendida': quantidadeVendida,
      if (aliquotaPisReais != null) 'aliquota_pis_reais': aliquotaPisReais,
    });
  }

  NfeDetalheImpostoPissCompanion copyWith({
    Value<int?>? id,
    Value<int?>? idNfeDetalhe,
    Value<String?>? cstPis,
    Value<double?>? valorBaseCalculoPis,
    Value<double?>? aliquotaPisPercentual,
    Value<double?>? valorPis,
    Value<double?>? quantidadeVendida,
    Value<double?>? aliquotaPisReais,
  }) {
    return NfeDetalheImpostoPissCompanion(
      id: id ?? this.id,
      idNfeDetalhe: idNfeDetalhe ?? this.idNfeDetalhe,
      cstPis: cstPis ?? this.cstPis,
      valorBaseCalculoPis: valorBaseCalculoPis ?? this.valorBaseCalculoPis,
      aliquotaPisPercentual:
          aliquotaPisPercentual ?? this.aliquotaPisPercentual,
      valorPis: valorPis ?? this.valorPis,
      quantidadeVendida: quantidadeVendida ?? this.quantidadeVendida,
      aliquotaPisReais: aliquotaPisReais ?? this.aliquotaPisReais,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (idNfeDetalhe.present) {
      map['id_nfe_detalhe'] = Variable<int>(idNfeDetalhe.value);
    }
    if (cstPis.present) {
      map['cst_pis'] = Variable<String>(cstPis.value);
    }
    if (valorBaseCalculoPis.present) {
      map['valor_base_calculo_pis'] = Variable<double>(
        valorBaseCalculoPis.value,
      );
    }
    if (aliquotaPisPercentual.present) {
      map['aliquota_pis_percentual'] = Variable<double>(
        aliquotaPisPercentual.value,
      );
    }
    if (valorPis.present) {
      map['valor_pis'] = Variable<double>(valorPis.value);
    }
    if (quantidadeVendida.present) {
      map['quantidade_vendida'] = Variable<double>(quantidadeVendida.value);
    }
    if (aliquotaPisReais.present) {
      map['aliquota_pis_reais'] = Variable<double>(aliquotaPisReais.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeDetalheImpostoPissCompanion(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('cstPis: $cstPis, ')
          ..write('valorBaseCalculoPis: $valorBaseCalculoPis, ')
          ..write('aliquotaPisPercentual: $aliquotaPisPercentual, ')
          ..write('valorPis: $valorPis, ')
          ..write('quantidadeVendida: $quantidadeVendida, ')
          ..write('aliquotaPisReais: $aliquotaPisReais')
          ..write(')'))
        .toString();
  }
}

class $NfeDetalheImpostoCofinssTable extends NfeDetalheImpostoCofinss
    with TableInfo<$NfeDetalheImpostoCofinssTable, NfeDetalheImpostoCofins> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeDetalheImpostoCofinssTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
    'id',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idNfeDetalheMeta = const VerificationMeta(
    'idNfeDetalhe',
  );
  @override
  late final GeneratedColumn<int> idNfeDetalhe = GeneratedColumn<int>(
    'id_nfe_detalhe',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _cstCofinsMeta = const VerificationMeta(
    'cstCofins',
  );
  @override
  late final GeneratedColumn<String> cstCofins = GeneratedColumn<String>(
    'cst_cofins',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 2,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _baseCalculoCofinsMeta = const VerificationMeta(
    'baseCalculoCofins',
  );
  @override
  late final GeneratedColumn<double> baseCalculoCofins =
      GeneratedColumn<double>(
        'base_calculo_cofins',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _aliquotaCofinsPercentualMeta =
      const VerificationMeta('aliquotaCofinsPercentual');
  @override
  late final GeneratedColumn<double> aliquotaCofinsPercentual =
      GeneratedColumn<double>(
        'aliquota_cofins_percentual',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _quantidadeVendidaMeta = const VerificationMeta(
    'quantidadeVendida',
  );
  @override
  late final GeneratedColumn<double> quantidadeVendida =
      GeneratedColumn<double>(
        'quantidade_vendida',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _aliquotaCofinsReaisMeta =
      const VerificationMeta('aliquotaCofinsReais');
  @override
  late final GeneratedColumn<double> aliquotaCofinsReais =
      GeneratedColumn<double>(
        'aliquota_cofins_reais',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _valorCofinsMeta = const VerificationMeta(
    'valorCofins',
  );
  @override
  late final GeneratedColumn<double> valorCofins = GeneratedColumn<double>(
    'valor_cofins',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    idNfeDetalhe,
    cstCofins,
    baseCalculoCofins,
    aliquotaCofinsPercentual,
    quantidadeVendida,
    aliquotaCofinsReais,
    valorCofins,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'nfe_detalhe_imposto_cofins';
  @override
  VerificationContext validateIntegrity(
    Insertable<NfeDetalheImpostoCofins> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('id_nfe_detalhe')) {
      context.handle(
        _idNfeDetalheMeta,
        idNfeDetalhe.isAcceptableOrUnknown(
          data['id_nfe_detalhe']!,
          _idNfeDetalheMeta,
        ),
      );
    }
    if (data.containsKey('cst_cofins')) {
      context.handle(
        _cstCofinsMeta,
        cstCofins.isAcceptableOrUnknown(data['cst_cofins']!, _cstCofinsMeta),
      );
    }
    if (data.containsKey('base_calculo_cofins')) {
      context.handle(
        _baseCalculoCofinsMeta,
        baseCalculoCofins.isAcceptableOrUnknown(
          data['base_calculo_cofins']!,
          _baseCalculoCofinsMeta,
        ),
      );
    }
    if (data.containsKey('aliquota_cofins_percentual')) {
      context.handle(
        _aliquotaCofinsPercentualMeta,
        aliquotaCofinsPercentual.isAcceptableOrUnknown(
          data['aliquota_cofins_percentual']!,
          _aliquotaCofinsPercentualMeta,
        ),
      );
    }
    if (data.containsKey('quantidade_vendida')) {
      context.handle(
        _quantidadeVendidaMeta,
        quantidadeVendida.isAcceptableOrUnknown(
          data['quantidade_vendida']!,
          _quantidadeVendidaMeta,
        ),
      );
    }
    if (data.containsKey('aliquota_cofins_reais')) {
      context.handle(
        _aliquotaCofinsReaisMeta,
        aliquotaCofinsReais.isAcceptableOrUnknown(
          data['aliquota_cofins_reais']!,
          _aliquotaCofinsReaisMeta,
        ),
      );
    }
    if (data.containsKey('valor_cofins')) {
      context.handle(
        _valorCofinsMeta,
        valorCofins.isAcceptableOrUnknown(
          data['valor_cofins']!,
          _valorCofinsMeta,
        ),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeDetalheImpostoCofins map(
    Map<String, dynamic> data, {
    String? tablePrefix,
  }) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return NfeDetalheImpostoCofins(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id'],
      ),
      idNfeDetalhe: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_nfe_detalhe'],
      ),
      cstCofins: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}cst_cofins'],
      ),
      baseCalculoCofins: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}base_calculo_cofins'],
      ),
      aliquotaCofinsPercentual: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}aliquota_cofins_percentual'],
      ),
      quantidadeVendida: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}quantidade_vendida'],
      ),
      aliquotaCofinsReais: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}aliquota_cofins_reais'],
      ),
      valorCofins: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_cofins'],
      ),
    );
  }

  @override
  $NfeDetalheImpostoCofinssTable createAlias(String alias) {
    return $NfeDetalheImpostoCofinssTable(attachedDatabase, alias);
  }
}

class NfeDetalheImpostoCofins extends DataClass
    implements Insertable<NfeDetalheImpostoCofins> {
  final int? id;
  final int? idNfeDetalhe;
  final String? cstCofins;
  final double? baseCalculoCofins;
  final double? aliquotaCofinsPercentual;
  final double? quantidadeVendida;
  final double? aliquotaCofinsReais;
  final double? valorCofins;
  const NfeDetalheImpostoCofins({
    this.id,
    this.idNfeDetalhe,
    this.cstCofins,
    this.baseCalculoCofins,
    this.aliquotaCofinsPercentual,
    this.quantidadeVendida,
    this.aliquotaCofinsReais,
    this.valorCofins,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeDetalhe != null) {
      map['id_nfe_detalhe'] = Variable<int>(idNfeDetalhe);
    }
    if (!nullToAbsent || cstCofins != null) {
      map['cst_cofins'] = Variable<String>(cstCofins);
    }
    if (!nullToAbsent || baseCalculoCofins != null) {
      map['base_calculo_cofins'] = Variable<double>(baseCalculoCofins);
    }
    if (!nullToAbsent || aliquotaCofinsPercentual != null) {
      map['aliquota_cofins_percentual'] = Variable<double>(
        aliquotaCofinsPercentual,
      );
    }
    if (!nullToAbsent || quantidadeVendida != null) {
      map['quantidade_vendida'] = Variable<double>(quantidadeVendida);
    }
    if (!nullToAbsent || aliquotaCofinsReais != null) {
      map['aliquota_cofins_reais'] = Variable<double>(aliquotaCofinsReais);
    }
    if (!nullToAbsent || valorCofins != null) {
      map['valor_cofins'] = Variable<double>(valorCofins);
    }
    return map;
  }

  factory NfeDetalheImpostoCofins.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeDetalheImpostoCofins(
      id: serializer.fromJson<int?>(json['id']),
      idNfeDetalhe: serializer.fromJson<int?>(json['idNfeDetalhe']),
      cstCofins: serializer.fromJson<String?>(json['cstCofins']),
      baseCalculoCofins: serializer.fromJson<double?>(
        json['baseCalculoCofins'],
      ),
      aliquotaCofinsPercentual: serializer.fromJson<double?>(
        json['aliquotaCofinsPercentual'],
      ),
      quantidadeVendida: serializer.fromJson<double?>(
        json['quantidadeVendida'],
      ),
      aliquotaCofinsReais: serializer.fromJson<double?>(
        json['aliquotaCofinsReais'],
      ),
      valorCofins: serializer.fromJson<double?>(json['valorCofins']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeDetalhe': serializer.toJson<int?>(idNfeDetalhe),
      'cstCofins': serializer.toJson<String?>(cstCofins),
      'baseCalculoCofins': serializer.toJson<double?>(baseCalculoCofins),
      'aliquotaCofinsPercentual': serializer.toJson<double?>(
        aliquotaCofinsPercentual,
      ),
      'quantidadeVendida': serializer.toJson<double?>(quantidadeVendida),
      'aliquotaCofinsReais': serializer.toJson<double?>(aliquotaCofinsReais),
      'valorCofins': serializer.toJson<double?>(valorCofins),
    };
  }

  NfeDetalheImpostoCofins copyWith({
    Value<int?> id = const Value.absent(),
    Value<int?> idNfeDetalhe = const Value.absent(),
    Value<String?> cstCofins = const Value.absent(),
    Value<double?> baseCalculoCofins = const Value.absent(),
    Value<double?> aliquotaCofinsPercentual = const Value.absent(),
    Value<double?> quantidadeVendida = const Value.absent(),
    Value<double?> aliquotaCofinsReais = const Value.absent(),
    Value<double?> valorCofins = const Value.absent(),
  }) => NfeDetalheImpostoCofins(
    id: id.present ? id.value : this.id,
    idNfeDetalhe: idNfeDetalhe.present ? idNfeDetalhe.value : this.idNfeDetalhe,
    cstCofins: cstCofins.present ? cstCofins.value : this.cstCofins,
    baseCalculoCofins:
        baseCalculoCofins.present
            ? baseCalculoCofins.value
            : this.baseCalculoCofins,
    aliquotaCofinsPercentual:
        aliquotaCofinsPercentual.present
            ? aliquotaCofinsPercentual.value
            : this.aliquotaCofinsPercentual,
    quantidadeVendida:
        quantidadeVendida.present
            ? quantidadeVendida.value
            : this.quantidadeVendida,
    aliquotaCofinsReais:
        aliquotaCofinsReais.present
            ? aliquotaCofinsReais.value
            : this.aliquotaCofinsReais,
    valorCofins: valorCofins.present ? valorCofins.value : this.valorCofins,
  );
  NfeDetalheImpostoCofins copyWithCompanion(
    NfeDetalheImpostoCofinssCompanion data,
  ) {
    return NfeDetalheImpostoCofins(
      id: data.id.present ? data.id.value : this.id,
      idNfeDetalhe:
          data.idNfeDetalhe.present
              ? data.idNfeDetalhe.value
              : this.idNfeDetalhe,
      cstCofins: data.cstCofins.present ? data.cstCofins.value : this.cstCofins,
      baseCalculoCofins:
          data.baseCalculoCofins.present
              ? data.baseCalculoCofins.value
              : this.baseCalculoCofins,
      aliquotaCofinsPercentual:
          data.aliquotaCofinsPercentual.present
              ? data.aliquotaCofinsPercentual.value
              : this.aliquotaCofinsPercentual,
      quantidadeVendida:
          data.quantidadeVendida.present
              ? data.quantidadeVendida.value
              : this.quantidadeVendida,
      aliquotaCofinsReais:
          data.aliquotaCofinsReais.present
              ? data.aliquotaCofinsReais.value
              : this.aliquotaCofinsReais,
      valorCofins:
          data.valorCofins.present ? data.valorCofins.value : this.valorCofins,
    );
  }

  @override
  String toString() {
    return (StringBuffer('NfeDetalheImpostoCofins(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('cstCofins: $cstCofins, ')
          ..write('baseCalculoCofins: $baseCalculoCofins, ')
          ..write('aliquotaCofinsPercentual: $aliquotaCofinsPercentual, ')
          ..write('quantidadeVendida: $quantidadeVendida, ')
          ..write('aliquotaCofinsReais: $aliquotaCofinsReais, ')
          ..write('valorCofins: $valorCofins')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    idNfeDetalhe,
    cstCofins,
    baseCalculoCofins,
    aliquotaCofinsPercentual,
    quantidadeVendida,
    aliquotaCofinsReais,
    valorCofins,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeDetalheImpostoCofins &&
          other.id == this.id &&
          other.idNfeDetalhe == this.idNfeDetalhe &&
          other.cstCofins == this.cstCofins &&
          other.baseCalculoCofins == this.baseCalculoCofins &&
          other.aliquotaCofinsPercentual == this.aliquotaCofinsPercentual &&
          other.quantidadeVendida == this.quantidadeVendida &&
          other.aliquotaCofinsReais == this.aliquotaCofinsReais &&
          other.valorCofins == this.valorCofins);
}

class NfeDetalheImpostoCofinssCompanion
    extends UpdateCompanion<NfeDetalheImpostoCofins> {
  final Value<int?> id;
  final Value<int?> idNfeDetalhe;
  final Value<String?> cstCofins;
  final Value<double?> baseCalculoCofins;
  final Value<double?> aliquotaCofinsPercentual;
  final Value<double?> quantidadeVendida;
  final Value<double?> aliquotaCofinsReais;
  final Value<double?> valorCofins;
  const NfeDetalheImpostoCofinssCompanion({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.cstCofins = const Value.absent(),
    this.baseCalculoCofins = const Value.absent(),
    this.aliquotaCofinsPercentual = const Value.absent(),
    this.quantidadeVendida = const Value.absent(),
    this.aliquotaCofinsReais = const Value.absent(),
    this.valorCofins = const Value.absent(),
  });
  NfeDetalheImpostoCofinssCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.cstCofins = const Value.absent(),
    this.baseCalculoCofins = const Value.absent(),
    this.aliquotaCofinsPercentual = const Value.absent(),
    this.quantidadeVendida = const Value.absent(),
    this.aliquotaCofinsReais = const Value.absent(),
    this.valorCofins = const Value.absent(),
  });
  static Insertable<NfeDetalheImpostoCofins> custom({
    Expression<int>? id,
    Expression<int>? idNfeDetalhe,
    Expression<String>? cstCofins,
    Expression<double>? baseCalculoCofins,
    Expression<double>? aliquotaCofinsPercentual,
    Expression<double>? quantidadeVendida,
    Expression<double>? aliquotaCofinsReais,
    Expression<double>? valorCofins,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (idNfeDetalhe != null) 'id_nfe_detalhe': idNfeDetalhe,
      if (cstCofins != null) 'cst_cofins': cstCofins,
      if (baseCalculoCofins != null) 'base_calculo_cofins': baseCalculoCofins,
      if (aliquotaCofinsPercentual != null)
        'aliquota_cofins_percentual': aliquotaCofinsPercentual,
      if (quantidadeVendida != null) 'quantidade_vendida': quantidadeVendida,
      if (aliquotaCofinsReais != null)
        'aliquota_cofins_reais': aliquotaCofinsReais,
      if (valorCofins != null) 'valor_cofins': valorCofins,
    });
  }

  NfeDetalheImpostoCofinssCompanion copyWith({
    Value<int?>? id,
    Value<int?>? idNfeDetalhe,
    Value<String?>? cstCofins,
    Value<double?>? baseCalculoCofins,
    Value<double?>? aliquotaCofinsPercentual,
    Value<double?>? quantidadeVendida,
    Value<double?>? aliquotaCofinsReais,
    Value<double?>? valorCofins,
  }) {
    return NfeDetalheImpostoCofinssCompanion(
      id: id ?? this.id,
      idNfeDetalhe: idNfeDetalhe ?? this.idNfeDetalhe,
      cstCofins: cstCofins ?? this.cstCofins,
      baseCalculoCofins: baseCalculoCofins ?? this.baseCalculoCofins,
      aliquotaCofinsPercentual:
          aliquotaCofinsPercentual ?? this.aliquotaCofinsPercentual,
      quantidadeVendida: quantidadeVendida ?? this.quantidadeVendida,
      aliquotaCofinsReais: aliquotaCofinsReais ?? this.aliquotaCofinsReais,
      valorCofins: valorCofins ?? this.valorCofins,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (idNfeDetalhe.present) {
      map['id_nfe_detalhe'] = Variable<int>(idNfeDetalhe.value);
    }
    if (cstCofins.present) {
      map['cst_cofins'] = Variable<String>(cstCofins.value);
    }
    if (baseCalculoCofins.present) {
      map['base_calculo_cofins'] = Variable<double>(baseCalculoCofins.value);
    }
    if (aliquotaCofinsPercentual.present) {
      map['aliquota_cofins_percentual'] = Variable<double>(
        aliquotaCofinsPercentual.value,
      );
    }
    if (quantidadeVendida.present) {
      map['quantidade_vendida'] = Variable<double>(quantidadeVendida.value);
    }
    if (aliquotaCofinsReais.present) {
      map['aliquota_cofins_reais'] = Variable<double>(
        aliquotaCofinsReais.value,
      );
    }
    if (valorCofins.present) {
      map['valor_cofins'] = Variable<double>(valorCofins.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeDetalheImpostoCofinssCompanion(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('cstCofins: $cstCofins, ')
          ..write('baseCalculoCofins: $baseCalculoCofins, ')
          ..write('aliquotaCofinsPercentual: $aliquotaCofinsPercentual, ')
          ..write('quantidadeVendida: $quantidadeVendida, ')
          ..write('aliquotaCofinsReais: $aliquotaCofinsReais, ')
          ..write('valorCofins: $valorCofins')
          ..write(')'))
        .toString();
  }
}

class $NfeDetalheImpostoIssqnsTable extends NfeDetalheImpostoIssqns
    with TableInfo<$NfeDetalheImpostoIssqnsTable, NfeDetalheImpostoIssqn> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeDetalheImpostoIssqnsTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
    'id',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idNfeDetalheMeta = const VerificationMeta(
    'idNfeDetalhe',
  );
  @override
  late final GeneratedColumn<int> idNfeDetalhe = GeneratedColumn<int>(
    'id_nfe_detalhe',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _baseCalculoIssqnMeta = const VerificationMeta(
    'baseCalculoIssqn',
  );
  @override
  late final GeneratedColumn<double> baseCalculoIssqn = GeneratedColumn<double>(
    'base_calculo_issqn',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _aliquotaIssqnMeta = const VerificationMeta(
    'aliquotaIssqn',
  );
  @override
  late final GeneratedColumn<double> aliquotaIssqn = GeneratedColumn<double>(
    'aliquota_issqn',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _valorIssqnMeta = const VerificationMeta(
    'valorIssqn',
  );
  @override
  late final GeneratedColumn<double> valorIssqn = GeneratedColumn<double>(
    'valor_issqn',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _municipioIssqnMeta = const VerificationMeta(
    'municipioIssqn',
  );
  @override
  late final GeneratedColumn<int> municipioIssqn = GeneratedColumn<int>(
    'municipio_issqn',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _itemListaServicosMeta = const VerificationMeta(
    'itemListaServicos',
  );
  @override
  late final GeneratedColumn<int> itemListaServicos = GeneratedColumn<int>(
    'item_lista_servicos',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _valorDeducaoMeta = const VerificationMeta(
    'valorDeducao',
  );
  @override
  late final GeneratedColumn<double> valorDeducao = GeneratedColumn<double>(
    'valor_deducao',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _valorOutrasRetencoesMeta =
      const VerificationMeta('valorOutrasRetencoes');
  @override
  late final GeneratedColumn<double> valorOutrasRetencoes =
      GeneratedColumn<double>(
        'valor_outras_retencoes',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _valorDescontoIncondicionadoMeta =
      const VerificationMeta('valorDescontoIncondicionado');
  @override
  late final GeneratedColumn<double> valorDescontoIncondicionado =
      GeneratedColumn<double>(
        'valor_desconto_incondicionado',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _valorDescontoCondicionadoMeta =
      const VerificationMeta('valorDescontoCondicionado');
  @override
  late final GeneratedColumn<double> valorDescontoCondicionado =
      GeneratedColumn<double>(
        'valor_desconto_condicionado',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _valorRetencaoIssMeta = const VerificationMeta(
    'valorRetencaoIss',
  );
  @override
  late final GeneratedColumn<double> valorRetencaoIss = GeneratedColumn<double>(
    'valor_retencao_iss',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _indicadorExigibilidadeIssMeta =
      const VerificationMeta('indicadorExigibilidadeIss');
  @override
  late final GeneratedColumn<String> indicadorExigibilidadeIss =
      GeneratedColumn<String>(
        'indicador_exigibilidade_iss',
        aliasedName,
        true,
        additionalChecks: GeneratedColumn.checkTextLength(
          minTextLength: 0,
          maxTextLength: 1,
        ),
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _codigoServicoMeta = const VerificationMeta(
    'codigoServico',
  );
  @override
  late final GeneratedColumn<String> codigoServico = GeneratedColumn<String>(
    'codigo_servico',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 20,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _municipioIncidenciaMeta =
      const VerificationMeta('municipioIncidencia');
  @override
  late final GeneratedColumn<int> municipioIncidencia = GeneratedColumn<int>(
    'municipio_incidencia',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _paisSevicoPrestadoMeta =
      const VerificationMeta('paisSevicoPrestado');
  @override
  late final GeneratedColumn<int> paisSevicoPrestado = GeneratedColumn<int>(
    'pais_sevico_prestado',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _numeroProcessoMeta = const VerificationMeta(
    'numeroProcesso',
  );
  @override
  late final GeneratedColumn<String> numeroProcesso = GeneratedColumn<String>(
    'numero_processo',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 30,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _indicadorIncentivoFiscalMeta =
      const VerificationMeta('indicadorIncentivoFiscal');
  @override
  late final GeneratedColumn<String> indicadorIncentivoFiscal =
      GeneratedColumn<String>(
        'indicador_incentivo_fiscal',
        aliasedName,
        true,
        additionalChecks: GeneratedColumn.checkTextLength(
          minTextLength: 0,
          maxTextLength: 1,
        ),
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    idNfeDetalhe,
    baseCalculoIssqn,
    aliquotaIssqn,
    valorIssqn,
    municipioIssqn,
    itemListaServicos,
    valorDeducao,
    valorOutrasRetencoes,
    valorDescontoIncondicionado,
    valorDescontoCondicionado,
    valorRetencaoIss,
    indicadorExigibilidadeIss,
    codigoServico,
    municipioIncidencia,
    paisSevicoPrestado,
    numeroProcesso,
    indicadorIncentivoFiscal,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'nfe_detalhe_imposto_issqn';
  @override
  VerificationContext validateIntegrity(
    Insertable<NfeDetalheImpostoIssqn> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('id_nfe_detalhe')) {
      context.handle(
        _idNfeDetalheMeta,
        idNfeDetalhe.isAcceptableOrUnknown(
          data['id_nfe_detalhe']!,
          _idNfeDetalheMeta,
        ),
      );
    }
    if (data.containsKey('base_calculo_issqn')) {
      context.handle(
        _baseCalculoIssqnMeta,
        baseCalculoIssqn.isAcceptableOrUnknown(
          data['base_calculo_issqn']!,
          _baseCalculoIssqnMeta,
        ),
      );
    }
    if (data.containsKey('aliquota_issqn')) {
      context.handle(
        _aliquotaIssqnMeta,
        aliquotaIssqn.isAcceptableOrUnknown(
          data['aliquota_issqn']!,
          _aliquotaIssqnMeta,
        ),
      );
    }
    if (data.containsKey('valor_issqn')) {
      context.handle(
        _valorIssqnMeta,
        valorIssqn.isAcceptableOrUnknown(data['valor_issqn']!, _valorIssqnMeta),
      );
    }
    if (data.containsKey('municipio_issqn')) {
      context.handle(
        _municipioIssqnMeta,
        municipioIssqn.isAcceptableOrUnknown(
          data['municipio_issqn']!,
          _municipioIssqnMeta,
        ),
      );
    }
    if (data.containsKey('item_lista_servicos')) {
      context.handle(
        _itemListaServicosMeta,
        itemListaServicos.isAcceptableOrUnknown(
          data['item_lista_servicos']!,
          _itemListaServicosMeta,
        ),
      );
    }
    if (data.containsKey('valor_deducao')) {
      context.handle(
        _valorDeducaoMeta,
        valorDeducao.isAcceptableOrUnknown(
          data['valor_deducao']!,
          _valorDeducaoMeta,
        ),
      );
    }
    if (data.containsKey('valor_outras_retencoes')) {
      context.handle(
        _valorOutrasRetencoesMeta,
        valorOutrasRetencoes.isAcceptableOrUnknown(
          data['valor_outras_retencoes']!,
          _valorOutrasRetencoesMeta,
        ),
      );
    }
    if (data.containsKey('valor_desconto_incondicionado')) {
      context.handle(
        _valorDescontoIncondicionadoMeta,
        valorDescontoIncondicionado.isAcceptableOrUnknown(
          data['valor_desconto_incondicionado']!,
          _valorDescontoIncondicionadoMeta,
        ),
      );
    }
    if (data.containsKey('valor_desconto_condicionado')) {
      context.handle(
        _valorDescontoCondicionadoMeta,
        valorDescontoCondicionado.isAcceptableOrUnknown(
          data['valor_desconto_condicionado']!,
          _valorDescontoCondicionadoMeta,
        ),
      );
    }
    if (data.containsKey('valor_retencao_iss')) {
      context.handle(
        _valorRetencaoIssMeta,
        valorRetencaoIss.isAcceptableOrUnknown(
          data['valor_retencao_iss']!,
          _valorRetencaoIssMeta,
        ),
      );
    }
    if (data.containsKey('indicador_exigibilidade_iss')) {
      context.handle(
        _indicadorExigibilidadeIssMeta,
        indicadorExigibilidadeIss.isAcceptableOrUnknown(
          data['indicador_exigibilidade_iss']!,
          _indicadorExigibilidadeIssMeta,
        ),
      );
    }
    if (data.containsKey('codigo_servico')) {
      context.handle(
        _codigoServicoMeta,
        codigoServico.isAcceptableOrUnknown(
          data['codigo_servico']!,
          _codigoServicoMeta,
        ),
      );
    }
    if (data.containsKey('municipio_incidencia')) {
      context.handle(
        _municipioIncidenciaMeta,
        municipioIncidencia.isAcceptableOrUnknown(
          data['municipio_incidencia']!,
          _municipioIncidenciaMeta,
        ),
      );
    }
    if (data.containsKey('pais_sevico_prestado')) {
      context.handle(
        _paisSevicoPrestadoMeta,
        paisSevicoPrestado.isAcceptableOrUnknown(
          data['pais_sevico_prestado']!,
          _paisSevicoPrestadoMeta,
        ),
      );
    }
    if (data.containsKey('numero_processo')) {
      context.handle(
        _numeroProcessoMeta,
        numeroProcesso.isAcceptableOrUnknown(
          data['numero_processo']!,
          _numeroProcessoMeta,
        ),
      );
    }
    if (data.containsKey('indicador_incentivo_fiscal')) {
      context.handle(
        _indicadorIncentivoFiscalMeta,
        indicadorIncentivoFiscal.isAcceptableOrUnknown(
          data['indicador_incentivo_fiscal']!,
          _indicadorIncentivoFiscalMeta,
        ),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeDetalheImpostoIssqn map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return NfeDetalheImpostoIssqn(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id'],
      ),
      idNfeDetalhe: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_nfe_detalhe'],
      ),
      baseCalculoIssqn: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}base_calculo_issqn'],
      ),
      aliquotaIssqn: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}aliquota_issqn'],
      ),
      valorIssqn: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_issqn'],
      ),
      municipioIssqn: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}municipio_issqn'],
      ),
      itemListaServicos: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}item_lista_servicos'],
      ),
      valorDeducao: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_deducao'],
      ),
      valorOutrasRetencoes: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_outras_retencoes'],
      ),
      valorDescontoIncondicionado: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_desconto_incondicionado'],
      ),
      valorDescontoCondicionado: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_desconto_condicionado'],
      ),
      valorRetencaoIss: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_retencao_iss'],
      ),
      indicadorExigibilidadeIss: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}indicador_exigibilidade_iss'],
      ),
      codigoServico: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}codigo_servico'],
      ),
      municipioIncidencia: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}municipio_incidencia'],
      ),
      paisSevicoPrestado: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}pais_sevico_prestado'],
      ),
      numeroProcesso: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}numero_processo'],
      ),
      indicadorIncentivoFiscal: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}indicador_incentivo_fiscal'],
      ),
    );
  }

  @override
  $NfeDetalheImpostoIssqnsTable createAlias(String alias) {
    return $NfeDetalheImpostoIssqnsTable(attachedDatabase, alias);
  }
}

class NfeDetalheImpostoIssqn extends DataClass
    implements Insertable<NfeDetalheImpostoIssqn> {
  final int? id;
  final int? idNfeDetalhe;
  final double? baseCalculoIssqn;
  final double? aliquotaIssqn;
  final double? valorIssqn;
  final int? municipioIssqn;
  final int? itemListaServicos;
  final double? valorDeducao;
  final double? valorOutrasRetencoes;
  final double? valorDescontoIncondicionado;
  final double? valorDescontoCondicionado;
  final double? valorRetencaoIss;
  final String? indicadorExigibilidadeIss;
  final String? codigoServico;
  final int? municipioIncidencia;
  final int? paisSevicoPrestado;
  final String? numeroProcesso;
  final String? indicadorIncentivoFiscal;
  const NfeDetalheImpostoIssqn({
    this.id,
    this.idNfeDetalhe,
    this.baseCalculoIssqn,
    this.aliquotaIssqn,
    this.valorIssqn,
    this.municipioIssqn,
    this.itemListaServicos,
    this.valorDeducao,
    this.valorOutrasRetencoes,
    this.valorDescontoIncondicionado,
    this.valorDescontoCondicionado,
    this.valorRetencaoIss,
    this.indicadorExigibilidadeIss,
    this.codigoServico,
    this.municipioIncidencia,
    this.paisSevicoPrestado,
    this.numeroProcesso,
    this.indicadorIncentivoFiscal,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeDetalhe != null) {
      map['id_nfe_detalhe'] = Variable<int>(idNfeDetalhe);
    }
    if (!nullToAbsent || baseCalculoIssqn != null) {
      map['base_calculo_issqn'] = Variable<double>(baseCalculoIssqn);
    }
    if (!nullToAbsent || aliquotaIssqn != null) {
      map['aliquota_issqn'] = Variable<double>(aliquotaIssqn);
    }
    if (!nullToAbsent || valorIssqn != null) {
      map['valor_issqn'] = Variable<double>(valorIssqn);
    }
    if (!nullToAbsent || municipioIssqn != null) {
      map['municipio_issqn'] = Variable<int>(municipioIssqn);
    }
    if (!nullToAbsent || itemListaServicos != null) {
      map['item_lista_servicos'] = Variable<int>(itemListaServicos);
    }
    if (!nullToAbsent || valorDeducao != null) {
      map['valor_deducao'] = Variable<double>(valorDeducao);
    }
    if (!nullToAbsent || valorOutrasRetencoes != null) {
      map['valor_outras_retencoes'] = Variable<double>(valorOutrasRetencoes);
    }
    if (!nullToAbsent || valorDescontoIncondicionado != null) {
      map['valor_desconto_incondicionado'] = Variable<double>(
        valorDescontoIncondicionado,
      );
    }
    if (!nullToAbsent || valorDescontoCondicionado != null) {
      map['valor_desconto_condicionado'] = Variable<double>(
        valorDescontoCondicionado,
      );
    }
    if (!nullToAbsent || valorRetencaoIss != null) {
      map['valor_retencao_iss'] = Variable<double>(valorRetencaoIss);
    }
    if (!nullToAbsent || indicadorExigibilidadeIss != null) {
      map['indicador_exigibilidade_iss'] = Variable<String>(
        indicadorExigibilidadeIss,
      );
    }
    if (!nullToAbsent || codigoServico != null) {
      map['codigo_servico'] = Variable<String>(codigoServico);
    }
    if (!nullToAbsent || municipioIncidencia != null) {
      map['municipio_incidencia'] = Variable<int>(municipioIncidencia);
    }
    if (!nullToAbsent || paisSevicoPrestado != null) {
      map['pais_sevico_prestado'] = Variable<int>(paisSevicoPrestado);
    }
    if (!nullToAbsent || numeroProcesso != null) {
      map['numero_processo'] = Variable<String>(numeroProcesso);
    }
    if (!nullToAbsent || indicadorIncentivoFiscal != null) {
      map['indicador_incentivo_fiscal'] = Variable<String>(
        indicadorIncentivoFiscal,
      );
    }
    return map;
  }

  factory NfeDetalheImpostoIssqn.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeDetalheImpostoIssqn(
      id: serializer.fromJson<int?>(json['id']),
      idNfeDetalhe: serializer.fromJson<int?>(json['idNfeDetalhe']),
      baseCalculoIssqn: serializer.fromJson<double?>(json['baseCalculoIssqn']),
      aliquotaIssqn: serializer.fromJson<double?>(json['aliquotaIssqn']),
      valorIssqn: serializer.fromJson<double?>(json['valorIssqn']),
      municipioIssqn: serializer.fromJson<int?>(json['municipioIssqn']),
      itemListaServicos: serializer.fromJson<int?>(json['itemListaServicos']),
      valorDeducao: serializer.fromJson<double?>(json['valorDeducao']),
      valorOutrasRetencoes: serializer.fromJson<double?>(
        json['valorOutrasRetencoes'],
      ),
      valorDescontoIncondicionado: serializer.fromJson<double?>(
        json['valorDescontoIncondicionado'],
      ),
      valorDescontoCondicionado: serializer.fromJson<double?>(
        json['valorDescontoCondicionado'],
      ),
      valorRetencaoIss: serializer.fromJson<double?>(json['valorRetencaoIss']),
      indicadorExigibilidadeIss: serializer.fromJson<String?>(
        json['indicadorExigibilidadeIss'],
      ),
      codigoServico: serializer.fromJson<String?>(json['codigoServico']),
      municipioIncidencia: serializer.fromJson<int?>(
        json['municipioIncidencia'],
      ),
      paisSevicoPrestado: serializer.fromJson<int?>(json['paisSevicoPrestado']),
      numeroProcesso: serializer.fromJson<String?>(json['numeroProcesso']),
      indicadorIncentivoFiscal: serializer.fromJson<String?>(
        json['indicadorIncentivoFiscal'],
      ),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeDetalhe': serializer.toJson<int?>(idNfeDetalhe),
      'baseCalculoIssqn': serializer.toJson<double?>(baseCalculoIssqn),
      'aliquotaIssqn': serializer.toJson<double?>(aliquotaIssqn),
      'valorIssqn': serializer.toJson<double?>(valorIssqn),
      'municipioIssqn': serializer.toJson<int?>(municipioIssqn),
      'itemListaServicos': serializer.toJson<int?>(itemListaServicos),
      'valorDeducao': serializer.toJson<double?>(valorDeducao),
      'valorOutrasRetencoes': serializer.toJson<double?>(valorOutrasRetencoes),
      'valorDescontoIncondicionado': serializer.toJson<double?>(
        valorDescontoIncondicionado,
      ),
      'valorDescontoCondicionado': serializer.toJson<double?>(
        valorDescontoCondicionado,
      ),
      'valorRetencaoIss': serializer.toJson<double?>(valorRetencaoIss),
      'indicadorExigibilidadeIss': serializer.toJson<String?>(
        indicadorExigibilidadeIss,
      ),
      'codigoServico': serializer.toJson<String?>(codigoServico),
      'municipioIncidencia': serializer.toJson<int?>(municipioIncidencia),
      'paisSevicoPrestado': serializer.toJson<int?>(paisSevicoPrestado),
      'numeroProcesso': serializer.toJson<String?>(numeroProcesso),
      'indicadorIncentivoFiscal': serializer.toJson<String?>(
        indicadorIncentivoFiscal,
      ),
    };
  }

  NfeDetalheImpostoIssqn copyWith({
    Value<int?> id = const Value.absent(),
    Value<int?> idNfeDetalhe = const Value.absent(),
    Value<double?> baseCalculoIssqn = const Value.absent(),
    Value<double?> aliquotaIssqn = const Value.absent(),
    Value<double?> valorIssqn = const Value.absent(),
    Value<int?> municipioIssqn = const Value.absent(),
    Value<int?> itemListaServicos = const Value.absent(),
    Value<double?> valorDeducao = const Value.absent(),
    Value<double?> valorOutrasRetencoes = const Value.absent(),
    Value<double?> valorDescontoIncondicionado = const Value.absent(),
    Value<double?> valorDescontoCondicionado = const Value.absent(),
    Value<double?> valorRetencaoIss = const Value.absent(),
    Value<String?> indicadorExigibilidadeIss = const Value.absent(),
    Value<String?> codigoServico = const Value.absent(),
    Value<int?> municipioIncidencia = const Value.absent(),
    Value<int?> paisSevicoPrestado = const Value.absent(),
    Value<String?> numeroProcesso = const Value.absent(),
    Value<String?> indicadorIncentivoFiscal = const Value.absent(),
  }) => NfeDetalheImpostoIssqn(
    id: id.present ? id.value : this.id,
    idNfeDetalhe: idNfeDetalhe.present ? idNfeDetalhe.value : this.idNfeDetalhe,
    baseCalculoIssqn:
        baseCalculoIssqn.present
            ? baseCalculoIssqn.value
            : this.baseCalculoIssqn,
    aliquotaIssqn:
        aliquotaIssqn.present ? aliquotaIssqn.value : this.aliquotaIssqn,
    valorIssqn: valorIssqn.present ? valorIssqn.value : this.valorIssqn,
    municipioIssqn:
        municipioIssqn.present ? municipioIssqn.value : this.municipioIssqn,
    itemListaServicos:
        itemListaServicos.present
            ? itemListaServicos.value
            : this.itemListaServicos,
    valorDeducao: valorDeducao.present ? valorDeducao.value : this.valorDeducao,
    valorOutrasRetencoes:
        valorOutrasRetencoes.present
            ? valorOutrasRetencoes.value
            : this.valorOutrasRetencoes,
    valorDescontoIncondicionado:
        valorDescontoIncondicionado.present
            ? valorDescontoIncondicionado.value
            : this.valorDescontoIncondicionado,
    valorDescontoCondicionado:
        valorDescontoCondicionado.present
            ? valorDescontoCondicionado.value
            : this.valorDescontoCondicionado,
    valorRetencaoIss:
        valorRetencaoIss.present
            ? valorRetencaoIss.value
            : this.valorRetencaoIss,
    indicadorExigibilidadeIss:
        indicadorExigibilidadeIss.present
            ? indicadorExigibilidadeIss.value
            : this.indicadorExigibilidadeIss,
    codigoServico:
        codigoServico.present ? codigoServico.value : this.codigoServico,
    municipioIncidencia:
        municipioIncidencia.present
            ? municipioIncidencia.value
            : this.municipioIncidencia,
    paisSevicoPrestado:
        paisSevicoPrestado.present
            ? paisSevicoPrestado.value
            : this.paisSevicoPrestado,
    numeroProcesso:
        numeroProcesso.present ? numeroProcesso.value : this.numeroProcesso,
    indicadorIncentivoFiscal:
        indicadorIncentivoFiscal.present
            ? indicadorIncentivoFiscal.value
            : this.indicadorIncentivoFiscal,
  );
  NfeDetalheImpostoIssqn copyWithCompanion(
    NfeDetalheImpostoIssqnsCompanion data,
  ) {
    return NfeDetalheImpostoIssqn(
      id: data.id.present ? data.id.value : this.id,
      idNfeDetalhe:
          data.idNfeDetalhe.present
              ? data.idNfeDetalhe.value
              : this.idNfeDetalhe,
      baseCalculoIssqn:
          data.baseCalculoIssqn.present
              ? data.baseCalculoIssqn.value
              : this.baseCalculoIssqn,
      aliquotaIssqn:
          data.aliquotaIssqn.present
              ? data.aliquotaIssqn.value
              : this.aliquotaIssqn,
      valorIssqn:
          data.valorIssqn.present ? data.valorIssqn.value : this.valorIssqn,
      municipioIssqn:
          data.municipioIssqn.present
              ? data.municipioIssqn.value
              : this.municipioIssqn,
      itemListaServicos:
          data.itemListaServicos.present
              ? data.itemListaServicos.value
              : this.itemListaServicos,
      valorDeducao:
          data.valorDeducao.present
              ? data.valorDeducao.value
              : this.valorDeducao,
      valorOutrasRetencoes:
          data.valorOutrasRetencoes.present
              ? data.valorOutrasRetencoes.value
              : this.valorOutrasRetencoes,
      valorDescontoIncondicionado:
          data.valorDescontoIncondicionado.present
              ? data.valorDescontoIncondicionado.value
              : this.valorDescontoIncondicionado,
      valorDescontoCondicionado:
          data.valorDescontoCondicionado.present
              ? data.valorDescontoCondicionado.value
              : this.valorDescontoCondicionado,
      valorRetencaoIss:
          data.valorRetencaoIss.present
              ? data.valorRetencaoIss.value
              : this.valorRetencaoIss,
      indicadorExigibilidadeIss:
          data.indicadorExigibilidadeIss.present
              ? data.indicadorExigibilidadeIss.value
              : this.indicadorExigibilidadeIss,
      codigoServico:
          data.codigoServico.present
              ? data.codigoServico.value
              : this.codigoServico,
      municipioIncidencia:
          data.municipioIncidencia.present
              ? data.municipioIncidencia.value
              : this.municipioIncidencia,
      paisSevicoPrestado:
          data.paisSevicoPrestado.present
              ? data.paisSevicoPrestado.value
              : this.paisSevicoPrestado,
      numeroProcesso:
          data.numeroProcesso.present
              ? data.numeroProcesso.value
              : this.numeroProcesso,
      indicadorIncentivoFiscal:
          data.indicadorIncentivoFiscal.present
              ? data.indicadorIncentivoFiscal.value
              : this.indicadorIncentivoFiscal,
    );
  }

  @override
  String toString() {
    return (StringBuffer('NfeDetalheImpostoIssqn(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('baseCalculoIssqn: $baseCalculoIssqn, ')
          ..write('aliquotaIssqn: $aliquotaIssqn, ')
          ..write('valorIssqn: $valorIssqn, ')
          ..write('municipioIssqn: $municipioIssqn, ')
          ..write('itemListaServicos: $itemListaServicos, ')
          ..write('valorDeducao: $valorDeducao, ')
          ..write('valorOutrasRetencoes: $valorOutrasRetencoes, ')
          ..write('valorDescontoIncondicionado: $valorDescontoIncondicionado, ')
          ..write('valorDescontoCondicionado: $valorDescontoCondicionado, ')
          ..write('valorRetencaoIss: $valorRetencaoIss, ')
          ..write('indicadorExigibilidadeIss: $indicadorExigibilidadeIss, ')
          ..write('codigoServico: $codigoServico, ')
          ..write('municipioIncidencia: $municipioIncidencia, ')
          ..write('paisSevicoPrestado: $paisSevicoPrestado, ')
          ..write('numeroProcesso: $numeroProcesso, ')
          ..write('indicadorIncentivoFiscal: $indicadorIncentivoFiscal')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    idNfeDetalhe,
    baseCalculoIssqn,
    aliquotaIssqn,
    valorIssqn,
    municipioIssqn,
    itemListaServicos,
    valorDeducao,
    valorOutrasRetencoes,
    valorDescontoIncondicionado,
    valorDescontoCondicionado,
    valorRetencaoIss,
    indicadorExigibilidadeIss,
    codigoServico,
    municipioIncidencia,
    paisSevicoPrestado,
    numeroProcesso,
    indicadorIncentivoFiscal,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeDetalheImpostoIssqn &&
          other.id == this.id &&
          other.idNfeDetalhe == this.idNfeDetalhe &&
          other.baseCalculoIssqn == this.baseCalculoIssqn &&
          other.aliquotaIssqn == this.aliquotaIssqn &&
          other.valorIssqn == this.valorIssqn &&
          other.municipioIssqn == this.municipioIssqn &&
          other.itemListaServicos == this.itemListaServicos &&
          other.valorDeducao == this.valorDeducao &&
          other.valorOutrasRetencoes == this.valorOutrasRetencoes &&
          other.valorDescontoIncondicionado ==
              this.valorDescontoIncondicionado &&
          other.valorDescontoCondicionado == this.valorDescontoCondicionado &&
          other.valorRetencaoIss == this.valorRetencaoIss &&
          other.indicadorExigibilidadeIss == this.indicadorExigibilidadeIss &&
          other.codigoServico == this.codigoServico &&
          other.municipioIncidencia == this.municipioIncidencia &&
          other.paisSevicoPrestado == this.paisSevicoPrestado &&
          other.numeroProcesso == this.numeroProcesso &&
          other.indicadorIncentivoFiscal == this.indicadorIncentivoFiscal);
}

class NfeDetalheImpostoIssqnsCompanion
    extends UpdateCompanion<NfeDetalheImpostoIssqn> {
  final Value<int?> id;
  final Value<int?> idNfeDetalhe;
  final Value<double?> baseCalculoIssqn;
  final Value<double?> aliquotaIssqn;
  final Value<double?> valorIssqn;
  final Value<int?> municipioIssqn;
  final Value<int?> itemListaServicos;
  final Value<double?> valorDeducao;
  final Value<double?> valorOutrasRetencoes;
  final Value<double?> valorDescontoIncondicionado;
  final Value<double?> valorDescontoCondicionado;
  final Value<double?> valorRetencaoIss;
  final Value<String?> indicadorExigibilidadeIss;
  final Value<String?> codigoServico;
  final Value<int?> municipioIncidencia;
  final Value<int?> paisSevicoPrestado;
  final Value<String?> numeroProcesso;
  final Value<String?> indicadorIncentivoFiscal;
  const NfeDetalheImpostoIssqnsCompanion({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.baseCalculoIssqn = const Value.absent(),
    this.aliquotaIssqn = const Value.absent(),
    this.valorIssqn = const Value.absent(),
    this.municipioIssqn = const Value.absent(),
    this.itemListaServicos = const Value.absent(),
    this.valorDeducao = const Value.absent(),
    this.valorOutrasRetencoes = const Value.absent(),
    this.valorDescontoIncondicionado = const Value.absent(),
    this.valorDescontoCondicionado = const Value.absent(),
    this.valorRetencaoIss = const Value.absent(),
    this.indicadorExigibilidadeIss = const Value.absent(),
    this.codigoServico = const Value.absent(),
    this.municipioIncidencia = const Value.absent(),
    this.paisSevicoPrestado = const Value.absent(),
    this.numeroProcesso = const Value.absent(),
    this.indicadorIncentivoFiscal = const Value.absent(),
  });
  NfeDetalheImpostoIssqnsCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.baseCalculoIssqn = const Value.absent(),
    this.aliquotaIssqn = const Value.absent(),
    this.valorIssqn = const Value.absent(),
    this.municipioIssqn = const Value.absent(),
    this.itemListaServicos = const Value.absent(),
    this.valorDeducao = const Value.absent(),
    this.valorOutrasRetencoes = const Value.absent(),
    this.valorDescontoIncondicionado = const Value.absent(),
    this.valorDescontoCondicionado = const Value.absent(),
    this.valorRetencaoIss = const Value.absent(),
    this.indicadorExigibilidadeIss = const Value.absent(),
    this.codigoServico = const Value.absent(),
    this.municipioIncidencia = const Value.absent(),
    this.paisSevicoPrestado = const Value.absent(),
    this.numeroProcesso = const Value.absent(),
    this.indicadorIncentivoFiscal = const Value.absent(),
  });
  static Insertable<NfeDetalheImpostoIssqn> custom({
    Expression<int>? id,
    Expression<int>? idNfeDetalhe,
    Expression<double>? baseCalculoIssqn,
    Expression<double>? aliquotaIssqn,
    Expression<double>? valorIssqn,
    Expression<int>? municipioIssqn,
    Expression<int>? itemListaServicos,
    Expression<double>? valorDeducao,
    Expression<double>? valorOutrasRetencoes,
    Expression<double>? valorDescontoIncondicionado,
    Expression<double>? valorDescontoCondicionado,
    Expression<double>? valorRetencaoIss,
    Expression<String>? indicadorExigibilidadeIss,
    Expression<String>? codigoServico,
    Expression<int>? municipioIncidencia,
    Expression<int>? paisSevicoPrestado,
    Expression<String>? numeroProcesso,
    Expression<String>? indicadorIncentivoFiscal,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (idNfeDetalhe != null) 'id_nfe_detalhe': idNfeDetalhe,
      if (baseCalculoIssqn != null) 'base_calculo_issqn': baseCalculoIssqn,
      if (aliquotaIssqn != null) 'aliquota_issqn': aliquotaIssqn,
      if (valorIssqn != null) 'valor_issqn': valorIssqn,
      if (municipioIssqn != null) 'municipio_issqn': municipioIssqn,
      if (itemListaServicos != null) 'item_lista_servicos': itemListaServicos,
      if (valorDeducao != null) 'valor_deducao': valorDeducao,
      if (valorOutrasRetencoes != null)
        'valor_outras_retencoes': valorOutrasRetencoes,
      if (valorDescontoIncondicionado != null)
        'valor_desconto_incondicionado': valorDescontoIncondicionado,
      if (valorDescontoCondicionado != null)
        'valor_desconto_condicionado': valorDescontoCondicionado,
      if (valorRetencaoIss != null) 'valor_retencao_iss': valorRetencaoIss,
      if (indicadorExigibilidadeIss != null)
        'indicador_exigibilidade_iss': indicadorExigibilidadeIss,
      if (codigoServico != null) 'codigo_servico': codigoServico,
      if (municipioIncidencia != null)
        'municipio_incidencia': municipioIncidencia,
      if (paisSevicoPrestado != null)
        'pais_sevico_prestado': paisSevicoPrestado,
      if (numeroProcesso != null) 'numero_processo': numeroProcesso,
      if (indicadorIncentivoFiscal != null)
        'indicador_incentivo_fiscal': indicadorIncentivoFiscal,
    });
  }

  NfeDetalheImpostoIssqnsCompanion copyWith({
    Value<int?>? id,
    Value<int?>? idNfeDetalhe,
    Value<double?>? baseCalculoIssqn,
    Value<double?>? aliquotaIssqn,
    Value<double?>? valorIssqn,
    Value<int?>? municipioIssqn,
    Value<int?>? itemListaServicos,
    Value<double?>? valorDeducao,
    Value<double?>? valorOutrasRetencoes,
    Value<double?>? valorDescontoIncondicionado,
    Value<double?>? valorDescontoCondicionado,
    Value<double?>? valorRetencaoIss,
    Value<String?>? indicadorExigibilidadeIss,
    Value<String?>? codigoServico,
    Value<int?>? municipioIncidencia,
    Value<int?>? paisSevicoPrestado,
    Value<String?>? numeroProcesso,
    Value<String?>? indicadorIncentivoFiscal,
  }) {
    return NfeDetalheImpostoIssqnsCompanion(
      id: id ?? this.id,
      idNfeDetalhe: idNfeDetalhe ?? this.idNfeDetalhe,
      baseCalculoIssqn: baseCalculoIssqn ?? this.baseCalculoIssqn,
      aliquotaIssqn: aliquotaIssqn ?? this.aliquotaIssqn,
      valorIssqn: valorIssqn ?? this.valorIssqn,
      municipioIssqn: municipioIssqn ?? this.municipioIssqn,
      itemListaServicos: itemListaServicos ?? this.itemListaServicos,
      valorDeducao: valorDeducao ?? this.valorDeducao,
      valorOutrasRetencoes: valorOutrasRetencoes ?? this.valorOutrasRetencoes,
      valorDescontoIncondicionado:
          valorDescontoIncondicionado ?? this.valorDescontoIncondicionado,
      valorDescontoCondicionado:
          valorDescontoCondicionado ?? this.valorDescontoCondicionado,
      valorRetencaoIss: valorRetencaoIss ?? this.valorRetencaoIss,
      indicadorExigibilidadeIss:
          indicadorExigibilidadeIss ?? this.indicadorExigibilidadeIss,
      codigoServico: codigoServico ?? this.codigoServico,
      municipioIncidencia: municipioIncidencia ?? this.municipioIncidencia,
      paisSevicoPrestado: paisSevicoPrestado ?? this.paisSevicoPrestado,
      numeroProcesso: numeroProcesso ?? this.numeroProcesso,
      indicadorIncentivoFiscal:
          indicadorIncentivoFiscal ?? this.indicadorIncentivoFiscal,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (idNfeDetalhe.present) {
      map['id_nfe_detalhe'] = Variable<int>(idNfeDetalhe.value);
    }
    if (baseCalculoIssqn.present) {
      map['base_calculo_issqn'] = Variable<double>(baseCalculoIssqn.value);
    }
    if (aliquotaIssqn.present) {
      map['aliquota_issqn'] = Variable<double>(aliquotaIssqn.value);
    }
    if (valorIssqn.present) {
      map['valor_issqn'] = Variable<double>(valorIssqn.value);
    }
    if (municipioIssqn.present) {
      map['municipio_issqn'] = Variable<int>(municipioIssqn.value);
    }
    if (itemListaServicos.present) {
      map['item_lista_servicos'] = Variable<int>(itemListaServicos.value);
    }
    if (valorDeducao.present) {
      map['valor_deducao'] = Variable<double>(valorDeducao.value);
    }
    if (valorOutrasRetencoes.present) {
      map['valor_outras_retencoes'] = Variable<double>(
        valorOutrasRetencoes.value,
      );
    }
    if (valorDescontoIncondicionado.present) {
      map['valor_desconto_incondicionado'] = Variable<double>(
        valorDescontoIncondicionado.value,
      );
    }
    if (valorDescontoCondicionado.present) {
      map['valor_desconto_condicionado'] = Variable<double>(
        valorDescontoCondicionado.value,
      );
    }
    if (valorRetencaoIss.present) {
      map['valor_retencao_iss'] = Variable<double>(valorRetencaoIss.value);
    }
    if (indicadorExigibilidadeIss.present) {
      map['indicador_exigibilidade_iss'] = Variable<String>(
        indicadorExigibilidadeIss.value,
      );
    }
    if (codigoServico.present) {
      map['codigo_servico'] = Variable<String>(codigoServico.value);
    }
    if (municipioIncidencia.present) {
      map['municipio_incidencia'] = Variable<int>(municipioIncidencia.value);
    }
    if (paisSevicoPrestado.present) {
      map['pais_sevico_prestado'] = Variable<int>(paisSevicoPrestado.value);
    }
    if (numeroProcesso.present) {
      map['numero_processo'] = Variable<String>(numeroProcesso.value);
    }
    if (indicadorIncentivoFiscal.present) {
      map['indicador_incentivo_fiscal'] = Variable<String>(
        indicadorIncentivoFiscal.value,
      );
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeDetalheImpostoIssqnsCompanion(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('baseCalculoIssqn: $baseCalculoIssqn, ')
          ..write('aliquotaIssqn: $aliquotaIssqn, ')
          ..write('valorIssqn: $valorIssqn, ')
          ..write('municipioIssqn: $municipioIssqn, ')
          ..write('itemListaServicos: $itemListaServicos, ')
          ..write('valorDeducao: $valorDeducao, ')
          ..write('valorOutrasRetencoes: $valorOutrasRetencoes, ')
          ..write('valorDescontoIncondicionado: $valorDescontoIncondicionado, ')
          ..write('valorDescontoCondicionado: $valorDescontoCondicionado, ')
          ..write('valorRetencaoIss: $valorRetencaoIss, ')
          ..write('indicadorExigibilidadeIss: $indicadorExigibilidadeIss, ')
          ..write('codigoServico: $codigoServico, ')
          ..write('municipioIncidencia: $municipioIncidencia, ')
          ..write('paisSevicoPrestado: $paisSevicoPrestado, ')
          ..write('numeroProcesso: $numeroProcesso, ')
          ..write('indicadorIncentivoFiscal: $indicadorIncentivoFiscal')
          ..write(')'))
        .toString();
  }
}

class $NfeTransporteReboquesTable extends NfeTransporteReboques
    with TableInfo<$NfeTransporteReboquesTable, NfeTransporteReboque> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeTransporteReboquesTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
    'id',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idNfeTransporteMeta = const VerificationMeta(
    'idNfeTransporte',
  );
  @override
  late final GeneratedColumn<int> idNfeTransporte = GeneratedColumn<int>(
    'id_nfe_transporte',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _placaMeta = const VerificationMeta('placa');
  @override
  late final GeneratedColumn<String> placa = GeneratedColumn<String>(
    'placa',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 8,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _ufMeta = const VerificationMeta('uf');
  @override
  late final GeneratedColumn<String> uf = GeneratedColumn<String>(
    'uf',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 2,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _rntcMeta = const VerificationMeta('rntc');
  @override
  late final GeneratedColumn<String> rntc = GeneratedColumn<String>(
    'rntc',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 20,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _vagaoMeta = const VerificationMeta('vagao');
  @override
  late final GeneratedColumn<String> vagao = GeneratedColumn<String>(
    'vagao',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 20,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _balsaMeta = const VerificationMeta('balsa');
  @override
  late final GeneratedColumn<String> balsa = GeneratedColumn<String>(
    'balsa',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 20,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    idNfeTransporte,
    placa,
    uf,
    rntc,
    vagao,
    balsa,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'nfe_transporte_reboque';
  @override
  VerificationContext validateIntegrity(
    Insertable<NfeTransporteReboque> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('id_nfe_transporte')) {
      context.handle(
        _idNfeTransporteMeta,
        idNfeTransporte.isAcceptableOrUnknown(
          data['id_nfe_transporte']!,
          _idNfeTransporteMeta,
        ),
      );
    }
    if (data.containsKey('placa')) {
      context.handle(
        _placaMeta,
        placa.isAcceptableOrUnknown(data['placa']!, _placaMeta),
      );
    }
    if (data.containsKey('uf')) {
      context.handle(_ufMeta, uf.isAcceptableOrUnknown(data['uf']!, _ufMeta));
    }
    if (data.containsKey('rntc')) {
      context.handle(
        _rntcMeta,
        rntc.isAcceptableOrUnknown(data['rntc']!, _rntcMeta),
      );
    }
    if (data.containsKey('vagao')) {
      context.handle(
        _vagaoMeta,
        vagao.isAcceptableOrUnknown(data['vagao']!, _vagaoMeta),
      );
    }
    if (data.containsKey('balsa')) {
      context.handle(
        _balsaMeta,
        balsa.isAcceptableOrUnknown(data['balsa']!, _balsaMeta),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeTransporteReboque map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return NfeTransporteReboque(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id'],
      ),
      idNfeTransporte: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_nfe_transporte'],
      ),
      placa: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}placa'],
      ),
      uf: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}uf'],
      ),
      rntc: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}rntc'],
      ),
      vagao: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}vagao'],
      ),
      balsa: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}balsa'],
      ),
    );
  }

  @override
  $NfeTransporteReboquesTable createAlias(String alias) {
    return $NfeTransporteReboquesTable(attachedDatabase, alias);
  }
}

class NfeTransporteReboque extends DataClass
    implements Insertable<NfeTransporteReboque> {
  final int? id;
  final int? idNfeTransporte;
  final String? placa;
  final String? uf;
  final String? rntc;
  final String? vagao;
  final String? balsa;
  const NfeTransporteReboque({
    this.id,
    this.idNfeTransporte,
    this.placa,
    this.uf,
    this.rntc,
    this.vagao,
    this.balsa,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeTransporte != null) {
      map['id_nfe_transporte'] = Variable<int>(idNfeTransporte);
    }
    if (!nullToAbsent || placa != null) {
      map['placa'] = Variable<String>(placa);
    }
    if (!nullToAbsent || uf != null) {
      map['uf'] = Variable<String>(uf);
    }
    if (!nullToAbsent || rntc != null) {
      map['rntc'] = Variable<String>(rntc);
    }
    if (!nullToAbsent || vagao != null) {
      map['vagao'] = Variable<String>(vagao);
    }
    if (!nullToAbsent || balsa != null) {
      map['balsa'] = Variable<String>(balsa);
    }
    return map;
  }

  factory NfeTransporteReboque.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeTransporteReboque(
      id: serializer.fromJson<int?>(json['id']),
      idNfeTransporte: serializer.fromJson<int?>(json['idNfeTransporte']),
      placa: serializer.fromJson<String?>(json['placa']),
      uf: serializer.fromJson<String?>(json['uf']),
      rntc: serializer.fromJson<String?>(json['rntc']),
      vagao: serializer.fromJson<String?>(json['vagao']),
      balsa: serializer.fromJson<String?>(json['balsa']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeTransporte': serializer.toJson<int?>(idNfeTransporte),
      'placa': serializer.toJson<String?>(placa),
      'uf': serializer.toJson<String?>(uf),
      'rntc': serializer.toJson<String?>(rntc),
      'vagao': serializer.toJson<String?>(vagao),
      'balsa': serializer.toJson<String?>(balsa),
    };
  }

  NfeTransporteReboque copyWith({
    Value<int?> id = const Value.absent(),
    Value<int?> idNfeTransporte = const Value.absent(),
    Value<String?> placa = const Value.absent(),
    Value<String?> uf = const Value.absent(),
    Value<String?> rntc = const Value.absent(),
    Value<String?> vagao = const Value.absent(),
    Value<String?> balsa = const Value.absent(),
  }) => NfeTransporteReboque(
    id: id.present ? id.value : this.id,
    idNfeTransporte:
        idNfeTransporte.present ? idNfeTransporte.value : this.idNfeTransporte,
    placa: placa.present ? placa.value : this.placa,
    uf: uf.present ? uf.value : this.uf,
    rntc: rntc.present ? rntc.value : this.rntc,
    vagao: vagao.present ? vagao.value : this.vagao,
    balsa: balsa.present ? balsa.value : this.balsa,
  );
  NfeTransporteReboque copyWithCompanion(NfeTransporteReboquesCompanion data) {
    return NfeTransporteReboque(
      id: data.id.present ? data.id.value : this.id,
      idNfeTransporte:
          data.idNfeTransporte.present
              ? data.idNfeTransporte.value
              : this.idNfeTransporte,
      placa: data.placa.present ? data.placa.value : this.placa,
      uf: data.uf.present ? data.uf.value : this.uf,
      rntc: data.rntc.present ? data.rntc.value : this.rntc,
      vagao: data.vagao.present ? data.vagao.value : this.vagao,
      balsa: data.balsa.present ? data.balsa.value : this.balsa,
    );
  }

  @override
  String toString() {
    return (StringBuffer('NfeTransporteReboque(')
          ..write('id: $id, ')
          ..write('idNfeTransporte: $idNfeTransporte, ')
          ..write('placa: $placa, ')
          ..write('uf: $uf, ')
          ..write('rntc: $rntc, ')
          ..write('vagao: $vagao, ')
          ..write('balsa: $balsa')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode =>
      Object.hash(id, idNfeTransporte, placa, uf, rntc, vagao, balsa);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeTransporteReboque &&
          other.id == this.id &&
          other.idNfeTransporte == this.idNfeTransporte &&
          other.placa == this.placa &&
          other.uf == this.uf &&
          other.rntc == this.rntc &&
          other.vagao == this.vagao &&
          other.balsa == this.balsa);
}

class NfeTransporteReboquesCompanion
    extends UpdateCompanion<NfeTransporteReboque> {
  final Value<int?> id;
  final Value<int?> idNfeTransporte;
  final Value<String?> placa;
  final Value<String?> uf;
  final Value<String?> rntc;
  final Value<String?> vagao;
  final Value<String?> balsa;
  const NfeTransporteReboquesCompanion({
    this.id = const Value.absent(),
    this.idNfeTransporte = const Value.absent(),
    this.placa = const Value.absent(),
    this.uf = const Value.absent(),
    this.rntc = const Value.absent(),
    this.vagao = const Value.absent(),
    this.balsa = const Value.absent(),
  });
  NfeTransporteReboquesCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeTransporte = const Value.absent(),
    this.placa = const Value.absent(),
    this.uf = const Value.absent(),
    this.rntc = const Value.absent(),
    this.vagao = const Value.absent(),
    this.balsa = const Value.absent(),
  });
  static Insertable<NfeTransporteReboque> custom({
    Expression<int>? id,
    Expression<int>? idNfeTransporte,
    Expression<String>? placa,
    Expression<String>? uf,
    Expression<String>? rntc,
    Expression<String>? vagao,
    Expression<String>? balsa,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (idNfeTransporte != null) 'id_nfe_transporte': idNfeTransporte,
      if (placa != null) 'placa': placa,
      if (uf != null) 'uf': uf,
      if (rntc != null) 'rntc': rntc,
      if (vagao != null) 'vagao': vagao,
      if (balsa != null) 'balsa': balsa,
    });
  }

  NfeTransporteReboquesCompanion copyWith({
    Value<int?>? id,
    Value<int?>? idNfeTransporte,
    Value<String?>? placa,
    Value<String?>? uf,
    Value<String?>? rntc,
    Value<String?>? vagao,
    Value<String?>? balsa,
  }) {
    return NfeTransporteReboquesCompanion(
      id: id ?? this.id,
      idNfeTransporte: idNfeTransporte ?? this.idNfeTransporte,
      placa: placa ?? this.placa,
      uf: uf ?? this.uf,
      rntc: rntc ?? this.rntc,
      vagao: vagao ?? this.vagao,
      balsa: balsa ?? this.balsa,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (idNfeTransporte.present) {
      map['id_nfe_transporte'] = Variable<int>(idNfeTransporte.value);
    }
    if (placa.present) {
      map['placa'] = Variable<String>(placa.value);
    }
    if (uf.present) {
      map['uf'] = Variable<String>(uf.value);
    }
    if (rntc.present) {
      map['rntc'] = Variable<String>(rntc.value);
    }
    if (vagao.present) {
      map['vagao'] = Variable<String>(vagao.value);
    }
    if (balsa.present) {
      map['balsa'] = Variable<String>(balsa.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeTransporteReboquesCompanion(')
          ..write('id: $id, ')
          ..write('idNfeTransporte: $idNfeTransporte, ')
          ..write('placa: $placa, ')
          ..write('uf: $uf, ')
          ..write('rntc: $rntc, ')
          ..write('vagao: $vagao, ')
          ..write('balsa: $balsa')
          ..write(')'))
        .toString();
  }
}

class $NfeTransporteVolumeLacresTable extends NfeTransporteVolumeLacres
    with TableInfo<$NfeTransporteVolumeLacresTable, NfeTransporteVolumeLacre> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeTransporteVolumeLacresTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
    'id',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idNfeTransporteVolumeMeta =
      const VerificationMeta('idNfeTransporteVolume');
  @override
  late final GeneratedColumn<int> idNfeTransporteVolume = GeneratedColumn<int>(
    'id_nfe_transporte_volume',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _numeroMeta = const VerificationMeta('numero');
  @override
  late final GeneratedColumn<String> numero = GeneratedColumn<String>(
    'numero',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 60,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  @override
  List<GeneratedColumn> get $columns => [id, idNfeTransporteVolume, numero];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'nfe_transporte_volume_lacre';
  @override
  VerificationContext validateIntegrity(
    Insertable<NfeTransporteVolumeLacre> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('id_nfe_transporte_volume')) {
      context.handle(
        _idNfeTransporteVolumeMeta,
        idNfeTransporteVolume.isAcceptableOrUnknown(
          data['id_nfe_transporte_volume']!,
          _idNfeTransporteVolumeMeta,
        ),
      );
    }
    if (data.containsKey('numero')) {
      context.handle(
        _numeroMeta,
        numero.isAcceptableOrUnknown(data['numero']!, _numeroMeta),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeTransporteVolumeLacre map(
    Map<String, dynamic> data, {
    String? tablePrefix,
  }) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return NfeTransporteVolumeLacre(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id'],
      ),
      idNfeTransporteVolume: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_nfe_transporte_volume'],
      ),
      numero: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}numero'],
      ),
    );
  }

  @override
  $NfeTransporteVolumeLacresTable createAlias(String alias) {
    return $NfeTransporteVolumeLacresTable(attachedDatabase, alias);
  }
}

class NfeTransporteVolumeLacre extends DataClass
    implements Insertable<NfeTransporteVolumeLacre> {
  final int? id;
  final int? idNfeTransporteVolume;
  final String? numero;
  const NfeTransporteVolumeLacre({
    this.id,
    this.idNfeTransporteVolume,
    this.numero,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeTransporteVolume != null) {
      map['id_nfe_transporte_volume'] = Variable<int>(idNfeTransporteVolume);
    }
    if (!nullToAbsent || numero != null) {
      map['numero'] = Variable<String>(numero);
    }
    return map;
  }

  factory NfeTransporteVolumeLacre.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeTransporteVolumeLacre(
      id: serializer.fromJson<int?>(json['id']),
      idNfeTransporteVolume: serializer.fromJson<int?>(
        json['idNfeTransporteVolume'],
      ),
      numero: serializer.fromJson<String?>(json['numero']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeTransporteVolume': serializer.toJson<int?>(idNfeTransporteVolume),
      'numero': serializer.toJson<String?>(numero),
    };
  }

  NfeTransporteVolumeLacre copyWith({
    Value<int?> id = const Value.absent(),
    Value<int?> idNfeTransporteVolume = const Value.absent(),
    Value<String?> numero = const Value.absent(),
  }) => NfeTransporteVolumeLacre(
    id: id.present ? id.value : this.id,
    idNfeTransporteVolume:
        idNfeTransporteVolume.present
            ? idNfeTransporteVolume.value
            : this.idNfeTransporteVolume,
    numero: numero.present ? numero.value : this.numero,
  );
  NfeTransporteVolumeLacre copyWithCompanion(
    NfeTransporteVolumeLacresCompanion data,
  ) {
    return NfeTransporteVolumeLacre(
      id: data.id.present ? data.id.value : this.id,
      idNfeTransporteVolume:
          data.idNfeTransporteVolume.present
              ? data.idNfeTransporteVolume.value
              : this.idNfeTransporteVolume,
      numero: data.numero.present ? data.numero.value : this.numero,
    );
  }

  @override
  String toString() {
    return (StringBuffer('NfeTransporteVolumeLacre(')
          ..write('id: $id, ')
          ..write('idNfeTransporteVolume: $idNfeTransporteVolume, ')
          ..write('numero: $numero')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(id, idNfeTransporteVolume, numero);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeTransporteVolumeLacre &&
          other.id == this.id &&
          other.idNfeTransporteVolume == this.idNfeTransporteVolume &&
          other.numero == this.numero);
}

class NfeTransporteVolumeLacresCompanion
    extends UpdateCompanion<NfeTransporteVolumeLacre> {
  final Value<int?> id;
  final Value<int?> idNfeTransporteVolume;
  final Value<String?> numero;
  const NfeTransporteVolumeLacresCompanion({
    this.id = const Value.absent(),
    this.idNfeTransporteVolume = const Value.absent(),
    this.numero = const Value.absent(),
  });
  NfeTransporteVolumeLacresCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeTransporteVolume = const Value.absent(),
    this.numero = const Value.absent(),
  });
  static Insertable<NfeTransporteVolumeLacre> custom({
    Expression<int>? id,
    Expression<int>? idNfeTransporteVolume,
    Expression<String>? numero,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (idNfeTransporteVolume != null)
        'id_nfe_transporte_volume': idNfeTransporteVolume,
      if (numero != null) 'numero': numero,
    });
  }

  NfeTransporteVolumeLacresCompanion copyWith({
    Value<int?>? id,
    Value<int?>? idNfeTransporteVolume,
    Value<String?>? numero,
  }) {
    return NfeTransporteVolumeLacresCompanion(
      id: id ?? this.id,
      idNfeTransporteVolume:
          idNfeTransporteVolume ?? this.idNfeTransporteVolume,
      numero: numero ?? this.numero,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (idNfeTransporteVolume.present) {
      map['id_nfe_transporte_volume'] = Variable<int>(
        idNfeTransporteVolume.value,
      );
    }
    if (numero.present) {
      map['numero'] = Variable<String>(numero.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeTransporteVolumeLacresCompanion(')
          ..write('id: $id, ')
          ..write('idNfeTransporteVolume: $idNfeTransporteVolume, ')
          ..write('numero: $numero')
          ..write(')'))
        .toString();
  }
}

class $NfeProcessoReferenciadosTable extends NfeProcessoReferenciados
    with TableInfo<$NfeProcessoReferenciadosTable, NfeProcessoReferenciado> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeProcessoReferenciadosTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
    'id',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idNfeCabecalhoMeta = const VerificationMeta(
    'idNfeCabecalho',
  );
  @override
  late final GeneratedColumn<int> idNfeCabecalho = GeneratedColumn<int>(
    'id_nfe_cabecalho',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _identificadorMeta = const VerificationMeta(
    'identificador',
  );
  @override
  late final GeneratedColumn<String> identificador = GeneratedColumn<String>(
    'identificador',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 60,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _origemMeta = const VerificationMeta('origem');
  @override
  late final GeneratedColumn<String> origem = GeneratedColumn<String>(
    'origem',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 1,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _tipoAtoConcessorioMeta =
      const VerificationMeta('tipoAtoConcessorio');
  @override
  late final GeneratedColumn<String> tipoAtoConcessorio =
      GeneratedColumn<String>(
        'tipo_ato_concessorio',
        aliasedName,
        true,
        additionalChecks: GeneratedColumn.checkTextLength(
          minTextLength: 0,
          maxTextLength: 1,
        ),
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    idNfeCabecalho,
    identificador,
    origem,
    tipoAtoConcessorio,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'nfe_processo_referenciado';
  @override
  VerificationContext validateIntegrity(
    Insertable<NfeProcessoReferenciado> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('id_nfe_cabecalho')) {
      context.handle(
        _idNfeCabecalhoMeta,
        idNfeCabecalho.isAcceptableOrUnknown(
          data['id_nfe_cabecalho']!,
          _idNfeCabecalhoMeta,
        ),
      );
    }
    if (data.containsKey('identificador')) {
      context.handle(
        _identificadorMeta,
        identificador.isAcceptableOrUnknown(
          data['identificador']!,
          _identificadorMeta,
        ),
      );
    }
    if (data.containsKey('origem')) {
      context.handle(
        _origemMeta,
        origem.isAcceptableOrUnknown(data['origem']!, _origemMeta),
      );
    }
    if (data.containsKey('tipo_ato_concessorio')) {
      context.handle(
        _tipoAtoConcessorioMeta,
        tipoAtoConcessorio.isAcceptableOrUnknown(
          data['tipo_ato_concessorio']!,
          _tipoAtoConcessorioMeta,
        ),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeProcessoReferenciado map(
    Map<String, dynamic> data, {
    String? tablePrefix,
  }) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return NfeProcessoReferenciado(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id'],
      ),
      idNfeCabecalho: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_nfe_cabecalho'],
      ),
      identificador: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}identificador'],
      ),
      origem: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}origem'],
      ),
      tipoAtoConcessorio: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}tipo_ato_concessorio'],
      ),
    );
  }

  @override
  $NfeProcessoReferenciadosTable createAlias(String alias) {
    return $NfeProcessoReferenciadosTable(attachedDatabase, alias);
  }
}

class NfeProcessoReferenciado extends DataClass
    implements Insertable<NfeProcessoReferenciado> {
  final int? id;
  final int? idNfeCabecalho;
  final String? identificador;
  final String? origem;
  final String? tipoAtoConcessorio;
  const NfeProcessoReferenciado({
    this.id,
    this.idNfeCabecalho,
    this.identificador,
    this.origem,
    this.tipoAtoConcessorio,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeCabecalho != null) {
      map['id_nfe_cabecalho'] = Variable<int>(idNfeCabecalho);
    }
    if (!nullToAbsent || identificador != null) {
      map['identificador'] = Variable<String>(identificador);
    }
    if (!nullToAbsent || origem != null) {
      map['origem'] = Variable<String>(origem);
    }
    if (!nullToAbsent || tipoAtoConcessorio != null) {
      map['tipo_ato_concessorio'] = Variable<String>(tipoAtoConcessorio);
    }
    return map;
  }

  factory NfeProcessoReferenciado.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeProcessoReferenciado(
      id: serializer.fromJson<int?>(json['id']),
      idNfeCabecalho: serializer.fromJson<int?>(json['idNfeCabecalho']),
      identificador: serializer.fromJson<String?>(json['identificador']),
      origem: serializer.fromJson<String?>(json['origem']),
      tipoAtoConcessorio: serializer.fromJson<String?>(
        json['tipoAtoConcessorio'],
      ),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeCabecalho': serializer.toJson<int?>(idNfeCabecalho),
      'identificador': serializer.toJson<String?>(identificador),
      'origem': serializer.toJson<String?>(origem),
      'tipoAtoConcessorio': serializer.toJson<String?>(tipoAtoConcessorio),
    };
  }

  NfeProcessoReferenciado copyWith({
    Value<int?> id = const Value.absent(),
    Value<int?> idNfeCabecalho = const Value.absent(),
    Value<String?> identificador = const Value.absent(),
    Value<String?> origem = const Value.absent(),
    Value<String?> tipoAtoConcessorio = const Value.absent(),
  }) => NfeProcessoReferenciado(
    id: id.present ? id.value : this.id,
    idNfeCabecalho:
        idNfeCabecalho.present ? idNfeCabecalho.value : this.idNfeCabecalho,
    identificador:
        identificador.present ? identificador.value : this.identificador,
    origem: origem.present ? origem.value : this.origem,
    tipoAtoConcessorio:
        tipoAtoConcessorio.present
            ? tipoAtoConcessorio.value
            : this.tipoAtoConcessorio,
  );
  NfeProcessoReferenciado copyWithCompanion(
    NfeProcessoReferenciadosCompanion data,
  ) {
    return NfeProcessoReferenciado(
      id: data.id.present ? data.id.value : this.id,
      idNfeCabecalho:
          data.idNfeCabecalho.present
              ? data.idNfeCabecalho.value
              : this.idNfeCabecalho,
      identificador:
          data.identificador.present
              ? data.identificador.value
              : this.identificador,
      origem: data.origem.present ? data.origem.value : this.origem,
      tipoAtoConcessorio:
          data.tipoAtoConcessorio.present
              ? data.tipoAtoConcessorio.value
              : this.tipoAtoConcessorio,
    );
  }

  @override
  String toString() {
    return (StringBuffer('NfeProcessoReferenciado(')
          ..write('id: $id, ')
          ..write('idNfeCabecalho: $idNfeCabecalho, ')
          ..write('identificador: $identificador, ')
          ..write('origem: $origem, ')
          ..write('tipoAtoConcessorio: $tipoAtoConcessorio')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    idNfeCabecalho,
    identificador,
    origem,
    tipoAtoConcessorio,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeProcessoReferenciado &&
          other.id == this.id &&
          other.idNfeCabecalho == this.idNfeCabecalho &&
          other.identificador == this.identificador &&
          other.origem == this.origem &&
          other.tipoAtoConcessorio == this.tipoAtoConcessorio);
}

class NfeProcessoReferenciadosCompanion
    extends UpdateCompanion<NfeProcessoReferenciado> {
  final Value<int?> id;
  final Value<int?> idNfeCabecalho;
  final Value<String?> identificador;
  final Value<String?> origem;
  final Value<String?> tipoAtoConcessorio;
  const NfeProcessoReferenciadosCompanion({
    this.id = const Value.absent(),
    this.idNfeCabecalho = const Value.absent(),
    this.identificador = const Value.absent(),
    this.origem = const Value.absent(),
    this.tipoAtoConcessorio = const Value.absent(),
  });
  NfeProcessoReferenciadosCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeCabecalho = const Value.absent(),
    this.identificador = const Value.absent(),
    this.origem = const Value.absent(),
    this.tipoAtoConcessorio = const Value.absent(),
  });
  static Insertable<NfeProcessoReferenciado> custom({
    Expression<int>? id,
    Expression<int>? idNfeCabecalho,
    Expression<String>? identificador,
    Expression<String>? origem,
    Expression<String>? tipoAtoConcessorio,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (idNfeCabecalho != null) 'id_nfe_cabecalho': idNfeCabecalho,
      if (identificador != null) 'identificador': identificador,
      if (origem != null) 'origem': origem,
      if (tipoAtoConcessorio != null)
        'tipo_ato_concessorio': tipoAtoConcessorio,
    });
  }

  NfeProcessoReferenciadosCompanion copyWith({
    Value<int?>? id,
    Value<int?>? idNfeCabecalho,
    Value<String?>? identificador,
    Value<String?>? origem,
    Value<String?>? tipoAtoConcessorio,
  }) {
    return NfeProcessoReferenciadosCompanion(
      id: id ?? this.id,
      idNfeCabecalho: idNfeCabecalho ?? this.idNfeCabecalho,
      identificador: identificador ?? this.identificador,
      origem: origem ?? this.origem,
      tipoAtoConcessorio: tipoAtoConcessorio ?? this.tipoAtoConcessorio,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (idNfeCabecalho.present) {
      map['id_nfe_cabecalho'] = Variable<int>(idNfeCabecalho.value);
    }
    if (identificador.present) {
      map['identificador'] = Variable<String>(identificador.value);
    }
    if (origem.present) {
      map['origem'] = Variable<String>(origem.value);
    }
    if (tipoAtoConcessorio.present) {
      map['tipo_ato_concessorio'] = Variable<String>(tipoAtoConcessorio.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeProcessoReferenciadosCompanion(')
          ..write('id: $id, ')
          ..write('idNfeCabecalho: $idNfeCabecalho, ')
          ..write('identificador: $identificador, ')
          ..write('origem: $origem, ')
          ..write('tipoAtoConcessorio: $tipoAtoConcessorio')
          ..write(')'))
        .toString();
  }
}

class $NfeCteReferenciadosTable extends NfeCteReferenciados
    with TableInfo<$NfeCteReferenciadosTable, NfeCteReferenciado> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeCteReferenciadosTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
    'id',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idNfeCabecalhoMeta = const VerificationMeta(
    'idNfeCabecalho',
  );
  @override
  late final GeneratedColumn<int> idNfeCabecalho = GeneratedColumn<int>(
    'id_nfe_cabecalho',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _chaveAcessoMeta = const VerificationMeta(
    'chaveAcesso',
  );
  @override
  late final GeneratedColumn<String> chaveAcesso = GeneratedColumn<String>(
    'chave_acesso',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 44,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  @override
  List<GeneratedColumn> get $columns => [id, idNfeCabecalho, chaveAcesso];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'nfe_cte_referenciado';
  @override
  VerificationContext validateIntegrity(
    Insertable<NfeCteReferenciado> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('id_nfe_cabecalho')) {
      context.handle(
        _idNfeCabecalhoMeta,
        idNfeCabecalho.isAcceptableOrUnknown(
          data['id_nfe_cabecalho']!,
          _idNfeCabecalhoMeta,
        ),
      );
    }
    if (data.containsKey('chave_acesso')) {
      context.handle(
        _chaveAcessoMeta,
        chaveAcesso.isAcceptableOrUnknown(
          data['chave_acesso']!,
          _chaveAcessoMeta,
        ),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeCteReferenciado map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return NfeCteReferenciado(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id'],
      ),
      idNfeCabecalho: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_nfe_cabecalho'],
      ),
      chaveAcesso: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}chave_acesso'],
      ),
    );
  }

  @override
  $NfeCteReferenciadosTable createAlias(String alias) {
    return $NfeCteReferenciadosTable(attachedDatabase, alias);
  }
}

class NfeCteReferenciado extends DataClass
    implements Insertable<NfeCteReferenciado> {
  final int? id;
  final int? idNfeCabecalho;
  final String? chaveAcesso;
  const NfeCteReferenciado({this.id, this.idNfeCabecalho, this.chaveAcesso});
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeCabecalho != null) {
      map['id_nfe_cabecalho'] = Variable<int>(idNfeCabecalho);
    }
    if (!nullToAbsent || chaveAcesso != null) {
      map['chave_acesso'] = Variable<String>(chaveAcesso);
    }
    return map;
  }

  factory NfeCteReferenciado.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeCteReferenciado(
      id: serializer.fromJson<int?>(json['id']),
      idNfeCabecalho: serializer.fromJson<int?>(json['idNfeCabecalho']),
      chaveAcesso: serializer.fromJson<String?>(json['chaveAcesso']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeCabecalho': serializer.toJson<int?>(idNfeCabecalho),
      'chaveAcesso': serializer.toJson<String?>(chaveAcesso),
    };
  }

  NfeCteReferenciado copyWith({
    Value<int?> id = const Value.absent(),
    Value<int?> idNfeCabecalho = const Value.absent(),
    Value<String?> chaveAcesso = const Value.absent(),
  }) => NfeCteReferenciado(
    id: id.present ? id.value : this.id,
    idNfeCabecalho:
        idNfeCabecalho.present ? idNfeCabecalho.value : this.idNfeCabecalho,
    chaveAcesso: chaveAcesso.present ? chaveAcesso.value : this.chaveAcesso,
  );
  NfeCteReferenciado copyWithCompanion(NfeCteReferenciadosCompanion data) {
    return NfeCteReferenciado(
      id: data.id.present ? data.id.value : this.id,
      idNfeCabecalho:
          data.idNfeCabecalho.present
              ? data.idNfeCabecalho.value
              : this.idNfeCabecalho,
      chaveAcesso:
          data.chaveAcesso.present ? data.chaveAcesso.value : this.chaveAcesso,
    );
  }

  @override
  String toString() {
    return (StringBuffer('NfeCteReferenciado(')
          ..write('id: $id, ')
          ..write('idNfeCabecalho: $idNfeCabecalho, ')
          ..write('chaveAcesso: $chaveAcesso')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(id, idNfeCabecalho, chaveAcesso);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeCteReferenciado &&
          other.id == this.id &&
          other.idNfeCabecalho == this.idNfeCabecalho &&
          other.chaveAcesso == this.chaveAcesso);
}

class NfeCteReferenciadosCompanion extends UpdateCompanion<NfeCteReferenciado> {
  final Value<int?> id;
  final Value<int?> idNfeCabecalho;
  final Value<String?> chaveAcesso;
  const NfeCteReferenciadosCompanion({
    this.id = const Value.absent(),
    this.idNfeCabecalho = const Value.absent(),
    this.chaveAcesso = const Value.absent(),
  });
  NfeCteReferenciadosCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeCabecalho = const Value.absent(),
    this.chaveAcesso = const Value.absent(),
  });
  static Insertable<NfeCteReferenciado> custom({
    Expression<int>? id,
    Expression<int>? idNfeCabecalho,
    Expression<String>? chaveAcesso,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (idNfeCabecalho != null) 'id_nfe_cabecalho': idNfeCabecalho,
      if (chaveAcesso != null) 'chave_acesso': chaveAcesso,
    });
  }

  NfeCteReferenciadosCompanion copyWith({
    Value<int?>? id,
    Value<int?>? idNfeCabecalho,
    Value<String?>? chaveAcesso,
  }) {
    return NfeCteReferenciadosCompanion(
      id: id ?? this.id,
      idNfeCabecalho: idNfeCabecalho ?? this.idNfeCabecalho,
      chaveAcesso: chaveAcesso ?? this.chaveAcesso,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (idNfeCabecalho.present) {
      map['id_nfe_cabecalho'] = Variable<int>(idNfeCabecalho.value);
    }
    if (chaveAcesso.present) {
      map['chave_acesso'] = Variable<String>(chaveAcesso.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeCteReferenciadosCompanion(')
          ..write('id: $id, ')
          ..write('idNfeCabecalho: $idNfeCabecalho, ')
          ..write('chaveAcesso: $chaveAcesso')
          ..write(')'))
        .toString();
  }
}

class $NfeAcessoXmlsTable extends NfeAcessoXmls
    with TableInfo<$NfeAcessoXmlsTable, NfeAcessoXml> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeAcessoXmlsTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
    'id',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idNfeCabecalhoMeta = const VerificationMeta(
    'idNfeCabecalho',
  );
  @override
  late final GeneratedColumn<int> idNfeCabecalho = GeneratedColumn<int>(
    'id_nfe_cabecalho',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _cnpjMeta = const VerificationMeta('cnpj');
  @override
  late final GeneratedColumn<String> cnpj = GeneratedColumn<String>(
    'cnpj',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 14,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _cpfMeta = const VerificationMeta('cpf');
  @override
  late final GeneratedColumn<String> cpf = GeneratedColumn<String>(
    'cpf',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 11,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  @override
  List<GeneratedColumn> get $columns => [id, idNfeCabecalho, cnpj, cpf];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'nfe_acesso_xml';
  @override
  VerificationContext validateIntegrity(
    Insertable<NfeAcessoXml> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('id_nfe_cabecalho')) {
      context.handle(
        _idNfeCabecalhoMeta,
        idNfeCabecalho.isAcceptableOrUnknown(
          data['id_nfe_cabecalho']!,
          _idNfeCabecalhoMeta,
        ),
      );
    }
    if (data.containsKey('cnpj')) {
      context.handle(
        _cnpjMeta,
        cnpj.isAcceptableOrUnknown(data['cnpj']!, _cnpjMeta),
      );
    }
    if (data.containsKey('cpf')) {
      context.handle(
        _cpfMeta,
        cpf.isAcceptableOrUnknown(data['cpf']!, _cpfMeta),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeAcessoXml map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return NfeAcessoXml(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id'],
      ),
      idNfeCabecalho: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_nfe_cabecalho'],
      ),
      cnpj: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}cnpj'],
      ),
      cpf: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}cpf'],
      ),
    );
  }

  @override
  $NfeAcessoXmlsTable createAlias(String alias) {
    return $NfeAcessoXmlsTable(attachedDatabase, alias);
  }
}

class NfeAcessoXml extends DataClass implements Insertable<NfeAcessoXml> {
  final int? id;
  final int? idNfeCabecalho;
  final String? cnpj;
  final String? cpf;
  const NfeAcessoXml({this.id, this.idNfeCabecalho, this.cnpj, this.cpf});
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeCabecalho != null) {
      map['id_nfe_cabecalho'] = Variable<int>(idNfeCabecalho);
    }
    if (!nullToAbsent || cnpj != null) {
      map['cnpj'] = Variable<String>(cnpj);
    }
    if (!nullToAbsent || cpf != null) {
      map['cpf'] = Variable<String>(cpf);
    }
    return map;
  }

  factory NfeAcessoXml.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeAcessoXml(
      id: serializer.fromJson<int?>(json['id']),
      idNfeCabecalho: serializer.fromJson<int?>(json['idNfeCabecalho']),
      cnpj: serializer.fromJson<String?>(json['cnpj']),
      cpf: serializer.fromJson<String?>(json['cpf']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeCabecalho': serializer.toJson<int?>(idNfeCabecalho),
      'cnpj': serializer.toJson<String?>(cnpj),
      'cpf': serializer.toJson<String?>(cpf),
    };
  }

  NfeAcessoXml copyWith({
    Value<int?> id = const Value.absent(),
    Value<int?> idNfeCabecalho = const Value.absent(),
    Value<String?> cnpj = const Value.absent(),
    Value<String?> cpf = const Value.absent(),
  }) => NfeAcessoXml(
    id: id.present ? id.value : this.id,
    idNfeCabecalho:
        idNfeCabecalho.present ? idNfeCabecalho.value : this.idNfeCabecalho,
    cnpj: cnpj.present ? cnpj.value : this.cnpj,
    cpf: cpf.present ? cpf.value : this.cpf,
  );
  NfeAcessoXml copyWithCompanion(NfeAcessoXmlsCompanion data) {
    return NfeAcessoXml(
      id: data.id.present ? data.id.value : this.id,
      idNfeCabecalho:
          data.idNfeCabecalho.present
              ? data.idNfeCabecalho.value
              : this.idNfeCabecalho,
      cnpj: data.cnpj.present ? data.cnpj.value : this.cnpj,
      cpf: data.cpf.present ? data.cpf.value : this.cpf,
    );
  }

  @override
  String toString() {
    return (StringBuffer('NfeAcessoXml(')
          ..write('id: $id, ')
          ..write('idNfeCabecalho: $idNfeCabecalho, ')
          ..write('cnpj: $cnpj, ')
          ..write('cpf: $cpf')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(id, idNfeCabecalho, cnpj, cpf);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeAcessoXml &&
          other.id == this.id &&
          other.idNfeCabecalho == this.idNfeCabecalho &&
          other.cnpj == this.cnpj &&
          other.cpf == this.cpf);
}

class NfeAcessoXmlsCompanion extends UpdateCompanion<NfeAcessoXml> {
  final Value<int?> id;
  final Value<int?> idNfeCabecalho;
  final Value<String?> cnpj;
  final Value<String?> cpf;
  const NfeAcessoXmlsCompanion({
    this.id = const Value.absent(),
    this.idNfeCabecalho = const Value.absent(),
    this.cnpj = const Value.absent(),
    this.cpf = const Value.absent(),
  });
  NfeAcessoXmlsCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeCabecalho = const Value.absent(),
    this.cnpj = const Value.absent(),
    this.cpf = const Value.absent(),
  });
  static Insertable<NfeAcessoXml> custom({
    Expression<int>? id,
    Expression<int>? idNfeCabecalho,
    Expression<String>? cnpj,
    Expression<String>? cpf,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (idNfeCabecalho != null) 'id_nfe_cabecalho': idNfeCabecalho,
      if (cnpj != null) 'cnpj': cnpj,
      if (cpf != null) 'cpf': cpf,
    });
  }

  NfeAcessoXmlsCompanion copyWith({
    Value<int?>? id,
    Value<int?>? idNfeCabecalho,
    Value<String?>? cnpj,
    Value<String?>? cpf,
  }) {
    return NfeAcessoXmlsCompanion(
      id: id ?? this.id,
      idNfeCabecalho: idNfeCabecalho ?? this.idNfeCabecalho,
      cnpj: cnpj ?? this.cnpj,
      cpf: cpf ?? this.cpf,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (idNfeCabecalho.present) {
      map['id_nfe_cabecalho'] = Variable<int>(idNfeCabecalho.value);
    }
    if (cnpj.present) {
      map['cnpj'] = Variable<String>(cnpj.value);
    }
    if (cpf.present) {
      map['cpf'] = Variable<String>(cpf.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeAcessoXmlsCompanion(')
          ..write('id: $id, ')
          ..write('idNfeCabecalho: $idNfeCabecalho, ')
          ..write('cnpj: $cnpj, ')
          ..write('cpf: $cpf')
          ..write(')'))
        .toString();
  }
}

class $NfeExportacaosTable extends NfeExportacaos
    with TableInfo<$NfeExportacaosTable, NfeExportacao> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeExportacaosTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
    'id',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idNfeDetalheMeta = const VerificationMeta(
    'idNfeDetalhe',
  );
  @override
  late final GeneratedColumn<int> idNfeDetalhe = GeneratedColumn<int>(
    'id_nfe_detalhe',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _drawbackMeta = const VerificationMeta(
    'drawback',
  );
  @override
  late final GeneratedColumn<int> drawback = GeneratedColumn<int>(
    'drawback',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _numeroRegistroMeta = const VerificationMeta(
    'numeroRegistro',
  );
  @override
  late final GeneratedColumn<int> numeroRegistro = GeneratedColumn<int>(
    'numero_registro',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _chaveAcessoMeta = const VerificationMeta(
    'chaveAcesso',
  );
  @override
  late final GeneratedColumn<String> chaveAcesso = GeneratedColumn<String>(
    'chave_acesso',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 44,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _quantidadeMeta = const VerificationMeta(
    'quantidade',
  );
  @override
  late final GeneratedColumn<double> quantidade = GeneratedColumn<double>(
    'quantidade',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    idNfeDetalhe,
    drawback,
    numeroRegistro,
    chaveAcesso,
    quantidade,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'nfe_exportacao';
  @override
  VerificationContext validateIntegrity(
    Insertable<NfeExportacao> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('id_nfe_detalhe')) {
      context.handle(
        _idNfeDetalheMeta,
        idNfeDetalhe.isAcceptableOrUnknown(
          data['id_nfe_detalhe']!,
          _idNfeDetalheMeta,
        ),
      );
    }
    if (data.containsKey('drawback')) {
      context.handle(
        _drawbackMeta,
        drawback.isAcceptableOrUnknown(data['drawback']!, _drawbackMeta),
      );
    }
    if (data.containsKey('numero_registro')) {
      context.handle(
        _numeroRegistroMeta,
        numeroRegistro.isAcceptableOrUnknown(
          data['numero_registro']!,
          _numeroRegistroMeta,
        ),
      );
    }
    if (data.containsKey('chave_acesso')) {
      context.handle(
        _chaveAcessoMeta,
        chaveAcesso.isAcceptableOrUnknown(
          data['chave_acesso']!,
          _chaveAcessoMeta,
        ),
      );
    }
    if (data.containsKey('quantidade')) {
      context.handle(
        _quantidadeMeta,
        quantidade.isAcceptableOrUnknown(data['quantidade']!, _quantidadeMeta),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeExportacao map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return NfeExportacao(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id'],
      ),
      idNfeDetalhe: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_nfe_detalhe'],
      ),
      drawback: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}drawback'],
      ),
      numeroRegistro: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}numero_registro'],
      ),
      chaveAcesso: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}chave_acesso'],
      ),
      quantidade: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}quantidade'],
      ),
    );
  }

  @override
  $NfeExportacaosTable createAlias(String alias) {
    return $NfeExportacaosTable(attachedDatabase, alias);
  }
}

class NfeExportacao extends DataClass implements Insertable<NfeExportacao> {
  final int? id;
  final int? idNfeDetalhe;
  final int? drawback;
  final int? numeroRegistro;
  final String? chaveAcesso;
  final double? quantidade;
  const NfeExportacao({
    this.id,
    this.idNfeDetalhe,
    this.drawback,
    this.numeroRegistro,
    this.chaveAcesso,
    this.quantidade,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeDetalhe != null) {
      map['id_nfe_detalhe'] = Variable<int>(idNfeDetalhe);
    }
    if (!nullToAbsent || drawback != null) {
      map['drawback'] = Variable<int>(drawback);
    }
    if (!nullToAbsent || numeroRegistro != null) {
      map['numero_registro'] = Variable<int>(numeroRegistro);
    }
    if (!nullToAbsent || chaveAcesso != null) {
      map['chave_acesso'] = Variable<String>(chaveAcesso);
    }
    if (!nullToAbsent || quantidade != null) {
      map['quantidade'] = Variable<double>(quantidade);
    }
    return map;
  }

  factory NfeExportacao.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeExportacao(
      id: serializer.fromJson<int?>(json['id']),
      idNfeDetalhe: serializer.fromJson<int?>(json['idNfeDetalhe']),
      drawback: serializer.fromJson<int?>(json['drawback']),
      numeroRegistro: serializer.fromJson<int?>(json['numeroRegistro']),
      chaveAcesso: serializer.fromJson<String?>(json['chaveAcesso']),
      quantidade: serializer.fromJson<double?>(json['quantidade']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeDetalhe': serializer.toJson<int?>(idNfeDetalhe),
      'drawback': serializer.toJson<int?>(drawback),
      'numeroRegistro': serializer.toJson<int?>(numeroRegistro),
      'chaveAcesso': serializer.toJson<String?>(chaveAcesso),
      'quantidade': serializer.toJson<double?>(quantidade),
    };
  }

  NfeExportacao copyWith({
    Value<int?> id = const Value.absent(),
    Value<int?> idNfeDetalhe = const Value.absent(),
    Value<int?> drawback = const Value.absent(),
    Value<int?> numeroRegistro = const Value.absent(),
    Value<String?> chaveAcesso = const Value.absent(),
    Value<double?> quantidade = const Value.absent(),
  }) => NfeExportacao(
    id: id.present ? id.value : this.id,
    idNfeDetalhe: idNfeDetalhe.present ? idNfeDetalhe.value : this.idNfeDetalhe,
    drawback: drawback.present ? drawback.value : this.drawback,
    numeroRegistro:
        numeroRegistro.present ? numeroRegistro.value : this.numeroRegistro,
    chaveAcesso: chaveAcesso.present ? chaveAcesso.value : this.chaveAcesso,
    quantidade: quantidade.present ? quantidade.value : this.quantidade,
  );
  NfeExportacao copyWithCompanion(NfeExportacaosCompanion data) {
    return NfeExportacao(
      id: data.id.present ? data.id.value : this.id,
      idNfeDetalhe:
          data.idNfeDetalhe.present
              ? data.idNfeDetalhe.value
              : this.idNfeDetalhe,
      drawback: data.drawback.present ? data.drawback.value : this.drawback,
      numeroRegistro:
          data.numeroRegistro.present
              ? data.numeroRegistro.value
              : this.numeroRegistro,
      chaveAcesso:
          data.chaveAcesso.present ? data.chaveAcesso.value : this.chaveAcesso,
      quantidade:
          data.quantidade.present ? data.quantidade.value : this.quantidade,
    );
  }

  @override
  String toString() {
    return (StringBuffer('NfeExportacao(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('drawback: $drawback, ')
          ..write('numeroRegistro: $numeroRegistro, ')
          ..write('chaveAcesso: $chaveAcesso, ')
          ..write('quantidade: $quantidade')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    idNfeDetalhe,
    drawback,
    numeroRegistro,
    chaveAcesso,
    quantidade,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeExportacao &&
          other.id == this.id &&
          other.idNfeDetalhe == this.idNfeDetalhe &&
          other.drawback == this.drawback &&
          other.numeroRegistro == this.numeroRegistro &&
          other.chaveAcesso == this.chaveAcesso &&
          other.quantidade == this.quantidade);
}

class NfeExportacaosCompanion extends UpdateCompanion<NfeExportacao> {
  final Value<int?> id;
  final Value<int?> idNfeDetalhe;
  final Value<int?> drawback;
  final Value<int?> numeroRegistro;
  final Value<String?> chaveAcesso;
  final Value<double?> quantidade;
  const NfeExportacaosCompanion({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.drawback = const Value.absent(),
    this.numeroRegistro = const Value.absent(),
    this.chaveAcesso = const Value.absent(),
    this.quantidade = const Value.absent(),
  });
  NfeExportacaosCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.drawback = const Value.absent(),
    this.numeroRegistro = const Value.absent(),
    this.chaveAcesso = const Value.absent(),
    this.quantidade = const Value.absent(),
  });
  static Insertable<NfeExportacao> custom({
    Expression<int>? id,
    Expression<int>? idNfeDetalhe,
    Expression<int>? drawback,
    Expression<int>? numeroRegistro,
    Expression<String>? chaveAcesso,
    Expression<double>? quantidade,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (idNfeDetalhe != null) 'id_nfe_detalhe': idNfeDetalhe,
      if (drawback != null) 'drawback': drawback,
      if (numeroRegistro != null) 'numero_registro': numeroRegistro,
      if (chaveAcesso != null) 'chave_acesso': chaveAcesso,
      if (quantidade != null) 'quantidade': quantidade,
    });
  }

  NfeExportacaosCompanion copyWith({
    Value<int?>? id,
    Value<int?>? idNfeDetalhe,
    Value<int?>? drawback,
    Value<int?>? numeroRegistro,
    Value<String?>? chaveAcesso,
    Value<double?>? quantidade,
  }) {
    return NfeExportacaosCompanion(
      id: id ?? this.id,
      idNfeDetalhe: idNfeDetalhe ?? this.idNfeDetalhe,
      drawback: drawback ?? this.drawback,
      numeroRegistro: numeroRegistro ?? this.numeroRegistro,
      chaveAcesso: chaveAcesso ?? this.chaveAcesso,
      quantidade: quantidade ?? this.quantidade,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (idNfeDetalhe.present) {
      map['id_nfe_detalhe'] = Variable<int>(idNfeDetalhe.value);
    }
    if (drawback.present) {
      map['drawback'] = Variable<int>(drawback.value);
    }
    if (numeroRegistro.present) {
      map['numero_registro'] = Variable<int>(numeroRegistro.value);
    }
    if (chaveAcesso.present) {
      map['chave_acesso'] = Variable<String>(chaveAcesso.value);
    }
    if (quantidade.present) {
      map['quantidade'] = Variable<double>(quantidade.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeExportacaosCompanion(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('drawback: $drawback, ')
          ..write('numeroRegistro: $numeroRegistro, ')
          ..write('chaveAcesso: $chaveAcesso, ')
          ..write('quantidade: $quantidade')
          ..write(')'))
        .toString();
  }
}

class $NfeInformacaoPagamentosTable extends NfeInformacaoPagamentos
    with TableInfo<$NfeInformacaoPagamentosTable, NfeInformacaoPagamento> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeInformacaoPagamentosTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
    'id',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idNfeCabecalhoMeta = const VerificationMeta(
    'idNfeCabecalho',
  );
  @override
  late final GeneratedColumn<int> idNfeCabecalho = GeneratedColumn<int>(
    'id_nfe_cabecalho',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _indicadorPagamentoMeta =
      const VerificationMeta('indicadorPagamento');
  @override
  late final GeneratedColumn<String> indicadorPagamento =
      GeneratedColumn<String>(
        'indicador_pagamento',
        aliasedName,
        true,
        additionalChecks: GeneratedColumn.checkTextLength(
          minTextLength: 0,
          maxTextLength: 1,
        ),
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _meioPagamentoMeta = const VerificationMeta(
    'meioPagamento',
  );
  @override
  late final GeneratedColumn<String> meioPagamento = GeneratedColumn<String>(
    'meio_pagamento',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 2,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _valorMeta = const VerificationMeta('valor');
  @override
  late final GeneratedColumn<double> valor = GeneratedColumn<double>(
    'valor',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _tipoIntegracaoMeta = const VerificationMeta(
    'tipoIntegracao',
  );
  @override
  late final GeneratedColumn<String> tipoIntegracao = GeneratedColumn<String>(
    'tipo_integracao',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 1,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _cnpjOperadoraCartaoMeta =
      const VerificationMeta('cnpjOperadoraCartao');
  @override
  late final GeneratedColumn<String> cnpjOperadoraCartao =
      GeneratedColumn<String>(
        'cnpj_operadora_cartao',
        aliasedName,
        true,
        additionalChecks: GeneratedColumn.checkTextLength(
          minTextLength: 0,
          maxTextLength: 14,
        ),
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _bandeiraMeta = const VerificationMeta(
    'bandeira',
  );
  @override
  late final GeneratedColumn<String> bandeira = GeneratedColumn<String>(
    'bandeira',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 2,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _numeroAutorizacaoMeta = const VerificationMeta(
    'numeroAutorizacao',
  );
  @override
  late final GeneratedColumn<String> numeroAutorizacao =
      GeneratedColumn<String>(
        'numero_autorizacao',
        aliasedName,
        true,
        additionalChecks: GeneratedColumn.checkTextLength(
          minTextLength: 0,
          maxTextLength: 128,
        ),
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _trocoMeta = const VerificationMeta('troco');
  @override
  late final GeneratedColumn<double> troco = GeneratedColumn<double>(
    'troco',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _descricaoQuandoOutrosMeta =
      const VerificationMeta('descricaoQuandoOutros');
  @override
  late final GeneratedColumn<String> descricaoQuandoOutros =
      GeneratedColumn<String>(
        'descricao_quando_outros',
        aliasedName,
        true,
        additionalChecks: GeneratedColumn.checkTextLength(
          minTextLength: 0,
          maxTextLength: 60,
        ),
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _dataPagamentoMeta = const VerificationMeta(
    'dataPagamento',
  );
  @override
  late final GeneratedColumn<DateTime> dataPagamento =
      GeneratedColumn<DateTime>(
        'data_pagamento',
        aliasedName,
        true,
        type: DriftSqlType.dateTime,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _cnpjTransacionalMeta = const VerificationMeta(
    'cnpjTransacional',
  );
  @override
  late final GeneratedColumn<String> cnpjTransacional = GeneratedColumn<String>(
    'cnpj_transacional',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 14,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _ufCnpjTransacionalMeta =
      const VerificationMeta('ufCnpjTransacional');
  @override
  late final GeneratedColumn<String> ufCnpjTransacional =
      GeneratedColumn<String>(
        'uf_cnpj_transacional',
        aliasedName,
        true,
        additionalChecks: GeneratedColumn.checkTextLength(
          minTextLength: 0,
          maxTextLength: 2,
        ),
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _cnpjBeneficiarioMeta = const VerificationMeta(
    'cnpjBeneficiario',
  );
  @override
  late final GeneratedColumn<String> cnpjBeneficiario = GeneratedColumn<String>(
    'cnpj_beneficiario',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 14,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idTerminalPagamentoMeta =
      const VerificationMeta('idTerminalPagamento');
  @override
  late final GeneratedColumn<String> idTerminalPagamento =
      GeneratedColumn<String>(
        'id_terminal_pagamento',
        aliasedName,
        true,
        additionalChecks: GeneratedColumn.checkTextLength(
          minTextLength: 0,
          maxTextLength: 40,
        ),
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    idNfeCabecalho,
    indicadorPagamento,
    meioPagamento,
    valor,
    tipoIntegracao,
    cnpjOperadoraCartao,
    bandeira,
    numeroAutorizacao,
    troco,
    descricaoQuandoOutros,
    dataPagamento,
    cnpjTransacional,
    ufCnpjTransacional,
    cnpjBeneficiario,
    idTerminalPagamento,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'nfe_informacao_pagamento';
  @override
  VerificationContext validateIntegrity(
    Insertable<NfeInformacaoPagamento> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('id_nfe_cabecalho')) {
      context.handle(
        _idNfeCabecalhoMeta,
        idNfeCabecalho.isAcceptableOrUnknown(
          data['id_nfe_cabecalho']!,
          _idNfeCabecalhoMeta,
        ),
      );
    }
    if (data.containsKey('indicador_pagamento')) {
      context.handle(
        _indicadorPagamentoMeta,
        indicadorPagamento.isAcceptableOrUnknown(
          data['indicador_pagamento']!,
          _indicadorPagamentoMeta,
        ),
      );
    }
    if (data.containsKey('meio_pagamento')) {
      context.handle(
        _meioPagamentoMeta,
        meioPagamento.isAcceptableOrUnknown(
          data['meio_pagamento']!,
          _meioPagamentoMeta,
        ),
      );
    }
    if (data.containsKey('valor')) {
      context.handle(
        _valorMeta,
        valor.isAcceptableOrUnknown(data['valor']!, _valorMeta),
      );
    }
    if (data.containsKey('tipo_integracao')) {
      context.handle(
        _tipoIntegracaoMeta,
        tipoIntegracao.isAcceptableOrUnknown(
          data['tipo_integracao']!,
          _tipoIntegracaoMeta,
        ),
      );
    }
    if (data.containsKey('cnpj_operadora_cartao')) {
      context.handle(
        _cnpjOperadoraCartaoMeta,
        cnpjOperadoraCartao.isAcceptableOrUnknown(
          data['cnpj_operadora_cartao']!,
          _cnpjOperadoraCartaoMeta,
        ),
      );
    }
    if (data.containsKey('bandeira')) {
      context.handle(
        _bandeiraMeta,
        bandeira.isAcceptableOrUnknown(data['bandeira']!, _bandeiraMeta),
      );
    }
    if (data.containsKey('numero_autorizacao')) {
      context.handle(
        _numeroAutorizacaoMeta,
        numeroAutorizacao.isAcceptableOrUnknown(
          data['numero_autorizacao']!,
          _numeroAutorizacaoMeta,
        ),
      );
    }
    if (data.containsKey('troco')) {
      context.handle(
        _trocoMeta,
        troco.isAcceptableOrUnknown(data['troco']!, _trocoMeta),
      );
    }
    if (data.containsKey('descricao_quando_outros')) {
      context.handle(
        _descricaoQuandoOutrosMeta,
        descricaoQuandoOutros.isAcceptableOrUnknown(
          data['descricao_quando_outros']!,
          _descricaoQuandoOutrosMeta,
        ),
      );
    }
    if (data.containsKey('data_pagamento')) {
      context.handle(
        _dataPagamentoMeta,
        dataPagamento.isAcceptableOrUnknown(
          data['data_pagamento']!,
          _dataPagamentoMeta,
        ),
      );
    }
    if (data.containsKey('cnpj_transacional')) {
      context.handle(
        _cnpjTransacionalMeta,
        cnpjTransacional.isAcceptableOrUnknown(
          data['cnpj_transacional']!,
          _cnpjTransacionalMeta,
        ),
      );
    }
    if (data.containsKey('uf_cnpj_transacional')) {
      context.handle(
        _ufCnpjTransacionalMeta,
        ufCnpjTransacional.isAcceptableOrUnknown(
          data['uf_cnpj_transacional']!,
          _ufCnpjTransacionalMeta,
        ),
      );
    }
    if (data.containsKey('cnpj_beneficiario')) {
      context.handle(
        _cnpjBeneficiarioMeta,
        cnpjBeneficiario.isAcceptableOrUnknown(
          data['cnpj_beneficiario']!,
          _cnpjBeneficiarioMeta,
        ),
      );
    }
    if (data.containsKey('id_terminal_pagamento')) {
      context.handle(
        _idTerminalPagamentoMeta,
        idTerminalPagamento.isAcceptableOrUnknown(
          data['id_terminal_pagamento']!,
          _idTerminalPagamentoMeta,
        ),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeInformacaoPagamento map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return NfeInformacaoPagamento(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id'],
      ),
      idNfeCabecalho: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_nfe_cabecalho'],
      ),
      indicadorPagamento: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}indicador_pagamento'],
      ),
      meioPagamento: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}meio_pagamento'],
      ),
      valor: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor'],
      ),
      tipoIntegracao: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}tipo_integracao'],
      ),
      cnpjOperadoraCartao: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}cnpj_operadora_cartao'],
      ),
      bandeira: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}bandeira'],
      ),
      numeroAutorizacao: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}numero_autorizacao'],
      ),
      troco: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}troco'],
      ),
      descricaoQuandoOutros: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}descricao_quando_outros'],
      ),
      dataPagamento: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}data_pagamento'],
      ),
      cnpjTransacional: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}cnpj_transacional'],
      ),
      ufCnpjTransacional: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}uf_cnpj_transacional'],
      ),
      cnpjBeneficiario: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}cnpj_beneficiario'],
      ),
      idTerminalPagamento: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}id_terminal_pagamento'],
      ),
    );
  }

  @override
  $NfeInformacaoPagamentosTable createAlias(String alias) {
    return $NfeInformacaoPagamentosTable(attachedDatabase, alias);
  }
}

class NfeInformacaoPagamento extends DataClass
    implements Insertable<NfeInformacaoPagamento> {
  final int? id;
  final int? idNfeCabecalho;
  final String? indicadorPagamento;
  final String? meioPagamento;
  final double? valor;
  final String? tipoIntegracao;
  final String? cnpjOperadoraCartao;
  final String? bandeira;
  final String? numeroAutorizacao;
  final double? troco;
  final String? descricaoQuandoOutros;
  final DateTime? dataPagamento;
  final String? cnpjTransacional;
  final String? ufCnpjTransacional;
  final String? cnpjBeneficiario;
  final String? idTerminalPagamento;
  const NfeInformacaoPagamento({
    this.id,
    this.idNfeCabecalho,
    this.indicadorPagamento,
    this.meioPagamento,
    this.valor,
    this.tipoIntegracao,
    this.cnpjOperadoraCartao,
    this.bandeira,
    this.numeroAutorizacao,
    this.troco,
    this.descricaoQuandoOutros,
    this.dataPagamento,
    this.cnpjTransacional,
    this.ufCnpjTransacional,
    this.cnpjBeneficiario,
    this.idTerminalPagamento,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeCabecalho != null) {
      map['id_nfe_cabecalho'] = Variable<int>(idNfeCabecalho);
    }
    if (!nullToAbsent || indicadorPagamento != null) {
      map['indicador_pagamento'] = Variable<String>(indicadorPagamento);
    }
    if (!nullToAbsent || meioPagamento != null) {
      map['meio_pagamento'] = Variable<String>(meioPagamento);
    }
    if (!nullToAbsent || valor != null) {
      map['valor'] = Variable<double>(valor);
    }
    if (!nullToAbsent || tipoIntegracao != null) {
      map['tipo_integracao'] = Variable<String>(tipoIntegracao);
    }
    if (!nullToAbsent || cnpjOperadoraCartao != null) {
      map['cnpj_operadora_cartao'] = Variable<String>(cnpjOperadoraCartao);
    }
    if (!nullToAbsent || bandeira != null) {
      map['bandeira'] = Variable<String>(bandeira);
    }
    if (!nullToAbsent || numeroAutorizacao != null) {
      map['numero_autorizacao'] = Variable<String>(numeroAutorizacao);
    }
    if (!nullToAbsent || troco != null) {
      map['troco'] = Variable<double>(troco);
    }
    if (!nullToAbsent || descricaoQuandoOutros != null) {
      map['descricao_quando_outros'] = Variable<String>(descricaoQuandoOutros);
    }
    if (!nullToAbsent || dataPagamento != null) {
      map['data_pagamento'] = Variable<DateTime>(dataPagamento);
    }
    if (!nullToAbsent || cnpjTransacional != null) {
      map['cnpj_transacional'] = Variable<String>(cnpjTransacional);
    }
    if (!nullToAbsent || ufCnpjTransacional != null) {
      map['uf_cnpj_transacional'] = Variable<String>(ufCnpjTransacional);
    }
    if (!nullToAbsent || cnpjBeneficiario != null) {
      map['cnpj_beneficiario'] = Variable<String>(cnpjBeneficiario);
    }
    if (!nullToAbsent || idTerminalPagamento != null) {
      map['id_terminal_pagamento'] = Variable<String>(idTerminalPagamento);
    }
    return map;
  }

  factory NfeInformacaoPagamento.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeInformacaoPagamento(
      id: serializer.fromJson<int?>(json['id']),
      idNfeCabecalho: serializer.fromJson<int?>(json['idNfeCabecalho']),
      indicadorPagamento: serializer.fromJson<String?>(
        json['indicadorPagamento'],
      ),
      meioPagamento: serializer.fromJson<String?>(json['meioPagamento']),
      valor: serializer.fromJson<double?>(json['valor']),
      tipoIntegracao: serializer.fromJson<String?>(json['tipoIntegracao']),
      cnpjOperadoraCartao: serializer.fromJson<String?>(
        json['cnpjOperadoraCartao'],
      ),
      bandeira: serializer.fromJson<String?>(json['bandeira']),
      numeroAutorizacao: serializer.fromJson<String?>(
        json['numeroAutorizacao'],
      ),
      troco: serializer.fromJson<double?>(json['troco']),
      descricaoQuandoOutros: serializer.fromJson<String?>(
        json['descricaoQuandoOutros'],
      ),
      dataPagamento: serializer.fromJson<DateTime?>(json['dataPagamento']),
      cnpjTransacional: serializer.fromJson<String?>(json['cnpjTransacional']),
      ufCnpjTransacional: serializer.fromJson<String?>(
        json['ufCnpjTransacional'],
      ),
      cnpjBeneficiario: serializer.fromJson<String?>(json['cnpjBeneficiario']),
      idTerminalPagamento: serializer.fromJson<String?>(
        json['idTerminalPagamento'],
      ),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeCabecalho': serializer.toJson<int?>(idNfeCabecalho),
      'indicadorPagamento': serializer.toJson<String?>(indicadorPagamento),
      'meioPagamento': serializer.toJson<String?>(meioPagamento),
      'valor': serializer.toJson<double?>(valor),
      'tipoIntegracao': serializer.toJson<String?>(tipoIntegracao),
      'cnpjOperadoraCartao': serializer.toJson<String?>(cnpjOperadoraCartao),
      'bandeira': serializer.toJson<String?>(bandeira),
      'numeroAutorizacao': serializer.toJson<String?>(numeroAutorizacao),
      'troco': serializer.toJson<double?>(troco),
      'descricaoQuandoOutros': serializer.toJson<String?>(
        descricaoQuandoOutros,
      ),
      'dataPagamento': serializer.toJson<DateTime?>(dataPagamento),
      'cnpjTransacional': serializer.toJson<String?>(cnpjTransacional),
      'ufCnpjTransacional': serializer.toJson<String?>(ufCnpjTransacional),
      'cnpjBeneficiario': serializer.toJson<String?>(cnpjBeneficiario),
      'idTerminalPagamento': serializer.toJson<String?>(idTerminalPagamento),
    };
  }

  NfeInformacaoPagamento copyWith({
    Value<int?> id = const Value.absent(),
    Value<int?> idNfeCabecalho = const Value.absent(),
    Value<String?> indicadorPagamento = const Value.absent(),
    Value<String?> meioPagamento = const Value.absent(),
    Value<double?> valor = const Value.absent(),
    Value<String?> tipoIntegracao = const Value.absent(),
    Value<String?> cnpjOperadoraCartao = const Value.absent(),
    Value<String?> bandeira = const Value.absent(),
    Value<String?> numeroAutorizacao = const Value.absent(),
    Value<double?> troco = const Value.absent(),
    Value<String?> descricaoQuandoOutros = const Value.absent(),
    Value<DateTime?> dataPagamento = const Value.absent(),
    Value<String?> cnpjTransacional = const Value.absent(),
    Value<String?> ufCnpjTransacional = const Value.absent(),
    Value<String?> cnpjBeneficiario = const Value.absent(),
    Value<String?> idTerminalPagamento = const Value.absent(),
  }) => NfeInformacaoPagamento(
    id: id.present ? id.value : this.id,
    idNfeCabecalho:
        idNfeCabecalho.present ? idNfeCabecalho.value : this.idNfeCabecalho,
    indicadorPagamento:
        indicadorPagamento.present
            ? indicadorPagamento.value
            : this.indicadorPagamento,
    meioPagamento:
        meioPagamento.present ? meioPagamento.value : this.meioPagamento,
    valor: valor.present ? valor.value : this.valor,
    tipoIntegracao:
        tipoIntegracao.present ? tipoIntegracao.value : this.tipoIntegracao,
    cnpjOperadoraCartao:
        cnpjOperadoraCartao.present
            ? cnpjOperadoraCartao.value
            : this.cnpjOperadoraCartao,
    bandeira: bandeira.present ? bandeira.value : this.bandeira,
    numeroAutorizacao:
        numeroAutorizacao.present
            ? numeroAutorizacao.value
            : this.numeroAutorizacao,
    troco: troco.present ? troco.value : this.troco,
    descricaoQuandoOutros:
        descricaoQuandoOutros.present
            ? descricaoQuandoOutros.value
            : this.descricaoQuandoOutros,
    dataPagamento:
        dataPagamento.present ? dataPagamento.value : this.dataPagamento,
    cnpjTransacional:
        cnpjTransacional.present
            ? cnpjTransacional.value
            : this.cnpjTransacional,
    ufCnpjTransacional:
        ufCnpjTransacional.present
            ? ufCnpjTransacional.value
            : this.ufCnpjTransacional,
    cnpjBeneficiario:
        cnpjBeneficiario.present
            ? cnpjBeneficiario.value
            : this.cnpjBeneficiario,
    idTerminalPagamento:
        idTerminalPagamento.present
            ? idTerminalPagamento.value
            : this.idTerminalPagamento,
  );
  NfeInformacaoPagamento copyWithCompanion(
    NfeInformacaoPagamentosCompanion data,
  ) {
    return NfeInformacaoPagamento(
      id: data.id.present ? data.id.value : this.id,
      idNfeCabecalho:
          data.idNfeCabecalho.present
              ? data.idNfeCabecalho.value
              : this.idNfeCabecalho,
      indicadorPagamento:
          data.indicadorPagamento.present
              ? data.indicadorPagamento.value
              : this.indicadorPagamento,
      meioPagamento:
          data.meioPagamento.present
              ? data.meioPagamento.value
              : this.meioPagamento,
      valor: data.valor.present ? data.valor.value : this.valor,
      tipoIntegracao:
          data.tipoIntegracao.present
              ? data.tipoIntegracao.value
              : this.tipoIntegracao,
      cnpjOperadoraCartao:
          data.cnpjOperadoraCartao.present
              ? data.cnpjOperadoraCartao.value
              : this.cnpjOperadoraCartao,
      bandeira: data.bandeira.present ? data.bandeira.value : this.bandeira,
      numeroAutorizacao:
          data.numeroAutorizacao.present
              ? data.numeroAutorizacao.value
              : this.numeroAutorizacao,
      troco: data.troco.present ? data.troco.value : this.troco,
      descricaoQuandoOutros:
          data.descricaoQuandoOutros.present
              ? data.descricaoQuandoOutros.value
              : this.descricaoQuandoOutros,
      dataPagamento:
          data.dataPagamento.present
              ? data.dataPagamento.value
              : this.dataPagamento,
      cnpjTransacional:
          data.cnpjTransacional.present
              ? data.cnpjTransacional.value
              : this.cnpjTransacional,
      ufCnpjTransacional:
          data.ufCnpjTransacional.present
              ? data.ufCnpjTransacional.value
              : this.ufCnpjTransacional,
      cnpjBeneficiario:
          data.cnpjBeneficiario.present
              ? data.cnpjBeneficiario.value
              : this.cnpjBeneficiario,
      idTerminalPagamento:
          data.idTerminalPagamento.present
              ? data.idTerminalPagamento.value
              : this.idTerminalPagamento,
    );
  }

  @override
  String toString() {
    return (StringBuffer('NfeInformacaoPagamento(')
          ..write('id: $id, ')
          ..write('idNfeCabecalho: $idNfeCabecalho, ')
          ..write('indicadorPagamento: $indicadorPagamento, ')
          ..write('meioPagamento: $meioPagamento, ')
          ..write('valor: $valor, ')
          ..write('tipoIntegracao: $tipoIntegracao, ')
          ..write('cnpjOperadoraCartao: $cnpjOperadoraCartao, ')
          ..write('bandeira: $bandeira, ')
          ..write('numeroAutorizacao: $numeroAutorizacao, ')
          ..write('troco: $troco, ')
          ..write('descricaoQuandoOutros: $descricaoQuandoOutros, ')
          ..write('dataPagamento: $dataPagamento, ')
          ..write('cnpjTransacional: $cnpjTransacional, ')
          ..write('ufCnpjTransacional: $ufCnpjTransacional, ')
          ..write('cnpjBeneficiario: $cnpjBeneficiario, ')
          ..write('idTerminalPagamento: $idTerminalPagamento')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    idNfeCabecalho,
    indicadorPagamento,
    meioPagamento,
    valor,
    tipoIntegracao,
    cnpjOperadoraCartao,
    bandeira,
    numeroAutorizacao,
    troco,
    descricaoQuandoOutros,
    dataPagamento,
    cnpjTransacional,
    ufCnpjTransacional,
    cnpjBeneficiario,
    idTerminalPagamento,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeInformacaoPagamento &&
          other.id == this.id &&
          other.idNfeCabecalho == this.idNfeCabecalho &&
          other.indicadorPagamento == this.indicadorPagamento &&
          other.meioPagamento == this.meioPagamento &&
          other.valor == this.valor &&
          other.tipoIntegracao == this.tipoIntegracao &&
          other.cnpjOperadoraCartao == this.cnpjOperadoraCartao &&
          other.bandeira == this.bandeira &&
          other.numeroAutorizacao == this.numeroAutorizacao &&
          other.troco == this.troco &&
          other.descricaoQuandoOutros == this.descricaoQuandoOutros &&
          other.dataPagamento == this.dataPagamento &&
          other.cnpjTransacional == this.cnpjTransacional &&
          other.ufCnpjTransacional == this.ufCnpjTransacional &&
          other.cnpjBeneficiario == this.cnpjBeneficiario &&
          other.idTerminalPagamento == this.idTerminalPagamento);
}

class NfeInformacaoPagamentosCompanion
    extends UpdateCompanion<NfeInformacaoPagamento> {
  final Value<int?> id;
  final Value<int?> idNfeCabecalho;
  final Value<String?> indicadorPagamento;
  final Value<String?> meioPagamento;
  final Value<double?> valor;
  final Value<String?> tipoIntegracao;
  final Value<String?> cnpjOperadoraCartao;
  final Value<String?> bandeira;
  final Value<String?> numeroAutorizacao;
  final Value<double?> troco;
  final Value<String?> descricaoQuandoOutros;
  final Value<DateTime?> dataPagamento;
  final Value<String?> cnpjTransacional;
  final Value<String?> ufCnpjTransacional;
  final Value<String?> cnpjBeneficiario;
  final Value<String?> idTerminalPagamento;
  const NfeInformacaoPagamentosCompanion({
    this.id = const Value.absent(),
    this.idNfeCabecalho = const Value.absent(),
    this.indicadorPagamento = const Value.absent(),
    this.meioPagamento = const Value.absent(),
    this.valor = const Value.absent(),
    this.tipoIntegracao = const Value.absent(),
    this.cnpjOperadoraCartao = const Value.absent(),
    this.bandeira = const Value.absent(),
    this.numeroAutorizacao = const Value.absent(),
    this.troco = const Value.absent(),
    this.descricaoQuandoOutros = const Value.absent(),
    this.dataPagamento = const Value.absent(),
    this.cnpjTransacional = const Value.absent(),
    this.ufCnpjTransacional = const Value.absent(),
    this.cnpjBeneficiario = const Value.absent(),
    this.idTerminalPagamento = const Value.absent(),
  });
  NfeInformacaoPagamentosCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeCabecalho = const Value.absent(),
    this.indicadorPagamento = const Value.absent(),
    this.meioPagamento = const Value.absent(),
    this.valor = const Value.absent(),
    this.tipoIntegracao = const Value.absent(),
    this.cnpjOperadoraCartao = const Value.absent(),
    this.bandeira = const Value.absent(),
    this.numeroAutorizacao = const Value.absent(),
    this.troco = const Value.absent(),
    this.descricaoQuandoOutros = const Value.absent(),
    this.dataPagamento = const Value.absent(),
    this.cnpjTransacional = const Value.absent(),
    this.ufCnpjTransacional = const Value.absent(),
    this.cnpjBeneficiario = const Value.absent(),
    this.idTerminalPagamento = const Value.absent(),
  });
  static Insertable<NfeInformacaoPagamento> custom({
    Expression<int>? id,
    Expression<int>? idNfeCabecalho,
    Expression<String>? indicadorPagamento,
    Expression<String>? meioPagamento,
    Expression<double>? valor,
    Expression<String>? tipoIntegracao,
    Expression<String>? cnpjOperadoraCartao,
    Expression<String>? bandeira,
    Expression<String>? numeroAutorizacao,
    Expression<double>? troco,
    Expression<String>? descricaoQuandoOutros,
    Expression<DateTime>? dataPagamento,
    Expression<String>? cnpjTransacional,
    Expression<String>? ufCnpjTransacional,
    Expression<String>? cnpjBeneficiario,
    Expression<String>? idTerminalPagamento,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (idNfeCabecalho != null) 'id_nfe_cabecalho': idNfeCabecalho,
      if (indicadorPagamento != null) 'indicador_pagamento': indicadorPagamento,
      if (meioPagamento != null) 'meio_pagamento': meioPagamento,
      if (valor != null) 'valor': valor,
      if (tipoIntegracao != null) 'tipo_integracao': tipoIntegracao,
      if (cnpjOperadoraCartao != null)
        'cnpj_operadora_cartao': cnpjOperadoraCartao,
      if (bandeira != null) 'bandeira': bandeira,
      if (numeroAutorizacao != null) 'numero_autorizacao': numeroAutorizacao,
      if (troco != null) 'troco': troco,
      if (descricaoQuandoOutros != null)
        'descricao_quando_outros': descricaoQuandoOutros,
      if (dataPagamento != null) 'data_pagamento': dataPagamento,
      if (cnpjTransacional != null) 'cnpj_transacional': cnpjTransacional,
      if (ufCnpjTransacional != null)
        'uf_cnpj_transacional': ufCnpjTransacional,
      if (cnpjBeneficiario != null) 'cnpj_beneficiario': cnpjBeneficiario,
      if (idTerminalPagamento != null)
        'id_terminal_pagamento': idTerminalPagamento,
    });
  }

  NfeInformacaoPagamentosCompanion copyWith({
    Value<int?>? id,
    Value<int?>? idNfeCabecalho,
    Value<String?>? indicadorPagamento,
    Value<String?>? meioPagamento,
    Value<double?>? valor,
    Value<String?>? tipoIntegracao,
    Value<String?>? cnpjOperadoraCartao,
    Value<String?>? bandeira,
    Value<String?>? numeroAutorizacao,
    Value<double?>? troco,
    Value<String?>? descricaoQuandoOutros,
    Value<DateTime?>? dataPagamento,
    Value<String?>? cnpjTransacional,
    Value<String?>? ufCnpjTransacional,
    Value<String?>? cnpjBeneficiario,
    Value<String?>? idTerminalPagamento,
  }) {
    return NfeInformacaoPagamentosCompanion(
      id: id ?? this.id,
      idNfeCabecalho: idNfeCabecalho ?? this.idNfeCabecalho,
      indicadorPagamento: indicadorPagamento ?? this.indicadorPagamento,
      meioPagamento: meioPagamento ?? this.meioPagamento,
      valor: valor ?? this.valor,
      tipoIntegracao: tipoIntegracao ?? this.tipoIntegracao,
      cnpjOperadoraCartao: cnpjOperadoraCartao ?? this.cnpjOperadoraCartao,
      bandeira: bandeira ?? this.bandeira,
      numeroAutorizacao: numeroAutorizacao ?? this.numeroAutorizacao,
      troco: troco ?? this.troco,
      descricaoQuandoOutros:
          descricaoQuandoOutros ?? this.descricaoQuandoOutros,
      dataPagamento: dataPagamento ?? this.dataPagamento,
      cnpjTransacional: cnpjTransacional ?? this.cnpjTransacional,
      ufCnpjTransacional: ufCnpjTransacional ?? this.ufCnpjTransacional,
      cnpjBeneficiario: cnpjBeneficiario ?? this.cnpjBeneficiario,
      idTerminalPagamento: idTerminalPagamento ?? this.idTerminalPagamento,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (idNfeCabecalho.present) {
      map['id_nfe_cabecalho'] = Variable<int>(idNfeCabecalho.value);
    }
    if (indicadorPagamento.present) {
      map['indicador_pagamento'] = Variable<String>(indicadorPagamento.value);
    }
    if (meioPagamento.present) {
      map['meio_pagamento'] = Variable<String>(meioPagamento.value);
    }
    if (valor.present) {
      map['valor'] = Variable<double>(valor.value);
    }
    if (tipoIntegracao.present) {
      map['tipo_integracao'] = Variable<String>(tipoIntegracao.value);
    }
    if (cnpjOperadoraCartao.present) {
      map['cnpj_operadora_cartao'] = Variable<String>(
        cnpjOperadoraCartao.value,
      );
    }
    if (bandeira.present) {
      map['bandeira'] = Variable<String>(bandeira.value);
    }
    if (numeroAutorizacao.present) {
      map['numero_autorizacao'] = Variable<String>(numeroAutorizacao.value);
    }
    if (troco.present) {
      map['troco'] = Variable<double>(troco.value);
    }
    if (descricaoQuandoOutros.present) {
      map['descricao_quando_outros'] = Variable<String>(
        descricaoQuandoOutros.value,
      );
    }
    if (dataPagamento.present) {
      map['data_pagamento'] = Variable<DateTime>(dataPagamento.value);
    }
    if (cnpjTransacional.present) {
      map['cnpj_transacional'] = Variable<String>(cnpjTransacional.value);
    }
    if (ufCnpjTransacional.present) {
      map['uf_cnpj_transacional'] = Variable<String>(ufCnpjTransacional.value);
    }
    if (cnpjBeneficiario.present) {
      map['cnpj_beneficiario'] = Variable<String>(cnpjBeneficiario.value);
    }
    if (idTerminalPagamento.present) {
      map['id_terminal_pagamento'] = Variable<String>(
        idTerminalPagamento.value,
      );
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeInformacaoPagamentosCompanion(')
          ..write('id: $id, ')
          ..write('idNfeCabecalho: $idNfeCabecalho, ')
          ..write('indicadorPagamento: $indicadorPagamento, ')
          ..write('meioPagamento: $meioPagamento, ')
          ..write('valor: $valor, ')
          ..write('tipoIntegracao: $tipoIntegracao, ')
          ..write('cnpjOperadoraCartao: $cnpjOperadoraCartao, ')
          ..write('bandeira: $bandeira, ')
          ..write('numeroAutorizacao: $numeroAutorizacao, ')
          ..write('troco: $troco, ')
          ..write('descricaoQuandoOutros: $descricaoQuandoOutros, ')
          ..write('dataPagamento: $dataPagamento, ')
          ..write('cnpjTransacional: $cnpjTransacional, ')
          ..write('ufCnpjTransacional: $ufCnpjTransacional, ')
          ..write('cnpjBeneficiario: $cnpjBeneficiario, ')
          ..write('idTerminalPagamento: $idTerminalPagamento')
          ..write(')'))
        .toString();
  }
}

class $NfeItemRastreadosTable extends NfeItemRastreados
    with TableInfo<$NfeItemRastreadosTable, NfeItemRastreado> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeItemRastreadosTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
    'id',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idNfeDetalheMeta = const VerificationMeta(
    'idNfeDetalhe',
  );
  @override
  late final GeneratedColumn<int> idNfeDetalhe = GeneratedColumn<int>(
    'id_nfe_detalhe',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _numeroLoteMeta = const VerificationMeta(
    'numeroLote',
  );
  @override
  late final GeneratedColumn<String> numeroLote = GeneratedColumn<String>(
    'numero_lote',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 20,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _quantidadeItensMeta = const VerificationMeta(
    'quantidadeItens',
  );
  @override
  late final GeneratedColumn<double> quantidadeItens = GeneratedColumn<double>(
    'quantidade_itens',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _dataFabricacaoMeta = const VerificationMeta(
    'dataFabricacao',
  );
  @override
  late final GeneratedColumn<DateTime> dataFabricacao =
      GeneratedColumn<DateTime>(
        'data_fabricacao',
        aliasedName,
        true,
        type: DriftSqlType.dateTime,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _dataValidadeMeta = const VerificationMeta(
    'dataValidade',
  );
  @override
  late final GeneratedColumn<DateTime> dataValidade = GeneratedColumn<DateTime>(
    'data_validade',
    aliasedName,
    true,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _codigoAgregacaoMeta = const VerificationMeta(
    'codigoAgregacao',
  );
  @override
  late final GeneratedColumn<String> codigoAgregacao = GeneratedColumn<String>(
    'codigo_agregacao',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 20,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    idNfeDetalhe,
    numeroLote,
    quantidadeItens,
    dataFabricacao,
    dataValidade,
    codigoAgregacao,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'nfe_item_rastreado';
  @override
  VerificationContext validateIntegrity(
    Insertable<NfeItemRastreado> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('id_nfe_detalhe')) {
      context.handle(
        _idNfeDetalheMeta,
        idNfeDetalhe.isAcceptableOrUnknown(
          data['id_nfe_detalhe']!,
          _idNfeDetalheMeta,
        ),
      );
    }
    if (data.containsKey('numero_lote')) {
      context.handle(
        _numeroLoteMeta,
        numeroLote.isAcceptableOrUnknown(data['numero_lote']!, _numeroLoteMeta),
      );
    }
    if (data.containsKey('quantidade_itens')) {
      context.handle(
        _quantidadeItensMeta,
        quantidadeItens.isAcceptableOrUnknown(
          data['quantidade_itens']!,
          _quantidadeItensMeta,
        ),
      );
    }
    if (data.containsKey('data_fabricacao')) {
      context.handle(
        _dataFabricacaoMeta,
        dataFabricacao.isAcceptableOrUnknown(
          data['data_fabricacao']!,
          _dataFabricacaoMeta,
        ),
      );
    }
    if (data.containsKey('data_validade')) {
      context.handle(
        _dataValidadeMeta,
        dataValidade.isAcceptableOrUnknown(
          data['data_validade']!,
          _dataValidadeMeta,
        ),
      );
    }
    if (data.containsKey('codigo_agregacao')) {
      context.handle(
        _codigoAgregacaoMeta,
        codigoAgregacao.isAcceptableOrUnknown(
          data['codigo_agregacao']!,
          _codigoAgregacaoMeta,
        ),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeItemRastreado map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return NfeItemRastreado(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id'],
      ),
      idNfeDetalhe: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_nfe_detalhe'],
      ),
      numeroLote: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}numero_lote'],
      ),
      quantidadeItens: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}quantidade_itens'],
      ),
      dataFabricacao: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}data_fabricacao'],
      ),
      dataValidade: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}data_validade'],
      ),
      codigoAgregacao: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}codigo_agregacao'],
      ),
    );
  }

  @override
  $NfeItemRastreadosTable createAlias(String alias) {
    return $NfeItemRastreadosTable(attachedDatabase, alias);
  }
}

class NfeItemRastreado extends DataClass
    implements Insertable<NfeItemRastreado> {
  final int? id;
  final int? idNfeDetalhe;
  final String? numeroLote;
  final double? quantidadeItens;
  final DateTime? dataFabricacao;
  final DateTime? dataValidade;
  final String? codigoAgregacao;
  const NfeItemRastreado({
    this.id,
    this.idNfeDetalhe,
    this.numeroLote,
    this.quantidadeItens,
    this.dataFabricacao,
    this.dataValidade,
    this.codigoAgregacao,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeDetalhe != null) {
      map['id_nfe_detalhe'] = Variable<int>(idNfeDetalhe);
    }
    if (!nullToAbsent || numeroLote != null) {
      map['numero_lote'] = Variable<String>(numeroLote);
    }
    if (!nullToAbsent || quantidadeItens != null) {
      map['quantidade_itens'] = Variable<double>(quantidadeItens);
    }
    if (!nullToAbsent || dataFabricacao != null) {
      map['data_fabricacao'] = Variable<DateTime>(dataFabricacao);
    }
    if (!nullToAbsent || dataValidade != null) {
      map['data_validade'] = Variable<DateTime>(dataValidade);
    }
    if (!nullToAbsent || codigoAgregacao != null) {
      map['codigo_agregacao'] = Variable<String>(codigoAgregacao);
    }
    return map;
  }

  factory NfeItemRastreado.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeItemRastreado(
      id: serializer.fromJson<int?>(json['id']),
      idNfeDetalhe: serializer.fromJson<int?>(json['idNfeDetalhe']),
      numeroLote: serializer.fromJson<String?>(json['numeroLote']),
      quantidadeItens: serializer.fromJson<double?>(json['quantidadeItens']),
      dataFabricacao: serializer.fromJson<DateTime?>(json['dataFabricacao']),
      dataValidade: serializer.fromJson<DateTime?>(json['dataValidade']),
      codigoAgregacao: serializer.fromJson<String?>(json['codigoAgregacao']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeDetalhe': serializer.toJson<int?>(idNfeDetalhe),
      'numeroLote': serializer.toJson<String?>(numeroLote),
      'quantidadeItens': serializer.toJson<double?>(quantidadeItens),
      'dataFabricacao': serializer.toJson<DateTime?>(dataFabricacao),
      'dataValidade': serializer.toJson<DateTime?>(dataValidade),
      'codigoAgregacao': serializer.toJson<String?>(codigoAgregacao),
    };
  }

  NfeItemRastreado copyWith({
    Value<int?> id = const Value.absent(),
    Value<int?> idNfeDetalhe = const Value.absent(),
    Value<String?> numeroLote = const Value.absent(),
    Value<double?> quantidadeItens = const Value.absent(),
    Value<DateTime?> dataFabricacao = const Value.absent(),
    Value<DateTime?> dataValidade = const Value.absent(),
    Value<String?> codigoAgregacao = const Value.absent(),
  }) => NfeItemRastreado(
    id: id.present ? id.value : this.id,
    idNfeDetalhe: idNfeDetalhe.present ? idNfeDetalhe.value : this.idNfeDetalhe,
    numeroLote: numeroLote.present ? numeroLote.value : this.numeroLote,
    quantidadeItens:
        quantidadeItens.present ? quantidadeItens.value : this.quantidadeItens,
    dataFabricacao:
        dataFabricacao.present ? dataFabricacao.value : this.dataFabricacao,
    dataValidade: dataValidade.present ? dataValidade.value : this.dataValidade,
    codigoAgregacao:
        codigoAgregacao.present ? codigoAgregacao.value : this.codigoAgregacao,
  );
  NfeItemRastreado copyWithCompanion(NfeItemRastreadosCompanion data) {
    return NfeItemRastreado(
      id: data.id.present ? data.id.value : this.id,
      idNfeDetalhe:
          data.idNfeDetalhe.present
              ? data.idNfeDetalhe.value
              : this.idNfeDetalhe,
      numeroLote:
          data.numeroLote.present ? data.numeroLote.value : this.numeroLote,
      quantidadeItens:
          data.quantidadeItens.present
              ? data.quantidadeItens.value
              : this.quantidadeItens,
      dataFabricacao:
          data.dataFabricacao.present
              ? data.dataFabricacao.value
              : this.dataFabricacao,
      dataValidade:
          data.dataValidade.present
              ? data.dataValidade.value
              : this.dataValidade,
      codigoAgregacao:
          data.codigoAgregacao.present
              ? data.codigoAgregacao.value
              : this.codigoAgregacao,
    );
  }

  @override
  String toString() {
    return (StringBuffer('NfeItemRastreado(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('numeroLote: $numeroLote, ')
          ..write('quantidadeItens: $quantidadeItens, ')
          ..write('dataFabricacao: $dataFabricacao, ')
          ..write('dataValidade: $dataValidade, ')
          ..write('codigoAgregacao: $codigoAgregacao')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    idNfeDetalhe,
    numeroLote,
    quantidadeItens,
    dataFabricacao,
    dataValidade,
    codigoAgregacao,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeItemRastreado &&
          other.id == this.id &&
          other.idNfeDetalhe == this.idNfeDetalhe &&
          other.numeroLote == this.numeroLote &&
          other.quantidadeItens == this.quantidadeItens &&
          other.dataFabricacao == this.dataFabricacao &&
          other.dataValidade == this.dataValidade &&
          other.codigoAgregacao == this.codigoAgregacao);
}

class NfeItemRastreadosCompanion extends UpdateCompanion<NfeItemRastreado> {
  final Value<int?> id;
  final Value<int?> idNfeDetalhe;
  final Value<String?> numeroLote;
  final Value<double?> quantidadeItens;
  final Value<DateTime?> dataFabricacao;
  final Value<DateTime?> dataValidade;
  final Value<String?> codigoAgregacao;
  const NfeItemRastreadosCompanion({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.numeroLote = const Value.absent(),
    this.quantidadeItens = const Value.absent(),
    this.dataFabricacao = const Value.absent(),
    this.dataValidade = const Value.absent(),
    this.codigoAgregacao = const Value.absent(),
  });
  NfeItemRastreadosCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.numeroLote = const Value.absent(),
    this.quantidadeItens = const Value.absent(),
    this.dataFabricacao = const Value.absent(),
    this.dataValidade = const Value.absent(),
    this.codigoAgregacao = const Value.absent(),
  });
  static Insertable<NfeItemRastreado> custom({
    Expression<int>? id,
    Expression<int>? idNfeDetalhe,
    Expression<String>? numeroLote,
    Expression<double>? quantidadeItens,
    Expression<DateTime>? dataFabricacao,
    Expression<DateTime>? dataValidade,
    Expression<String>? codigoAgregacao,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (idNfeDetalhe != null) 'id_nfe_detalhe': idNfeDetalhe,
      if (numeroLote != null) 'numero_lote': numeroLote,
      if (quantidadeItens != null) 'quantidade_itens': quantidadeItens,
      if (dataFabricacao != null) 'data_fabricacao': dataFabricacao,
      if (dataValidade != null) 'data_validade': dataValidade,
      if (codigoAgregacao != null) 'codigo_agregacao': codigoAgregacao,
    });
  }

  NfeItemRastreadosCompanion copyWith({
    Value<int?>? id,
    Value<int?>? idNfeDetalhe,
    Value<String?>? numeroLote,
    Value<double?>? quantidadeItens,
    Value<DateTime?>? dataFabricacao,
    Value<DateTime?>? dataValidade,
    Value<String?>? codigoAgregacao,
  }) {
    return NfeItemRastreadosCompanion(
      id: id ?? this.id,
      idNfeDetalhe: idNfeDetalhe ?? this.idNfeDetalhe,
      numeroLote: numeroLote ?? this.numeroLote,
      quantidadeItens: quantidadeItens ?? this.quantidadeItens,
      dataFabricacao: dataFabricacao ?? this.dataFabricacao,
      dataValidade: dataValidade ?? this.dataValidade,
      codigoAgregacao: codigoAgregacao ?? this.codigoAgregacao,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (idNfeDetalhe.present) {
      map['id_nfe_detalhe'] = Variable<int>(idNfeDetalhe.value);
    }
    if (numeroLote.present) {
      map['numero_lote'] = Variable<String>(numeroLote.value);
    }
    if (quantidadeItens.present) {
      map['quantidade_itens'] = Variable<double>(quantidadeItens.value);
    }
    if (dataFabricacao.present) {
      map['data_fabricacao'] = Variable<DateTime>(dataFabricacao.value);
    }
    if (dataValidade.present) {
      map['data_validade'] = Variable<DateTime>(dataValidade.value);
    }
    if (codigoAgregacao.present) {
      map['codigo_agregacao'] = Variable<String>(codigoAgregacao.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeItemRastreadosCompanion(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('numeroLote: $numeroLote, ')
          ..write('quantidadeItens: $quantidadeItens, ')
          ..write('dataFabricacao: $dataFabricacao, ')
          ..write('dataValidade: $dataValidade, ')
          ..write('codigoAgregacao: $codigoAgregacao')
          ..write(')'))
        .toString();
  }
}

class $NfeDetalheImpostoPisStsTable extends NfeDetalheImpostoPisSts
    with TableInfo<$NfeDetalheImpostoPisStsTable, NfeDetalheImpostoPisSt> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeDetalheImpostoPisStsTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
    'id',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idNfeDetalheMeta = const VerificationMeta(
    'idNfeDetalhe',
  );
  @override
  late final GeneratedColumn<int> idNfeDetalhe = GeneratedColumn<int>(
    'id_nfe_detalhe',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _valorBaseCalculoPisStMeta =
      const VerificationMeta('valorBaseCalculoPisSt');
  @override
  late final GeneratedColumn<double> valorBaseCalculoPisSt =
      GeneratedColumn<double>(
        'valor_base_calculo_pis_st',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _aliquotaPisStPercentualMeta =
      const VerificationMeta('aliquotaPisStPercentual');
  @override
  late final GeneratedColumn<double> aliquotaPisStPercentual =
      GeneratedColumn<double>(
        'aliquota_pis_st_percentual',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _quantidadeVendidaPisStMeta =
      const VerificationMeta('quantidadeVendidaPisSt');
  @override
  late final GeneratedColumn<double> quantidadeVendidaPisSt =
      GeneratedColumn<double>(
        'quantidade_vendida_pis_st',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _aliquotaPisStReaisMeta =
      const VerificationMeta('aliquotaPisStReais');
  @override
  late final GeneratedColumn<double> aliquotaPisStReais =
      GeneratedColumn<double>(
        'aliquota_pis_st_reais',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _valorPisStMeta = const VerificationMeta(
    'valorPisSt',
  );
  @override
  late final GeneratedColumn<double> valorPisSt = GeneratedColumn<double>(
    'valor_pis_st',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _pisStCompoeValorTotalMeta =
      const VerificationMeta('pisStCompoeValorTotal');
  @override
  late final GeneratedColumn<String> pisStCompoeValorTotal =
      GeneratedColumn<String>(
        'pis_st_compoe_valor_total',
        aliasedName,
        true,
        additionalChecks: GeneratedColumn.checkTextLength(
          minTextLength: 0,
          maxTextLength: 1,
        ),
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    idNfeDetalhe,
    valorBaseCalculoPisSt,
    aliquotaPisStPercentual,
    quantidadeVendidaPisSt,
    aliquotaPisStReais,
    valorPisSt,
    pisStCompoeValorTotal,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'nfe_detalhe_imposto_pis_st';
  @override
  VerificationContext validateIntegrity(
    Insertable<NfeDetalheImpostoPisSt> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('id_nfe_detalhe')) {
      context.handle(
        _idNfeDetalheMeta,
        idNfeDetalhe.isAcceptableOrUnknown(
          data['id_nfe_detalhe']!,
          _idNfeDetalheMeta,
        ),
      );
    }
    if (data.containsKey('valor_base_calculo_pis_st')) {
      context.handle(
        _valorBaseCalculoPisStMeta,
        valorBaseCalculoPisSt.isAcceptableOrUnknown(
          data['valor_base_calculo_pis_st']!,
          _valorBaseCalculoPisStMeta,
        ),
      );
    }
    if (data.containsKey('aliquota_pis_st_percentual')) {
      context.handle(
        _aliquotaPisStPercentualMeta,
        aliquotaPisStPercentual.isAcceptableOrUnknown(
          data['aliquota_pis_st_percentual']!,
          _aliquotaPisStPercentualMeta,
        ),
      );
    }
    if (data.containsKey('quantidade_vendida_pis_st')) {
      context.handle(
        _quantidadeVendidaPisStMeta,
        quantidadeVendidaPisSt.isAcceptableOrUnknown(
          data['quantidade_vendida_pis_st']!,
          _quantidadeVendidaPisStMeta,
        ),
      );
    }
    if (data.containsKey('aliquota_pis_st_reais')) {
      context.handle(
        _aliquotaPisStReaisMeta,
        aliquotaPisStReais.isAcceptableOrUnknown(
          data['aliquota_pis_st_reais']!,
          _aliquotaPisStReaisMeta,
        ),
      );
    }
    if (data.containsKey('valor_pis_st')) {
      context.handle(
        _valorPisStMeta,
        valorPisSt.isAcceptableOrUnknown(
          data['valor_pis_st']!,
          _valorPisStMeta,
        ),
      );
    }
    if (data.containsKey('pis_st_compoe_valor_total')) {
      context.handle(
        _pisStCompoeValorTotalMeta,
        pisStCompoeValorTotal.isAcceptableOrUnknown(
          data['pis_st_compoe_valor_total']!,
          _pisStCompoeValorTotalMeta,
        ),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeDetalheImpostoPisSt map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return NfeDetalheImpostoPisSt(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id'],
      ),
      idNfeDetalhe: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_nfe_detalhe'],
      ),
      valorBaseCalculoPisSt: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_base_calculo_pis_st'],
      ),
      aliquotaPisStPercentual: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}aliquota_pis_st_percentual'],
      ),
      quantidadeVendidaPisSt: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}quantidade_vendida_pis_st'],
      ),
      aliquotaPisStReais: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}aliquota_pis_st_reais'],
      ),
      valorPisSt: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_pis_st'],
      ),
      pisStCompoeValorTotal: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}pis_st_compoe_valor_total'],
      ),
    );
  }

  @override
  $NfeDetalheImpostoPisStsTable createAlias(String alias) {
    return $NfeDetalheImpostoPisStsTable(attachedDatabase, alias);
  }
}

class NfeDetalheImpostoPisSt extends DataClass
    implements Insertable<NfeDetalheImpostoPisSt> {
  final int? id;
  final int? idNfeDetalhe;
  final double? valorBaseCalculoPisSt;
  final double? aliquotaPisStPercentual;
  final double? quantidadeVendidaPisSt;
  final double? aliquotaPisStReais;
  final double? valorPisSt;
  final String? pisStCompoeValorTotal;
  const NfeDetalheImpostoPisSt({
    this.id,
    this.idNfeDetalhe,
    this.valorBaseCalculoPisSt,
    this.aliquotaPisStPercentual,
    this.quantidadeVendidaPisSt,
    this.aliquotaPisStReais,
    this.valorPisSt,
    this.pisStCompoeValorTotal,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeDetalhe != null) {
      map['id_nfe_detalhe'] = Variable<int>(idNfeDetalhe);
    }
    if (!nullToAbsent || valorBaseCalculoPisSt != null) {
      map['valor_base_calculo_pis_st'] = Variable<double>(
        valorBaseCalculoPisSt,
      );
    }
    if (!nullToAbsent || aliquotaPisStPercentual != null) {
      map['aliquota_pis_st_percentual'] = Variable<double>(
        aliquotaPisStPercentual,
      );
    }
    if (!nullToAbsent || quantidadeVendidaPisSt != null) {
      map['quantidade_vendida_pis_st'] = Variable<double>(
        quantidadeVendidaPisSt,
      );
    }
    if (!nullToAbsent || aliquotaPisStReais != null) {
      map['aliquota_pis_st_reais'] = Variable<double>(aliquotaPisStReais);
    }
    if (!nullToAbsent || valorPisSt != null) {
      map['valor_pis_st'] = Variable<double>(valorPisSt);
    }
    if (!nullToAbsent || pisStCompoeValorTotal != null) {
      map['pis_st_compoe_valor_total'] = Variable<String>(
        pisStCompoeValorTotal,
      );
    }
    return map;
  }

  factory NfeDetalheImpostoPisSt.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeDetalheImpostoPisSt(
      id: serializer.fromJson<int?>(json['id']),
      idNfeDetalhe: serializer.fromJson<int?>(json['idNfeDetalhe']),
      valorBaseCalculoPisSt: serializer.fromJson<double?>(
        json['valorBaseCalculoPisSt'],
      ),
      aliquotaPisStPercentual: serializer.fromJson<double?>(
        json['aliquotaPisStPercentual'],
      ),
      quantidadeVendidaPisSt: serializer.fromJson<double?>(
        json['quantidadeVendidaPisSt'],
      ),
      aliquotaPisStReais: serializer.fromJson<double?>(
        json['aliquotaPisStReais'],
      ),
      valorPisSt: serializer.fromJson<double?>(json['valorPisSt']),
      pisStCompoeValorTotal: serializer.fromJson<String?>(
        json['pisStCompoeValorTotal'],
      ),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeDetalhe': serializer.toJson<int?>(idNfeDetalhe),
      'valorBaseCalculoPisSt': serializer.toJson<double?>(
        valorBaseCalculoPisSt,
      ),
      'aliquotaPisStPercentual': serializer.toJson<double?>(
        aliquotaPisStPercentual,
      ),
      'quantidadeVendidaPisSt': serializer.toJson<double?>(
        quantidadeVendidaPisSt,
      ),
      'aliquotaPisStReais': serializer.toJson<double?>(aliquotaPisStReais),
      'valorPisSt': serializer.toJson<double?>(valorPisSt),
      'pisStCompoeValorTotal': serializer.toJson<String?>(
        pisStCompoeValorTotal,
      ),
    };
  }

  NfeDetalheImpostoPisSt copyWith({
    Value<int?> id = const Value.absent(),
    Value<int?> idNfeDetalhe = const Value.absent(),
    Value<double?> valorBaseCalculoPisSt = const Value.absent(),
    Value<double?> aliquotaPisStPercentual = const Value.absent(),
    Value<double?> quantidadeVendidaPisSt = const Value.absent(),
    Value<double?> aliquotaPisStReais = const Value.absent(),
    Value<double?> valorPisSt = const Value.absent(),
    Value<String?> pisStCompoeValorTotal = const Value.absent(),
  }) => NfeDetalheImpostoPisSt(
    id: id.present ? id.value : this.id,
    idNfeDetalhe: idNfeDetalhe.present ? idNfeDetalhe.value : this.idNfeDetalhe,
    valorBaseCalculoPisSt:
        valorBaseCalculoPisSt.present
            ? valorBaseCalculoPisSt.value
            : this.valorBaseCalculoPisSt,
    aliquotaPisStPercentual:
        aliquotaPisStPercentual.present
            ? aliquotaPisStPercentual.value
            : this.aliquotaPisStPercentual,
    quantidadeVendidaPisSt:
        quantidadeVendidaPisSt.present
            ? quantidadeVendidaPisSt.value
            : this.quantidadeVendidaPisSt,
    aliquotaPisStReais:
        aliquotaPisStReais.present
            ? aliquotaPisStReais.value
            : this.aliquotaPisStReais,
    valorPisSt: valorPisSt.present ? valorPisSt.value : this.valorPisSt,
    pisStCompoeValorTotal:
        pisStCompoeValorTotal.present
            ? pisStCompoeValorTotal.value
            : this.pisStCompoeValorTotal,
  );
  NfeDetalheImpostoPisSt copyWithCompanion(
    NfeDetalheImpostoPisStsCompanion data,
  ) {
    return NfeDetalheImpostoPisSt(
      id: data.id.present ? data.id.value : this.id,
      idNfeDetalhe:
          data.idNfeDetalhe.present
              ? data.idNfeDetalhe.value
              : this.idNfeDetalhe,
      valorBaseCalculoPisSt:
          data.valorBaseCalculoPisSt.present
              ? data.valorBaseCalculoPisSt.value
              : this.valorBaseCalculoPisSt,
      aliquotaPisStPercentual:
          data.aliquotaPisStPercentual.present
              ? data.aliquotaPisStPercentual.value
              : this.aliquotaPisStPercentual,
      quantidadeVendidaPisSt:
          data.quantidadeVendidaPisSt.present
              ? data.quantidadeVendidaPisSt.value
              : this.quantidadeVendidaPisSt,
      aliquotaPisStReais:
          data.aliquotaPisStReais.present
              ? data.aliquotaPisStReais.value
              : this.aliquotaPisStReais,
      valorPisSt:
          data.valorPisSt.present ? data.valorPisSt.value : this.valorPisSt,
      pisStCompoeValorTotal:
          data.pisStCompoeValorTotal.present
              ? data.pisStCompoeValorTotal.value
              : this.pisStCompoeValorTotal,
    );
  }

  @override
  String toString() {
    return (StringBuffer('NfeDetalheImpostoPisSt(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('valorBaseCalculoPisSt: $valorBaseCalculoPisSt, ')
          ..write('aliquotaPisStPercentual: $aliquotaPisStPercentual, ')
          ..write('quantidadeVendidaPisSt: $quantidadeVendidaPisSt, ')
          ..write('aliquotaPisStReais: $aliquotaPisStReais, ')
          ..write('valorPisSt: $valorPisSt, ')
          ..write('pisStCompoeValorTotal: $pisStCompoeValorTotal')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    idNfeDetalhe,
    valorBaseCalculoPisSt,
    aliquotaPisStPercentual,
    quantidadeVendidaPisSt,
    aliquotaPisStReais,
    valorPisSt,
    pisStCompoeValorTotal,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeDetalheImpostoPisSt &&
          other.id == this.id &&
          other.idNfeDetalhe == this.idNfeDetalhe &&
          other.valorBaseCalculoPisSt == this.valorBaseCalculoPisSt &&
          other.aliquotaPisStPercentual == this.aliquotaPisStPercentual &&
          other.quantidadeVendidaPisSt == this.quantidadeVendidaPisSt &&
          other.aliquotaPisStReais == this.aliquotaPisStReais &&
          other.valorPisSt == this.valorPisSt &&
          other.pisStCompoeValorTotal == this.pisStCompoeValorTotal);
}

class NfeDetalheImpostoPisStsCompanion
    extends UpdateCompanion<NfeDetalheImpostoPisSt> {
  final Value<int?> id;
  final Value<int?> idNfeDetalhe;
  final Value<double?> valorBaseCalculoPisSt;
  final Value<double?> aliquotaPisStPercentual;
  final Value<double?> quantidadeVendidaPisSt;
  final Value<double?> aliquotaPisStReais;
  final Value<double?> valorPisSt;
  final Value<String?> pisStCompoeValorTotal;
  const NfeDetalheImpostoPisStsCompanion({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.valorBaseCalculoPisSt = const Value.absent(),
    this.aliquotaPisStPercentual = const Value.absent(),
    this.quantidadeVendidaPisSt = const Value.absent(),
    this.aliquotaPisStReais = const Value.absent(),
    this.valorPisSt = const Value.absent(),
    this.pisStCompoeValorTotal = const Value.absent(),
  });
  NfeDetalheImpostoPisStsCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.valorBaseCalculoPisSt = const Value.absent(),
    this.aliquotaPisStPercentual = const Value.absent(),
    this.quantidadeVendidaPisSt = const Value.absent(),
    this.aliquotaPisStReais = const Value.absent(),
    this.valorPisSt = const Value.absent(),
    this.pisStCompoeValorTotal = const Value.absent(),
  });
  static Insertable<NfeDetalheImpostoPisSt> custom({
    Expression<int>? id,
    Expression<int>? idNfeDetalhe,
    Expression<double>? valorBaseCalculoPisSt,
    Expression<double>? aliquotaPisStPercentual,
    Expression<double>? quantidadeVendidaPisSt,
    Expression<double>? aliquotaPisStReais,
    Expression<double>? valorPisSt,
    Expression<String>? pisStCompoeValorTotal,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (idNfeDetalhe != null) 'id_nfe_detalhe': idNfeDetalhe,
      if (valorBaseCalculoPisSt != null)
        'valor_base_calculo_pis_st': valorBaseCalculoPisSt,
      if (aliquotaPisStPercentual != null)
        'aliquota_pis_st_percentual': aliquotaPisStPercentual,
      if (quantidadeVendidaPisSt != null)
        'quantidade_vendida_pis_st': quantidadeVendidaPisSt,
      if (aliquotaPisStReais != null)
        'aliquota_pis_st_reais': aliquotaPisStReais,
      if (valorPisSt != null) 'valor_pis_st': valorPisSt,
      if (pisStCompoeValorTotal != null)
        'pis_st_compoe_valor_total': pisStCompoeValorTotal,
    });
  }

  NfeDetalheImpostoPisStsCompanion copyWith({
    Value<int?>? id,
    Value<int?>? idNfeDetalhe,
    Value<double?>? valorBaseCalculoPisSt,
    Value<double?>? aliquotaPisStPercentual,
    Value<double?>? quantidadeVendidaPisSt,
    Value<double?>? aliquotaPisStReais,
    Value<double?>? valorPisSt,
    Value<String?>? pisStCompoeValorTotal,
  }) {
    return NfeDetalheImpostoPisStsCompanion(
      id: id ?? this.id,
      idNfeDetalhe: idNfeDetalhe ?? this.idNfeDetalhe,
      valorBaseCalculoPisSt:
          valorBaseCalculoPisSt ?? this.valorBaseCalculoPisSt,
      aliquotaPisStPercentual:
          aliquotaPisStPercentual ?? this.aliquotaPisStPercentual,
      quantidadeVendidaPisSt:
          quantidadeVendidaPisSt ?? this.quantidadeVendidaPisSt,
      aliquotaPisStReais: aliquotaPisStReais ?? this.aliquotaPisStReais,
      valorPisSt: valorPisSt ?? this.valorPisSt,
      pisStCompoeValorTotal:
          pisStCompoeValorTotal ?? this.pisStCompoeValorTotal,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (idNfeDetalhe.present) {
      map['id_nfe_detalhe'] = Variable<int>(idNfeDetalhe.value);
    }
    if (valorBaseCalculoPisSt.present) {
      map['valor_base_calculo_pis_st'] = Variable<double>(
        valorBaseCalculoPisSt.value,
      );
    }
    if (aliquotaPisStPercentual.present) {
      map['aliquota_pis_st_percentual'] = Variable<double>(
        aliquotaPisStPercentual.value,
      );
    }
    if (quantidadeVendidaPisSt.present) {
      map['quantidade_vendida_pis_st'] = Variable<double>(
        quantidadeVendidaPisSt.value,
      );
    }
    if (aliquotaPisStReais.present) {
      map['aliquota_pis_st_reais'] = Variable<double>(aliquotaPisStReais.value);
    }
    if (valorPisSt.present) {
      map['valor_pis_st'] = Variable<double>(valorPisSt.value);
    }
    if (pisStCompoeValorTotal.present) {
      map['pis_st_compoe_valor_total'] = Variable<String>(
        pisStCompoeValorTotal.value,
      );
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeDetalheImpostoPisStsCompanion(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('valorBaseCalculoPisSt: $valorBaseCalculoPisSt, ')
          ..write('aliquotaPisStPercentual: $aliquotaPisStPercentual, ')
          ..write('quantidadeVendidaPisSt: $quantidadeVendidaPisSt, ')
          ..write('aliquotaPisStReais: $aliquotaPisStReais, ')
          ..write('valorPisSt: $valorPisSt, ')
          ..write('pisStCompoeValorTotal: $pisStCompoeValorTotal')
          ..write(')'))
        .toString();
  }
}

class $NfeDetalheImpostoIcmsUfdestsTable extends NfeDetalheImpostoIcmsUfdests
    with
        TableInfo<
          $NfeDetalheImpostoIcmsUfdestsTable,
          NfeDetalheImpostoIcmsUfdest
        > {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeDetalheImpostoIcmsUfdestsTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
    'id',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idNfeDetalheMeta = const VerificationMeta(
    'idNfeDetalhe',
  );
  @override
  late final GeneratedColumn<int> idNfeDetalhe = GeneratedColumn<int>(
    'id_nfe_detalhe',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _valorBcIcmsUfDestinoMeta =
      const VerificationMeta('valorBcIcmsUfDestino');
  @override
  late final GeneratedColumn<double> valorBcIcmsUfDestino =
      GeneratedColumn<double>(
        'valor_bc_icms_uf_destino',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _valorBcFcpUfDestinoMeta =
      const VerificationMeta('valorBcFcpUfDestino');
  @override
  late final GeneratedColumn<double> valorBcFcpUfDestino =
      GeneratedColumn<double>(
        'valor_bc_fcp_uf_destino',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _percentualFcpUfDestinoMeta =
      const VerificationMeta('percentualFcpUfDestino');
  @override
  late final GeneratedColumn<double> percentualFcpUfDestino =
      GeneratedColumn<double>(
        'percentual_fcp_uf_destino',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _aliquotaInternaUfDestinoMeta =
      const VerificationMeta('aliquotaInternaUfDestino');
  @override
  late final GeneratedColumn<double> aliquotaInternaUfDestino =
      GeneratedColumn<double>(
        'aliquota_interna_uf_destino',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _aliquotaInteresdatualUfEnvolvidasMeta =
      const VerificationMeta('aliquotaInteresdatualUfEnvolvidas');
  @override
  late final GeneratedColumn<double> aliquotaInteresdatualUfEnvolvidas =
      GeneratedColumn<double>(
        'aliquota_interesdatual_uf_envolvidas',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _percentualProvisorioPartilhaIcmsMeta =
      const VerificationMeta('percentualProvisorioPartilhaIcms');
  @override
  late final GeneratedColumn<double> percentualProvisorioPartilhaIcms =
      GeneratedColumn<double>(
        'percentual_provisorio_partilha_icms',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _valorIcmsFcpUfDestinoMeta =
      const VerificationMeta('valorIcmsFcpUfDestino');
  @override
  late final GeneratedColumn<double> valorIcmsFcpUfDestino =
      GeneratedColumn<double>(
        'valor_icms_fcp_uf_destino',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _valorInterestadualUfDestinoMeta =
      const VerificationMeta('valorInterestadualUfDestino');
  @override
  late final GeneratedColumn<double> valorInterestadualUfDestino =
      GeneratedColumn<double>(
        'valor_interestadual_uf_destino',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _valorInterestadualUfRemetenteMeta =
      const VerificationMeta('valorInterestadualUfRemetente');
  @override
  late final GeneratedColumn<double> valorInterestadualUfRemetente =
      GeneratedColumn<double>(
        'valor_interestadual_uf_remetente',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    idNfeDetalhe,
    valorBcIcmsUfDestino,
    valorBcFcpUfDestino,
    percentualFcpUfDestino,
    aliquotaInternaUfDestino,
    aliquotaInteresdatualUfEnvolvidas,
    percentualProvisorioPartilhaIcms,
    valorIcmsFcpUfDestino,
    valorInterestadualUfDestino,
    valorInterestadualUfRemetente,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'nfe_detalhe_imposto_icms_ufdest';
  @override
  VerificationContext validateIntegrity(
    Insertable<NfeDetalheImpostoIcmsUfdest> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('id_nfe_detalhe')) {
      context.handle(
        _idNfeDetalheMeta,
        idNfeDetalhe.isAcceptableOrUnknown(
          data['id_nfe_detalhe']!,
          _idNfeDetalheMeta,
        ),
      );
    }
    if (data.containsKey('valor_bc_icms_uf_destino')) {
      context.handle(
        _valorBcIcmsUfDestinoMeta,
        valorBcIcmsUfDestino.isAcceptableOrUnknown(
          data['valor_bc_icms_uf_destino']!,
          _valorBcIcmsUfDestinoMeta,
        ),
      );
    }
    if (data.containsKey('valor_bc_fcp_uf_destino')) {
      context.handle(
        _valorBcFcpUfDestinoMeta,
        valorBcFcpUfDestino.isAcceptableOrUnknown(
          data['valor_bc_fcp_uf_destino']!,
          _valorBcFcpUfDestinoMeta,
        ),
      );
    }
    if (data.containsKey('percentual_fcp_uf_destino')) {
      context.handle(
        _percentualFcpUfDestinoMeta,
        percentualFcpUfDestino.isAcceptableOrUnknown(
          data['percentual_fcp_uf_destino']!,
          _percentualFcpUfDestinoMeta,
        ),
      );
    }
    if (data.containsKey('aliquota_interna_uf_destino')) {
      context.handle(
        _aliquotaInternaUfDestinoMeta,
        aliquotaInternaUfDestino.isAcceptableOrUnknown(
          data['aliquota_interna_uf_destino']!,
          _aliquotaInternaUfDestinoMeta,
        ),
      );
    }
    if (data.containsKey('aliquota_interesdatual_uf_envolvidas')) {
      context.handle(
        _aliquotaInteresdatualUfEnvolvidasMeta,
        aliquotaInteresdatualUfEnvolvidas.isAcceptableOrUnknown(
          data['aliquota_interesdatual_uf_envolvidas']!,
          _aliquotaInteresdatualUfEnvolvidasMeta,
        ),
      );
    }
    if (data.containsKey('percentual_provisorio_partilha_icms')) {
      context.handle(
        _percentualProvisorioPartilhaIcmsMeta,
        percentualProvisorioPartilhaIcms.isAcceptableOrUnknown(
          data['percentual_provisorio_partilha_icms']!,
          _percentualProvisorioPartilhaIcmsMeta,
        ),
      );
    }
    if (data.containsKey('valor_icms_fcp_uf_destino')) {
      context.handle(
        _valorIcmsFcpUfDestinoMeta,
        valorIcmsFcpUfDestino.isAcceptableOrUnknown(
          data['valor_icms_fcp_uf_destino']!,
          _valorIcmsFcpUfDestinoMeta,
        ),
      );
    }
    if (data.containsKey('valor_interestadual_uf_destino')) {
      context.handle(
        _valorInterestadualUfDestinoMeta,
        valorInterestadualUfDestino.isAcceptableOrUnknown(
          data['valor_interestadual_uf_destino']!,
          _valorInterestadualUfDestinoMeta,
        ),
      );
    }
    if (data.containsKey('valor_interestadual_uf_remetente')) {
      context.handle(
        _valorInterestadualUfRemetenteMeta,
        valorInterestadualUfRemetente.isAcceptableOrUnknown(
          data['valor_interestadual_uf_remetente']!,
          _valorInterestadualUfRemetenteMeta,
        ),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeDetalheImpostoIcmsUfdest map(
    Map<String, dynamic> data, {
    String? tablePrefix,
  }) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return NfeDetalheImpostoIcmsUfdest(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id'],
      ),
      idNfeDetalhe: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_nfe_detalhe'],
      ),
      valorBcIcmsUfDestino: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_bc_icms_uf_destino'],
      ),
      valorBcFcpUfDestino: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_bc_fcp_uf_destino'],
      ),
      percentualFcpUfDestino: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}percentual_fcp_uf_destino'],
      ),
      aliquotaInternaUfDestino: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}aliquota_interna_uf_destino'],
      ),
      aliquotaInteresdatualUfEnvolvidas: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}aliquota_interesdatual_uf_envolvidas'],
      ),
      percentualProvisorioPartilhaIcms: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}percentual_provisorio_partilha_icms'],
      ),
      valorIcmsFcpUfDestino: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_icms_fcp_uf_destino'],
      ),
      valorInterestadualUfDestino: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_interestadual_uf_destino'],
      ),
      valorInterestadualUfRemetente: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_interestadual_uf_remetente'],
      ),
    );
  }

  @override
  $NfeDetalheImpostoIcmsUfdestsTable createAlias(String alias) {
    return $NfeDetalheImpostoIcmsUfdestsTable(attachedDatabase, alias);
  }
}

class NfeDetalheImpostoIcmsUfdest extends DataClass
    implements Insertable<NfeDetalheImpostoIcmsUfdest> {
  final int? id;
  final int? idNfeDetalhe;
  final double? valorBcIcmsUfDestino;
  final double? valorBcFcpUfDestino;
  final double? percentualFcpUfDestino;
  final double? aliquotaInternaUfDestino;
  final double? aliquotaInteresdatualUfEnvolvidas;
  final double? percentualProvisorioPartilhaIcms;
  final double? valorIcmsFcpUfDestino;
  final double? valorInterestadualUfDestino;
  final double? valorInterestadualUfRemetente;
  const NfeDetalheImpostoIcmsUfdest({
    this.id,
    this.idNfeDetalhe,
    this.valorBcIcmsUfDestino,
    this.valorBcFcpUfDestino,
    this.percentualFcpUfDestino,
    this.aliquotaInternaUfDestino,
    this.aliquotaInteresdatualUfEnvolvidas,
    this.percentualProvisorioPartilhaIcms,
    this.valorIcmsFcpUfDestino,
    this.valorInterestadualUfDestino,
    this.valorInterestadualUfRemetente,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeDetalhe != null) {
      map['id_nfe_detalhe'] = Variable<int>(idNfeDetalhe);
    }
    if (!nullToAbsent || valorBcIcmsUfDestino != null) {
      map['valor_bc_icms_uf_destino'] = Variable<double>(valorBcIcmsUfDestino);
    }
    if (!nullToAbsent || valorBcFcpUfDestino != null) {
      map['valor_bc_fcp_uf_destino'] = Variable<double>(valorBcFcpUfDestino);
    }
    if (!nullToAbsent || percentualFcpUfDestino != null) {
      map['percentual_fcp_uf_destino'] = Variable<double>(
        percentualFcpUfDestino,
      );
    }
    if (!nullToAbsent || aliquotaInternaUfDestino != null) {
      map['aliquota_interna_uf_destino'] = Variable<double>(
        aliquotaInternaUfDestino,
      );
    }
    if (!nullToAbsent || aliquotaInteresdatualUfEnvolvidas != null) {
      map['aliquota_interesdatual_uf_envolvidas'] = Variable<double>(
        aliquotaInteresdatualUfEnvolvidas,
      );
    }
    if (!nullToAbsent || percentualProvisorioPartilhaIcms != null) {
      map['percentual_provisorio_partilha_icms'] = Variable<double>(
        percentualProvisorioPartilhaIcms,
      );
    }
    if (!nullToAbsent || valorIcmsFcpUfDestino != null) {
      map['valor_icms_fcp_uf_destino'] = Variable<double>(
        valorIcmsFcpUfDestino,
      );
    }
    if (!nullToAbsent || valorInterestadualUfDestino != null) {
      map['valor_interestadual_uf_destino'] = Variable<double>(
        valorInterestadualUfDestino,
      );
    }
    if (!nullToAbsent || valorInterestadualUfRemetente != null) {
      map['valor_interestadual_uf_remetente'] = Variable<double>(
        valorInterestadualUfRemetente,
      );
    }
    return map;
  }

  factory NfeDetalheImpostoIcmsUfdest.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeDetalheImpostoIcmsUfdest(
      id: serializer.fromJson<int?>(json['id']),
      idNfeDetalhe: serializer.fromJson<int?>(json['idNfeDetalhe']),
      valorBcIcmsUfDestino: serializer.fromJson<double?>(
        json['valorBcIcmsUfDestino'],
      ),
      valorBcFcpUfDestino: serializer.fromJson<double?>(
        json['valorBcFcpUfDestino'],
      ),
      percentualFcpUfDestino: serializer.fromJson<double?>(
        json['percentualFcpUfDestino'],
      ),
      aliquotaInternaUfDestino: serializer.fromJson<double?>(
        json['aliquotaInternaUfDestino'],
      ),
      aliquotaInteresdatualUfEnvolvidas: serializer.fromJson<double?>(
        json['aliquotaInteresdatualUfEnvolvidas'],
      ),
      percentualProvisorioPartilhaIcms: serializer.fromJson<double?>(
        json['percentualProvisorioPartilhaIcms'],
      ),
      valorIcmsFcpUfDestino: serializer.fromJson<double?>(
        json['valorIcmsFcpUfDestino'],
      ),
      valorInterestadualUfDestino: serializer.fromJson<double?>(
        json['valorInterestadualUfDestino'],
      ),
      valorInterestadualUfRemetente: serializer.fromJson<double?>(
        json['valorInterestadualUfRemetente'],
      ),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeDetalhe': serializer.toJson<int?>(idNfeDetalhe),
      'valorBcIcmsUfDestino': serializer.toJson<double?>(valorBcIcmsUfDestino),
      'valorBcFcpUfDestino': serializer.toJson<double?>(valorBcFcpUfDestino),
      'percentualFcpUfDestino': serializer.toJson<double?>(
        percentualFcpUfDestino,
      ),
      'aliquotaInternaUfDestino': serializer.toJson<double?>(
        aliquotaInternaUfDestino,
      ),
      'aliquotaInteresdatualUfEnvolvidas': serializer.toJson<double?>(
        aliquotaInteresdatualUfEnvolvidas,
      ),
      'percentualProvisorioPartilhaIcms': serializer.toJson<double?>(
        percentualProvisorioPartilhaIcms,
      ),
      'valorIcmsFcpUfDestino': serializer.toJson<double?>(
        valorIcmsFcpUfDestino,
      ),
      'valorInterestadualUfDestino': serializer.toJson<double?>(
        valorInterestadualUfDestino,
      ),
      'valorInterestadualUfRemetente': serializer.toJson<double?>(
        valorInterestadualUfRemetente,
      ),
    };
  }

  NfeDetalheImpostoIcmsUfdest copyWith({
    Value<int?> id = const Value.absent(),
    Value<int?> idNfeDetalhe = const Value.absent(),
    Value<double?> valorBcIcmsUfDestino = const Value.absent(),
    Value<double?> valorBcFcpUfDestino = const Value.absent(),
    Value<double?> percentualFcpUfDestino = const Value.absent(),
    Value<double?> aliquotaInternaUfDestino = const Value.absent(),
    Value<double?> aliquotaInteresdatualUfEnvolvidas = const Value.absent(),
    Value<double?> percentualProvisorioPartilhaIcms = const Value.absent(),
    Value<double?> valorIcmsFcpUfDestino = const Value.absent(),
    Value<double?> valorInterestadualUfDestino = const Value.absent(),
    Value<double?> valorInterestadualUfRemetente = const Value.absent(),
  }) => NfeDetalheImpostoIcmsUfdest(
    id: id.present ? id.value : this.id,
    idNfeDetalhe: idNfeDetalhe.present ? idNfeDetalhe.value : this.idNfeDetalhe,
    valorBcIcmsUfDestino:
        valorBcIcmsUfDestino.present
            ? valorBcIcmsUfDestino.value
            : this.valorBcIcmsUfDestino,
    valorBcFcpUfDestino:
        valorBcFcpUfDestino.present
            ? valorBcFcpUfDestino.value
            : this.valorBcFcpUfDestino,
    percentualFcpUfDestino:
        percentualFcpUfDestino.present
            ? percentualFcpUfDestino.value
            : this.percentualFcpUfDestino,
    aliquotaInternaUfDestino:
        aliquotaInternaUfDestino.present
            ? aliquotaInternaUfDestino.value
            : this.aliquotaInternaUfDestino,
    aliquotaInteresdatualUfEnvolvidas:
        aliquotaInteresdatualUfEnvolvidas.present
            ? aliquotaInteresdatualUfEnvolvidas.value
            : this.aliquotaInteresdatualUfEnvolvidas,
    percentualProvisorioPartilhaIcms:
        percentualProvisorioPartilhaIcms.present
            ? percentualProvisorioPartilhaIcms.value
            : this.percentualProvisorioPartilhaIcms,
    valorIcmsFcpUfDestino:
        valorIcmsFcpUfDestino.present
            ? valorIcmsFcpUfDestino.value
            : this.valorIcmsFcpUfDestino,
    valorInterestadualUfDestino:
        valorInterestadualUfDestino.present
            ? valorInterestadualUfDestino.value
            : this.valorInterestadualUfDestino,
    valorInterestadualUfRemetente:
        valorInterestadualUfRemetente.present
            ? valorInterestadualUfRemetente.value
            : this.valorInterestadualUfRemetente,
  );
  NfeDetalheImpostoIcmsUfdest copyWithCompanion(
    NfeDetalheImpostoIcmsUfdestsCompanion data,
  ) {
    return NfeDetalheImpostoIcmsUfdest(
      id: data.id.present ? data.id.value : this.id,
      idNfeDetalhe:
          data.idNfeDetalhe.present
              ? data.idNfeDetalhe.value
              : this.idNfeDetalhe,
      valorBcIcmsUfDestino:
          data.valorBcIcmsUfDestino.present
              ? data.valorBcIcmsUfDestino.value
              : this.valorBcIcmsUfDestino,
      valorBcFcpUfDestino:
          data.valorBcFcpUfDestino.present
              ? data.valorBcFcpUfDestino.value
              : this.valorBcFcpUfDestino,
      percentualFcpUfDestino:
          data.percentualFcpUfDestino.present
              ? data.percentualFcpUfDestino.value
              : this.percentualFcpUfDestino,
      aliquotaInternaUfDestino:
          data.aliquotaInternaUfDestino.present
              ? data.aliquotaInternaUfDestino.value
              : this.aliquotaInternaUfDestino,
      aliquotaInteresdatualUfEnvolvidas:
          data.aliquotaInteresdatualUfEnvolvidas.present
              ? data.aliquotaInteresdatualUfEnvolvidas.value
              : this.aliquotaInteresdatualUfEnvolvidas,
      percentualProvisorioPartilhaIcms:
          data.percentualProvisorioPartilhaIcms.present
              ? data.percentualProvisorioPartilhaIcms.value
              : this.percentualProvisorioPartilhaIcms,
      valorIcmsFcpUfDestino:
          data.valorIcmsFcpUfDestino.present
              ? data.valorIcmsFcpUfDestino.value
              : this.valorIcmsFcpUfDestino,
      valorInterestadualUfDestino:
          data.valorInterestadualUfDestino.present
              ? data.valorInterestadualUfDestino.value
              : this.valorInterestadualUfDestino,
      valorInterestadualUfRemetente:
          data.valorInterestadualUfRemetente.present
              ? data.valorInterestadualUfRemetente.value
              : this.valorInterestadualUfRemetente,
    );
  }

  @override
  String toString() {
    return (StringBuffer('NfeDetalheImpostoIcmsUfdest(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('valorBcIcmsUfDestino: $valorBcIcmsUfDestino, ')
          ..write('valorBcFcpUfDestino: $valorBcFcpUfDestino, ')
          ..write('percentualFcpUfDestino: $percentualFcpUfDestino, ')
          ..write('aliquotaInternaUfDestino: $aliquotaInternaUfDestino, ')
          ..write(
            'aliquotaInteresdatualUfEnvolvidas: $aliquotaInteresdatualUfEnvolvidas, ',
          )
          ..write(
            'percentualProvisorioPartilhaIcms: $percentualProvisorioPartilhaIcms, ',
          )
          ..write('valorIcmsFcpUfDestino: $valorIcmsFcpUfDestino, ')
          ..write('valorInterestadualUfDestino: $valorInterestadualUfDestino, ')
          ..write(
            'valorInterestadualUfRemetente: $valorInterestadualUfRemetente',
          )
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    idNfeDetalhe,
    valorBcIcmsUfDestino,
    valorBcFcpUfDestino,
    percentualFcpUfDestino,
    aliquotaInternaUfDestino,
    aliquotaInteresdatualUfEnvolvidas,
    percentualProvisorioPartilhaIcms,
    valorIcmsFcpUfDestino,
    valorInterestadualUfDestino,
    valorInterestadualUfRemetente,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeDetalheImpostoIcmsUfdest &&
          other.id == this.id &&
          other.idNfeDetalhe == this.idNfeDetalhe &&
          other.valorBcIcmsUfDestino == this.valorBcIcmsUfDestino &&
          other.valorBcFcpUfDestino == this.valorBcFcpUfDestino &&
          other.percentualFcpUfDestino == this.percentualFcpUfDestino &&
          other.aliquotaInternaUfDestino == this.aliquotaInternaUfDestino &&
          other.aliquotaInteresdatualUfEnvolvidas ==
              this.aliquotaInteresdatualUfEnvolvidas &&
          other.percentualProvisorioPartilhaIcms ==
              this.percentualProvisorioPartilhaIcms &&
          other.valorIcmsFcpUfDestino == this.valorIcmsFcpUfDestino &&
          other.valorInterestadualUfDestino ==
              this.valorInterestadualUfDestino &&
          other.valorInterestadualUfRemetente ==
              this.valorInterestadualUfRemetente);
}

class NfeDetalheImpostoIcmsUfdestsCompanion
    extends UpdateCompanion<NfeDetalheImpostoIcmsUfdest> {
  final Value<int?> id;
  final Value<int?> idNfeDetalhe;
  final Value<double?> valorBcIcmsUfDestino;
  final Value<double?> valorBcFcpUfDestino;
  final Value<double?> percentualFcpUfDestino;
  final Value<double?> aliquotaInternaUfDestino;
  final Value<double?> aliquotaInteresdatualUfEnvolvidas;
  final Value<double?> percentualProvisorioPartilhaIcms;
  final Value<double?> valorIcmsFcpUfDestino;
  final Value<double?> valorInterestadualUfDestino;
  final Value<double?> valorInterestadualUfRemetente;
  const NfeDetalheImpostoIcmsUfdestsCompanion({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.valorBcIcmsUfDestino = const Value.absent(),
    this.valorBcFcpUfDestino = const Value.absent(),
    this.percentualFcpUfDestino = const Value.absent(),
    this.aliquotaInternaUfDestino = const Value.absent(),
    this.aliquotaInteresdatualUfEnvolvidas = const Value.absent(),
    this.percentualProvisorioPartilhaIcms = const Value.absent(),
    this.valorIcmsFcpUfDestino = const Value.absent(),
    this.valorInterestadualUfDestino = const Value.absent(),
    this.valorInterestadualUfRemetente = const Value.absent(),
  });
  NfeDetalheImpostoIcmsUfdestsCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.valorBcIcmsUfDestino = const Value.absent(),
    this.valorBcFcpUfDestino = const Value.absent(),
    this.percentualFcpUfDestino = const Value.absent(),
    this.aliquotaInternaUfDestino = const Value.absent(),
    this.aliquotaInteresdatualUfEnvolvidas = const Value.absent(),
    this.percentualProvisorioPartilhaIcms = const Value.absent(),
    this.valorIcmsFcpUfDestino = const Value.absent(),
    this.valorInterestadualUfDestino = const Value.absent(),
    this.valorInterestadualUfRemetente = const Value.absent(),
  });
  static Insertable<NfeDetalheImpostoIcmsUfdest> custom({
    Expression<int>? id,
    Expression<int>? idNfeDetalhe,
    Expression<double>? valorBcIcmsUfDestino,
    Expression<double>? valorBcFcpUfDestino,
    Expression<double>? percentualFcpUfDestino,
    Expression<double>? aliquotaInternaUfDestino,
    Expression<double>? aliquotaInteresdatualUfEnvolvidas,
    Expression<double>? percentualProvisorioPartilhaIcms,
    Expression<double>? valorIcmsFcpUfDestino,
    Expression<double>? valorInterestadualUfDestino,
    Expression<double>? valorInterestadualUfRemetente,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (idNfeDetalhe != null) 'id_nfe_detalhe': idNfeDetalhe,
      if (valorBcIcmsUfDestino != null)
        'valor_bc_icms_uf_destino': valorBcIcmsUfDestino,
      if (valorBcFcpUfDestino != null)
        'valor_bc_fcp_uf_destino': valorBcFcpUfDestino,
      if (percentualFcpUfDestino != null)
        'percentual_fcp_uf_destino': percentualFcpUfDestino,
      if (aliquotaInternaUfDestino != null)
        'aliquota_interna_uf_destino': aliquotaInternaUfDestino,
      if (aliquotaInteresdatualUfEnvolvidas != null)
        'aliquota_interesdatual_uf_envolvidas':
            aliquotaInteresdatualUfEnvolvidas,
      if (percentualProvisorioPartilhaIcms != null)
        'percentual_provisorio_partilha_icms': percentualProvisorioPartilhaIcms,
      if (valorIcmsFcpUfDestino != null)
        'valor_icms_fcp_uf_destino': valorIcmsFcpUfDestino,
      if (valorInterestadualUfDestino != null)
        'valor_interestadual_uf_destino': valorInterestadualUfDestino,
      if (valorInterestadualUfRemetente != null)
        'valor_interestadual_uf_remetente': valorInterestadualUfRemetente,
    });
  }

  NfeDetalheImpostoIcmsUfdestsCompanion copyWith({
    Value<int?>? id,
    Value<int?>? idNfeDetalhe,
    Value<double?>? valorBcIcmsUfDestino,
    Value<double?>? valorBcFcpUfDestino,
    Value<double?>? percentualFcpUfDestino,
    Value<double?>? aliquotaInternaUfDestino,
    Value<double?>? aliquotaInteresdatualUfEnvolvidas,
    Value<double?>? percentualProvisorioPartilhaIcms,
    Value<double?>? valorIcmsFcpUfDestino,
    Value<double?>? valorInterestadualUfDestino,
    Value<double?>? valorInterestadualUfRemetente,
  }) {
    return NfeDetalheImpostoIcmsUfdestsCompanion(
      id: id ?? this.id,
      idNfeDetalhe: idNfeDetalhe ?? this.idNfeDetalhe,
      valorBcIcmsUfDestino: valorBcIcmsUfDestino ?? this.valorBcIcmsUfDestino,
      valorBcFcpUfDestino: valorBcFcpUfDestino ?? this.valorBcFcpUfDestino,
      percentualFcpUfDestino:
          percentualFcpUfDestino ?? this.percentualFcpUfDestino,
      aliquotaInternaUfDestino:
          aliquotaInternaUfDestino ?? this.aliquotaInternaUfDestino,
      aliquotaInteresdatualUfEnvolvidas:
          aliquotaInteresdatualUfEnvolvidas ??
          this.aliquotaInteresdatualUfEnvolvidas,
      percentualProvisorioPartilhaIcms:
          percentualProvisorioPartilhaIcms ??
          this.percentualProvisorioPartilhaIcms,
      valorIcmsFcpUfDestino:
          valorIcmsFcpUfDestino ?? this.valorIcmsFcpUfDestino,
      valorInterestadualUfDestino:
          valorInterestadualUfDestino ?? this.valorInterestadualUfDestino,
      valorInterestadualUfRemetente:
          valorInterestadualUfRemetente ?? this.valorInterestadualUfRemetente,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (idNfeDetalhe.present) {
      map['id_nfe_detalhe'] = Variable<int>(idNfeDetalhe.value);
    }
    if (valorBcIcmsUfDestino.present) {
      map['valor_bc_icms_uf_destino'] = Variable<double>(
        valorBcIcmsUfDestino.value,
      );
    }
    if (valorBcFcpUfDestino.present) {
      map['valor_bc_fcp_uf_destino'] = Variable<double>(
        valorBcFcpUfDestino.value,
      );
    }
    if (percentualFcpUfDestino.present) {
      map['percentual_fcp_uf_destino'] = Variable<double>(
        percentualFcpUfDestino.value,
      );
    }
    if (aliquotaInternaUfDestino.present) {
      map['aliquota_interna_uf_destino'] = Variable<double>(
        aliquotaInternaUfDestino.value,
      );
    }
    if (aliquotaInteresdatualUfEnvolvidas.present) {
      map['aliquota_interesdatual_uf_envolvidas'] = Variable<double>(
        aliquotaInteresdatualUfEnvolvidas.value,
      );
    }
    if (percentualProvisorioPartilhaIcms.present) {
      map['percentual_provisorio_partilha_icms'] = Variable<double>(
        percentualProvisorioPartilhaIcms.value,
      );
    }
    if (valorIcmsFcpUfDestino.present) {
      map['valor_icms_fcp_uf_destino'] = Variable<double>(
        valorIcmsFcpUfDestino.value,
      );
    }
    if (valorInterestadualUfDestino.present) {
      map['valor_interestadual_uf_destino'] = Variable<double>(
        valorInterestadualUfDestino.value,
      );
    }
    if (valorInterestadualUfRemetente.present) {
      map['valor_interestadual_uf_remetente'] = Variable<double>(
        valorInterestadualUfRemetente.value,
      );
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeDetalheImpostoIcmsUfdestsCompanion(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('valorBcIcmsUfDestino: $valorBcIcmsUfDestino, ')
          ..write('valorBcFcpUfDestino: $valorBcFcpUfDestino, ')
          ..write('percentualFcpUfDestino: $percentualFcpUfDestino, ')
          ..write('aliquotaInternaUfDestino: $aliquotaInternaUfDestino, ')
          ..write(
            'aliquotaInteresdatualUfEnvolvidas: $aliquotaInteresdatualUfEnvolvidas, ',
          )
          ..write(
            'percentualProvisorioPartilhaIcms: $percentualProvisorioPartilhaIcms, ',
          )
          ..write('valorIcmsFcpUfDestino: $valorIcmsFcpUfDestino, ')
          ..write('valorInterestadualUfDestino: $valorInterestadualUfDestino, ')
          ..write(
            'valorInterestadualUfRemetente: $valorInterestadualUfRemetente',
          )
          ..write(')'))
        .toString();
  }
}

class $NfeDetalheImpostoCofinsStsTable extends NfeDetalheImpostoCofinsSts
    with
        TableInfo<$NfeDetalheImpostoCofinsStsTable, NfeDetalheImpostoCofinsSt> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeDetalheImpostoCofinsStsTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
    'id',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idNfeDetalheMeta = const VerificationMeta(
    'idNfeDetalhe',
  );
  @override
  late final GeneratedColumn<int> idNfeDetalhe = GeneratedColumn<int>(
    'id_nfe_detalhe',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _baseCalculoCofinsStMeta =
      const VerificationMeta('baseCalculoCofinsSt');
  @override
  late final GeneratedColumn<double> baseCalculoCofinsSt =
      GeneratedColumn<double>(
        'base_calculo_cofins_st',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _aliquotaCofinsStPercentualMeta =
      const VerificationMeta('aliquotaCofinsStPercentual');
  @override
  late final GeneratedColumn<double> aliquotaCofinsStPercentual =
      GeneratedColumn<double>(
        'aliquota_cofins_st_percentual',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _quantidadeVendidaCofinsStMeta =
      const VerificationMeta('quantidadeVendidaCofinsSt');
  @override
  late final GeneratedColumn<double> quantidadeVendidaCofinsSt =
      GeneratedColumn<double>(
        'quantidade_vendida_cofins_st',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _aliquotaCofinsStReaisMeta =
      const VerificationMeta('aliquotaCofinsStReais');
  @override
  late final GeneratedColumn<double> aliquotaCofinsStReais =
      GeneratedColumn<double>(
        'aliquota_cofins_st_reais',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _valorCofinsStMeta = const VerificationMeta(
    'valorCofinsSt',
  );
  @override
  late final GeneratedColumn<double> valorCofinsSt = GeneratedColumn<double>(
    'valor_cofins_st',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _cofinsStCompoeValorTotalMeta =
      const VerificationMeta('cofinsStCompoeValorTotal');
  @override
  late final GeneratedColumn<String> cofinsStCompoeValorTotal =
      GeneratedColumn<String>(
        'cofins_st_compoe_valor_total',
        aliasedName,
        true,
        additionalChecks: GeneratedColumn.checkTextLength(
          minTextLength: 0,
          maxTextLength: 1,
        ),
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    idNfeDetalhe,
    baseCalculoCofinsSt,
    aliquotaCofinsStPercentual,
    quantidadeVendidaCofinsSt,
    aliquotaCofinsStReais,
    valorCofinsSt,
    cofinsStCompoeValorTotal,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'nfe_detalhe_imposto_cofins_st';
  @override
  VerificationContext validateIntegrity(
    Insertable<NfeDetalheImpostoCofinsSt> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('id_nfe_detalhe')) {
      context.handle(
        _idNfeDetalheMeta,
        idNfeDetalhe.isAcceptableOrUnknown(
          data['id_nfe_detalhe']!,
          _idNfeDetalheMeta,
        ),
      );
    }
    if (data.containsKey('base_calculo_cofins_st')) {
      context.handle(
        _baseCalculoCofinsStMeta,
        baseCalculoCofinsSt.isAcceptableOrUnknown(
          data['base_calculo_cofins_st']!,
          _baseCalculoCofinsStMeta,
        ),
      );
    }
    if (data.containsKey('aliquota_cofins_st_percentual')) {
      context.handle(
        _aliquotaCofinsStPercentualMeta,
        aliquotaCofinsStPercentual.isAcceptableOrUnknown(
          data['aliquota_cofins_st_percentual']!,
          _aliquotaCofinsStPercentualMeta,
        ),
      );
    }
    if (data.containsKey('quantidade_vendida_cofins_st')) {
      context.handle(
        _quantidadeVendidaCofinsStMeta,
        quantidadeVendidaCofinsSt.isAcceptableOrUnknown(
          data['quantidade_vendida_cofins_st']!,
          _quantidadeVendidaCofinsStMeta,
        ),
      );
    }
    if (data.containsKey('aliquota_cofins_st_reais')) {
      context.handle(
        _aliquotaCofinsStReaisMeta,
        aliquotaCofinsStReais.isAcceptableOrUnknown(
          data['aliquota_cofins_st_reais']!,
          _aliquotaCofinsStReaisMeta,
        ),
      );
    }
    if (data.containsKey('valor_cofins_st')) {
      context.handle(
        _valorCofinsStMeta,
        valorCofinsSt.isAcceptableOrUnknown(
          data['valor_cofins_st']!,
          _valorCofinsStMeta,
        ),
      );
    }
    if (data.containsKey('cofins_st_compoe_valor_total')) {
      context.handle(
        _cofinsStCompoeValorTotalMeta,
        cofinsStCompoeValorTotal.isAcceptableOrUnknown(
          data['cofins_st_compoe_valor_total']!,
          _cofinsStCompoeValorTotalMeta,
        ),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeDetalheImpostoCofinsSt map(
    Map<String, dynamic> data, {
    String? tablePrefix,
  }) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return NfeDetalheImpostoCofinsSt(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id'],
      ),
      idNfeDetalhe: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_nfe_detalhe'],
      ),
      baseCalculoCofinsSt: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}base_calculo_cofins_st'],
      ),
      aliquotaCofinsStPercentual: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}aliquota_cofins_st_percentual'],
      ),
      quantidadeVendidaCofinsSt: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}quantidade_vendida_cofins_st'],
      ),
      aliquotaCofinsStReais: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}aliquota_cofins_st_reais'],
      ),
      valorCofinsSt: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_cofins_st'],
      ),
      cofinsStCompoeValorTotal: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}cofins_st_compoe_valor_total'],
      ),
    );
  }

  @override
  $NfeDetalheImpostoCofinsStsTable createAlias(String alias) {
    return $NfeDetalheImpostoCofinsStsTable(attachedDatabase, alias);
  }
}

class NfeDetalheImpostoCofinsSt extends DataClass
    implements Insertable<NfeDetalheImpostoCofinsSt> {
  final int? id;
  final int? idNfeDetalhe;
  final double? baseCalculoCofinsSt;
  final double? aliquotaCofinsStPercentual;
  final double? quantidadeVendidaCofinsSt;
  final double? aliquotaCofinsStReais;
  final double? valorCofinsSt;
  final String? cofinsStCompoeValorTotal;
  const NfeDetalheImpostoCofinsSt({
    this.id,
    this.idNfeDetalhe,
    this.baseCalculoCofinsSt,
    this.aliquotaCofinsStPercentual,
    this.quantidadeVendidaCofinsSt,
    this.aliquotaCofinsStReais,
    this.valorCofinsSt,
    this.cofinsStCompoeValorTotal,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeDetalhe != null) {
      map['id_nfe_detalhe'] = Variable<int>(idNfeDetalhe);
    }
    if (!nullToAbsent || baseCalculoCofinsSt != null) {
      map['base_calculo_cofins_st'] = Variable<double>(baseCalculoCofinsSt);
    }
    if (!nullToAbsent || aliquotaCofinsStPercentual != null) {
      map['aliquota_cofins_st_percentual'] = Variable<double>(
        aliquotaCofinsStPercentual,
      );
    }
    if (!nullToAbsent || quantidadeVendidaCofinsSt != null) {
      map['quantidade_vendida_cofins_st'] = Variable<double>(
        quantidadeVendidaCofinsSt,
      );
    }
    if (!nullToAbsent || aliquotaCofinsStReais != null) {
      map['aliquota_cofins_st_reais'] = Variable<double>(aliquotaCofinsStReais);
    }
    if (!nullToAbsent || valorCofinsSt != null) {
      map['valor_cofins_st'] = Variable<double>(valorCofinsSt);
    }
    if (!nullToAbsent || cofinsStCompoeValorTotal != null) {
      map['cofins_st_compoe_valor_total'] = Variable<String>(
        cofinsStCompoeValorTotal,
      );
    }
    return map;
  }

  factory NfeDetalheImpostoCofinsSt.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeDetalheImpostoCofinsSt(
      id: serializer.fromJson<int?>(json['id']),
      idNfeDetalhe: serializer.fromJson<int?>(json['idNfeDetalhe']),
      baseCalculoCofinsSt: serializer.fromJson<double?>(
        json['baseCalculoCofinsSt'],
      ),
      aliquotaCofinsStPercentual: serializer.fromJson<double?>(
        json['aliquotaCofinsStPercentual'],
      ),
      quantidadeVendidaCofinsSt: serializer.fromJson<double?>(
        json['quantidadeVendidaCofinsSt'],
      ),
      aliquotaCofinsStReais: serializer.fromJson<double?>(
        json['aliquotaCofinsStReais'],
      ),
      valorCofinsSt: serializer.fromJson<double?>(json['valorCofinsSt']),
      cofinsStCompoeValorTotal: serializer.fromJson<String?>(
        json['cofinsStCompoeValorTotal'],
      ),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeDetalhe': serializer.toJson<int?>(idNfeDetalhe),
      'baseCalculoCofinsSt': serializer.toJson<double?>(baseCalculoCofinsSt),
      'aliquotaCofinsStPercentual': serializer.toJson<double?>(
        aliquotaCofinsStPercentual,
      ),
      'quantidadeVendidaCofinsSt': serializer.toJson<double?>(
        quantidadeVendidaCofinsSt,
      ),
      'aliquotaCofinsStReais': serializer.toJson<double?>(
        aliquotaCofinsStReais,
      ),
      'valorCofinsSt': serializer.toJson<double?>(valorCofinsSt),
      'cofinsStCompoeValorTotal': serializer.toJson<String?>(
        cofinsStCompoeValorTotal,
      ),
    };
  }

  NfeDetalheImpostoCofinsSt copyWith({
    Value<int?> id = const Value.absent(),
    Value<int?> idNfeDetalhe = const Value.absent(),
    Value<double?> baseCalculoCofinsSt = const Value.absent(),
    Value<double?> aliquotaCofinsStPercentual = const Value.absent(),
    Value<double?> quantidadeVendidaCofinsSt = const Value.absent(),
    Value<double?> aliquotaCofinsStReais = const Value.absent(),
    Value<double?> valorCofinsSt = const Value.absent(),
    Value<String?> cofinsStCompoeValorTotal = const Value.absent(),
  }) => NfeDetalheImpostoCofinsSt(
    id: id.present ? id.value : this.id,
    idNfeDetalhe: idNfeDetalhe.present ? idNfeDetalhe.value : this.idNfeDetalhe,
    baseCalculoCofinsSt:
        baseCalculoCofinsSt.present
            ? baseCalculoCofinsSt.value
            : this.baseCalculoCofinsSt,
    aliquotaCofinsStPercentual:
        aliquotaCofinsStPercentual.present
            ? aliquotaCofinsStPercentual.value
            : this.aliquotaCofinsStPercentual,
    quantidadeVendidaCofinsSt:
        quantidadeVendidaCofinsSt.present
            ? quantidadeVendidaCofinsSt.value
            : this.quantidadeVendidaCofinsSt,
    aliquotaCofinsStReais:
        aliquotaCofinsStReais.present
            ? aliquotaCofinsStReais.value
            : this.aliquotaCofinsStReais,
    valorCofinsSt:
        valorCofinsSt.present ? valorCofinsSt.value : this.valorCofinsSt,
    cofinsStCompoeValorTotal:
        cofinsStCompoeValorTotal.present
            ? cofinsStCompoeValorTotal.value
            : this.cofinsStCompoeValorTotal,
  );
  NfeDetalheImpostoCofinsSt copyWithCompanion(
    NfeDetalheImpostoCofinsStsCompanion data,
  ) {
    return NfeDetalheImpostoCofinsSt(
      id: data.id.present ? data.id.value : this.id,
      idNfeDetalhe:
          data.idNfeDetalhe.present
              ? data.idNfeDetalhe.value
              : this.idNfeDetalhe,
      baseCalculoCofinsSt:
          data.baseCalculoCofinsSt.present
              ? data.baseCalculoCofinsSt.value
              : this.baseCalculoCofinsSt,
      aliquotaCofinsStPercentual:
          data.aliquotaCofinsStPercentual.present
              ? data.aliquotaCofinsStPercentual.value
              : this.aliquotaCofinsStPercentual,
      quantidadeVendidaCofinsSt:
          data.quantidadeVendidaCofinsSt.present
              ? data.quantidadeVendidaCofinsSt.value
              : this.quantidadeVendidaCofinsSt,
      aliquotaCofinsStReais:
          data.aliquotaCofinsStReais.present
              ? data.aliquotaCofinsStReais.value
              : this.aliquotaCofinsStReais,
      valorCofinsSt:
          data.valorCofinsSt.present
              ? data.valorCofinsSt.value
              : this.valorCofinsSt,
      cofinsStCompoeValorTotal:
          data.cofinsStCompoeValorTotal.present
              ? data.cofinsStCompoeValorTotal.value
              : this.cofinsStCompoeValorTotal,
    );
  }

  @override
  String toString() {
    return (StringBuffer('NfeDetalheImpostoCofinsSt(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('baseCalculoCofinsSt: $baseCalculoCofinsSt, ')
          ..write('aliquotaCofinsStPercentual: $aliquotaCofinsStPercentual, ')
          ..write('quantidadeVendidaCofinsSt: $quantidadeVendidaCofinsSt, ')
          ..write('aliquotaCofinsStReais: $aliquotaCofinsStReais, ')
          ..write('valorCofinsSt: $valorCofinsSt, ')
          ..write('cofinsStCompoeValorTotal: $cofinsStCompoeValorTotal')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    idNfeDetalhe,
    baseCalculoCofinsSt,
    aliquotaCofinsStPercentual,
    quantidadeVendidaCofinsSt,
    aliquotaCofinsStReais,
    valorCofinsSt,
    cofinsStCompoeValorTotal,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeDetalheImpostoCofinsSt &&
          other.id == this.id &&
          other.idNfeDetalhe == this.idNfeDetalhe &&
          other.baseCalculoCofinsSt == this.baseCalculoCofinsSt &&
          other.aliquotaCofinsStPercentual == this.aliquotaCofinsStPercentual &&
          other.quantidadeVendidaCofinsSt == this.quantidadeVendidaCofinsSt &&
          other.aliquotaCofinsStReais == this.aliquotaCofinsStReais &&
          other.valorCofinsSt == this.valorCofinsSt &&
          other.cofinsStCompoeValorTotal == this.cofinsStCompoeValorTotal);
}

class NfeDetalheImpostoCofinsStsCompanion
    extends UpdateCompanion<NfeDetalheImpostoCofinsSt> {
  final Value<int?> id;
  final Value<int?> idNfeDetalhe;
  final Value<double?> baseCalculoCofinsSt;
  final Value<double?> aliquotaCofinsStPercentual;
  final Value<double?> quantidadeVendidaCofinsSt;
  final Value<double?> aliquotaCofinsStReais;
  final Value<double?> valorCofinsSt;
  final Value<String?> cofinsStCompoeValorTotal;
  const NfeDetalheImpostoCofinsStsCompanion({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.baseCalculoCofinsSt = const Value.absent(),
    this.aliquotaCofinsStPercentual = const Value.absent(),
    this.quantidadeVendidaCofinsSt = const Value.absent(),
    this.aliquotaCofinsStReais = const Value.absent(),
    this.valorCofinsSt = const Value.absent(),
    this.cofinsStCompoeValorTotal = const Value.absent(),
  });
  NfeDetalheImpostoCofinsStsCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.baseCalculoCofinsSt = const Value.absent(),
    this.aliquotaCofinsStPercentual = const Value.absent(),
    this.quantidadeVendidaCofinsSt = const Value.absent(),
    this.aliquotaCofinsStReais = const Value.absent(),
    this.valorCofinsSt = const Value.absent(),
    this.cofinsStCompoeValorTotal = const Value.absent(),
  });
  static Insertable<NfeDetalheImpostoCofinsSt> custom({
    Expression<int>? id,
    Expression<int>? idNfeDetalhe,
    Expression<double>? baseCalculoCofinsSt,
    Expression<double>? aliquotaCofinsStPercentual,
    Expression<double>? quantidadeVendidaCofinsSt,
    Expression<double>? aliquotaCofinsStReais,
    Expression<double>? valorCofinsSt,
    Expression<String>? cofinsStCompoeValorTotal,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (idNfeDetalhe != null) 'id_nfe_detalhe': idNfeDetalhe,
      if (baseCalculoCofinsSt != null)
        'base_calculo_cofins_st': baseCalculoCofinsSt,
      if (aliquotaCofinsStPercentual != null)
        'aliquota_cofins_st_percentual': aliquotaCofinsStPercentual,
      if (quantidadeVendidaCofinsSt != null)
        'quantidade_vendida_cofins_st': quantidadeVendidaCofinsSt,
      if (aliquotaCofinsStReais != null)
        'aliquota_cofins_st_reais': aliquotaCofinsStReais,
      if (valorCofinsSt != null) 'valor_cofins_st': valorCofinsSt,
      if (cofinsStCompoeValorTotal != null)
        'cofins_st_compoe_valor_total': cofinsStCompoeValorTotal,
    });
  }

  NfeDetalheImpostoCofinsStsCompanion copyWith({
    Value<int?>? id,
    Value<int?>? idNfeDetalhe,
    Value<double?>? baseCalculoCofinsSt,
    Value<double?>? aliquotaCofinsStPercentual,
    Value<double?>? quantidadeVendidaCofinsSt,
    Value<double?>? aliquotaCofinsStReais,
    Value<double?>? valorCofinsSt,
    Value<String?>? cofinsStCompoeValorTotal,
  }) {
    return NfeDetalheImpostoCofinsStsCompanion(
      id: id ?? this.id,
      idNfeDetalhe: idNfeDetalhe ?? this.idNfeDetalhe,
      baseCalculoCofinsSt: baseCalculoCofinsSt ?? this.baseCalculoCofinsSt,
      aliquotaCofinsStPercentual:
          aliquotaCofinsStPercentual ?? this.aliquotaCofinsStPercentual,
      quantidadeVendidaCofinsSt:
          quantidadeVendidaCofinsSt ?? this.quantidadeVendidaCofinsSt,
      aliquotaCofinsStReais:
          aliquotaCofinsStReais ?? this.aliquotaCofinsStReais,
      valorCofinsSt: valorCofinsSt ?? this.valorCofinsSt,
      cofinsStCompoeValorTotal:
          cofinsStCompoeValorTotal ?? this.cofinsStCompoeValorTotal,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (idNfeDetalhe.present) {
      map['id_nfe_detalhe'] = Variable<int>(idNfeDetalhe.value);
    }
    if (baseCalculoCofinsSt.present) {
      map['base_calculo_cofins_st'] = Variable<double>(
        baseCalculoCofinsSt.value,
      );
    }
    if (aliquotaCofinsStPercentual.present) {
      map['aliquota_cofins_st_percentual'] = Variable<double>(
        aliquotaCofinsStPercentual.value,
      );
    }
    if (quantidadeVendidaCofinsSt.present) {
      map['quantidade_vendida_cofins_st'] = Variable<double>(
        quantidadeVendidaCofinsSt.value,
      );
    }
    if (aliquotaCofinsStReais.present) {
      map['aliquota_cofins_st_reais'] = Variable<double>(
        aliquotaCofinsStReais.value,
      );
    }
    if (valorCofinsSt.present) {
      map['valor_cofins_st'] = Variable<double>(valorCofinsSt.value);
    }
    if (cofinsStCompoeValorTotal.present) {
      map['cofins_st_compoe_valor_total'] = Variable<String>(
        cofinsStCompoeValorTotal.value,
      );
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeDetalheImpostoCofinsStsCompanion(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('baseCalculoCofinsSt: $baseCalculoCofinsSt, ')
          ..write('aliquotaCofinsStPercentual: $aliquotaCofinsStPercentual, ')
          ..write('quantidadeVendidaCofinsSt: $quantidadeVendidaCofinsSt, ')
          ..write('aliquotaCofinsStReais: $aliquotaCofinsStReais, ')
          ..write('valorCofinsSt: $valorCofinsSt, ')
          ..write('cofinsStCompoeValorTotal: $cofinsStCompoeValorTotal')
          ..write(')'))
        .toString();
  }
}

class $NfeResponsavelTecnicosTable extends NfeResponsavelTecnicos
    with TableInfo<$NfeResponsavelTecnicosTable, NfeResponsavelTecnico> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeResponsavelTecnicosTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
    'id',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idNfeCabecalhoMeta = const VerificationMeta(
    'idNfeCabecalho',
  );
  @override
  late final GeneratedColumn<int> idNfeCabecalho = GeneratedColumn<int>(
    'id_nfe_cabecalho',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _cnpjMeta = const VerificationMeta('cnpj');
  @override
  late final GeneratedColumn<String> cnpj = GeneratedColumn<String>(
    'cnpj',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 14,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _contatoMeta = const VerificationMeta(
    'contato',
  );
  @override
  late final GeneratedColumn<String> contato = GeneratedColumn<String>(
    'contato',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 60,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _emailMeta = const VerificationMeta('email');
  @override
  late final GeneratedColumn<String> email = GeneratedColumn<String>(
    'email',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 60,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _telefoneMeta = const VerificationMeta(
    'telefone',
  );
  @override
  late final GeneratedColumn<String> telefone = GeneratedColumn<String>(
    'telefone',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 14,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _identificadorCsrtMeta = const VerificationMeta(
    'identificadorCsrt',
  );
  @override
  late final GeneratedColumn<String> identificadorCsrt =
      GeneratedColumn<String>(
        'identificador_csrt',
        aliasedName,
        true,
        additionalChecks: GeneratedColumn.checkTextLength(
          minTextLength: 0,
          maxTextLength: 2,
        ),
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _hashCsrtMeta = const VerificationMeta(
    'hashCsrt',
  );
  @override
  late final GeneratedColumn<String> hashCsrt = GeneratedColumn<String>(
    'hash_csrt',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 28,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    idNfeCabecalho,
    cnpj,
    contato,
    email,
    telefone,
    identificadorCsrt,
    hashCsrt,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'nfe_responsavel_tecnico';
  @override
  VerificationContext validateIntegrity(
    Insertable<NfeResponsavelTecnico> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('id_nfe_cabecalho')) {
      context.handle(
        _idNfeCabecalhoMeta,
        idNfeCabecalho.isAcceptableOrUnknown(
          data['id_nfe_cabecalho']!,
          _idNfeCabecalhoMeta,
        ),
      );
    }
    if (data.containsKey('cnpj')) {
      context.handle(
        _cnpjMeta,
        cnpj.isAcceptableOrUnknown(data['cnpj']!, _cnpjMeta),
      );
    }
    if (data.containsKey('contato')) {
      context.handle(
        _contatoMeta,
        contato.isAcceptableOrUnknown(data['contato']!, _contatoMeta),
      );
    }
    if (data.containsKey('email')) {
      context.handle(
        _emailMeta,
        email.isAcceptableOrUnknown(data['email']!, _emailMeta),
      );
    }
    if (data.containsKey('telefone')) {
      context.handle(
        _telefoneMeta,
        telefone.isAcceptableOrUnknown(data['telefone']!, _telefoneMeta),
      );
    }
    if (data.containsKey('identificador_csrt')) {
      context.handle(
        _identificadorCsrtMeta,
        identificadorCsrt.isAcceptableOrUnknown(
          data['identificador_csrt']!,
          _identificadorCsrtMeta,
        ),
      );
    }
    if (data.containsKey('hash_csrt')) {
      context.handle(
        _hashCsrtMeta,
        hashCsrt.isAcceptableOrUnknown(data['hash_csrt']!, _hashCsrtMeta),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeResponsavelTecnico map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return NfeResponsavelTecnico(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id'],
      ),
      idNfeCabecalho: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_nfe_cabecalho'],
      ),
      cnpj: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}cnpj'],
      ),
      contato: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}contato'],
      ),
      email: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}email'],
      ),
      telefone: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}telefone'],
      ),
      identificadorCsrt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}identificador_csrt'],
      ),
      hashCsrt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}hash_csrt'],
      ),
    );
  }

  @override
  $NfeResponsavelTecnicosTable createAlias(String alias) {
    return $NfeResponsavelTecnicosTable(attachedDatabase, alias);
  }
}

class NfeResponsavelTecnico extends DataClass
    implements Insertable<NfeResponsavelTecnico> {
  final int? id;
  final int? idNfeCabecalho;
  final String? cnpj;
  final String? contato;
  final String? email;
  final String? telefone;
  final String? identificadorCsrt;
  final String? hashCsrt;
  const NfeResponsavelTecnico({
    this.id,
    this.idNfeCabecalho,
    this.cnpj,
    this.contato,
    this.email,
    this.telefone,
    this.identificadorCsrt,
    this.hashCsrt,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeCabecalho != null) {
      map['id_nfe_cabecalho'] = Variable<int>(idNfeCabecalho);
    }
    if (!nullToAbsent || cnpj != null) {
      map['cnpj'] = Variable<String>(cnpj);
    }
    if (!nullToAbsent || contato != null) {
      map['contato'] = Variable<String>(contato);
    }
    if (!nullToAbsent || email != null) {
      map['email'] = Variable<String>(email);
    }
    if (!nullToAbsent || telefone != null) {
      map['telefone'] = Variable<String>(telefone);
    }
    if (!nullToAbsent || identificadorCsrt != null) {
      map['identificador_csrt'] = Variable<String>(identificadorCsrt);
    }
    if (!nullToAbsent || hashCsrt != null) {
      map['hash_csrt'] = Variable<String>(hashCsrt);
    }
    return map;
  }

  factory NfeResponsavelTecnico.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeResponsavelTecnico(
      id: serializer.fromJson<int?>(json['id']),
      idNfeCabecalho: serializer.fromJson<int?>(json['idNfeCabecalho']),
      cnpj: serializer.fromJson<String?>(json['cnpj']),
      contato: serializer.fromJson<String?>(json['contato']),
      email: serializer.fromJson<String?>(json['email']),
      telefone: serializer.fromJson<String?>(json['telefone']),
      identificadorCsrt: serializer.fromJson<String?>(
        json['identificadorCsrt'],
      ),
      hashCsrt: serializer.fromJson<String?>(json['hashCsrt']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeCabecalho': serializer.toJson<int?>(idNfeCabecalho),
      'cnpj': serializer.toJson<String?>(cnpj),
      'contato': serializer.toJson<String?>(contato),
      'email': serializer.toJson<String?>(email),
      'telefone': serializer.toJson<String?>(telefone),
      'identificadorCsrt': serializer.toJson<String?>(identificadorCsrt),
      'hashCsrt': serializer.toJson<String?>(hashCsrt),
    };
  }

  NfeResponsavelTecnico copyWith({
    Value<int?> id = const Value.absent(),
    Value<int?> idNfeCabecalho = const Value.absent(),
    Value<String?> cnpj = const Value.absent(),
    Value<String?> contato = const Value.absent(),
    Value<String?> email = const Value.absent(),
    Value<String?> telefone = const Value.absent(),
    Value<String?> identificadorCsrt = const Value.absent(),
    Value<String?> hashCsrt = const Value.absent(),
  }) => NfeResponsavelTecnico(
    id: id.present ? id.value : this.id,
    idNfeCabecalho:
        idNfeCabecalho.present ? idNfeCabecalho.value : this.idNfeCabecalho,
    cnpj: cnpj.present ? cnpj.value : this.cnpj,
    contato: contato.present ? contato.value : this.contato,
    email: email.present ? email.value : this.email,
    telefone: telefone.present ? telefone.value : this.telefone,
    identificadorCsrt:
        identificadorCsrt.present
            ? identificadorCsrt.value
            : this.identificadorCsrt,
    hashCsrt: hashCsrt.present ? hashCsrt.value : this.hashCsrt,
  );
  NfeResponsavelTecnico copyWithCompanion(
    NfeResponsavelTecnicosCompanion data,
  ) {
    return NfeResponsavelTecnico(
      id: data.id.present ? data.id.value : this.id,
      idNfeCabecalho:
          data.idNfeCabecalho.present
              ? data.idNfeCabecalho.value
              : this.idNfeCabecalho,
      cnpj: data.cnpj.present ? data.cnpj.value : this.cnpj,
      contato: data.contato.present ? data.contato.value : this.contato,
      email: data.email.present ? data.email.value : this.email,
      telefone: data.telefone.present ? data.telefone.value : this.telefone,
      identificadorCsrt:
          data.identificadorCsrt.present
              ? data.identificadorCsrt.value
              : this.identificadorCsrt,
      hashCsrt: data.hashCsrt.present ? data.hashCsrt.value : this.hashCsrt,
    );
  }

  @override
  String toString() {
    return (StringBuffer('NfeResponsavelTecnico(')
          ..write('id: $id, ')
          ..write('idNfeCabecalho: $idNfeCabecalho, ')
          ..write('cnpj: $cnpj, ')
          ..write('contato: $contato, ')
          ..write('email: $email, ')
          ..write('telefone: $telefone, ')
          ..write('identificadorCsrt: $identificadorCsrt, ')
          ..write('hashCsrt: $hashCsrt')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    idNfeCabecalho,
    cnpj,
    contato,
    email,
    telefone,
    identificadorCsrt,
    hashCsrt,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeResponsavelTecnico &&
          other.id == this.id &&
          other.idNfeCabecalho == this.idNfeCabecalho &&
          other.cnpj == this.cnpj &&
          other.contato == this.contato &&
          other.email == this.email &&
          other.telefone == this.telefone &&
          other.identificadorCsrt == this.identificadorCsrt &&
          other.hashCsrt == this.hashCsrt);
}

class NfeResponsavelTecnicosCompanion
    extends UpdateCompanion<NfeResponsavelTecnico> {
  final Value<int?> id;
  final Value<int?> idNfeCabecalho;
  final Value<String?> cnpj;
  final Value<String?> contato;
  final Value<String?> email;
  final Value<String?> telefone;
  final Value<String?> identificadorCsrt;
  final Value<String?> hashCsrt;
  const NfeResponsavelTecnicosCompanion({
    this.id = const Value.absent(),
    this.idNfeCabecalho = const Value.absent(),
    this.cnpj = const Value.absent(),
    this.contato = const Value.absent(),
    this.email = const Value.absent(),
    this.telefone = const Value.absent(),
    this.identificadorCsrt = const Value.absent(),
    this.hashCsrt = const Value.absent(),
  });
  NfeResponsavelTecnicosCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeCabecalho = const Value.absent(),
    this.cnpj = const Value.absent(),
    this.contato = const Value.absent(),
    this.email = const Value.absent(),
    this.telefone = const Value.absent(),
    this.identificadorCsrt = const Value.absent(),
    this.hashCsrt = const Value.absent(),
  });
  static Insertable<NfeResponsavelTecnico> custom({
    Expression<int>? id,
    Expression<int>? idNfeCabecalho,
    Expression<String>? cnpj,
    Expression<String>? contato,
    Expression<String>? email,
    Expression<String>? telefone,
    Expression<String>? identificadorCsrt,
    Expression<String>? hashCsrt,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (idNfeCabecalho != null) 'id_nfe_cabecalho': idNfeCabecalho,
      if (cnpj != null) 'cnpj': cnpj,
      if (contato != null) 'contato': contato,
      if (email != null) 'email': email,
      if (telefone != null) 'telefone': telefone,
      if (identificadorCsrt != null) 'identificador_csrt': identificadorCsrt,
      if (hashCsrt != null) 'hash_csrt': hashCsrt,
    });
  }

  NfeResponsavelTecnicosCompanion copyWith({
    Value<int?>? id,
    Value<int?>? idNfeCabecalho,
    Value<String?>? cnpj,
    Value<String?>? contato,
    Value<String?>? email,
    Value<String?>? telefone,
    Value<String?>? identificadorCsrt,
    Value<String?>? hashCsrt,
  }) {
    return NfeResponsavelTecnicosCompanion(
      id: id ?? this.id,
      idNfeCabecalho: idNfeCabecalho ?? this.idNfeCabecalho,
      cnpj: cnpj ?? this.cnpj,
      contato: contato ?? this.contato,
      email: email ?? this.email,
      telefone: telefone ?? this.telefone,
      identificadorCsrt: identificadorCsrt ?? this.identificadorCsrt,
      hashCsrt: hashCsrt ?? this.hashCsrt,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (idNfeCabecalho.present) {
      map['id_nfe_cabecalho'] = Variable<int>(idNfeCabecalho.value);
    }
    if (cnpj.present) {
      map['cnpj'] = Variable<String>(cnpj.value);
    }
    if (contato.present) {
      map['contato'] = Variable<String>(contato.value);
    }
    if (email.present) {
      map['email'] = Variable<String>(email.value);
    }
    if (telefone.present) {
      map['telefone'] = Variable<String>(telefone.value);
    }
    if (identificadorCsrt.present) {
      map['identificador_csrt'] = Variable<String>(identificadorCsrt.value);
    }
    if (hashCsrt.present) {
      map['hash_csrt'] = Variable<String>(hashCsrt.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeResponsavelTecnicosCompanion(')
          ..write('id: $id, ')
          ..write('idNfeCabecalho: $idNfeCabecalho, ')
          ..write('cnpj: $cnpj, ')
          ..write('contato: $contato, ')
          ..write('email: $email, ')
          ..write('telefone: $telefone, ')
          ..write('identificadorCsrt: $identificadorCsrt, ')
          ..write('hashCsrt: $hashCsrt')
          ..write(')'))
        .toString();
  }
}

class $NfeCompraGovernamentalsTable extends NfeCompraGovernamentals
    with TableInfo<$NfeCompraGovernamentalsTable, NfeCompraGovernamental> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeCompraGovernamentalsTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
    'id',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idNfeCabecalhoMeta = const VerificationMeta(
    'idNfeCabecalho',
  );
  @override
  late final GeneratedColumn<int> idNfeCabecalho = GeneratedColumn<int>(
    'id_nfe_cabecalho',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _tipoEnteMeta = const VerificationMeta(
    'tipoEnte',
  );
  @override
  late final GeneratedColumn<String> tipoEnte = GeneratedColumn<String>(
    'tipo_ente',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 1,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _percentualReducaoMeta = const VerificationMeta(
    'percentualReducao',
  );
  @override
  late final GeneratedColumn<double> percentualReducao =
      GeneratedColumn<double>(
        'percentual_reducao',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _tipoOperacaoMeta = const VerificationMeta(
    'tipoOperacao',
  );
  @override
  late final GeneratedColumn<String> tipoOperacao = GeneratedColumn<String>(
    'tipo_operacao',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 1,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    idNfeCabecalho,
    tipoEnte,
    percentualReducao,
    tipoOperacao,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'nfe_compra_governamental';
  @override
  VerificationContext validateIntegrity(
    Insertable<NfeCompraGovernamental> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('id_nfe_cabecalho')) {
      context.handle(
        _idNfeCabecalhoMeta,
        idNfeCabecalho.isAcceptableOrUnknown(
          data['id_nfe_cabecalho']!,
          _idNfeCabecalhoMeta,
        ),
      );
    }
    if (data.containsKey('tipo_ente')) {
      context.handle(
        _tipoEnteMeta,
        tipoEnte.isAcceptableOrUnknown(data['tipo_ente']!, _tipoEnteMeta),
      );
    }
    if (data.containsKey('percentual_reducao')) {
      context.handle(
        _percentualReducaoMeta,
        percentualReducao.isAcceptableOrUnknown(
          data['percentual_reducao']!,
          _percentualReducaoMeta,
        ),
      );
    }
    if (data.containsKey('tipo_operacao')) {
      context.handle(
        _tipoOperacaoMeta,
        tipoOperacao.isAcceptableOrUnknown(
          data['tipo_operacao']!,
          _tipoOperacaoMeta,
        ),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeCompraGovernamental map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return NfeCompraGovernamental(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id'],
      ),
      idNfeCabecalho: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_nfe_cabecalho'],
      ),
      tipoEnte: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}tipo_ente'],
      ),
      percentualReducao: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}percentual_reducao'],
      ),
      tipoOperacao: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}tipo_operacao'],
      ),
    );
  }

  @override
  $NfeCompraGovernamentalsTable createAlias(String alias) {
    return $NfeCompraGovernamentalsTable(attachedDatabase, alias);
  }
}

class NfeCompraGovernamental extends DataClass
    implements Insertable<NfeCompraGovernamental> {
  final int? id;
  final int? idNfeCabecalho;
  final String? tipoEnte;
  final double? percentualReducao;
  final String? tipoOperacao;
  const NfeCompraGovernamental({
    this.id,
    this.idNfeCabecalho,
    this.tipoEnte,
    this.percentualReducao,
    this.tipoOperacao,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeCabecalho != null) {
      map['id_nfe_cabecalho'] = Variable<int>(idNfeCabecalho);
    }
    if (!nullToAbsent || tipoEnte != null) {
      map['tipo_ente'] = Variable<String>(tipoEnte);
    }
    if (!nullToAbsent || percentualReducao != null) {
      map['percentual_reducao'] = Variable<double>(percentualReducao);
    }
    if (!nullToAbsent || tipoOperacao != null) {
      map['tipo_operacao'] = Variable<String>(tipoOperacao);
    }
    return map;
  }

  factory NfeCompraGovernamental.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeCompraGovernamental(
      id: serializer.fromJson<int?>(json['id']),
      idNfeCabecalho: serializer.fromJson<int?>(json['idNfeCabecalho']),
      tipoEnte: serializer.fromJson<String?>(json['tipoEnte']),
      percentualReducao: serializer.fromJson<double?>(
        json['percentualReducao'],
      ),
      tipoOperacao: serializer.fromJson<String?>(json['tipoOperacao']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeCabecalho': serializer.toJson<int?>(idNfeCabecalho),
      'tipoEnte': serializer.toJson<String?>(tipoEnte),
      'percentualReducao': serializer.toJson<double?>(percentualReducao),
      'tipoOperacao': serializer.toJson<String?>(tipoOperacao),
    };
  }

  NfeCompraGovernamental copyWith({
    Value<int?> id = const Value.absent(),
    Value<int?> idNfeCabecalho = const Value.absent(),
    Value<String?> tipoEnte = const Value.absent(),
    Value<double?> percentualReducao = const Value.absent(),
    Value<String?> tipoOperacao = const Value.absent(),
  }) => NfeCompraGovernamental(
    id: id.present ? id.value : this.id,
    idNfeCabecalho:
        idNfeCabecalho.present ? idNfeCabecalho.value : this.idNfeCabecalho,
    tipoEnte: tipoEnte.present ? tipoEnte.value : this.tipoEnte,
    percentualReducao:
        percentualReducao.present
            ? percentualReducao.value
            : this.percentualReducao,
    tipoOperacao: tipoOperacao.present ? tipoOperacao.value : this.tipoOperacao,
  );
  NfeCompraGovernamental copyWithCompanion(
    NfeCompraGovernamentalsCompanion data,
  ) {
    return NfeCompraGovernamental(
      id: data.id.present ? data.id.value : this.id,
      idNfeCabecalho:
          data.idNfeCabecalho.present
              ? data.idNfeCabecalho.value
              : this.idNfeCabecalho,
      tipoEnte: data.tipoEnte.present ? data.tipoEnte.value : this.tipoEnte,
      percentualReducao:
          data.percentualReducao.present
              ? data.percentualReducao.value
              : this.percentualReducao,
      tipoOperacao:
          data.tipoOperacao.present
              ? data.tipoOperacao.value
              : this.tipoOperacao,
    );
  }

  @override
  String toString() {
    return (StringBuffer('NfeCompraGovernamental(')
          ..write('id: $id, ')
          ..write('idNfeCabecalho: $idNfeCabecalho, ')
          ..write('tipoEnte: $tipoEnte, ')
          ..write('percentualReducao: $percentualReducao, ')
          ..write('tipoOperacao: $tipoOperacao')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    idNfeCabecalho,
    tipoEnte,
    percentualReducao,
    tipoOperacao,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeCompraGovernamental &&
          other.id == this.id &&
          other.idNfeCabecalho == this.idNfeCabecalho &&
          other.tipoEnte == this.tipoEnte &&
          other.percentualReducao == this.percentualReducao &&
          other.tipoOperacao == this.tipoOperacao);
}

class NfeCompraGovernamentalsCompanion
    extends UpdateCompanion<NfeCompraGovernamental> {
  final Value<int?> id;
  final Value<int?> idNfeCabecalho;
  final Value<String?> tipoEnte;
  final Value<double?> percentualReducao;
  final Value<String?> tipoOperacao;
  const NfeCompraGovernamentalsCompanion({
    this.id = const Value.absent(),
    this.idNfeCabecalho = const Value.absent(),
    this.tipoEnte = const Value.absent(),
    this.percentualReducao = const Value.absent(),
    this.tipoOperacao = const Value.absent(),
  });
  NfeCompraGovernamentalsCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeCabecalho = const Value.absent(),
    this.tipoEnte = const Value.absent(),
    this.percentualReducao = const Value.absent(),
    this.tipoOperacao = const Value.absent(),
  });
  static Insertable<NfeCompraGovernamental> custom({
    Expression<int>? id,
    Expression<int>? idNfeCabecalho,
    Expression<String>? tipoEnte,
    Expression<double>? percentualReducao,
    Expression<String>? tipoOperacao,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (idNfeCabecalho != null) 'id_nfe_cabecalho': idNfeCabecalho,
      if (tipoEnte != null) 'tipo_ente': tipoEnte,
      if (percentualReducao != null) 'percentual_reducao': percentualReducao,
      if (tipoOperacao != null) 'tipo_operacao': tipoOperacao,
    });
  }

  NfeCompraGovernamentalsCompanion copyWith({
    Value<int?>? id,
    Value<int?>? idNfeCabecalho,
    Value<String?>? tipoEnte,
    Value<double?>? percentualReducao,
    Value<String?>? tipoOperacao,
  }) {
    return NfeCompraGovernamentalsCompanion(
      id: id ?? this.id,
      idNfeCabecalho: idNfeCabecalho ?? this.idNfeCabecalho,
      tipoEnte: tipoEnte ?? this.tipoEnte,
      percentualReducao: percentualReducao ?? this.percentualReducao,
      tipoOperacao: tipoOperacao ?? this.tipoOperacao,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (idNfeCabecalho.present) {
      map['id_nfe_cabecalho'] = Variable<int>(idNfeCabecalho.value);
    }
    if (tipoEnte.present) {
      map['tipo_ente'] = Variable<String>(tipoEnte.value);
    }
    if (percentualReducao.present) {
      map['percentual_reducao'] = Variable<double>(percentualReducao.value);
    }
    if (tipoOperacao.present) {
      map['tipo_operacao'] = Variable<String>(tipoOperacao.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeCompraGovernamentalsCompanion(')
          ..write('id: $id, ')
          ..write('idNfeCabecalho: $idNfeCabecalho, ')
          ..write('tipoEnte: $tipoEnte, ')
          ..write('percentualReducao: $percentualReducao, ')
          ..write('tipoOperacao: $tipoOperacao')
          ..write(')'))
        .toString();
  }
}

class $NfeAntecipacaoPagamentosTable extends NfeAntecipacaoPagamentos
    with TableInfo<$NfeAntecipacaoPagamentosTable, NfeAntecipacaoPagamento> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeAntecipacaoPagamentosTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
    'id',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idNfeCabecalhoMeta = const VerificationMeta(
    'idNfeCabecalho',
  );
  @override
  late final GeneratedColumn<int> idNfeCabecalho = GeneratedColumn<int>(
    'id_nfe_cabecalho',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _chaveAcessoMeta = const VerificationMeta(
    'chaveAcesso',
  );
  @override
  late final GeneratedColumn<String> chaveAcesso = GeneratedColumn<String>(
    'chave_acesso',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 44,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  @override
  List<GeneratedColumn> get $columns => [id, idNfeCabecalho, chaveAcesso];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'nfe_antecipacao_pagamento';
  @override
  VerificationContext validateIntegrity(
    Insertable<NfeAntecipacaoPagamento> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('id_nfe_cabecalho')) {
      context.handle(
        _idNfeCabecalhoMeta,
        idNfeCabecalho.isAcceptableOrUnknown(
          data['id_nfe_cabecalho']!,
          _idNfeCabecalhoMeta,
        ),
      );
    }
    if (data.containsKey('chave_acesso')) {
      context.handle(
        _chaveAcessoMeta,
        chaveAcesso.isAcceptableOrUnknown(
          data['chave_acesso']!,
          _chaveAcessoMeta,
        ),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeAntecipacaoPagamento map(
    Map<String, dynamic> data, {
    String? tablePrefix,
  }) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return NfeAntecipacaoPagamento(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id'],
      ),
      idNfeCabecalho: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_nfe_cabecalho'],
      ),
      chaveAcesso: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}chave_acesso'],
      ),
    );
  }

  @override
  $NfeAntecipacaoPagamentosTable createAlias(String alias) {
    return $NfeAntecipacaoPagamentosTable(attachedDatabase, alias);
  }
}

class NfeAntecipacaoPagamento extends DataClass
    implements Insertable<NfeAntecipacaoPagamento> {
  final int? id;
  final int? idNfeCabecalho;
  final String? chaveAcesso;
  const NfeAntecipacaoPagamento({
    this.id,
    this.idNfeCabecalho,
    this.chaveAcesso,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeCabecalho != null) {
      map['id_nfe_cabecalho'] = Variable<int>(idNfeCabecalho);
    }
    if (!nullToAbsent || chaveAcesso != null) {
      map['chave_acesso'] = Variable<String>(chaveAcesso);
    }
    return map;
  }

  factory NfeAntecipacaoPagamento.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeAntecipacaoPagamento(
      id: serializer.fromJson<int?>(json['id']),
      idNfeCabecalho: serializer.fromJson<int?>(json['idNfeCabecalho']),
      chaveAcesso: serializer.fromJson<String?>(json['chaveAcesso']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeCabecalho': serializer.toJson<int?>(idNfeCabecalho),
      'chaveAcesso': serializer.toJson<String?>(chaveAcesso),
    };
  }

  NfeAntecipacaoPagamento copyWith({
    Value<int?> id = const Value.absent(),
    Value<int?> idNfeCabecalho = const Value.absent(),
    Value<String?> chaveAcesso = const Value.absent(),
  }) => NfeAntecipacaoPagamento(
    id: id.present ? id.value : this.id,
    idNfeCabecalho:
        idNfeCabecalho.present ? idNfeCabecalho.value : this.idNfeCabecalho,
    chaveAcesso: chaveAcesso.present ? chaveAcesso.value : this.chaveAcesso,
  );
  NfeAntecipacaoPagamento copyWithCompanion(
    NfeAntecipacaoPagamentosCompanion data,
  ) {
    return NfeAntecipacaoPagamento(
      id: data.id.present ? data.id.value : this.id,
      idNfeCabecalho:
          data.idNfeCabecalho.present
              ? data.idNfeCabecalho.value
              : this.idNfeCabecalho,
      chaveAcesso:
          data.chaveAcesso.present ? data.chaveAcesso.value : this.chaveAcesso,
    );
  }

  @override
  String toString() {
    return (StringBuffer('NfeAntecipacaoPagamento(')
          ..write('id: $id, ')
          ..write('idNfeCabecalho: $idNfeCabecalho, ')
          ..write('chaveAcesso: $chaveAcesso')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(id, idNfeCabecalho, chaveAcesso);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeAntecipacaoPagamento &&
          other.id == this.id &&
          other.idNfeCabecalho == this.idNfeCabecalho &&
          other.chaveAcesso == this.chaveAcesso);
}

class NfeAntecipacaoPagamentosCompanion
    extends UpdateCompanion<NfeAntecipacaoPagamento> {
  final Value<int?> id;
  final Value<int?> idNfeCabecalho;
  final Value<String?> chaveAcesso;
  const NfeAntecipacaoPagamentosCompanion({
    this.id = const Value.absent(),
    this.idNfeCabecalho = const Value.absent(),
    this.chaveAcesso = const Value.absent(),
  });
  NfeAntecipacaoPagamentosCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeCabecalho = const Value.absent(),
    this.chaveAcesso = const Value.absent(),
  });
  static Insertable<NfeAntecipacaoPagamento> custom({
    Expression<int>? id,
    Expression<int>? idNfeCabecalho,
    Expression<String>? chaveAcesso,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (idNfeCabecalho != null) 'id_nfe_cabecalho': idNfeCabecalho,
      if (chaveAcesso != null) 'chave_acesso': chaveAcesso,
    });
  }

  NfeAntecipacaoPagamentosCompanion copyWith({
    Value<int?>? id,
    Value<int?>? idNfeCabecalho,
    Value<String?>? chaveAcesso,
  }) {
    return NfeAntecipacaoPagamentosCompanion(
      id: id ?? this.id,
      idNfeCabecalho: idNfeCabecalho ?? this.idNfeCabecalho,
      chaveAcesso: chaveAcesso ?? this.chaveAcesso,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (idNfeCabecalho.present) {
      map['id_nfe_cabecalho'] = Variable<int>(idNfeCabecalho.value);
    }
    if (chaveAcesso.present) {
      map['chave_acesso'] = Variable<String>(chaveAcesso.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeAntecipacaoPagamentosCompanion(')
          ..write('id: $id, ')
          ..write('idNfeCabecalho: $idNfeCabecalho, ')
          ..write('chaveAcesso: $chaveAcesso')
          ..write(')'))
        .toString();
  }
}

class $NfeDetalheImpostoSeletivosTable extends NfeDetalheImpostoSeletivos
    with
        TableInfo<$NfeDetalheImpostoSeletivosTable, NfeDetalheImpostoSeletivo> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeDetalheImpostoSeletivosTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
    'id',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idNfeDetalheMeta = const VerificationMeta(
    'idNfeDetalhe',
  );
  @override
  late final GeneratedColumn<int> idNfeDetalhe = GeneratedColumn<int>(
    'id_nfe_detalhe',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _cstMeta = const VerificationMeta('cst');
  @override
  late final GeneratedColumn<String> cst = GeneratedColumn<String>(
    'cst',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 3,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _codigoClassificacaoTributariaMeta =
      const VerificationMeta('codigoClassificacaoTributaria');
  @override
  late final GeneratedColumn<String> codigoClassificacaoTributaria =
      GeneratedColumn<String>(
        'codigo_classificacao_tributaria',
        aliasedName,
        true,
        additionalChecks: GeneratedColumn.checkTextLength(
          minTextLength: 0,
          maxTextLength: 6,
        ),
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _valorBaseCalculoMeta = const VerificationMeta(
    'valorBaseCalculo',
  );
  @override
  late final GeneratedColumn<double> valorBaseCalculo = GeneratedColumn<double>(
    'valor_base_calculo',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _aliquotaMeta = const VerificationMeta(
    'aliquota',
  );
  @override
  late final GeneratedColumn<double> aliquota = GeneratedColumn<double>(
    'aliquota',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _aliquotaEspecificaMeta =
      const VerificationMeta('aliquotaEspecifica');
  @override
  late final GeneratedColumn<double> aliquotaEspecifica =
      GeneratedColumn<double>(
        'aliquota_especifica',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _unidadeTributavelMeta = const VerificationMeta(
    'unidadeTributavel',
  );
  @override
  late final GeneratedColumn<String> unidadeTributavel =
      GeneratedColumn<String>(
        'unidade_tributavel',
        aliasedName,
        true,
        additionalChecks: GeneratedColumn.checkTextLength(
          minTextLength: 0,
          maxTextLength: 6,
        ),
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _quantidadeTributavelMeta =
      const VerificationMeta('quantidadeTributavel');
  @override
  late final GeneratedColumn<double> quantidadeTributavel =
      GeneratedColumn<double>(
        'quantidade_tributavel',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _valorMeta = const VerificationMeta('valor');
  @override
  late final GeneratedColumn<double> valor = GeneratedColumn<double>(
    'valor',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    idNfeDetalhe,
    cst,
    codigoClassificacaoTributaria,
    valorBaseCalculo,
    aliquota,
    aliquotaEspecifica,
    unidadeTributavel,
    quantidadeTributavel,
    valor,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'nfe_detalhe_imposto_seletivo';
  @override
  VerificationContext validateIntegrity(
    Insertable<NfeDetalheImpostoSeletivo> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('id_nfe_detalhe')) {
      context.handle(
        _idNfeDetalheMeta,
        idNfeDetalhe.isAcceptableOrUnknown(
          data['id_nfe_detalhe']!,
          _idNfeDetalheMeta,
        ),
      );
    }
    if (data.containsKey('cst')) {
      context.handle(
        _cstMeta,
        cst.isAcceptableOrUnknown(data['cst']!, _cstMeta),
      );
    }
    if (data.containsKey('codigo_classificacao_tributaria')) {
      context.handle(
        _codigoClassificacaoTributariaMeta,
        codigoClassificacaoTributaria.isAcceptableOrUnknown(
          data['codigo_classificacao_tributaria']!,
          _codigoClassificacaoTributariaMeta,
        ),
      );
    }
    if (data.containsKey('valor_base_calculo')) {
      context.handle(
        _valorBaseCalculoMeta,
        valorBaseCalculo.isAcceptableOrUnknown(
          data['valor_base_calculo']!,
          _valorBaseCalculoMeta,
        ),
      );
    }
    if (data.containsKey('aliquota')) {
      context.handle(
        _aliquotaMeta,
        aliquota.isAcceptableOrUnknown(data['aliquota']!, _aliquotaMeta),
      );
    }
    if (data.containsKey('aliquota_especifica')) {
      context.handle(
        _aliquotaEspecificaMeta,
        aliquotaEspecifica.isAcceptableOrUnknown(
          data['aliquota_especifica']!,
          _aliquotaEspecificaMeta,
        ),
      );
    }
    if (data.containsKey('unidade_tributavel')) {
      context.handle(
        _unidadeTributavelMeta,
        unidadeTributavel.isAcceptableOrUnknown(
          data['unidade_tributavel']!,
          _unidadeTributavelMeta,
        ),
      );
    }
    if (data.containsKey('quantidade_tributavel')) {
      context.handle(
        _quantidadeTributavelMeta,
        quantidadeTributavel.isAcceptableOrUnknown(
          data['quantidade_tributavel']!,
          _quantidadeTributavelMeta,
        ),
      );
    }
    if (data.containsKey('valor')) {
      context.handle(
        _valorMeta,
        valor.isAcceptableOrUnknown(data['valor']!, _valorMeta),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeDetalheImpostoSeletivo map(
    Map<String, dynamic> data, {
    String? tablePrefix,
  }) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return NfeDetalheImpostoSeletivo(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id'],
      ),
      idNfeDetalhe: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_nfe_detalhe'],
      ),
      cst: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}cst'],
      ),
      codigoClassificacaoTributaria: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}codigo_classificacao_tributaria'],
      ),
      valorBaseCalculo: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_base_calculo'],
      ),
      aliquota: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}aliquota'],
      ),
      aliquotaEspecifica: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}aliquota_especifica'],
      ),
      unidadeTributavel: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}unidade_tributavel'],
      ),
      quantidadeTributavel: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}quantidade_tributavel'],
      ),
      valor: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor'],
      ),
    );
  }

  @override
  $NfeDetalheImpostoSeletivosTable createAlias(String alias) {
    return $NfeDetalheImpostoSeletivosTable(attachedDatabase, alias);
  }
}

class NfeDetalheImpostoSeletivo extends DataClass
    implements Insertable<NfeDetalheImpostoSeletivo> {
  final int? id;
  final int? idNfeDetalhe;
  final String? cst;
  final String? codigoClassificacaoTributaria;
  final double? valorBaseCalculo;
  final double? aliquota;
  final double? aliquotaEspecifica;
  final String? unidadeTributavel;
  final double? quantidadeTributavel;
  final double? valor;
  const NfeDetalheImpostoSeletivo({
    this.id,
    this.idNfeDetalhe,
    this.cst,
    this.codigoClassificacaoTributaria,
    this.valorBaseCalculo,
    this.aliquota,
    this.aliquotaEspecifica,
    this.unidadeTributavel,
    this.quantidadeTributavel,
    this.valor,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeDetalhe != null) {
      map['id_nfe_detalhe'] = Variable<int>(idNfeDetalhe);
    }
    if (!nullToAbsent || cst != null) {
      map['cst'] = Variable<String>(cst);
    }
    if (!nullToAbsent || codigoClassificacaoTributaria != null) {
      map['codigo_classificacao_tributaria'] = Variable<String>(
        codigoClassificacaoTributaria,
      );
    }
    if (!nullToAbsent || valorBaseCalculo != null) {
      map['valor_base_calculo'] = Variable<double>(valorBaseCalculo);
    }
    if (!nullToAbsent || aliquota != null) {
      map['aliquota'] = Variable<double>(aliquota);
    }
    if (!nullToAbsent || aliquotaEspecifica != null) {
      map['aliquota_especifica'] = Variable<double>(aliquotaEspecifica);
    }
    if (!nullToAbsent || unidadeTributavel != null) {
      map['unidade_tributavel'] = Variable<String>(unidadeTributavel);
    }
    if (!nullToAbsent || quantidadeTributavel != null) {
      map['quantidade_tributavel'] = Variable<double>(quantidadeTributavel);
    }
    if (!nullToAbsent || valor != null) {
      map['valor'] = Variable<double>(valor);
    }
    return map;
  }

  factory NfeDetalheImpostoSeletivo.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeDetalheImpostoSeletivo(
      id: serializer.fromJson<int?>(json['id']),
      idNfeDetalhe: serializer.fromJson<int?>(json['idNfeDetalhe']),
      cst: serializer.fromJson<String?>(json['cst']),
      codigoClassificacaoTributaria: serializer.fromJson<String?>(
        json['codigoClassificacaoTributaria'],
      ),
      valorBaseCalculo: serializer.fromJson<double?>(json['valorBaseCalculo']),
      aliquota: serializer.fromJson<double?>(json['aliquota']),
      aliquotaEspecifica: serializer.fromJson<double?>(
        json['aliquotaEspecifica'],
      ),
      unidadeTributavel: serializer.fromJson<String?>(
        json['unidadeTributavel'],
      ),
      quantidadeTributavel: serializer.fromJson<double?>(
        json['quantidadeTributavel'],
      ),
      valor: serializer.fromJson<double?>(json['valor']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeDetalhe': serializer.toJson<int?>(idNfeDetalhe),
      'cst': serializer.toJson<String?>(cst),
      'codigoClassificacaoTributaria': serializer.toJson<String?>(
        codigoClassificacaoTributaria,
      ),
      'valorBaseCalculo': serializer.toJson<double?>(valorBaseCalculo),
      'aliquota': serializer.toJson<double?>(aliquota),
      'aliquotaEspecifica': serializer.toJson<double?>(aliquotaEspecifica),
      'unidadeTributavel': serializer.toJson<String?>(unidadeTributavel),
      'quantidadeTributavel': serializer.toJson<double?>(quantidadeTributavel),
      'valor': serializer.toJson<double?>(valor),
    };
  }

  NfeDetalheImpostoSeletivo copyWith({
    Value<int?> id = const Value.absent(),
    Value<int?> idNfeDetalhe = const Value.absent(),
    Value<String?> cst = const Value.absent(),
    Value<String?> codigoClassificacaoTributaria = const Value.absent(),
    Value<double?> valorBaseCalculo = const Value.absent(),
    Value<double?> aliquota = const Value.absent(),
    Value<double?> aliquotaEspecifica = const Value.absent(),
    Value<String?> unidadeTributavel = const Value.absent(),
    Value<double?> quantidadeTributavel = const Value.absent(),
    Value<double?> valor = const Value.absent(),
  }) => NfeDetalheImpostoSeletivo(
    id: id.present ? id.value : this.id,
    idNfeDetalhe: idNfeDetalhe.present ? idNfeDetalhe.value : this.idNfeDetalhe,
    cst: cst.present ? cst.value : this.cst,
    codigoClassificacaoTributaria:
        codigoClassificacaoTributaria.present
            ? codigoClassificacaoTributaria.value
            : this.codigoClassificacaoTributaria,
    valorBaseCalculo:
        valorBaseCalculo.present
            ? valorBaseCalculo.value
            : this.valorBaseCalculo,
    aliquota: aliquota.present ? aliquota.value : this.aliquota,
    aliquotaEspecifica:
        aliquotaEspecifica.present
            ? aliquotaEspecifica.value
            : this.aliquotaEspecifica,
    unidadeTributavel:
        unidadeTributavel.present
            ? unidadeTributavel.value
            : this.unidadeTributavel,
    quantidadeTributavel:
        quantidadeTributavel.present
            ? quantidadeTributavel.value
            : this.quantidadeTributavel,
    valor: valor.present ? valor.value : this.valor,
  );
  NfeDetalheImpostoSeletivo copyWithCompanion(
    NfeDetalheImpostoSeletivosCompanion data,
  ) {
    return NfeDetalheImpostoSeletivo(
      id: data.id.present ? data.id.value : this.id,
      idNfeDetalhe:
          data.idNfeDetalhe.present
              ? data.idNfeDetalhe.value
              : this.idNfeDetalhe,
      cst: data.cst.present ? data.cst.value : this.cst,
      codigoClassificacaoTributaria:
          data.codigoClassificacaoTributaria.present
              ? data.codigoClassificacaoTributaria.value
              : this.codigoClassificacaoTributaria,
      valorBaseCalculo:
          data.valorBaseCalculo.present
              ? data.valorBaseCalculo.value
              : this.valorBaseCalculo,
      aliquota: data.aliquota.present ? data.aliquota.value : this.aliquota,
      aliquotaEspecifica:
          data.aliquotaEspecifica.present
              ? data.aliquotaEspecifica.value
              : this.aliquotaEspecifica,
      unidadeTributavel:
          data.unidadeTributavel.present
              ? data.unidadeTributavel.value
              : this.unidadeTributavel,
      quantidadeTributavel:
          data.quantidadeTributavel.present
              ? data.quantidadeTributavel.value
              : this.quantidadeTributavel,
      valor: data.valor.present ? data.valor.value : this.valor,
    );
  }

  @override
  String toString() {
    return (StringBuffer('NfeDetalheImpostoSeletivo(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('cst: $cst, ')
          ..write(
            'codigoClassificacaoTributaria: $codigoClassificacaoTributaria, ',
          )
          ..write('valorBaseCalculo: $valorBaseCalculo, ')
          ..write('aliquota: $aliquota, ')
          ..write('aliquotaEspecifica: $aliquotaEspecifica, ')
          ..write('unidadeTributavel: $unidadeTributavel, ')
          ..write('quantidadeTributavel: $quantidadeTributavel, ')
          ..write('valor: $valor')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    idNfeDetalhe,
    cst,
    codigoClassificacaoTributaria,
    valorBaseCalculo,
    aliquota,
    aliquotaEspecifica,
    unidadeTributavel,
    quantidadeTributavel,
    valor,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeDetalheImpostoSeletivo &&
          other.id == this.id &&
          other.idNfeDetalhe == this.idNfeDetalhe &&
          other.cst == this.cst &&
          other.codigoClassificacaoTributaria ==
              this.codigoClassificacaoTributaria &&
          other.valorBaseCalculo == this.valorBaseCalculo &&
          other.aliquota == this.aliquota &&
          other.aliquotaEspecifica == this.aliquotaEspecifica &&
          other.unidadeTributavel == this.unidadeTributavel &&
          other.quantidadeTributavel == this.quantidadeTributavel &&
          other.valor == this.valor);
}

class NfeDetalheImpostoSeletivosCompanion
    extends UpdateCompanion<NfeDetalheImpostoSeletivo> {
  final Value<int?> id;
  final Value<int?> idNfeDetalhe;
  final Value<String?> cst;
  final Value<String?> codigoClassificacaoTributaria;
  final Value<double?> valorBaseCalculo;
  final Value<double?> aliquota;
  final Value<double?> aliquotaEspecifica;
  final Value<String?> unidadeTributavel;
  final Value<double?> quantidadeTributavel;
  final Value<double?> valor;
  const NfeDetalheImpostoSeletivosCompanion({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.cst = const Value.absent(),
    this.codigoClassificacaoTributaria = const Value.absent(),
    this.valorBaseCalculo = const Value.absent(),
    this.aliquota = const Value.absent(),
    this.aliquotaEspecifica = const Value.absent(),
    this.unidadeTributavel = const Value.absent(),
    this.quantidadeTributavel = const Value.absent(),
    this.valor = const Value.absent(),
  });
  NfeDetalheImpostoSeletivosCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.cst = const Value.absent(),
    this.codigoClassificacaoTributaria = const Value.absent(),
    this.valorBaseCalculo = const Value.absent(),
    this.aliquota = const Value.absent(),
    this.aliquotaEspecifica = const Value.absent(),
    this.unidadeTributavel = const Value.absent(),
    this.quantidadeTributavel = const Value.absent(),
    this.valor = const Value.absent(),
  });
  static Insertable<NfeDetalheImpostoSeletivo> custom({
    Expression<int>? id,
    Expression<int>? idNfeDetalhe,
    Expression<String>? cst,
    Expression<String>? codigoClassificacaoTributaria,
    Expression<double>? valorBaseCalculo,
    Expression<double>? aliquota,
    Expression<double>? aliquotaEspecifica,
    Expression<String>? unidadeTributavel,
    Expression<double>? quantidadeTributavel,
    Expression<double>? valor,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (idNfeDetalhe != null) 'id_nfe_detalhe': idNfeDetalhe,
      if (cst != null) 'cst': cst,
      if (codigoClassificacaoTributaria != null)
        'codigo_classificacao_tributaria': codigoClassificacaoTributaria,
      if (valorBaseCalculo != null) 'valor_base_calculo': valorBaseCalculo,
      if (aliquota != null) 'aliquota': aliquota,
      if (aliquotaEspecifica != null) 'aliquota_especifica': aliquotaEspecifica,
      if (unidadeTributavel != null) 'unidade_tributavel': unidadeTributavel,
      if (quantidadeTributavel != null)
        'quantidade_tributavel': quantidadeTributavel,
      if (valor != null) 'valor': valor,
    });
  }

  NfeDetalheImpostoSeletivosCompanion copyWith({
    Value<int?>? id,
    Value<int?>? idNfeDetalhe,
    Value<String?>? cst,
    Value<String?>? codigoClassificacaoTributaria,
    Value<double?>? valorBaseCalculo,
    Value<double?>? aliquota,
    Value<double?>? aliquotaEspecifica,
    Value<String?>? unidadeTributavel,
    Value<double?>? quantidadeTributavel,
    Value<double?>? valor,
  }) {
    return NfeDetalheImpostoSeletivosCompanion(
      id: id ?? this.id,
      idNfeDetalhe: idNfeDetalhe ?? this.idNfeDetalhe,
      cst: cst ?? this.cst,
      codigoClassificacaoTributaria:
          codigoClassificacaoTributaria ?? this.codigoClassificacaoTributaria,
      valorBaseCalculo: valorBaseCalculo ?? this.valorBaseCalculo,
      aliquota: aliquota ?? this.aliquota,
      aliquotaEspecifica: aliquotaEspecifica ?? this.aliquotaEspecifica,
      unidadeTributavel: unidadeTributavel ?? this.unidadeTributavel,
      quantidadeTributavel: quantidadeTributavel ?? this.quantidadeTributavel,
      valor: valor ?? this.valor,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (idNfeDetalhe.present) {
      map['id_nfe_detalhe'] = Variable<int>(idNfeDetalhe.value);
    }
    if (cst.present) {
      map['cst'] = Variable<String>(cst.value);
    }
    if (codigoClassificacaoTributaria.present) {
      map['codigo_classificacao_tributaria'] = Variable<String>(
        codigoClassificacaoTributaria.value,
      );
    }
    if (valorBaseCalculo.present) {
      map['valor_base_calculo'] = Variable<double>(valorBaseCalculo.value);
    }
    if (aliquota.present) {
      map['aliquota'] = Variable<double>(aliquota.value);
    }
    if (aliquotaEspecifica.present) {
      map['aliquota_especifica'] = Variable<double>(aliquotaEspecifica.value);
    }
    if (unidadeTributavel.present) {
      map['unidade_tributavel'] = Variable<String>(unidadeTributavel.value);
    }
    if (quantidadeTributavel.present) {
      map['quantidade_tributavel'] = Variable<double>(
        quantidadeTributavel.value,
      );
    }
    if (valor.present) {
      map['valor'] = Variable<double>(valor.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeDetalheImpostoSeletivosCompanion(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('cst: $cst, ')
          ..write(
            'codigoClassificacaoTributaria: $codigoClassificacaoTributaria, ',
          )
          ..write('valorBaseCalculo: $valorBaseCalculo, ')
          ..write('aliquota: $aliquota, ')
          ..write('aliquotaEspecifica: $aliquotaEspecifica, ')
          ..write('unidadeTributavel: $unidadeTributavel, ')
          ..write('quantidadeTributavel: $quantidadeTributavel, ')
          ..write('valor: $valor')
          ..write(')'))
        .toString();
  }
}

class $NfeDetalheImpostoIbsUfsTable extends NfeDetalheImpostoIbsUfs
    with TableInfo<$NfeDetalheImpostoIbsUfsTable, NfeDetalheImpostoIbsUf> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeDetalheImpostoIbsUfsTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
    'id',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idNfeDetalheMeta = const VerificationMeta(
    'idNfeDetalhe',
  );
  @override
  late final GeneratedColumn<int> idNfeDetalhe = GeneratedColumn<int>(
    'id_nfe_detalhe',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _cstMeta = const VerificationMeta('cst');
  @override
  late final GeneratedColumn<String> cst = GeneratedColumn<String>(
    'cst',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 3,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _codigoClassificacaoTributariaMeta =
      const VerificationMeta('codigoClassificacaoTributaria');
  @override
  late final GeneratedColumn<String> codigoClassificacaoTributaria =
      GeneratedColumn<String>(
        'codigo_classificacao_tributaria',
        aliasedName,
        true,
        additionalChecks: GeneratedColumn.checkTextLength(
          minTextLength: 0,
          maxTextLength: 6,
        ),
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _valorBaseCalculoMeta = const VerificationMeta(
    'valorBaseCalculo',
  );
  @override
  late final GeneratedColumn<double> valorBaseCalculo = GeneratedColumn<double>(
    'valor_base_calculo',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _aliquotaMeta = const VerificationMeta(
    'aliquota',
  );
  @override
  late final GeneratedColumn<double> aliquota = GeneratedColumn<double>(
    'aliquota',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _percentualDiferimentoMeta =
      const VerificationMeta('percentualDiferimento');
  @override
  late final GeneratedColumn<double> percentualDiferimento =
      GeneratedColumn<double>(
        'percentual_diferimento',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _valorDiferimentoMeta = const VerificationMeta(
    'valorDiferimento',
  );
  @override
  late final GeneratedColumn<double> valorDiferimento = GeneratedColumn<double>(
    'valor_diferimento',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _valorTributoDevolvidoMeta =
      const VerificationMeta('valorTributoDevolvido');
  @override
  late final GeneratedColumn<double> valorTributoDevolvido =
      GeneratedColumn<double>(
        'valor_tributo_devolvido',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _percentualReducaoAliquotaMeta =
      const VerificationMeta('percentualReducaoAliquota');
  @override
  late final GeneratedColumn<double> percentualReducaoAliquota =
      GeneratedColumn<double>(
        'percentual_reducao_aliquota',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _aliquotaEfetivaMeta = const VerificationMeta(
    'aliquotaEfetiva',
  );
  @override
  late final GeneratedColumn<double> aliquotaEfetiva = GeneratedColumn<double>(
    'aliquota_efetiva',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _valorMeta = const VerificationMeta('valor');
  @override
  late final GeneratedColumn<double> valor = GeneratedColumn<double>(
    'valor',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    idNfeDetalhe,
    cst,
    codigoClassificacaoTributaria,
    valorBaseCalculo,
    aliquota,
    percentualDiferimento,
    valorDiferimento,
    valorTributoDevolvido,
    percentualReducaoAliquota,
    aliquotaEfetiva,
    valor,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'nfe_detalhe_imposto_ibs_uf';
  @override
  VerificationContext validateIntegrity(
    Insertable<NfeDetalheImpostoIbsUf> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('id_nfe_detalhe')) {
      context.handle(
        _idNfeDetalheMeta,
        idNfeDetalhe.isAcceptableOrUnknown(
          data['id_nfe_detalhe']!,
          _idNfeDetalheMeta,
        ),
      );
    }
    if (data.containsKey('cst')) {
      context.handle(
        _cstMeta,
        cst.isAcceptableOrUnknown(data['cst']!, _cstMeta),
      );
    }
    if (data.containsKey('codigo_classificacao_tributaria')) {
      context.handle(
        _codigoClassificacaoTributariaMeta,
        codigoClassificacaoTributaria.isAcceptableOrUnknown(
          data['codigo_classificacao_tributaria']!,
          _codigoClassificacaoTributariaMeta,
        ),
      );
    }
    if (data.containsKey('valor_base_calculo')) {
      context.handle(
        _valorBaseCalculoMeta,
        valorBaseCalculo.isAcceptableOrUnknown(
          data['valor_base_calculo']!,
          _valorBaseCalculoMeta,
        ),
      );
    }
    if (data.containsKey('aliquota')) {
      context.handle(
        _aliquotaMeta,
        aliquota.isAcceptableOrUnknown(data['aliquota']!, _aliquotaMeta),
      );
    }
    if (data.containsKey('percentual_diferimento')) {
      context.handle(
        _percentualDiferimentoMeta,
        percentualDiferimento.isAcceptableOrUnknown(
          data['percentual_diferimento']!,
          _percentualDiferimentoMeta,
        ),
      );
    }
    if (data.containsKey('valor_diferimento')) {
      context.handle(
        _valorDiferimentoMeta,
        valorDiferimento.isAcceptableOrUnknown(
          data['valor_diferimento']!,
          _valorDiferimentoMeta,
        ),
      );
    }
    if (data.containsKey('valor_tributo_devolvido')) {
      context.handle(
        _valorTributoDevolvidoMeta,
        valorTributoDevolvido.isAcceptableOrUnknown(
          data['valor_tributo_devolvido']!,
          _valorTributoDevolvidoMeta,
        ),
      );
    }
    if (data.containsKey('percentual_reducao_aliquota')) {
      context.handle(
        _percentualReducaoAliquotaMeta,
        percentualReducaoAliquota.isAcceptableOrUnknown(
          data['percentual_reducao_aliquota']!,
          _percentualReducaoAliquotaMeta,
        ),
      );
    }
    if (data.containsKey('aliquota_efetiva')) {
      context.handle(
        _aliquotaEfetivaMeta,
        aliquotaEfetiva.isAcceptableOrUnknown(
          data['aliquota_efetiva']!,
          _aliquotaEfetivaMeta,
        ),
      );
    }
    if (data.containsKey('valor')) {
      context.handle(
        _valorMeta,
        valor.isAcceptableOrUnknown(data['valor']!, _valorMeta),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeDetalheImpostoIbsUf map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return NfeDetalheImpostoIbsUf(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id'],
      ),
      idNfeDetalhe: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_nfe_detalhe'],
      ),
      cst: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}cst'],
      ),
      codigoClassificacaoTributaria: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}codigo_classificacao_tributaria'],
      ),
      valorBaseCalculo: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_base_calculo'],
      ),
      aliquota: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}aliquota'],
      ),
      percentualDiferimento: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}percentual_diferimento'],
      ),
      valorDiferimento: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_diferimento'],
      ),
      valorTributoDevolvido: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_tributo_devolvido'],
      ),
      percentualReducaoAliquota: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}percentual_reducao_aliquota'],
      ),
      aliquotaEfetiva: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}aliquota_efetiva'],
      ),
      valor: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor'],
      ),
    );
  }

  @override
  $NfeDetalheImpostoIbsUfsTable createAlias(String alias) {
    return $NfeDetalheImpostoIbsUfsTable(attachedDatabase, alias);
  }
}

class NfeDetalheImpostoIbsUf extends DataClass
    implements Insertable<NfeDetalheImpostoIbsUf> {
  final int? id;
  final int? idNfeDetalhe;
  final String? cst;
  final String? codigoClassificacaoTributaria;
  final double? valorBaseCalculo;
  final double? aliquota;
  final double? percentualDiferimento;
  final double? valorDiferimento;
  final double? valorTributoDevolvido;
  final double? percentualReducaoAliquota;
  final double? aliquotaEfetiva;
  final double? valor;
  const NfeDetalheImpostoIbsUf({
    this.id,
    this.idNfeDetalhe,
    this.cst,
    this.codigoClassificacaoTributaria,
    this.valorBaseCalculo,
    this.aliquota,
    this.percentualDiferimento,
    this.valorDiferimento,
    this.valorTributoDevolvido,
    this.percentualReducaoAliquota,
    this.aliquotaEfetiva,
    this.valor,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeDetalhe != null) {
      map['id_nfe_detalhe'] = Variable<int>(idNfeDetalhe);
    }
    if (!nullToAbsent || cst != null) {
      map['cst'] = Variable<String>(cst);
    }
    if (!nullToAbsent || codigoClassificacaoTributaria != null) {
      map['codigo_classificacao_tributaria'] = Variable<String>(
        codigoClassificacaoTributaria,
      );
    }
    if (!nullToAbsent || valorBaseCalculo != null) {
      map['valor_base_calculo'] = Variable<double>(valorBaseCalculo);
    }
    if (!nullToAbsent || aliquota != null) {
      map['aliquota'] = Variable<double>(aliquota);
    }
    if (!nullToAbsent || percentualDiferimento != null) {
      map['percentual_diferimento'] = Variable<double>(percentualDiferimento);
    }
    if (!nullToAbsent || valorDiferimento != null) {
      map['valor_diferimento'] = Variable<double>(valorDiferimento);
    }
    if (!nullToAbsent || valorTributoDevolvido != null) {
      map['valor_tributo_devolvido'] = Variable<double>(valorTributoDevolvido);
    }
    if (!nullToAbsent || percentualReducaoAliquota != null) {
      map['percentual_reducao_aliquota'] = Variable<double>(
        percentualReducaoAliquota,
      );
    }
    if (!nullToAbsent || aliquotaEfetiva != null) {
      map['aliquota_efetiva'] = Variable<double>(aliquotaEfetiva);
    }
    if (!nullToAbsent || valor != null) {
      map['valor'] = Variable<double>(valor);
    }
    return map;
  }

  factory NfeDetalheImpostoIbsUf.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeDetalheImpostoIbsUf(
      id: serializer.fromJson<int?>(json['id']),
      idNfeDetalhe: serializer.fromJson<int?>(json['idNfeDetalhe']),
      cst: serializer.fromJson<String?>(json['cst']),
      codigoClassificacaoTributaria: serializer.fromJson<String?>(
        json['codigoClassificacaoTributaria'],
      ),
      valorBaseCalculo: serializer.fromJson<double?>(json['valorBaseCalculo']),
      aliquota: serializer.fromJson<double?>(json['aliquota']),
      percentualDiferimento: serializer.fromJson<double?>(
        json['percentualDiferimento'],
      ),
      valorDiferimento: serializer.fromJson<double?>(json['valorDiferimento']),
      valorTributoDevolvido: serializer.fromJson<double?>(
        json['valorTributoDevolvido'],
      ),
      percentualReducaoAliquota: serializer.fromJson<double?>(
        json['percentualReducaoAliquota'],
      ),
      aliquotaEfetiva: serializer.fromJson<double?>(json['aliquotaEfetiva']),
      valor: serializer.fromJson<double?>(json['valor']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeDetalhe': serializer.toJson<int?>(idNfeDetalhe),
      'cst': serializer.toJson<String?>(cst),
      'codigoClassificacaoTributaria': serializer.toJson<String?>(
        codigoClassificacaoTributaria,
      ),
      'valorBaseCalculo': serializer.toJson<double?>(valorBaseCalculo),
      'aliquota': serializer.toJson<double?>(aliquota),
      'percentualDiferimento': serializer.toJson<double?>(
        percentualDiferimento,
      ),
      'valorDiferimento': serializer.toJson<double?>(valorDiferimento),
      'valorTributoDevolvido': serializer.toJson<double?>(
        valorTributoDevolvido,
      ),
      'percentualReducaoAliquota': serializer.toJson<double?>(
        percentualReducaoAliquota,
      ),
      'aliquotaEfetiva': serializer.toJson<double?>(aliquotaEfetiva),
      'valor': serializer.toJson<double?>(valor),
    };
  }

  NfeDetalheImpostoIbsUf copyWith({
    Value<int?> id = const Value.absent(),
    Value<int?> idNfeDetalhe = const Value.absent(),
    Value<String?> cst = const Value.absent(),
    Value<String?> codigoClassificacaoTributaria = const Value.absent(),
    Value<double?> valorBaseCalculo = const Value.absent(),
    Value<double?> aliquota = const Value.absent(),
    Value<double?> percentualDiferimento = const Value.absent(),
    Value<double?> valorDiferimento = const Value.absent(),
    Value<double?> valorTributoDevolvido = const Value.absent(),
    Value<double?> percentualReducaoAliquota = const Value.absent(),
    Value<double?> aliquotaEfetiva = const Value.absent(),
    Value<double?> valor = const Value.absent(),
  }) => NfeDetalheImpostoIbsUf(
    id: id.present ? id.value : this.id,
    idNfeDetalhe: idNfeDetalhe.present ? idNfeDetalhe.value : this.idNfeDetalhe,
    cst: cst.present ? cst.value : this.cst,
    codigoClassificacaoTributaria:
        codigoClassificacaoTributaria.present
            ? codigoClassificacaoTributaria.value
            : this.codigoClassificacaoTributaria,
    valorBaseCalculo:
        valorBaseCalculo.present
            ? valorBaseCalculo.value
            : this.valorBaseCalculo,
    aliquota: aliquota.present ? aliquota.value : this.aliquota,
    percentualDiferimento:
        percentualDiferimento.present
            ? percentualDiferimento.value
            : this.percentualDiferimento,
    valorDiferimento:
        valorDiferimento.present
            ? valorDiferimento.value
            : this.valorDiferimento,
    valorTributoDevolvido:
        valorTributoDevolvido.present
            ? valorTributoDevolvido.value
            : this.valorTributoDevolvido,
    percentualReducaoAliquota:
        percentualReducaoAliquota.present
            ? percentualReducaoAliquota.value
            : this.percentualReducaoAliquota,
    aliquotaEfetiva:
        aliquotaEfetiva.present ? aliquotaEfetiva.value : this.aliquotaEfetiva,
    valor: valor.present ? valor.value : this.valor,
  );
  NfeDetalheImpostoIbsUf copyWithCompanion(
    NfeDetalheImpostoIbsUfsCompanion data,
  ) {
    return NfeDetalheImpostoIbsUf(
      id: data.id.present ? data.id.value : this.id,
      idNfeDetalhe:
          data.idNfeDetalhe.present
              ? data.idNfeDetalhe.value
              : this.idNfeDetalhe,
      cst: data.cst.present ? data.cst.value : this.cst,
      codigoClassificacaoTributaria:
          data.codigoClassificacaoTributaria.present
              ? data.codigoClassificacaoTributaria.value
              : this.codigoClassificacaoTributaria,
      valorBaseCalculo:
          data.valorBaseCalculo.present
              ? data.valorBaseCalculo.value
              : this.valorBaseCalculo,
      aliquota: data.aliquota.present ? data.aliquota.value : this.aliquota,
      percentualDiferimento:
          data.percentualDiferimento.present
              ? data.percentualDiferimento.value
              : this.percentualDiferimento,
      valorDiferimento:
          data.valorDiferimento.present
              ? data.valorDiferimento.value
              : this.valorDiferimento,
      valorTributoDevolvido:
          data.valorTributoDevolvido.present
              ? data.valorTributoDevolvido.value
              : this.valorTributoDevolvido,
      percentualReducaoAliquota:
          data.percentualReducaoAliquota.present
              ? data.percentualReducaoAliquota.value
              : this.percentualReducaoAliquota,
      aliquotaEfetiva:
          data.aliquotaEfetiva.present
              ? data.aliquotaEfetiva.value
              : this.aliquotaEfetiva,
      valor: data.valor.present ? data.valor.value : this.valor,
    );
  }

  @override
  String toString() {
    return (StringBuffer('NfeDetalheImpostoIbsUf(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('cst: $cst, ')
          ..write(
            'codigoClassificacaoTributaria: $codigoClassificacaoTributaria, ',
          )
          ..write('valorBaseCalculo: $valorBaseCalculo, ')
          ..write('aliquota: $aliquota, ')
          ..write('percentualDiferimento: $percentualDiferimento, ')
          ..write('valorDiferimento: $valorDiferimento, ')
          ..write('valorTributoDevolvido: $valorTributoDevolvido, ')
          ..write('percentualReducaoAliquota: $percentualReducaoAliquota, ')
          ..write('aliquotaEfetiva: $aliquotaEfetiva, ')
          ..write('valor: $valor')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    idNfeDetalhe,
    cst,
    codigoClassificacaoTributaria,
    valorBaseCalculo,
    aliquota,
    percentualDiferimento,
    valorDiferimento,
    valorTributoDevolvido,
    percentualReducaoAliquota,
    aliquotaEfetiva,
    valor,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeDetalheImpostoIbsUf &&
          other.id == this.id &&
          other.idNfeDetalhe == this.idNfeDetalhe &&
          other.cst == this.cst &&
          other.codigoClassificacaoTributaria ==
              this.codigoClassificacaoTributaria &&
          other.valorBaseCalculo == this.valorBaseCalculo &&
          other.aliquota == this.aliquota &&
          other.percentualDiferimento == this.percentualDiferimento &&
          other.valorDiferimento == this.valorDiferimento &&
          other.valorTributoDevolvido == this.valorTributoDevolvido &&
          other.percentualReducaoAliquota == this.percentualReducaoAliquota &&
          other.aliquotaEfetiva == this.aliquotaEfetiva &&
          other.valor == this.valor);
}

class NfeDetalheImpostoIbsUfsCompanion
    extends UpdateCompanion<NfeDetalheImpostoIbsUf> {
  final Value<int?> id;
  final Value<int?> idNfeDetalhe;
  final Value<String?> cst;
  final Value<String?> codigoClassificacaoTributaria;
  final Value<double?> valorBaseCalculo;
  final Value<double?> aliquota;
  final Value<double?> percentualDiferimento;
  final Value<double?> valorDiferimento;
  final Value<double?> valorTributoDevolvido;
  final Value<double?> percentualReducaoAliquota;
  final Value<double?> aliquotaEfetiva;
  final Value<double?> valor;
  const NfeDetalheImpostoIbsUfsCompanion({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.cst = const Value.absent(),
    this.codigoClassificacaoTributaria = const Value.absent(),
    this.valorBaseCalculo = const Value.absent(),
    this.aliquota = const Value.absent(),
    this.percentualDiferimento = const Value.absent(),
    this.valorDiferimento = const Value.absent(),
    this.valorTributoDevolvido = const Value.absent(),
    this.percentualReducaoAliquota = const Value.absent(),
    this.aliquotaEfetiva = const Value.absent(),
    this.valor = const Value.absent(),
  });
  NfeDetalheImpostoIbsUfsCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.cst = const Value.absent(),
    this.codigoClassificacaoTributaria = const Value.absent(),
    this.valorBaseCalculo = const Value.absent(),
    this.aliquota = const Value.absent(),
    this.percentualDiferimento = const Value.absent(),
    this.valorDiferimento = const Value.absent(),
    this.valorTributoDevolvido = const Value.absent(),
    this.percentualReducaoAliquota = const Value.absent(),
    this.aliquotaEfetiva = const Value.absent(),
    this.valor = const Value.absent(),
  });
  static Insertable<NfeDetalheImpostoIbsUf> custom({
    Expression<int>? id,
    Expression<int>? idNfeDetalhe,
    Expression<String>? cst,
    Expression<String>? codigoClassificacaoTributaria,
    Expression<double>? valorBaseCalculo,
    Expression<double>? aliquota,
    Expression<double>? percentualDiferimento,
    Expression<double>? valorDiferimento,
    Expression<double>? valorTributoDevolvido,
    Expression<double>? percentualReducaoAliquota,
    Expression<double>? aliquotaEfetiva,
    Expression<double>? valor,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (idNfeDetalhe != null) 'id_nfe_detalhe': idNfeDetalhe,
      if (cst != null) 'cst': cst,
      if (codigoClassificacaoTributaria != null)
        'codigo_classificacao_tributaria': codigoClassificacaoTributaria,
      if (valorBaseCalculo != null) 'valor_base_calculo': valorBaseCalculo,
      if (aliquota != null) 'aliquota': aliquota,
      if (percentualDiferimento != null)
        'percentual_diferimento': percentualDiferimento,
      if (valorDiferimento != null) 'valor_diferimento': valorDiferimento,
      if (valorTributoDevolvido != null)
        'valor_tributo_devolvido': valorTributoDevolvido,
      if (percentualReducaoAliquota != null)
        'percentual_reducao_aliquota': percentualReducaoAliquota,
      if (aliquotaEfetiva != null) 'aliquota_efetiva': aliquotaEfetiva,
      if (valor != null) 'valor': valor,
    });
  }

  NfeDetalheImpostoIbsUfsCompanion copyWith({
    Value<int?>? id,
    Value<int?>? idNfeDetalhe,
    Value<String?>? cst,
    Value<String?>? codigoClassificacaoTributaria,
    Value<double?>? valorBaseCalculo,
    Value<double?>? aliquota,
    Value<double?>? percentualDiferimento,
    Value<double?>? valorDiferimento,
    Value<double?>? valorTributoDevolvido,
    Value<double?>? percentualReducaoAliquota,
    Value<double?>? aliquotaEfetiva,
    Value<double?>? valor,
  }) {
    return NfeDetalheImpostoIbsUfsCompanion(
      id: id ?? this.id,
      idNfeDetalhe: idNfeDetalhe ?? this.idNfeDetalhe,
      cst: cst ?? this.cst,
      codigoClassificacaoTributaria:
          codigoClassificacaoTributaria ?? this.codigoClassificacaoTributaria,
      valorBaseCalculo: valorBaseCalculo ?? this.valorBaseCalculo,
      aliquota: aliquota ?? this.aliquota,
      percentualDiferimento:
          percentualDiferimento ?? this.percentualDiferimento,
      valorDiferimento: valorDiferimento ?? this.valorDiferimento,
      valorTributoDevolvido:
          valorTributoDevolvido ?? this.valorTributoDevolvido,
      percentualReducaoAliquota:
          percentualReducaoAliquota ?? this.percentualReducaoAliquota,
      aliquotaEfetiva: aliquotaEfetiva ?? this.aliquotaEfetiva,
      valor: valor ?? this.valor,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (idNfeDetalhe.present) {
      map['id_nfe_detalhe'] = Variable<int>(idNfeDetalhe.value);
    }
    if (cst.present) {
      map['cst'] = Variable<String>(cst.value);
    }
    if (codigoClassificacaoTributaria.present) {
      map['codigo_classificacao_tributaria'] = Variable<String>(
        codigoClassificacaoTributaria.value,
      );
    }
    if (valorBaseCalculo.present) {
      map['valor_base_calculo'] = Variable<double>(valorBaseCalculo.value);
    }
    if (aliquota.present) {
      map['aliquota'] = Variable<double>(aliquota.value);
    }
    if (percentualDiferimento.present) {
      map['percentual_diferimento'] = Variable<double>(
        percentualDiferimento.value,
      );
    }
    if (valorDiferimento.present) {
      map['valor_diferimento'] = Variable<double>(valorDiferimento.value);
    }
    if (valorTributoDevolvido.present) {
      map['valor_tributo_devolvido'] = Variable<double>(
        valorTributoDevolvido.value,
      );
    }
    if (percentualReducaoAliquota.present) {
      map['percentual_reducao_aliquota'] = Variable<double>(
        percentualReducaoAliquota.value,
      );
    }
    if (aliquotaEfetiva.present) {
      map['aliquota_efetiva'] = Variable<double>(aliquotaEfetiva.value);
    }
    if (valor.present) {
      map['valor'] = Variable<double>(valor.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeDetalheImpostoIbsUfsCompanion(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('cst: $cst, ')
          ..write(
            'codigoClassificacaoTributaria: $codigoClassificacaoTributaria, ',
          )
          ..write('valorBaseCalculo: $valorBaseCalculo, ')
          ..write('aliquota: $aliquota, ')
          ..write('percentualDiferimento: $percentualDiferimento, ')
          ..write('valorDiferimento: $valorDiferimento, ')
          ..write('valorTributoDevolvido: $valorTributoDevolvido, ')
          ..write('percentualReducaoAliquota: $percentualReducaoAliquota, ')
          ..write('aliquotaEfetiva: $aliquotaEfetiva, ')
          ..write('valor: $valor')
          ..write(')'))
        .toString();
  }
}

class $NfeDetalheImpostoIbsMunsTable extends NfeDetalheImpostoIbsMuns
    with TableInfo<$NfeDetalheImpostoIbsMunsTable, NfeDetalheImpostoIbsMun> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeDetalheImpostoIbsMunsTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
    'id',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idNfeDetalheMeta = const VerificationMeta(
    'idNfeDetalhe',
  );
  @override
  late final GeneratedColumn<int> idNfeDetalhe = GeneratedColumn<int>(
    'id_nfe_detalhe',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _cstMeta = const VerificationMeta('cst');
  @override
  late final GeneratedColumn<String> cst = GeneratedColumn<String>(
    'cst',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 3,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _codigoClassificacaoTributariaMeta =
      const VerificationMeta('codigoClassificacaoTributaria');
  @override
  late final GeneratedColumn<String> codigoClassificacaoTributaria =
      GeneratedColumn<String>(
        'codigo_classificacao_tributaria',
        aliasedName,
        true,
        additionalChecks: GeneratedColumn.checkTextLength(
          minTextLength: 0,
          maxTextLength: 6,
        ),
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _valorBaseCalculoMeta = const VerificationMeta(
    'valorBaseCalculo',
  );
  @override
  late final GeneratedColumn<double> valorBaseCalculo = GeneratedColumn<double>(
    'valor_base_calculo',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _aliquotaMeta = const VerificationMeta(
    'aliquota',
  );
  @override
  late final GeneratedColumn<double> aliquota = GeneratedColumn<double>(
    'aliquota',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _percentualDiferimentoMeta =
      const VerificationMeta('percentualDiferimento');
  @override
  late final GeneratedColumn<double> percentualDiferimento =
      GeneratedColumn<double>(
        'percentual_diferimento',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _valorDiferimentoMeta = const VerificationMeta(
    'valorDiferimento',
  );
  @override
  late final GeneratedColumn<double> valorDiferimento = GeneratedColumn<double>(
    'valor_diferimento',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _valorTributoDevolvidoMeta =
      const VerificationMeta('valorTributoDevolvido');
  @override
  late final GeneratedColumn<double> valorTributoDevolvido =
      GeneratedColumn<double>(
        'valor_tributo_devolvido',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _percentualReducaoAliquotaMeta =
      const VerificationMeta('percentualReducaoAliquota');
  @override
  late final GeneratedColumn<double> percentualReducaoAliquota =
      GeneratedColumn<double>(
        'percentual_reducao_aliquota',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _aliquotaEfetivaMeta = const VerificationMeta(
    'aliquotaEfetiva',
  );
  @override
  late final GeneratedColumn<double> aliquotaEfetiva = GeneratedColumn<double>(
    'aliquota_efetiva',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _valorMeta = const VerificationMeta('valor');
  @override
  late final GeneratedColumn<double> valor = GeneratedColumn<double>(
    'valor',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    idNfeDetalhe,
    cst,
    codigoClassificacaoTributaria,
    valorBaseCalculo,
    aliquota,
    percentualDiferimento,
    valorDiferimento,
    valorTributoDevolvido,
    percentualReducaoAliquota,
    aliquotaEfetiva,
    valor,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'nfe_detalhe_imposto_ibs_mun';
  @override
  VerificationContext validateIntegrity(
    Insertable<NfeDetalheImpostoIbsMun> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('id_nfe_detalhe')) {
      context.handle(
        _idNfeDetalheMeta,
        idNfeDetalhe.isAcceptableOrUnknown(
          data['id_nfe_detalhe']!,
          _idNfeDetalheMeta,
        ),
      );
    }
    if (data.containsKey('cst')) {
      context.handle(
        _cstMeta,
        cst.isAcceptableOrUnknown(data['cst']!, _cstMeta),
      );
    }
    if (data.containsKey('codigo_classificacao_tributaria')) {
      context.handle(
        _codigoClassificacaoTributariaMeta,
        codigoClassificacaoTributaria.isAcceptableOrUnknown(
          data['codigo_classificacao_tributaria']!,
          _codigoClassificacaoTributariaMeta,
        ),
      );
    }
    if (data.containsKey('valor_base_calculo')) {
      context.handle(
        _valorBaseCalculoMeta,
        valorBaseCalculo.isAcceptableOrUnknown(
          data['valor_base_calculo']!,
          _valorBaseCalculoMeta,
        ),
      );
    }
    if (data.containsKey('aliquota')) {
      context.handle(
        _aliquotaMeta,
        aliquota.isAcceptableOrUnknown(data['aliquota']!, _aliquotaMeta),
      );
    }
    if (data.containsKey('percentual_diferimento')) {
      context.handle(
        _percentualDiferimentoMeta,
        percentualDiferimento.isAcceptableOrUnknown(
          data['percentual_diferimento']!,
          _percentualDiferimentoMeta,
        ),
      );
    }
    if (data.containsKey('valor_diferimento')) {
      context.handle(
        _valorDiferimentoMeta,
        valorDiferimento.isAcceptableOrUnknown(
          data['valor_diferimento']!,
          _valorDiferimentoMeta,
        ),
      );
    }
    if (data.containsKey('valor_tributo_devolvido')) {
      context.handle(
        _valorTributoDevolvidoMeta,
        valorTributoDevolvido.isAcceptableOrUnknown(
          data['valor_tributo_devolvido']!,
          _valorTributoDevolvidoMeta,
        ),
      );
    }
    if (data.containsKey('percentual_reducao_aliquota')) {
      context.handle(
        _percentualReducaoAliquotaMeta,
        percentualReducaoAliquota.isAcceptableOrUnknown(
          data['percentual_reducao_aliquota']!,
          _percentualReducaoAliquotaMeta,
        ),
      );
    }
    if (data.containsKey('aliquota_efetiva')) {
      context.handle(
        _aliquotaEfetivaMeta,
        aliquotaEfetiva.isAcceptableOrUnknown(
          data['aliquota_efetiva']!,
          _aliquotaEfetivaMeta,
        ),
      );
    }
    if (data.containsKey('valor')) {
      context.handle(
        _valorMeta,
        valor.isAcceptableOrUnknown(data['valor']!, _valorMeta),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeDetalheImpostoIbsMun map(
    Map<String, dynamic> data, {
    String? tablePrefix,
  }) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return NfeDetalheImpostoIbsMun(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id'],
      ),
      idNfeDetalhe: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_nfe_detalhe'],
      ),
      cst: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}cst'],
      ),
      codigoClassificacaoTributaria: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}codigo_classificacao_tributaria'],
      ),
      valorBaseCalculo: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_base_calculo'],
      ),
      aliquota: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}aliquota'],
      ),
      percentualDiferimento: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}percentual_diferimento'],
      ),
      valorDiferimento: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_diferimento'],
      ),
      valorTributoDevolvido: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_tributo_devolvido'],
      ),
      percentualReducaoAliquota: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}percentual_reducao_aliquota'],
      ),
      aliquotaEfetiva: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}aliquota_efetiva'],
      ),
      valor: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor'],
      ),
    );
  }

  @override
  $NfeDetalheImpostoIbsMunsTable createAlias(String alias) {
    return $NfeDetalheImpostoIbsMunsTable(attachedDatabase, alias);
  }
}

class NfeDetalheImpostoIbsMun extends DataClass
    implements Insertable<NfeDetalheImpostoIbsMun> {
  final int? id;
  final int? idNfeDetalhe;
  final String? cst;
  final String? codigoClassificacaoTributaria;
  final double? valorBaseCalculo;
  final double? aliquota;
  final double? percentualDiferimento;
  final double? valorDiferimento;
  final double? valorTributoDevolvido;
  final double? percentualReducaoAliquota;
  final double? aliquotaEfetiva;
  final double? valor;
  const NfeDetalheImpostoIbsMun({
    this.id,
    this.idNfeDetalhe,
    this.cst,
    this.codigoClassificacaoTributaria,
    this.valorBaseCalculo,
    this.aliquota,
    this.percentualDiferimento,
    this.valorDiferimento,
    this.valorTributoDevolvido,
    this.percentualReducaoAliquota,
    this.aliquotaEfetiva,
    this.valor,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeDetalhe != null) {
      map['id_nfe_detalhe'] = Variable<int>(idNfeDetalhe);
    }
    if (!nullToAbsent || cst != null) {
      map['cst'] = Variable<String>(cst);
    }
    if (!nullToAbsent || codigoClassificacaoTributaria != null) {
      map['codigo_classificacao_tributaria'] = Variable<String>(
        codigoClassificacaoTributaria,
      );
    }
    if (!nullToAbsent || valorBaseCalculo != null) {
      map['valor_base_calculo'] = Variable<double>(valorBaseCalculo);
    }
    if (!nullToAbsent || aliquota != null) {
      map['aliquota'] = Variable<double>(aliquota);
    }
    if (!nullToAbsent || percentualDiferimento != null) {
      map['percentual_diferimento'] = Variable<double>(percentualDiferimento);
    }
    if (!nullToAbsent || valorDiferimento != null) {
      map['valor_diferimento'] = Variable<double>(valorDiferimento);
    }
    if (!nullToAbsent || valorTributoDevolvido != null) {
      map['valor_tributo_devolvido'] = Variable<double>(valorTributoDevolvido);
    }
    if (!nullToAbsent || percentualReducaoAliquota != null) {
      map['percentual_reducao_aliquota'] = Variable<double>(
        percentualReducaoAliquota,
      );
    }
    if (!nullToAbsent || aliquotaEfetiva != null) {
      map['aliquota_efetiva'] = Variable<double>(aliquotaEfetiva);
    }
    if (!nullToAbsent || valor != null) {
      map['valor'] = Variable<double>(valor);
    }
    return map;
  }

  factory NfeDetalheImpostoIbsMun.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeDetalheImpostoIbsMun(
      id: serializer.fromJson<int?>(json['id']),
      idNfeDetalhe: serializer.fromJson<int?>(json['idNfeDetalhe']),
      cst: serializer.fromJson<String?>(json['cst']),
      codigoClassificacaoTributaria: serializer.fromJson<String?>(
        json['codigoClassificacaoTributaria'],
      ),
      valorBaseCalculo: serializer.fromJson<double?>(json['valorBaseCalculo']),
      aliquota: serializer.fromJson<double?>(json['aliquota']),
      percentualDiferimento: serializer.fromJson<double?>(
        json['percentualDiferimento'],
      ),
      valorDiferimento: serializer.fromJson<double?>(json['valorDiferimento']),
      valorTributoDevolvido: serializer.fromJson<double?>(
        json['valorTributoDevolvido'],
      ),
      percentualReducaoAliquota: serializer.fromJson<double?>(
        json['percentualReducaoAliquota'],
      ),
      aliquotaEfetiva: serializer.fromJson<double?>(json['aliquotaEfetiva']),
      valor: serializer.fromJson<double?>(json['valor']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeDetalhe': serializer.toJson<int?>(idNfeDetalhe),
      'cst': serializer.toJson<String?>(cst),
      'codigoClassificacaoTributaria': serializer.toJson<String?>(
        codigoClassificacaoTributaria,
      ),
      'valorBaseCalculo': serializer.toJson<double?>(valorBaseCalculo),
      'aliquota': serializer.toJson<double?>(aliquota),
      'percentualDiferimento': serializer.toJson<double?>(
        percentualDiferimento,
      ),
      'valorDiferimento': serializer.toJson<double?>(valorDiferimento),
      'valorTributoDevolvido': serializer.toJson<double?>(
        valorTributoDevolvido,
      ),
      'percentualReducaoAliquota': serializer.toJson<double?>(
        percentualReducaoAliquota,
      ),
      'aliquotaEfetiva': serializer.toJson<double?>(aliquotaEfetiva),
      'valor': serializer.toJson<double?>(valor),
    };
  }

  NfeDetalheImpostoIbsMun copyWith({
    Value<int?> id = const Value.absent(),
    Value<int?> idNfeDetalhe = const Value.absent(),
    Value<String?> cst = const Value.absent(),
    Value<String?> codigoClassificacaoTributaria = const Value.absent(),
    Value<double?> valorBaseCalculo = const Value.absent(),
    Value<double?> aliquota = const Value.absent(),
    Value<double?> percentualDiferimento = const Value.absent(),
    Value<double?> valorDiferimento = const Value.absent(),
    Value<double?> valorTributoDevolvido = const Value.absent(),
    Value<double?> percentualReducaoAliquota = const Value.absent(),
    Value<double?> aliquotaEfetiva = const Value.absent(),
    Value<double?> valor = const Value.absent(),
  }) => NfeDetalheImpostoIbsMun(
    id: id.present ? id.value : this.id,
    idNfeDetalhe: idNfeDetalhe.present ? idNfeDetalhe.value : this.idNfeDetalhe,
    cst: cst.present ? cst.value : this.cst,
    codigoClassificacaoTributaria:
        codigoClassificacaoTributaria.present
            ? codigoClassificacaoTributaria.value
            : this.codigoClassificacaoTributaria,
    valorBaseCalculo:
        valorBaseCalculo.present
            ? valorBaseCalculo.value
            : this.valorBaseCalculo,
    aliquota: aliquota.present ? aliquota.value : this.aliquota,
    percentualDiferimento:
        percentualDiferimento.present
            ? percentualDiferimento.value
            : this.percentualDiferimento,
    valorDiferimento:
        valorDiferimento.present
            ? valorDiferimento.value
            : this.valorDiferimento,
    valorTributoDevolvido:
        valorTributoDevolvido.present
            ? valorTributoDevolvido.value
            : this.valorTributoDevolvido,
    percentualReducaoAliquota:
        percentualReducaoAliquota.present
            ? percentualReducaoAliquota.value
            : this.percentualReducaoAliquota,
    aliquotaEfetiva:
        aliquotaEfetiva.present ? aliquotaEfetiva.value : this.aliquotaEfetiva,
    valor: valor.present ? valor.value : this.valor,
  );
  NfeDetalheImpostoIbsMun copyWithCompanion(
    NfeDetalheImpostoIbsMunsCompanion data,
  ) {
    return NfeDetalheImpostoIbsMun(
      id: data.id.present ? data.id.value : this.id,
      idNfeDetalhe:
          data.idNfeDetalhe.present
              ? data.idNfeDetalhe.value
              : this.idNfeDetalhe,
      cst: data.cst.present ? data.cst.value : this.cst,
      codigoClassificacaoTributaria:
          data.codigoClassificacaoTributaria.present
              ? data.codigoClassificacaoTributaria.value
              : this.codigoClassificacaoTributaria,
      valorBaseCalculo:
          data.valorBaseCalculo.present
              ? data.valorBaseCalculo.value
              : this.valorBaseCalculo,
      aliquota: data.aliquota.present ? data.aliquota.value : this.aliquota,
      percentualDiferimento:
          data.percentualDiferimento.present
              ? data.percentualDiferimento.value
              : this.percentualDiferimento,
      valorDiferimento:
          data.valorDiferimento.present
              ? data.valorDiferimento.value
              : this.valorDiferimento,
      valorTributoDevolvido:
          data.valorTributoDevolvido.present
              ? data.valorTributoDevolvido.value
              : this.valorTributoDevolvido,
      percentualReducaoAliquota:
          data.percentualReducaoAliquota.present
              ? data.percentualReducaoAliquota.value
              : this.percentualReducaoAliquota,
      aliquotaEfetiva:
          data.aliquotaEfetiva.present
              ? data.aliquotaEfetiva.value
              : this.aliquotaEfetiva,
      valor: data.valor.present ? data.valor.value : this.valor,
    );
  }

  @override
  String toString() {
    return (StringBuffer('NfeDetalheImpostoIbsMun(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('cst: $cst, ')
          ..write(
            'codigoClassificacaoTributaria: $codigoClassificacaoTributaria, ',
          )
          ..write('valorBaseCalculo: $valorBaseCalculo, ')
          ..write('aliquota: $aliquota, ')
          ..write('percentualDiferimento: $percentualDiferimento, ')
          ..write('valorDiferimento: $valorDiferimento, ')
          ..write('valorTributoDevolvido: $valorTributoDevolvido, ')
          ..write('percentualReducaoAliquota: $percentualReducaoAliquota, ')
          ..write('aliquotaEfetiva: $aliquotaEfetiva, ')
          ..write('valor: $valor')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    idNfeDetalhe,
    cst,
    codigoClassificacaoTributaria,
    valorBaseCalculo,
    aliquota,
    percentualDiferimento,
    valorDiferimento,
    valorTributoDevolvido,
    percentualReducaoAliquota,
    aliquotaEfetiva,
    valor,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeDetalheImpostoIbsMun &&
          other.id == this.id &&
          other.idNfeDetalhe == this.idNfeDetalhe &&
          other.cst == this.cst &&
          other.codigoClassificacaoTributaria ==
              this.codigoClassificacaoTributaria &&
          other.valorBaseCalculo == this.valorBaseCalculo &&
          other.aliquota == this.aliquota &&
          other.percentualDiferimento == this.percentualDiferimento &&
          other.valorDiferimento == this.valorDiferimento &&
          other.valorTributoDevolvido == this.valorTributoDevolvido &&
          other.percentualReducaoAliquota == this.percentualReducaoAliquota &&
          other.aliquotaEfetiva == this.aliquotaEfetiva &&
          other.valor == this.valor);
}

class NfeDetalheImpostoIbsMunsCompanion
    extends UpdateCompanion<NfeDetalheImpostoIbsMun> {
  final Value<int?> id;
  final Value<int?> idNfeDetalhe;
  final Value<String?> cst;
  final Value<String?> codigoClassificacaoTributaria;
  final Value<double?> valorBaseCalculo;
  final Value<double?> aliquota;
  final Value<double?> percentualDiferimento;
  final Value<double?> valorDiferimento;
  final Value<double?> valorTributoDevolvido;
  final Value<double?> percentualReducaoAliquota;
  final Value<double?> aliquotaEfetiva;
  final Value<double?> valor;
  const NfeDetalheImpostoIbsMunsCompanion({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.cst = const Value.absent(),
    this.codigoClassificacaoTributaria = const Value.absent(),
    this.valorBaseCalculo = const Value.absent(),
    this.aliquota = const Value.absent(),
    this.percentualDiferimento = const Value.absent(),
    this.valorDiferimento = const Value.absent(),
    this.valorTributoDevolvido = const Value.absent(),
    this.percentualReducaoAliquota = const Value.absent(),
    this.aliquotaEfetiva = const Value.absent(),
    this.valor = const Value.absent(),
  });
  NfeDetalheImpostoIbsMunsCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.cst = const Value.absent(),
    this.codigoClassificacaoTributaria = const Value.absent(),
    this.valorBaseCalculo = const Value.absent(),
    this.aliquota = const Value.absent(),
    this.percentualDiferimento = const Value.absent(),
    this.valorDiferimento = const Value.absent(),
    this.valorTributoDevolvido = const Value.absent(),
    this.percentualReducaoAliquota = const Value.absent(),
    this.aliquotaEfetiva = const Value.absent(),
    this.valor = const Value.absent(),
  });
  static Insertable<NfeDetalheImpostoIbsMun> custom({
    Expression<int>? id,
    Expression<int>? idNfeDetalhe,
    Expression<String>? cst,
    Expression<String>? codigoClassificacaoTributaria,
    Expression<double>? valorBaseCalculo,
    Expression<double>? aliquota,
    Expression<double>? percentualDiferimento,
    Expression<double>? valorDiferimento,
    Expression<double>? valorTributoDevolvido,
    Expression<double>? percentualReducaoAliquota,
    Expression<double>? aliquotaEfetiva,
    Expression<double>? valor,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (idNfeDetalhe != null) 'id_nfe_detalhe': idNfeDetalhe,
      if (cst != null) 'cst': cst,
      if (codigoClassificacaoTributaria != null)
        'codigo_classificacao_tributaria': codigoClassificacaoTributaria,
      if (valorBaseCalculo != null) 'valor_base_calculo': valorBaseCalculo,
      if (aliquota != null) 'aliquota': aliquota,
      if (percentualDiferimento != null)
        'percentual_diferimento': percentualDiferimento,
      if (valorDiferimento != null) 'valor_diferimento': valorDiferimento,
      if (valorTributoDevolvido != null)
        'valor_tributo_devolvido': valorTributoDevolvido,
      if (percentualReducaoAliquota != null)
        'percentual_reducao_aliquota': percentualReducaoAliquota,
      if (aliquotaEfetiva != null) 'aliquota_efetiva': aliquotaEfetiva,
      if (valor != null) 'valor': valor,
    });
  }

  NfeDetalheImpostoIbsMunsCompanion copyWith({
    Value<int?>? id,
    Value<int?>? idNfeDetalhe,
    Value<String?>? cst,
    Value<String?>? codigoClassificacaoTributaria,
    Value<double?>? valorBaseCalculo,
    Value<double?>? aliquota,
    Value<double?>? percentualDiferimento,
    Value<double?>? valorDiferimento,
    Value<double?>? valorTributoDevolvido,
    Value<double?>? percentualReducaoAliquota,
    Value<double?>? aliquotaEfetiva,
    Value<double?>? valor,
  }) {
    return NfeDetalheImpostoIbsMunsCompanion(
      id: id ?? this.id,
      idNfeDetalhe: idNfeDetalhe ?? this.idNfeDetalhe,
      cst: cst ?? this.cst,
      codigoClassificacaoTributaria:
          codigoClassificacaoTributaria ?? this.codigoClassificacaoTributaria,
      valorBaseCalculo: valorBaseCalculo ?? this.valorBaseCalculo,
      aliquota: aliquota ?? this.aliquota,
      percentualDiferimento:
          percentualDiferimento ?? this.percentualDiferimento,
      valorDiferimento: valorDiferimento ?? this.valorDiferimento,
      valorTributoDevolvido:
          valorTributoDevolvido ?? this.valorTributoDevolvido,
      percentualReducaoAliquota:
          percentualReducaoAliquota ?? this.percentualReducaoAliquota,
      aliquotaEfetiva: aliquotaEfetiva ?? this.aliquotaEfetiva,
      valor: valor ?? this.valor,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (idNfeDetalhe.present) {
      map['id_nfe_detalhe'] = Variable<int>(idNfeDetalhe.value);
    }
    if (cst.present) {
      map['cst'] = Variable<String>(cst.value);
    }
    if (codigoClassificacaoTributaria.present) {
      map['codigo_classificacao_tributaria'] = Variable<String>(
        codigoClassificacaoTributaria.value,
      );
    }
    if (valorBaseCalculo.present) {
      map['valor_base_calculo'] = Variable<double>(valorBaseCalculo.value);
    }
    if (aliquota.present) {
      map['aliquota'] = Variable<double>(aliquota.value);
    }
    if (percentualDiferimento.present) {
      map['percentual_diferimento'] = Variable<double>(
        percentualDiferimento.value,
      );
    }
    if (valorDiferimento.present) {
      map['valor_diferimento'] = Variable<double>(valorDiferimento.value);
    }
    if (valorTributoDevolvido.present) {
      map['valor_tributo_devolvido'] = Variable<double>(
        valorTributoDevolvido.value,
      );
    }
    if (percentualReducaoAliquota.present) {
      map['percentual_reducao_aliquota'] = Variable<double>(
        percentualReducaoAliquota.value,
      );
    }
    if (aliquotaEfetiva.present) {
      map['aliquota_efetiva'] = Variable<double>(aliquotaEfetiva.value);
    }
    if (valor.present) {
      map['valor'] = Variable<double>(valor.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeDetalheImpostoIbsMunsCompanion(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('cst: $cst, ')
          ..write(
            'codigoClassificacaoTributaria: $codigoClassificacaoTributaria, ',
          )
          ..write('valorBaseCalculo: $valorBaseCalculo, ')
          ..write('aliquota: $aliquota, ')
          ..write('percentualDiferimento: $percentualDiferimento, ')
          ..write('valorDiferimento: $valorDiferimento, ')
          ..write('valorTributoDevolvido: $valorTributoDevolvido, ')
          ..write('percentualReducaoAliquota: $percentualReducaoAliquota, ')
          ..write('aliquotaEfetiva: $aliquotaEfetiva, ')
          ..write('valor: $valor')
          ..write(')'))
        .toString();
  }
}

class $NfeDetalheImpostoCbssTable extends NfeDetalheImpostoCbss
    with TableInfo<$NfeDetalheImpostoCbssTable, NfeDetalheImpostoCbs> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeDetalheImpostoCbssTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
    'id',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idNfeDetalheMeta = const VerificationMeta(
    'idNfeDetalhe',
  );
  @override
  late final GeneratedColumn<int> idNfeDetalhe = GeneratedColumn<int>(
    'id_nfe_detalhe',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _cstMeta = const VerificationMeta('cst');
  @override
  late final GeneratedColumn<String> cst = GeneratedColumn<String>(
    'cst',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 3,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _codigoClassificacaoTributariaMeta =
      const VerificationMeta('codigoClassificacaoTributaria');
  @override
  late final GeneratedColumn<String> codigoClassificacaoTributaria =
      GeneratedColumn<String>(
        'codigo_classificacao_tributaria',
        aliasedName,
        true,
        additionalChecks: GeneratedColumn.checkTextLength(
          minTextLength: 0,
          maxTextLength: 6,
        ),
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _valorBaseCalculoMeta = const VerificationMeta(
    'valorBaseCalculo',
  );
  @override
  late final GeneratedColumn<double> valorBaseCalculo = GeneratedColumn<double>(
    'valor_base_calculo',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _aliquotaMeta = const VerificationMeta(
    'aliquota',
  );
  @override
  late final GeneratedColumn<double> aliquota = GeneratedColumn<double>(
    'aliquota',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _percentualDiferimentoMeta =
      const VerificationMeta('percentualDiferimento');
  @override
  late final GeneratedColumn<double> percentualDiferimento =
      GeneratedColumn<double>(
        'percentual_diferimento',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _valorDiferimentoMeta = const VerificationMeta(
    'valorDiferimento',
  );
  @override
  late final GeneratedColumn<double> valorDiferimento = GeneratedColumn<double>(
    'valor_diferimento',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _valorTributoDevolvidoMeta =
      const VerificationMeta('valorTributoDevolvido');
  @override
  late final GeneratedColumn<double> valorTributoDevolvido =
      GeneratedColumn<double>(
        'valor_tributo_devolvido',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _percentualReducaoAliquotaMeta =
      const VerificationMeta('percentualReducaoAliquota');
  @override
  late final GeneratedColumn<double> percentualReducaoAliquota =
      GeneratedColumn<double>(
        'percentual_reducao_aliquota',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _aliquotaEfetivaMeta = const VerificationMeta(
    'aliquotaEfetiva',
  );
  @override
  late final GeneratedColumn<double> aliquotaEfetiva = GeneratedColumn<double>(
    'aliquota_efetiva',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _valorMeta = const VerificationMeta('valor');
  @override
  late final GeneratedColumn<double> valor = GeneratedColumn<double>(
    'valor',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    idNfeDetalhe,
    cst,
    codigoClassificacaoTributaria,
    valorBaseCalculo,
    aliquota,
    percentualDiferimento,
    valorDiferimento,
    valorTributoDevolvido,
    percentualReducaoAliquota,
    aliquotaEfetiva,
    valor,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'nfe_detalhe_imposto_cbs';
  @override
  VerificationContext validateIntegrity(
    Insertable<NfeDetalheImpostoCbs> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('id_nfe_detalhe')) {
      context.handle(
        _idNfeDetalheMeta,
        idNfeDetalhe.isAcceptableOrUnknown(
          data['id_nfe_detalhe']!,
          _idNfeDetalheMeta,
        ),
      );
    }
    if (data.containsKey('cst')) {
      context.handle(
        _cstMeta,
        cst.isAcceptableOrUnknown(data['cst']!, _cstMeta),
      );
    }
    if (data.containsKey('codigo_classificacao_tributaria')) {
      context.handle(
        _codigoClassificacaoTributariaMeta,
        codigoClassificacaoTributaria.isAcceptableOrUnknown(
          data['codigo_classificacao_tributaria']!,
          _codigoClassificacaoTributariaMeta,
        ),
      );
    }
    if (data.containsKey('valor_base_calculo')) {
      context.handle(
        _valorBaseCalculoMeta,
        valorBaseCalculo.isAcceptableOrUnknown(
          data['valor_base_calculo']!,
          _valorBaseCalculoMeta,
        ),
      );
    }
    if (data.containsKey('aliquota')) {
      context.handle(
        _aliquotaMeta,
        aliquota.isAcceptableOrUnknown(data['aliquota']!, _aliquotaMeta),
      );
    }
    if (data.containsKey('percentual_diferimento')) {
      context.handle(
        _percentualDiferimentoMeta,
        percentualDiferimento.isAcceptableOrUnknown(
          data['percentual_diferimento']!,
          _percentualDiferimentoMeta,
        ),
      );
    }
    if (data.containsKey('valor_diferimento')) {
      context.handle(
        _valorDiferimentoMeta,
        valorDiferimento.isAcceptableOrUnknown(
          data['valor_diferimento']!,
          _valorDiferimentoMeta,
        ),
      );
    }
    if (data.containsKey('valor_tributo_devolvido')) {
      context.handle(
        _valorTributoDevolvidoMeta,
        valorTributoDevolvido.isAcceptableOrUnknown(
          data['valor_tributo_devolvido']!,
          _valorTributoDevolvidoMeta,
        ),
      );
    }
    if (data.containsKey('percentual_reducao_aliquota')) {
      context.handle(
        _percentualReducaoAliquotaMeta,
        percentualReducaoAliquota.isAcceptableOrUnknown(
          data['percentual_reducao_aliquota']!,
          _percentualReducaoAliquotaMeta,
        ),
      );
    }
    if (data.containsKey('aliquota_efetiva')) {
      context.handle(
        _aliquotaEfetivaMeta,
        aliquotaEfetiva.isAcceptableOrUnknown(
          data['aliquota_efetiva']!,
          _aliquotaEfetivaMeta,
        ),
      );
    }
    if (data.containsKey('valor')) {
      context.handle(
        _valorMeta,
        valor.isAcceptableOrUnknown(data['valor']!, _valorMeta),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeDetalheImpostoCbs map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return NfeDetalheImpostoCbs(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id'],
      ),
      idNfeDetalhe: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_nfe_detalhe'],
      ),
      cst: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}cst'],
      ),
      codigoClassificacaoTributaria: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}codigo_classificacao_tributaria'],
      ),
      valorBaseCalculo: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_base_calculo'],
      ),
      aliquota: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}aliquota'],
      ),
      percentualDiferimento: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}percentual_diferimento'],
      ),
      valorDiferimento: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_diferimento'],
      ),
      valorTributoDevolvido: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_tributo_devolvido'],
      ),
      percentualReducaoAliquota: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}percentual_reducao_aliquota'],
      ),
      aliquotaEfetiva: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}aliquota_efetiva'],
      ),
      valor: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor'],
      ),
    );
  }

  @override
  $NfeDetalheImpostoCbssTable createAlias(String alias) {
    return $NfeDetalheImpostoCbssTable(attachedDatabase, alias);
  }
}

class NfeDetalheImpostoCbs extends DataClass
    implements Insertable<NfeDetalheImpostoCbs> {
  final int? id;
  final int? idNfeDetalhe;
  final String? cst;
  final String? codigoClassificacaoTributaria;
  final double? valorBaseCalculo;
  final double? aliquota;
  final double? percentualDiferimento;
  final double? valorDiferimento;
  final double? valorTributoDevolvido;
  final double? percentualReducaoAliquota;
  final double? aliquotaEfetiva;
  final double? valor;
  const NfeDetalheImpostoCbs({
    this.id,
    this.idNfeDetalhe,
    this.cst,
    this.codigoClassificacaoTributaria,
    this.valorBaseCalculo,
    this.aliquota,
    this.percentualDiferimento,
    this.valorDiferimento,
    this.valorTributoDevolvido,
    this.percentualReducaoAliquota,
    this.aliquotaEfetiva,
    this.valor,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeDetalhe != null) {
      map['id_nfe_detalhe'] = Variable<int>(idNfeDetalhe);
    }
    if (!nullToAbsent || cst != null) {
      map['cst'] = Variable<String>(cst);
    }
    if (!nullToAbsent || codigoClassificacaoTributaria != null) {
      map['codigo_classificacao_tributaria'] = Variable<String>(
        codigoClassificacaoTributaria,
      );
    }
    if (!nullToAbsent || valorBaseCalculo != null) {
      map['valor_base_calculo'] = Variable<double>(valorBaseCalculo);
    }
    if (!nullToAbsent || aliquota != null) {
      map['aliquota'] = Variable<double>(aliquota);
    }
    if (!nullToAbsent || percentualDiferimento != null) {
      map['percentual_diferimento'] = Variable<double>(percentualDiferimento);
    }
    if (!nullToAbsent || valorDiferimento != null) {
      map['valor_diferimento'] = Variable<double>(valorDiferimento);
    }
    if (!nullToAbsent || valorTributoDevolvido != null) {
      map['valor_tributo_devolvido'] = Variable<double>(valorTributoDevolvido);
    }
    if (!nullToAbsent || percentualReducaoAliquota != null) {
      map['percentual_reducao_aliquota'] = Variable<double>(
        percentualReducaoAliquota,
      );
    }
    if (!nullToAbsent || aliquotaEfetiva != null) {
      map['aliquota_efetiva'] = Variable<double>(aliquotaEfetiva);
    }
    if (!nullToAbsent || valor != null) {
      map['valor'] = Variable<double>(valor);
    }
    return map;
  }

  factory NfeDetalheImpostoCbs.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeDetalheImpostoCbs(
      id: serializer.fromJson<int?>(json['id']),
      idNfeDetalhe: serializer.fromJson<int?>(json['idNfeDetalhe']),
      cst: serializer.fromJson<String?>(json['cst']),
      codigoClassificacaoTributaria: serializer.fromJson<String?>(
        json['codigoClassificacaoTributaria'],
      ),
      valorBaseCalculo: serializer.fromJson<double?>(json['valorBaseCalculo']),
      aliquota: serializer.fromJson<double?>(json['aliquota']),
      percentualDiferimento: serializer.fromJson<double?>(
        json['percentualDiferimento'],
      ),
      valorDiferimento: serializer.fromJson<double?>(json['valorDiferimento']),
      valorTributoDevolvido: serializer.fromJson<double?>(
        json['valorTributoDevolvido'],
      ),
      percentualReducaoAliquota: serializer.fromJson<double?>(
        json['percentualReducaoAliquota'],
      ),
      aliquotaEfetiva: serializer.fromJson<double?>(json['aliquotaEfetiva']),
      valor: serializer.fromJson<double?>(json['valor']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeDetalhe': serializer.toJson<int?>(idNfeDetalhe),
      'cst': serializer.toJson<String?>(cst),
      'codigoClassificacaoTributaria': serializer.toJson<String?>(
        codigoClassificacaoTributaria,
      ),
      'valorBaseCalculo': serializer.toJson<double?>(valorBaseCalculo),
      'aliquota': serializer.toJson<double?>(aliquota),
      'percentualDiferimento': serializer.toJson<double?>(
        percentualDiferimento,
      ),
      'valorDiferimento': serializer.toJson<double?>(valorDiferimento),
      'valorTributoDevolvido': serializer.toJson<double?>(
        valorTributoDevolvido,
      ),
      'percentualReducaoAliquota': serializer.toJson<double?>(
        percentualReducaoAliquota,
      ),
      'aliquotaEfetiva': serializer.toJson<double?>(aliquotaEfetiva),
      'valor': serializer.toJson<double?>(valor),
    };
  }

  NfeDetalheImpostoCbs copyWith({
    Value<int?> id = const Value.absent(),
    Value<int?> idNfeDetalhe = const Value.absent(),
    Value<String?> cst = const Value.absent(),
    Value<String?> codigoClassificacaoTributaria = const Value.absent(),
    Value<double?> valorBaseCalculo = const Value.absent(),
    Value<double?> aliquota = const Value.absent(),
    Value<double?> percentualDiferimento = const Value.absent(),
    Value<double?> valorDiferimento = const Value.absent(),
    Value<double?> valorTributoDevolvido = const Value.absent(),
    Value<double?> percentualReducaoAliquota = const Value.absent(),
    Value<double?> aliquotaEfetiva = const Value.absent(),
    Value<double?> valor = const Value.absent(),
  }) => NfeDetalheImpostoCbs(
    id: id.present ? id.value : this.id,
    idNfeDetalhe: idNfeDetalhe.present ? idNfeDetalhe.value : this.idNfeDetalhe,
    cst: cst.present ? cst.value : this.cst,
    codigoClassificacaoTributaria:
        codigoClassificacaoTributaria.present
            ? codigoClassificacaoTributaria.value
            : this.codigoClassificacaoTributaria,
    valorBaseCalculo:
        valorBaseCalculo.present
            ? valorBaseCalculo.value
            : this.valorBaseCalculo,
    aliquota: aliquota.present ? aliquota.value : this.aliquota,
    percentualDiferimento:
        percentualDiferimento.present
            ? percentualDiferimento.value
            : this.percentualDiferimento,
    valorDiferimento:
        valorDiferimento.present
            ? valorDiferimento.value
            : this.valorDiferimento,
    valorTributoDevolvido:
        valorTributoDevolvido.present
            ? valorTributoDevolvido.value
            : this.valorTributoDevolvido,
    percentualReducaoAliquota:
        percentualReducaoAliquota.present
            ? percentualReducaoAliquota.value
            : this.percentualReducaoAliquota,
    aliquotaEfetiva:
        aliquotaEfetiva.present ? aliquotaEfetiva.value : this.aliquotaEfetiva,
    valor: valor.present ? valor.value : this.valor,
  );
  NfeDetalheImpostoCbs copyWithCompanion(NfeDetalheImpostoCbssCompanion data) {
    return NfeDetalheImpostoCbs(
      id: data.id.present ? data.id.value : this.id,
      idNfeDetalhe:
          data.idNfeDetalhe.present
              ? data.idNfeDetalhe.value
              : this.idNfeDetalhe,
      cst: data.cst.present ? data.cst.value : this.cst,
      codigoClassificacaoTributaria:
          data.codigoClassificacaoTributaria.present
              ? data.codigoClassificacaoTributaria.value
              : this.codigoClassificacaoTributaria,
      valorBaseCalculo:
          data.valorBaseCalculo.present
              ? data.valorBaseCalculo.value
              : this.valorBaseCalculo,
      aliquota: data.aliquota.present ? data.aliquota.value : this.aliquota,
      percentualDiferimento:
          data.percentualDiferimento.present
              ? data.percentualDiferimento.value
              : this.percentualDiferimento,
      valorDiferimento:
          data.valorDiferimento.present
              ? data.valorDiferimento.value
              : this.valorDiferimento,
      valorTributoDevolvido:
          data.valorTributoDevolvido.present
              ? data.valorTributoDevolvido.value
              : this.valorTributoDevolvido,
      percentualReducaoAliquota:
          data.percentualReducaoAliquota.present
              ? data.percentualReducaoAliquota.value
              : this.percentualReducaoAliquota,
      aliquotaEfetiva:
          data.aliquotaEfetiva.present
              ? data.aliquotaEfetiva.value
              : this.aliquotaEfetiva,
      valor: data.valor.present ? data.valor.value : this.valor,
    );
  }

  @override
  String toString() {
    return (StringBuffer('NfeDetalheImpostoCbs(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('cst: $cst, ')
          ..write(
            'codigoClassificacaoTributaria: $codigoClassificacaoTributaria, ',
          )
          ..write('valorBaseCalculo: $valorBaseCalculo, ')
          ..write('aliquota: $aliquota, ')
          ..write('percentualDiferimento: $percentualDiferimento, ')
          ..write('valorDiferimento: $valorDiferimento, ')
          ..write('valorTributoDevolvido: $valorTributoDevolvido, ')
          ..write('percentualReducaoAliquota: $percentualReducaoAliquota, ')
          ..write('aliquotaEfetiva: $aliquotaEfetiva, ')
          ..write('valor: $valor')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    idNfeDetalhe,
    cst,
    codigoClassificacaoTributaria,
    valorBaseCalculo,
    aliquota,
    percentualDiferimento,
    valorDiferimento,
    valorTributoDevolvido,
    percentualReducaoAliquota,
    aliquotaEfetiva,
    valor,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeDetalheImpostoCbs &&
          other.id == this.id &&
          other.idNfeDetalhe == this.idNfeDetalhe &&
          other.cst == this.cst &&
          other.codigoClassificacaoTributaria ==
              this.codigoClassificacaoTributaria &&
          other.valorBaseCalculo == this.valorBaseCalculo &&
          other.aliquota == this.aliquota &&
          other.percentualDiferimento == this.percentualDiferimento &&
          other.valorDiferimento == this.valorDiferimento &&
          other.valorTributoDevolvido == this.valorTributoDevolvido &&
          other.percentualReducaoAliquota == this.percentualReducaoAliquota &&
          other.aliquotaEfetiva == this.aliquotaEfetiva &&
          other.valor == this.valor);
}

class NfeDetalheImpostoCbssCompanion
    extends UpdateCompanion<NfeDetalheImpostoCbs> {
  final Value<int?> id;
  final Value<int?> idNfeDetalhe;
  final Value<String?> cst;
  final Value<String?> codigoClassificacaoTributaria;
  final Value<double?> valorBaseCalculo;
  final Value<double?> aliquota;
  final Value<double?> percentualDiferimento;
  final Value<double?> valorDiferimento;
  final Value<double?> valorTributoDevolvido;
  final Value<double?> percentualReducaoAliquota;
  final Value<double?> aliquotaEfetiva;
  final Value<double?> valor;
  const NfeDetalheImpostoCbssCompanion({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.cst = const Value.absent(),
    this.codigoClassificacaoTributaria = const Value.absent(),
    this.valorBaseCalculo = const Value.absent(),
    this.aliquota = const Value.absent(),
    this.percentualDiferimento = const Value.absent(),
    this.valorDiferimento = const Value.absent(),
    this.valorTributoDevolvido = const Value.absent(),
    this.percentualReducaoAliquota = const Value.absent(),
    this.aliquotaEfetiva = const Value.absent(),
    this.valor = const Value.absent(),
  });
  NfeDetalheImpostoCbssCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.cst = const Value.absent(),
    this.codigoClassificacaoTributaria = const Value.absent(),
    this.valorBaseCalculo = const Value.absent(),
    this.aliquota = const Value.absent(),
    this.percentualDiferimento = const Value.absent(),
    this.valorDiferimento = const Value.absent(),
    this.valorTributoDevolvido = const Value.absent(),
    this.percentualReducaoAliquota = const Value.absent(),
    this.aliquotaEfetiva = const Value.absent(),
    this.valor = const Value.absent(),
  });
  static Insertable<NfeDetalheImpostoCbs> custom({
    Expression<int>? id,
    Expression<int>? idNfeDetalhe,
    Expression<String>? cst,
    Expression<String>? codigoClassificacaoTributaria,
    Expression<double>? valorBaseCalculo,
    Expression<double>? aliquota,
    Expression<double>? percentualDiferimento,
    Expression<double>? valorDiferimento,
    Expression<double>? valorTributoDevolvido,
    Expression<double>? percentualReducaoAliquota,
    Expression<double>? aliquotaEfetiva,
    Expression<double>? valor,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (idNfeDetalhe != null) 'id_nfe_detalhe': idNfeDetalhe,
      if (cst != null) 'cst': cst,
      if (codigoClassificacaoTributaria != null)
        'codigo_classificacao_tributaria': codigoClassificacaoTributaria,
      if (valorBaseCalculo != null) 'valor_base_calculo': valorBaseCalculo,
      if (aliquota != null) 'aliquota': aliquota,
      if (percentualDiferimento != null)
        'percentual_diferimento': percentualDiferimento,
      if (valorDiferimento != null) 'valor_diferimento': valorDiferimento,
      if (valorTributoDevolvido != null)
        'valor_tributo_devolvido': valorTributoDevolvido,
      if (percentualReducaoAliquota != null)
        'percentual_reducao_aliquota': percentualReducaoAliquota,
      if (aliquotaEfetiva != null) 'aliquota_efetiva': aliquotaEfetiva,
      if (valor != null) 'valor': valor,
    });
  }

  NfeDetalheImpostoCbssCompanion copyWith({
    Value<int?>? id,
    Value<int?>? idNfeDetalhe,
    Value<String?>? cst,
    Value<String?>? codigoClassificacaoTributaria,
    Value<double?>? valorBaseCalculo,
    Value<double?>? aliquota,
    Value<double?>? percentualDiferimento,
    Value<double?>? valorDiferimento,
    Value<double?>? valorTributoDevolvido,
    Value<double?>? percentualReducaoAliquota,
    Value<double?>? aliquotaEfetiva,
    Value<double?>? valor,
  }) {
    return NfeDetalheImpostoCbssCompanion(
      id: id ?? this.id,
      idNfeDetalhe: idNfeDetalhe ?? this.idNfeDetalhe,
      cst: cst ?? this.cst,
      codigoClassificacaoTributaria:
          codigoClassificacaoTributaria ?? this.codigoClassificacaoTributaria,
      valorBaseCalculo: valorBaseCalculo ?? this.valorBaseCalculo,
      aliquota: aliquota ?? this.aliquota,
      percentualDiferimento:
          percentualDiferimento ?? this.percentualDiferimento,
      valorDiferimento: valorDiferimento ?? this.valorDiferimento,
      valorTributoDevolvido:
          valorTributoDevolvido ?? this.valorTributoDevolvido,
      percentualReducaoAliquota:
          percentualReducaoAliquota ?? this.percentualReducaoAliquota,
      aliquotaEfetiva: aliquotaEfetiva ?? this.aliquotaEfetiva,
      valor: valor ?? this.valor,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (idNfeDetalhe.present) {
      map['id_nfe_detalhe'] = Variable<int>(idNfeDetalhe.value);
    }
    if (cst.present) {
      map['cst'] = Variable<String>(cst.value);
    }
    if (codigoClassificacaoTributaria.present) {
      map['codigo_classificacao_tributaria'] = Variable<String>(
        codigoClassificacaoTributaria.value,
      );
    }
    if (valorBaseCalculo.present) {
      map['valor_base_calculo'] = Variable<double>(valorBaseCalculo.value);
    }
    if (aliquota.present) {
      map['aliquota'] = Variable<double>(aliquota.value);
    }
    if (percentualDiferimento.present) {
      map['percentual_diferimento'] = Variable<double>(
        percentualDiferimento.value,
      );
    }
    if (valorDiferimento.present) {
      map['valor_diferimento'] = Variable<double>(valorDiferimento.value);
    }
    if (valorTributoDevolvido.present) {
      map['valor_tributo_devolvido'] = Variable<double>(
        valorTributoDevolvido.value,
      );
    }
    if (percentualReducaoAliquota.present) {
      map['percentual_reducao_aliquota'] = Variable<double>(
        percentualReducaoAliquota.value,
      );
    }
    if (aliquotaEfetiva.present) {
      map['aliquota_efetiva'] = Variable<double>(aliquotaEfetiva.value);
    }
    if (valor.present) {
      map['valor'] = Variable<double>(valor.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeDetalheImpostoCbssCompanion(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('cst: $cst, ')
          ..write(
            'codigoClassificacaoTributaria: $codigoClassificacaoTributaria, ',
          )
          ..write('valorBaseCalculo: $valorBaseCalculo, ')
          ..write('aliquota: $aliquota, ')
          ..write('percentualDiferimento: $percentualDiferimento, ')
          ..write('valorDiferimento: $valorDiferimento, ')
          ..write('valorTributoDevolvido: $valorTributoDevolvido, ')
          ..write('percentualReducaoAliquota: $percentualReducaoAliquota, ')
          ..write('aliquotaEfetiva: $aliquotaEfetiva, ')
          ..write('valor: $valor')
          ..write(')'))
        .toString();
  }
}

class $NfeDetalheTributoRegularsTable extends NfeDetalheTributoRegulars
    with TableInfo<$NfeDetalheTributoRegularsTable, NfeDetalheTributoRegular> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeDetalheTributoRegularsTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
    'id',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idNfeDetalheMeta = const VerificationMeta(
    'idNfeDetalhe',
  );
  @override
  late final GeneratedColumn<int> idNfeDetalhe = GeneratedColumn<int>(
    'id_nfe_detalhe',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _cstMeta = const VerificationMeta('cst');
  @override
  late final GeneratedColumn<String> cst = GeneratedColumn<String>(
    'cst',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 3,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _codigoClassificacaoTributariaMeta =
      const VerificationMeta('codigoClassificacaoTributaria');
  @override
  late final GeneratedColumn<String> codigoClassificacaoTributaria =
      GeneratedColumn<String>(
        'codigo_classificacao_tributaria',
        aliasedName,
        true,
        additionalChecks: GeneratedColumn.checkTextLength(
          minTextLength: 0,
          maxTextLength: 6,
        ),
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _aliquotaIbsUfMeta = const VerificationMeta(
    'aliquotaIbsUf',
  );
  @override
  late final GeneratedColumn<double> aliquotaIbsUf = GeneratedColumn<double>(
    'aliquota_ibs_uf',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _valorTributoIbsUfMeta = const VerificationMeta(
    'valorTributoIbsUf',
  );
  @override
  late final GeneratedColumn<double> valorTributoIbsUf =
      GeneratedColumn<double>(
        'valor_tributo_ibs_uf',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _aliquotaIbsMunMeta = const VerificationMeta(
    'aliquotaIbsMun',
  );
  @override
  late final GeneratedColumn<double> aliquotaIbsMun = GeneratedColumn<double>(
    'aliquota_ibs_mun',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _valorTributoIbsMunMeta =
      const VerificationMeta('valorTributoIbsMun');
  @override
  late final GeneratedColumn<double> valorTributoIbsMun =
      GeneratedColumn<double>(
        'valor_tributo_ibs_mun',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _alquotaCbsMeta = const VerificationMeta(
    'alquotaCbs',
  );
  @override
  late final GeneratedColumn<double> alquotaCbs = GeneratedColumn<double>(
    'alquota_cbs',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _valorTributoCbsMeta = const VerificationMeta(
    'valorTributoCbs',
  );
  @override
  late final GeneratedColumn<double> valorTributoCbs = GeneratedColumn<double>(
    'valor_tributo_cbs',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    idNfeDetalhe,
    cst,
    codigoClassificacaoTributaria,
    aliquotaIbsUf,
    valorTributoIbsUf,
    aliquotaIbsMun,
    valorTributoIbsMun,
    alquotaCbs,
    valorTributoCbs,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'nfe_detalhe_tributo_regular';
  @override
  VerificationContext validateIntegrity(
    Insertable<NfeDetalheTributoRegular> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('id_nfe_detalhe')) {
      context.handle(
        _idNfeDetalheMeta,
        idNfeDetalhe.isAcceptableOrUnknown(
          data['id_nfe_detalhe']!,
          _idNfeDetalheMeta,
        ),
      );
    }
    if (data.containsKey('cst')) {
      context.handle(
        _cstMeta,
        cst.isAcceptableOrUnknown(data['cst']!, _cstMeta),
      );
    }
    if (data.containsKey('codigo_classificacao_tributaria')) {
      context.handle(
        _codigoClassificacaoTributariaMeta,
        codigoClassificacaoTributaria.isAcceptableOrUnknown(
          data['codigo_classificacao_tributaria']!,
          _codigoClassificacaoTributariaMeta,
        ),
      );
    }
    if (data.containsKey('aliquota_ibs_uf')) {
      context.handle(
        _aliquotaIbsUfMeta,
        aliquotaIbsUf.isAcceptableOrUnknown(
          data['aliquota_ibs_uf']!,
          _aliquotaIbsUfMeta,
        ),
      );
    }
    if (data.containsKey('valor_tributo_ibs_uf')) {
      context.handle(
        _valorTributoIbsUfMeta,
        valorTributoIbsUf.isAcceptableOrUnknown(
          data['valor_tributo_ibs_uf']!,
          _valorTributoIbsUfMeta,
        ),
      );
    }
    if (data.containsKey('aliquota_ibs_mun')) {
      context.handle(
        _aliquotaIbsMunMeta,
        aliquotaIbsMun.isAcceptableOrUnknown(
          data['aliquota_ibs_mun']!,
          _aliquotaIbsMunMeta,
        ),
      );
    }
    if (data.containsKey('valor_tributo_ibs_mun')) {
      context.handle(
        _valorTributoIbsMunMeta,
        valorTributoIbsMun.isAcceptableOrUnknown(
          data['valor_tributo_ibs_mun']!,
          _valorTributoIbsMunMeta,
        ),
      );
    }
    if (data.containsKey('alquota_cbs')) {
      context.handle(
        _alquotaCbsMeta,
        alquotaCbs.isAcceptableOrUnknown(data['alquota_cbs']!, _alquotaCbsMeta),
      );
    }
    if (data.containsKey('valor_tributo_cbs')) {
      context.handle(
        _valorTributoCbsMeta,
        valorTributoCbs.isAcceptableOrUnknown(
          data['valor_tributo_cbs']!,
          _valorTributoCbsMeta,
        ),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeDetalheTributoRegular map(
    Map<String, dynamic> data, {
    String? tablePrefix,
  }) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return NfeDetalheTributoRegular(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id'],
      ),
      idNfeDetalhe: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_nfe_detalhe'],
      ),
      cst: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}cst'],
      ),
      codigoClassificacaoTributaria: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}codigo_classificacao_tributaria'],
      ),
      aliquotaIbsUf: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}aliquota_ibs_uf'],
      ),
      valorTributoIbsUf: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_tributo_ibs_uf'],
      ),
      aliquotaIbsMun: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}aliquota_ibs_mun'],
      ),
      valorTributoIbsMun: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_tributo_ibs_mun'],
      ),
      alquotaCbs: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}alquota_cbs'],
      ),
      valorTributoCbs: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_tributo_cbs'],
      ),
    );
  }

  @override
  $NfeDetalheTributoRegularsTable createAlias(String alias) {
    return $NfeDetalheTributoRegularsTable(attachedDatabase, alias);
  }
}

class NfeDetalheTributoRegular extends DataClass
    implements Insertable<NfeDetalheTributoRegular> {
  final int? id;
  final int? idNfeDetalhe;
  final String? cst;
  final String? codigoClassificacaoTributaria;
  final double? aliquotaIbsUf;
  final double? valorTributoIbsUf;
  final double? aliquotaIbsMun;
  final double? valorTributoIbsMun;
  final double? alquotaCbs;
  final double? valorTributoCbs;
  const NfeDetalheTributoRegular({
    this.id,
    this.idNfeDetalhe,
    this.cst,
    this.codigoClassificacaoTributaria,
    this.aliquotaIbsUf,
    this.valorTributoIbsUf,
    this.aliquotaIbsMun,
    this.valorTributoIbsMun,
    this.alquotaCbs,
    this.valorTributoCbs,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeDetalhe != null) {
      map['id_nfe_detalhe'] = Variable<int>(idNfeDetalhe);
    }
    if (!nullToAbsent || cst != null) {
      map['cst'] = Variable<String>(cst);
    }
    if (!nullToAbsent || codigoClassificacaoTributaria != null) {
      map['codigo_classificacao_tributaria'] = Variable<String>(
        codigoClassificacaoTributaria,
      );
    }
    if (!nullToAbsent || aliquotaIbsUf != null) {
      map['aliquota_ibs_uf'] = Variable<double>(aliquotaIbsUf);
    }
    if (!nullToAbsent || valorTributoIbsUf != null) {
      map['valor_tributo_ibs_uf'] = Variable<double>(valorTributoIbsUf);
    }
    if (!nullToAbsent || aliquotaIbsMun != null) {
      map['aliquota_ibs_mun'] = Variable<double>(aliquotaIbsMun);
    }
    if (!nullToAbsent || valorTributoIbsMun != null) {
      map['valor_tributo_ibs_mun'] = Variable<double>(valorTributoIbsMun);
    }
    if (!nullToAbsent || alquotaCbs != null) {
      map['alquota_cbs'] = Variable<double>(alquotaCbs);
    }
    if (!nullToAbsent || valorTributoCbs != null) {
      map['valor_tributo_cbs'] = Variable<double>(valorTributoCbs);
    }
    return map;
  }

  factory NfeDetalheTributoRegular.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeDetalheTributoRegular(
      id: serializer.fromJson<int?>(json['id']),
      idNfeDetalhe: serializer.fromJson<int?>(json['idNfeDetalhe']),
      cst: serializer.fromJson<String?>(json['cst']),
      codigoClassificacaoTributaria: serializer.fromJson<String?>(
        json['codigoClassificacaoTributaria'],
      ),
      aliquotaIbsUf: serializer.fromJson<double?>(json['aliquotaIbsUf']),
      valorTributoIbsUf: serializer.fromJson<double?>(
        json['valorTributoIbsUf'],
      ),
      aliquotaIbsMun: serializer.fromJson<double?>(json['aliquotaIbsMun']),
      valorTributoIbsMun: serializer.fromJson<double?>(
        json['valorTributoIbsMun'],
      ),
      alquotaCbs: serializer.fromJson<double?>(json['alquotaCbs']),
      valorTributoCbs: serializer.fromJson<double?>(json['valorTributoCbs']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeDetalhe': serializer.toJson<int?>(idNfeDetalhe),
      'cst': serializer.toJson<String?>(cst),
      'codigoClassificacaoTributaria': serializer.toJson<String?>(
        codigoClassificacaoTributaria,
      ),
      'aliquotaIbsUf': serializer.toJson<double?>(aliquotaIbsUf),
      'valorTributoIbsUf': serializer.toJson<double?>(valorTributoIbsUf),
      'aliquotaIbsMun': serializer.toJson<double?>(aliquotaIbsMun),
      'valorTributoIbsMun': serializer.toJson<double?>(valorTributoIbsMun),
      'alquotaCbs': serializer.toJson<double?>(alquotaCbs),
      'valorTributoCbs': serializer.toJson<double?>(valorTributoCbs),
    };
  }

  NfeDetalheTributoRegular copyWith({
    Value<int?> id = const Value.absent(),
    Value<int?> idNfeDetalhe = const Value.absent(),
    Value<String?> cst = const Value.absent(),
    Value<String?> codigoClassificacaoTributaria = const Value.absent(),
    Value<double?> aliquotaIbsUf = const Value.absent(),
    Value<double?> valorTributoIbsUf = const Value.absent(),
    Value<double?> aliquotaIbsMun = const Value.absent(),
    Value<double?> valorTributoIbsMun = const Value.absent(),
    Value<double?> alquotaCbs = const Value.absent(),
    Value<double?> valorTributoCbs = const Value.absent(),
  }) => NfeDetalheTributoRegular(
    id: id.present ? id.value : this.id,
    idNfeDetalhe: idNfeDetalhe.present ? idNfeDetalhe.value : this.idNfeDetalhe,
    cst: cst.present ? cst.value : this.cst,
    codigoClassificacaoTributaria:
        codigoClassificacaoTributaria.present
            ? codigoClassificacaoTributaria.value
            : this.codigoClassificacaoTributaria,
    aliquotaIbsUf:
        aliquotaIbsUf.present ? aliquotaIbsUf.value : this.aliquotaIbsUf,
    valorTributoIbsUf:
        valorTributoIbsUf.present
            ? valorTributoIbsUf.value
            : this.valorTributoIbsUf,
    aliquotaIbsMun:
        aliquotaIbsMun.present ? aliquotaIbsMun.value : this.aliquotaIbsMun,
    valorTributoIbsMun:
        valorTributoIbsMun.present
            ? valorTributoIbsMun.value
            : this.valorTributoIbsMun,
    alquotaCbs: alquotaCbs.present ? alquotaCbs.value : this.alquotaCbs,
    valorTributoCbs:
        valorTributoCbs.present ? valorTributoCbs.value : this.valorTributoCbs,
  );
  NfeDetalheTributoRegular copyWithCompanion(
    NfeDetalheTributoRegularsCompanion data,
  ) {
    return NfeDetalheTributoRegular(
      id: data.id.present ? data.id.value : this.id,
      idNfeDetalhe:
          data.idNfeDetalhe.present
              ? data.idNfeDetalhe.value
              : this.idNfeDetalhe,
      cst: data.cst.present ? data.cst.value : this.cst,
      codigoClassificacaoTributaria:
          data.codigoClassificacaoTributaria.present
              ? data.codigoClassificacaoTributaria.value
              : this.codigoClassificacaoTributaria,
      aliquotaIbsUf:
          data.aliquotaIbsUf.present
              ? data.aliquotaIbsUf.value
              : this.aliquotaIbsUf,
      valorTributoIbsUf:
          data.valorTributoIbsUf.present
              ? data.valorTributoIbsUf.value
              : this.valorTributoIbsUf,
      aliquotaIbsMun:
          data.aliquotaIbsMun.present
              ? data.aliquotaIbsMun.value
              : this.aliquotaIbsMun,
      valorTributoIbsMun:
          data.valorTributoIbsMun.present
              ? data.valorTributoIbsMun.value
              : this.valorTributoIbsMun,
      alquotaCbs:
          data.alquotaCbs.present ? data.alquotaCbs.value : this.alquotaCbs,
      valorTributoCbs:
          data.valorTributoCbs.present
              ? data.valorTributoCbs.value
              : this.valorTributoCbs,
    );
  }

  @override
  String toString() {
    return (StringBuffer('NfeDetalheTributoRegular(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('cst: $cst, ')
          ..write(
            'codigoClassificacaoTributaria: $codigoClassificacaoTributaria, ',
          )
          ..write('aliquotaIbsUf: $aliquotaIbsUf, ')
          ..write('valorTributoIbsUf: $valorTributoIbsUf, ')
          ..write('aliquotaIbsMun: $aliquotaIbsMun, ')
          ..write('valorTributoIbsMun: $valorTributoIbsMun, ')
          ..write('alquotaCbs: $alquotaCbs, ')
          ..write('valorTributoCbs: $valorTributoCbs')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    idNfeDetalhe,
    cst,
    codigoClassificacaoTributaria,
    aliquotaIbsUf,
    valorTributoIbsUf,
    aliquotaIbsMun,
    valorTributoIbsMun,
    alquotaCbs,
    valorTributoCbs,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeDetalheTributoRegular &&
          other.id == this.id &&
          other.idNfeDetalhe == this.idNfeDetalhe &&
          other.cst == this.cst &&
          other.codigoClassificacaoTributaria ==
              this.codigoClassificacaoTributaria &&
          other.aliquotaIbsUf == this.aliquotaIbsUf &&
          other.valorTributoIbsUf == this.valorTributoIbsUf &&
          other.aliquotaIbsMun == this.aliquotaIbsMun &&
          other.valorTributoIbsMun == this.valorTributoIbsMun &&
          other.alquotaCbs == this.alquotaCbs &&
          other.valorTributoCbs == this.valorTributoCbs);
}

class NfeDetalheTributoRegularsCompanion
    extends UpdateCompanion<NfeDetalheTributoRegular> {
  final Value<int?> id;
  final Value<int?> idNfeDetalhe;
  final Value<String?> cst;
  final Value<String?> codigoClassificacaoTributaria;
  final Value<double?> aliquotaIbsUf;
  final Value<double?> valorTributoIbsUf;
  final Value<double?> aliquotaIbsMun;
  final Value<double?> valorTributoIbsMun;
  final Value<double?> alquotaCbs;
  final Value<double?> valorTributoCbs;
  const NfeDetalheTributoRegularsCompanion({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.cst = const Value.absent(),
    this.codigoClassificacaoTributaria = const Value.absent(),
    this.aliquotaIbsUf = const Value.absent(),
    this.valorTributoIbsUf = const Value.absent(),
    this.aliquotaIbsMun = const Value.absent(),
    this.valorTributoIbsMun = const Value.absent(),
    this.alquotaCbs = const Value.absent(),
    this.valorTributoCbs = const Value.absent(),
  });
  NfeDetalheTributoRegularsCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.cst = const Value.absent(),
    this.codigoClassificacaoTributaria = const Value.absent(),
    this.aliquotaIbsUf = const Value.absent(),
    this.valorTributoIbsUf = const Value.absent(),
    this.aliquotaIbsMun = const Value.absent(),
    this.valorTributoIbsMun = const Value.absent(),
    this.alquotaCbs = const Value.absent(),
    this.valorTributoCbs = const Value.absent(),
  });
  static Insertable<NfeDetalheTributoRegular> custom({
    Expression<int>? id,
    Expression<int>? idNfeDetalhe,
    Expression<String>? cst,
    Expression<String>? codigoClassificacaoTributaria,
    Expression<double>? aliquotaIbsUf,
    Expression<double>? valorTributoIbsUf,
    Expression<double>? aliquotaIbsMun,
    Expression<double>? valorTributoIbsMun,
    Expression<double>? alquotaCbs,
    Expression<double>? valorTributoCbs,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (idNfeDetalhe != null) 'id_nfe_detalhe': idNfeDetalhe,
      if (cst != null) 'cst': cst,
      if (codigoClassificacaoTributaria != null)
        'codigo_classificacao_tributaria': codigoClassificacaoTributaria,
      if (aliquotaIbsUf != null) 'aliquota_ibs_uf': aliquotaIbsUf,
      if (valorTributoIbsUf != null) 'valor_tributo_ibs_uf': valorTributoIbsUf,
      if (aliquotaIbsMun != null) 'aliquota_ibs_mun': aliquotaIbsMun,
      if (valorTributoIbsMun != null)
        'valor_tributo_ibs_mun': valorTributoIbsMun,
      if (alquotaCbs != null) 'alquota_cbs': alquotaCbs,
      if (valorTributoCbs != null) 'valor_tributo_cbs': valorTributoCbs,
    });
  }

  NfeDetalheTributoRegularsCompanion copyWith({
    Value<int?>? id,
    Value<int?>? idNfeDetalhe,
    Value<String?>? cst,
    Value<String?>? codigoClassificacaoTributaria,
    Value<double?>? aliquotaIbsUf,
    Value<double?>? valorTributoIbsUf,
    Value<double?>? aliquotaIbsMun,
    Value<double?>? valorTributoIbsMun,
    Value<double?>? alquotaCbs,
    Value<double?>? valorTributoCbs,
  }) {
    return NfeDetalheTributoRegularsCompanion(
      id: id ?? this.id,
      idNfeDetalhe: idNfeDetalhe ?? this.idNfeDetalhe,
      cst: cst ?? this.cst,
      codigoClassificacaoTributaria:
          codigoClassificacaoTributaria ?? this.codigoClassificacaoTributaria,
      aliquotaIbsUf: aliquotaIbsUf ?? this.aliquotaIbsUf,
      valorTributoIbsUf: valorTributoIbsUf ?? this.valorTributoIbsUf,
      aliquotaIbsMun: aliquotaIbsMun ?? this.aliquotaIbsMun,
      valorTributoIbsMun: valorTributoIbsMun ?? this.valorTributoIbsMun,
      alquotaCbs: alquotaCbs ?? this.alquotaCbs,
      valorTributoCbs: valorTributoCbs ?? this.valorTributoCbs,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (idNfeDetalhe.present) {
      map['id_nfe_detalhe'] = Variable<int>(idNfeDetalhe.value);
    }
    if (cst.present) {
      map['cst'] = Variable<String>(cst.value);
    }
    if (codigoClassificacaoTributaria.present) {
      map['codigo_classificacao_tributaria'] = Variable<String>(
        codigoClassificacaoTributaria.value,
      );
    }
    if (aliquotaIbsUf.present) {
      map['aliquota_ibs_uf'] = Variable<double>(aliquotaIbsUf.value);
    }
    if (valorTributoIbsUf.present) {
      map['valor_tributo_ibs_uf'] = Variable<double>(valorTributoIbsUf.value);
    }
    if (aliquotaIbsMun.present) {
      map['aliquota_ibs_mun'] = Variable<double>(aliquotaIbsMun.value);
    }
    if (valorTributoIbsMun.present) {
      map['valor_tributo_ibs_mun'] = Variable<double>(valorTributoIbsMun.value);
    }
    if (alquotaCbs.present) {
      map['alquota_cbs'] = Variable<double>(alquotaCbs.value);
    }
    if (valorTributoCbs.present) {
      map['valor_tributo_cbs'] = Variable<double>(valorTributoCbs.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeDetalheTributoRegularsCompanion(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('cst: $cst, ')
          ..write(
            'codigoClassificacaoTributaria: $codigoClassificacaoTributaria, ',
          )
          ..write('aliquotaIbsUf: $aliquotaIbsUf, ')
          ..write('valorTributoIbsUf: $valorTributoIbsUf, ')
          ..write('aliquotaIbsMun: $aliquotaIbsMun, ')
          ..write('valorTributoIbsMun: $valorTributoIbsMun, ')
          ..write('alquotaCbs: $alquotaCbs, ')
          ..write('valorTributoCbs: $valorTributoCbs')
          ..write(')'))
        .toString();
  }
}

class $NfeDetalheCreditoPresumidoIbssTable
    extends NfeDetalheCreditoPresumidoIbss
    with
        TableInfo<
          $NfeDetalheCreditoPresumidoIbssTable,
          NfeDetalheCreditoPresumidoIbs
        > {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeDetalheCreditoPresumidoIbssTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
    'id',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idNfeDetalheMeta = const VerificationMeta(
    'idNfeDetalhe',
  );
  @override
  late final GeneratedColumn<int> idNfeDetalhe = GeneratedColumn<int>(
    'id_nfe_detalhe',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _codigoClassificacaoMeta =
      const VerificationMeta('codigoClassificacao');
  @override
  late final GeneratedColumn<String> codigoClassificacao =
      GeneratedColumn<String>(
        'codigo_classificacao',
        aliasedName,
        true,
        additionalChecks: GeneratedColumn.checkTextLength(
          minTextLength: 0,
          maxTextLength: 1,
        ),
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _percentualMeta = const VerificationMeta(
    'percentual',
  );
  @override
  late final GeneratedColumn<double> percentual = GeneratedColumn<double>(
    'percentual',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _valorMeta = const VerificationMeta('valor');
  @override
  late final GeneratedColumn<double> valor = GeneratedColumn<double>(
    'valor',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _valorSuspensivoMeta = const VerificationMeta(
    'valorSuspensivo',
  );
  @override
  late final GeneratedColumn<double> valorSuspensivo = GeneratedColumn<double>(
    'valor_suspensivo',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    idNfeDetalhe,
    codigoClassificacao,
    percentual,
    valor,
    valorSuspensivo,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'nfe_detalhe_credito_presumido_ibs';
  @override
  VerificationContext validateIntegrity(
    Insertable<NfeDetalheCreditoPresumidoIbs> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('id_nfe_detalhe')) {
      context.handle(
        _idNfeDetalheMeta,
        idNfeDetalhe.isAcceptableOrUnknown(
          data['id_nfe_detalhe']!,
          _idNfeDetalheMeta,
        ),
      );
    }
    if (data.containsKey('codigo_classificacao')) {
      context.handle(
        _codigoClassificacaoMeta,
        codigoClassificacao.isAcceptableOrUnknown(
          data['codigo_classificacao']!,
          _codigoClassificacaoMeta,
        ),
      );
    }
    if (data.containsKey('percentual')) {
      context.handle(
        _percentualMeta,
        percentual.isAcceptableOrUnknown(data['percentual']!, _percentualMeta),
      );
    }
    if (data.containsKey('valor')) {
      context.handle(
        _valorMeta,
        valor.isAcceptableOrUnknown(data['valor']!, _valorMeta),
      );
    }
    if (data.containsKey('valor_suspensivo')) {
      context.handle(
        _valorSuspensivoMeta,
        valorSuspensivo.isAcceptableOrUnknown(
          data['valor_suspensivo']!,
          _valorSuspensivoMeta,
        ),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeDetalheCreditoPresumidoIbs map(
    Map<String, dynamic> data, {
    String? tablePrefix,
  }) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return NfeDetalheCreditoPresumidoIbs(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id'],
      ),
      idNfeDetalhe: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_nfe_detalhe'],
      ),
      codigoClassificacao: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}codigo_classificacao'],
      ),
      percentual: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}percentual'],
      ),
      valor: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor'],
      ),
      valorSuspensivo: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_suspensivo'],
      ),
    );
  }

  @override
  $NfeDetalheCreditoPresumidoIbssTable createAlias(String alias) {
    return $NfeDetalheCreditoPresumidoIbssTable(attachedDatabase, alias);
  }
}

class NfeDetalheCreditoPresumidoIbs extends DataClass
    implements Insertable<NfeDetalheCreditoPresumidoIbs> {
  final int? id;
  final int? idNfeDetalhe;
  final String? codigoClassificacao;
  final double? percentual;
  final double? valor;
  final double? valorSuspensivo;
  const NfeDetalheCreditoPresumidoIbs({
    this.id,
    this.idNfeDetalhe,
    this.codigoClassificacao,
    this.percentual,
    this.valor,
    this.valorSuspensivo,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeDetalhe != null) {
      map['id_nfe_detalhe'] = Variable<int>(idNfeDetalhe);
    }
    if (!nullToAbsent || codigoClassificacao != null) {
      map['codigo_classificacao'] = Variable<String>(codigoClassificacao);
    }
    if (!nullToAbsent || percentual != null) {
      map['percentual'] = Variable<double>(percentual);
    }
    if (!nullToAbsent || valor != null) {
      map['valor'] = Variable<double>(valor);
    }
    if (!nullToAbsent || valorSuspensivo != null) {
      map['valor_suspensivo'] = Variable<double>(valorSuspensivo);
    }
    return map;
  }

  factory NfeDetalheCreditoPresumidoIbs.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeDetalheCreditoPresumidoIbs(
      id: serializer.fromJson<int?>(json['id']),
      idNfeDetalhe: serializer.fromJson<int?>(json['idNfeDetalhe']),
      codigoClassificacao: serializer.fromJson<String?>(
        json['codigoClassificacao'],
      ),
      percentual: serializer.fromJson<double?>(json['percentual']),
      valor: serializer.fromJson<double?>(json['valor']),
      valorSuspensivo: serializer.fromJson<double?>(json['valorSuspensivo']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeDetalhe': serializer.toJson<int?>(idNfeDetalhe),
      'codigoClassificacao': serializer.toJson<String?>(codigoClassificacao),
      'percentual': serializer.toJson<double?>(percentual),
      'valor': serializer.toJson<double?>(valor),
      'valorSuspensivo': serializer.toJson<double?>(valorSuspensivo),
    };
  }

  NfeDetalheCreditoPresumidoIbs copyWith({
    Value<int?> id = const Value.absent(),
    Value<int?> idNfeDetalhe = const Value.absent(),
    Value<String?> codigoClassificacao = const Value.absent(),
    Value<double?> percentual = const Value.absent(),
    Value<double?> valor = const Value.absent(),
    Value<double?> valorSuspensivo = const Value.absent(),
  }) => NfeDetalheCreditoPresumidoIbs(
    id: id.present ? id.value : this.id,
    idNfeDetalhe: idNfeDetalhe.present ? idNfeDetalhe.value : this.idNfeDetalhe,
    codigoClassificacao:
        codigoClassificacao.present
            ? codigoClassificacao.value
            : this.codigoClassificacao,
    percentual: percentual.present ? percentual.value : this.percentual,
    valor: valor.present ? valor.value : this.valor,
    valorSuspensivo:
        valorSuspensivo.present ? valorSuspensivo.value : this.valorSuspensivo,
  );
  NfeDetalheCreditoPresumidoIbs copyWithCompanion(
    NfeDetalheCreditoPresumidoIbssCompanion data,
  ) {
    return NfeDetalheCreditoPresumidoIbs(
      id: data.id.present ? data.id.value : this.id,
      idNfeDetalhe:
          data.idNfeDetalhe.present
              ? data.idNfeDetalhe.value
              : this.idNfeDetalhe,
      codigoClassificacao:
          data.codigoClassificacao.present
              ? data.codigoClassificacao.value
              : this.codigoClassificacao,
      percentual:
          data.percentual.present ? data.percentual.value : this.percentual,
      valor: data.valor.present ? data.valor.value : this.valor,
      valorSuspensivo:
          data.valorSuspensivo.present
              ? data.valorSuspensivo.value
              : this.valorSuspensivo,
    );
  }

  @override
  String toString() {
    return (StringBuffer('NfeDetalheCreditoPresumidoIbs(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('codigoClassificacao: $codigoClassificacao, ')
          ..write('percentual: $percentual, ')
          ..write('valor: $valor, ')
          ..write('valorSuspensivo: $valorSuspensivo')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    idNfeDetalhe,
    codigoClassificacao,
    percentual,
    valor,
    valorSuspensivo,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeDetalheCreditoPresumidoIbs &&
          other.id == this.id &&
          other.idNfeDetalhe == this.idNfeDetalhe &&
          other.codigoClassificacao == this.codigoClassificacao &&
          other.percentual == this.percentual &&
          other.valor == this.valor &&
          other.valorSuspensivo == this.valorSuspensivo);
}

class NfeDetalheCreditoPresumidoIbssCompanion
    extends UpdateCompanion<NfeDetalheCreditoPresumidoIbs> {
  final Value<int?> id;
  final Value<int?> idNfeDetalhe;
  final Value<String?> codigoClassificacao;
  final Value<double?> percentual;
  final Value<double?> valor;
  final Value<double?> valorSuspensivo;
  const NfeDetalheCreditoPresumidoIbssCompanion({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.codigoClassificacao = const Value.absent(),
    this.percentual = const Value.absent(),
    this.valor = const Value.absent(),
    this.valorSuspensivo = const Value.absent(),
  });
  NfeDetalheCreditoPresumidoIbssCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.codigoClassificacao = const Value.absent(),
    this.percentual = const Value.absent(),
    this.valor = const Value.absent(),
    this.valorSuspensivo = const Value.absent(),
  });
  static Insertable<NfeDetalheCreditoPresumidoIbs> custom({
    Expression<int>? id,
    Expression<int>? idNfeDetalhe,
    Expression<String>? codigoClassificacao,
    Expression<double>? percentual,
    Expression<double>? valor,
    Expression<double>? valorSuspensivo,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (idNfeDetalhe != null) 'id_nfe_detalhe': idNfeDetalhe,
      if (codigoClassificacao != null)
        'codigo_classificacao': codigoClassificacao,
      if (percentual != null) 'percentual': percentual,
      if (valor != null) 'valor': valor,
      if (valorSuspensivo != null) 'valor_suspensivo': valorSuspensivo,
    });
  }

  NfeDetalheCreditoPresumidoIbssCompanion copyWith({
    Value<int?>? id,
    Value<int?>? idNfeDetalhe,
    Value<String?>? codigoClassificacao,
    Value<double?>? percentual,
    Value<double?>? valor,
    Value<double?>? valorSuspensivo,
  }) {
    return NfeDetalheCreditoPresumidoIbssCompanion(
      id: id ?? this.id,
      idNfeDetalhe: idNfeDetalhe ?? this.idNfeDetalhe,
      codigoClassificacao: codigoClassificacao ?? this.codigoClassificacao,
      percentual: percentual ?? this.percentual,
      valor: valor ?? this.valor,
      valorSuspensivo: valorSuspensivo ?? this.valorSuspensivo,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (idNfeDetalhe.present) {
      map['id_nfe_detalhe'] = Variable<int>(idNfeDetalhe.value);
    }
    if (codigoClassificacao.present) {
      map['codigo_classificacao'] = Variable<String>(codigoClassificacao.value);
    }
    if (percentual.present) {
      map['percentual'] = Variable<double>(percentual.value);
    }
    if (valor.present) {
      map['valor'] = Variable<double>(valor.value);
    }
    if (valorSuspensivo.present) {
      map['valor_suspensivo'] = Variable<double>(valorSuspensivo.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeDetalheCreditoPresumidoIbssCompanion(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('codigoClassificacao: $codigoClassificacao, ')
          ..write('percentual: $percentual, ')
          ..write('valor: $valor, ')
          ..write('valorSuspensivo: $valorSuspensivo')
          ..write(')'))
        .toString();
  }
}

class $NfeDetalheCreditoPresumidoCbssTable
    extends NfeDetalheCreditoPresumidoCbss
    with
        TableInfo<
          $NfeDetalheCreditoPresumidoCbssTable,
          NfeDetalheCreditoPresumidoCbs
        > {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeDetalheCreditoPresumidoCbssTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
    'id',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idNfeDetalheMeta = const VerificationMeta(
    'idNfeDetalhe',
  );
  @override
  late final GeneratedColumn<int> idNfeDetalhe = GeneratedColumn<int>(
    'id_nfe_detalhe',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _codigoClassificacaoMeta =
      const VerificationMeta('codigoClassificacao');
  @override
  late final GeneratedColumn<String> codigoClassificacao =
      GeneratedColumn<String>(
        'codigo_classificacao',
        aliasedName,
        true,
        additionalChecks: GeneratedColumn.checkTextLength(
          minTextLength: 0,
          maxTextLength: 1,
        ),
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _percentualMeta = const VerificationMeta(
    'percentual',
  );
  @override
  late final GeneratedColumn<double> percentual = GeneratedColumn<double>(
    'percentual',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _valorMeta = const VerificationMeta('valor');
  @override
  late final GeneratedColumn<double> valor = GeneratedColumn<double>(
    'valor',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _valorSuspensivoMeta = const VerificationMeta(
    'valorSuspensivo',
  );
  @override
  late final GeneratedColumn<double> valorSuspensivo = GeneratedColumn<double>(
    'valor_suspensivo',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    idNfeDetalhe,
    codigoClassificacao,
    percentual,
    valor,
    valorSuspensivo,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'nfe_detalhe_credito_presumido_cbs';
  @override
  VerificationContext validateIntegrity(
    Insertable<NfeDetalheCreditoPresumidoCbs> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('id_nfe_detalhe')) {
      context.handle(
        _idNfeDetalheMeta,
        idNfeDetalhe.isAcceptableOrUnknown(
          data['id_nfe_detalhe']!,
          _idNfeDetalheMeta,
        ),
      );
    }
    if (data.containsKey('codigo_classificacao')) {
      context.handle(
        _codigoClassificacaoMeta,
        codigoClassificacao.isAcceptableOrUnknown(
          data['codigo_classificacao']!,
          _codigoClassificacaoMeta,
        ),
      );
    }
    if (data.containsKey('percentual')) {
      context.handle(
        _percentualMeta,
        percentual.isAcceptableOrUnknown(data['percentual']!, _percentualMeta),
      );
    }
    if (data.containsKey('valor')) {
      context.handle(
        _valorMeta,
        valor.isAcceptableOrUnknown(data['valor']!, _valorMeta),
      );
    }
    if (data.containsKey('valor_suspensivo')) {
      context.handle(
        _valorSuspensivoMeta,
        valorSuspensivo.isAcceptableOrUnknown(
          data['valor_suspensivo']!,
          _valorSuspensivoMeta,
        ),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeDetalheCreditoPresumidoCbs map(
    Map<String, dynamic> data, {
    String? tablePrefix,
  }) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return NfeDetalheCreditoPresumidoCbs(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id'],
      ),
      idNfeDetalhe: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_nfe_detalhe'],
      ),
      codigoClassificacao: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}codigo_classificacao'],
      ),
      percentual: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}percentual'],
      ),
      valor: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor'],
      ),
      valorSuspensivo: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_suspensivo'],
      ),
    );
  }

  @override
  $NfeDetalheCreditoPresumidoCbssTable createAlias(String alias) {
    return $NfeDetalheCreditoPresumidoCbssTable(attachedDatabase, alias);
  }
}

class NfeDetalheCreditoPresumidoCbs extends DataClass
    implements Insertable<NfeDetalheCreditoPresumidoCbs> {
  final int? id;
  final int? idNfeDetalhe;
  final String? codigoClassificacao;
  final double? percentual;
  final double? valor;
  final double? valorSuspensivo;
  const NfeDetalheCreditoPresumidoCbs({
    this.id,
    this.idNfeDetalhe,
    this.codigoClassificacao,
    this.percentual,
    this.valor,
    this.valorSuspensivo,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeDetalhe != null) {
      map['id_nfe_detalhe'] = Variable<int>(idNfeDetalhe);
    }
    if (!nullToAbsent || codigoClassificacao != null) {
      map['codigo_classificacao'] = Variable<String>(codigoClassificacao);
    }
    if (!nullToAbsent || percentual != null) {
      map['percentual'] = Variable<double>(percentual);
    }
    if (!nullToAbsent || valor != null) {
      map['valor'] = Variable<double>(valor);
    }
    if (!nullToAbsent || valorSuspensivo != null) {
      map['valor_suspensivo'] = Variable<double>(valorSuspensivo);
    }
    return map;
  }

  factory NfeDetalheCreditoPresumidoCbs.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeDetalheCreditoPresumidoCbs(
      id: serializer.fromJson<int?>(json['id']),
      idNfeDetalhe: serializer.fromJson<int?>(json['idNfeDetalhe']),
      codigoClassificacao: serializer.fromJson<String?>(
        json['codigoClassificacao'],
      ),
      percentual: serializer.fromJson<double?>(json['percentual']),
      valor: serializer.fromJson<double?>(json['valor']),
      valorSuspensivo: serializer.fromJson<double?>(json['valorSuspensivo']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeDetalhe': serializer.toJson<int?>(idNfeDetalhe),
      'codigoClassificacao': serializer.toJson<String?>(codigoClassificacao),
      'percentual': serializer.toJson<double?>(percentual),
      'valor': serializer.toJson<double?>(valor),
      'valorSuspensivo': serializer.toJson<double?>(valorSuspensivo),
    };
  }

  NfeDetalheCreditoPresumidoCbs copyWith({
    Value<int?> id = const Value.absent(),
    Value<int?> idNfeDetalhe = const Value.absent(),
    Value<String?> codigoClassificacao = const Value.absent(),
    Value<double?> percentual = const Value.absent(),
    Value<double?> valor = const Value.absent(),
    Value<double?> valorSuspensivo = const Value.absent(),
  }) => NfeDetalheCreditoPresumidoCbs(
    id: id.present ? id.value : this.id,
    idNfeDetalhe: idNfeDetalhe.present ? idNfeDetalhe.value : this.idNfeDetalhe,
    codigoClassificacao:
        codigoClassificacao.present
            ? codigoClassificacao.value
            : this.codigoClassificacao,
    percentual: percentual.present ? percentual.value : this.percentual,
    valor: valor.present ? valor.value : this.valor,
    valorSuspensivo:
        valorSuspensivo.present ? valorSuspensivo.value : this.valorSuspensivo,
  );
  NfeDetalheCreditoPresumidoCbs copyWithCompanion(
    NfeDetalheCreditoPresumidoCbssCompanion data,
  ) {
    return NfeDetalheCreditoPresumidoCbs(
      id: data.id.present ? data.id.value : this.id,
      idNfeDetalhe:
          data.idNfeDetalhe.present
              ? data.idNfeDetalhe.value
              : this.idNfeDetalhe,
      codigoClassificacao:
          data.codigoClassificacao.present
              ? data.codigoClassificacao.value
              : this.codigoClassificacao,
      percentual:
          data.percentual.present ? data.percentual.value : this.percentual,
      valor: data.valor.present ? data.valor.value : this.valor,
      valorSuspensivo:
          data.valorSuspensivo.present
              ? data.valorSuspensivo.value
              : this.valorSuspensivo,
    );
  }

  @override
  String toString() {
    return (StringBuffer('NfeDetalheCreditoPresumidoCbs(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('codigoClassificacao: $codigoClassificacao, ')
          ..write('percentual: $percentual, ')
          ..write('valor: $valor, ')
          ..write('valorSuspensivo: $valorSuspensivo')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    idNfeDetalhe,
    codigoClassificacao,
    percentual,
    valor,
    valorSuspensivo,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeDetalheCreditoPresumidoCbs &&
          other.id == this.id &&
          other.idNfeDetalhe == this.idNfeDetalhe &&
          other.codigoClassificacao == this.codigoClassificacao &&
          other.percentual == this.percentual &&
          other.valor == this.valor &&
          other.valorSuspensivo == this.valorSuspensivo);
}

class NfeDetalheCreditoPresumidoCbssCompanion
    extends UpdateCompanion<NfeDetalheCreditoPresumidoCbs> {
  final Value<int?> id;
  final Value<int?> idNfeDetalhe;
  final Value<String?> codigoClassificacao;
  final Value<double?> percentual;
  final Value<double?> valor;
  final Value<double?> valorSuspensivo;
  const NfeDetalheCreditoPresumidoCbssCompanion({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.codigoClassificacao = const Value.absent(),
    this.percentual = const Value.absent(),
    this.valor = const Value.absent(),
    this.valorSuspensivo = const Value.absent(),
  });
  NfeDetalheCreditoPresumidoCbssCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.codigoClassificacao = const Value.absent(),
    this.percentual = const Value.absent(),
    this.valor = const Value.absent(),
    this.valorSuspensivo = const Value.absent(),
  });
  static Insertable<NfeDetalheCreditoPresumidoCbs> custom({
    Expression<int>? id,
    Expression<int>? idNfeDetalhe,
    Expression<String>? codigoClassificacao,
    Expression<double>? percentual,
    Expression<double>? valor,
    Expression<double>? valorSuspensivo,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (idNfeDetalhe != null) 'id_nfe_detalhe': idNfeDetalhe,
      if (codigoClassificacao != null)
        'codigo_classificacao': codigoClassificacao,
      if (percentual != null) 'percentual': percentual,
      if (valor != null) 'valor': valor,
      if (valorSuspensivo != null) 'valor_suspensivo': valorSuspensivo,
    });
  }

  NfeDetalheCreditoPresumidoCbssCompanion copyWith({
    Value<int?>? id,
    Value<int?>? idNfeDetalhe,
    Value<String?>? codigoClassificacao,
    Value<double?>? percentual,
    Value<double?>? valor,
    Value<double?>? valorSuspensivo,
  }) {
    return NfeDetalheCreditoPresumidoCbssCompanion(
      id: id ?? this.id,
      idNfeDetalhe: idNfeDetalhe ?? this.idNfeDetalhe,
      codigoClassificacao: codigoClassificacao ?? this.codigoClassificacao,
      percentual: percentual ?? this.percentual,
      valor: valor ?? this.valor,
      valorSuspensivo: valorSuspensivo ?? this.valorSuspensivo,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (idNfeDetalhe.present) {
      map['id_nfe_detalhe'] = Variable<int>(idNfeDetalhe.value);
    }
    if (codigoClassificacao.present) {
      map['codigo_classificacao'] = Variable<String>(codigoClassificacao.value);
    }
    if (percentual.present) {
      map['percentual'] = Variable<double>(percentual.value);
    }
    if (valor.present) {
      map['valor'] = Variable<double>(valor.value);
    }
    if (valorSuspensivo.present) {
      map['valor_suspensivo'] = Variable<double>(valorSuspensivo.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeDetalheCreditoPresumidoCbssCompanion(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('codigoClassificacao: $codigoClassificacao, ')
          ..write('percentual: $percentual, ')
          ..write('valor: $valor, ')
          ..write('valorSuspensivo: $valorSuspensivo')
          ..write(')'))
        .toString();
  }
}

class $NfeDetalheCompraGovernosTable extends NfeDetalheCompraGovernos
    with TableInfo<$NfeDetalheCompraGovernosTable, NfeDetalheCompraGoverno> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeDetalheCompraGovernosTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
    'id',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idNfeDetalheMeta = const VerificationMeta(
    'idNfeDetalhe',
  );
  @override
  late final GeneratedColumn<int> idNfeDetalhe = GeneratedColumn<int>(
    'id_nfe_detalhe',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _aliquotaIbsUfMeta = const VerificationMeta(
    'aliquotaIbsUf',
  );
  @override
  late final GeneratedColumn<double> aliquotaIbsUf = GeneratedColumn<double>(
    'aliquota_ibs_uf',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _valorIbsUfMeta = const VerificationMeta(
    'valorIbsUf',
  );
  @override
  late final GeneratedColumn<double> valorIbsUf = GeneratedColumn<double>(
    'valor_ibs_uf',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _aliquotaIbsMunMeta = const VerificationMeta(
    'aliquotaIbsMun',
  );
  @override
  late final GeneratedColumn<double> aliquotaIbsMun = GeneratedColumn<double>(
    'aliquota_ibs_mun',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _valorIbsMunMeta = const VerificationMeta(
    'valorIbsMun',
  );
  @override
  late final GeneratedColumn<double> valorIbsMun = GeneratedColumn<double>(
    'valor_ibs_mun',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _aliquotaCbsMeta = const VerificationMeta(
    'aliquotaCbs',
  );
  @override
  late final GeneratedColumn<double> aliquotaCbs = GeneratedColumn<double>(
    'aliquota_cbs',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _valorCbsMeta = const VerificationMeta(
    'valorCbs',
  );
  @override
  late final GeneratedColumn<double> valorCbs = GeneratedColumn<double>(
    'valor_cbs',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    idNfeDetalhe,
    aliquotaIbsUf,
    valorIbsUf,
    aliquotaIbsMun,
    valorIbsMun,
    aliquotaCbs,
    valorCbs,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'nfe_detalhe_compra_governo';
  @override
  VerificationContext validateIntegrity(
    Insertable<NfeDetalheCompraGoverno> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('id_nfe_detalhe')) {
      context.handle(
        _idNfeDetalheMeta,
        idNfeDetalhe.isAcceptableOrUnknown(
          data['id_nfe_detalhe']!,
          _idNfeDetalheMeta,
        ),
      );
    }
    if (data.containsKey('aliquota_ibs_uf')) {
      context.handle(
        _aliquotaIbsUfMeta,
        aliquotaIbsUf.isAcceptableOrUnknown(
          data['aliquota_ibs_uf']!,
          _aliquotaIbsUfMeta,
        ),
      );
    }
    if (data.containsKey('valor_ibs_uf')) {
      context.handle(
        _valorIbsUfMeta,
        valorIbsUf.isAcceptableOrUnknown(
          data['valor_ibs_uf']!,
          _valorIbsUfMeta,
        ),
      );
    }
    if (data.containsKey('aliquota_ibs_mun')) {
      context.handle(
        _aliquotaIbsMunMeta,
        aliquotaIbsMun.isAcceptableOrUnknown(
          data['aliquota_ibs_mun']!,
          _aliquotaIbsMunMeta,
        ),
      );
    }
    if (data.containsKey('valor_ibs_mun')) {
      context.handle(
        _valorIbsMunMeta,
        valorIbsMun.isAcceptableOrUnknown(
          data['valor_ibs_mun']!,
          _valorIbsMunMeta,
        ),
      );
    }
    if (data.containsKey('aliquota_cbs')) {
      context.handle(
        _aliquotaCbsMeta,
        aliquotaCbs.isAcceptableOrUnknown(
          data['aliquota_cbs']!,
          _aliquotaCbsMeta,
        ),
      );
    }
    if (data.containsKey('valor_cbs')) {
      context.handle(
        _valorCbsMeta,
        valorCbs.isAcceptableOrUnknown(data['valor_cbs']!, _valorCbsMeta),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeDetalheCompraGoverno map(
    Map<String, dynamic> data, {
    String? tablePrefix,
  }) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return NfeDetalheCompraGoverno(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id'],
      ),
      idNfeDetalhe: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_nfe_detalhe'],
      ),
      aliquotaIbsUf: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}aliquota_ibs_uf'],
      ),
      valorIbsUf: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_ibs_uf'],
      ),
      aliquotaIbsMun: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}aliquota_ibs_mun'],
      ),
      valorIbsMun: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_ibs_mun'],
      ),
      aliquotaCbs: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}aliquota_cbs'],
      ),
      valorCbs: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_cbs'],
      ),
    );
  }

  @override
  $NfeDetalheCompraGovernosTable createAlias(String alias) {
    return $NfeDetalheCompraGovernosTable(attachedDatabase, alias);
  }
}

class NfeDetalheCompraGoverno extends DataClass
    implements Insertable<NfeDetalheCompraGoverno> {
  final int? id;
  final int? idNfeDetalhe;
  final double? aliquotaIbsUf;
  final double? valorIbsUf;
  final double? aliquotaIbsMun;
  final double? valorIbsMun;
  final double? aliquotaCbs;
  final double? valorCbs;
  const NfeDetalheCompraGoverno({
    this.id,
    this.idNfeDetalhe,
    this.aliquotaIbsUf,
    this.valorIbsUf,
    this.aliquotaIbsMun,
    this.valorIbsMun,
    this.aliquotaCbs,
    this.valorCbs,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeDetalhe != null) {
      map['id_nfe_detalhe'] = Variable<int>(idNfeDetalhe);
    }
    if (!nullToAbsent || aliquotaIbsUf != null) {
      map['aliquota_ibs_uf'] = Variable<double>(aliquotaIbsUf);
    }
    if (!nullToAbsent || valorIbsUf != null) {
      map['valor_ibs_uf'] = Variable<double>(valorIbsUf);
    }
    if (!nullToAbsent || aliquotaIbsMun != null) {
      map['aliquota_ibs_mun'] = Variable<double>(aliquotaIbsMun);
    }
    if (!nullToAbsent || valorIbsMun != null) {
      map['valor_ibs_mun'] = Variable<double>(valorIbsMun);
    }
    if (!nullToAbsent || aliquotaCbs != null) {
      map['aliquota_cbs'] = Variable<double>(aliquotaCbs);
    }
    if (!nullToAbsent || valorCbs != null) {
      map['valor_cbs'] = Variable<double>(valorCbs);
    }
    return map;
  }

  factory NfeDetalheCompraGoverno.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeDetalheCompraGoverno(
      id: serializer.fromJson<int?>(json['id']),
      idNfeDetalhe: serializer.fromJson<int?>(json['idNfeDetalhe']),
      aliquotaIbsUf: serializer.fromJson<double?>(json['aliquotaIbsUf']),
      valorIbsUf: serializer.fromJson<double?>(json['valorIbsUf']),
      aliquotaIbsMun: serializer.fromJson<double?>(json['aliquotaIbsMun']),
      valorIbsMun: serializer.fromJson<double?>(json['valorIbsMun']),
      aliquotaCbs: serializer.fromJson<double?>(json['aliquotaCbs']),
      valorCbs: serializer.fromJson<double?>(json['valorCbs']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeDetalhe': serializer.toJson<int?>(idNfeDetalhe),
      'aliquotaIbsUf': serializer.toJson<double?>(aliquotaIbsUf),
      'valorIbsUf': serializer.toJson<double?>(valorIbsUf),
      'aliquotaIbsMun': serializer.toJson<double?>(aliquotaIbsMun),
      'valorIbsMun': serializer.toJson<double?>(valorIbsMun),
      'aliquotaCbs': serializer.toJson<double?>(aliquotaCbs),
      'valorCbs': serializer.toJson<double?>(valorCbs),
    };
  }

  NfeDetalheCompraGoverno copyWith({
    Value<int?> id = const Value.absent(),
    Value<int?> idNfeDetalhe = const Value.absent(),
    Value<double?> aliquotaIbsUf = const Value.absent(),
    Value<double?> valorIbsUf = const Value.absent(),
    Value<double?> aliquotaIbsMun = const Value.absent(),
    Value<double?> valorIbsMun = const Value.absent(),
    Value<double?> aliquotaCbs = const Value.absent(),
    Value<double?> valorCbs = const Value.absent(),
  }) => NfeDetalheCompraGoverno(
    id: id.present ? id.value : this.id,
    idNfeDetalhe: idNfeDetalhe.present ? idNfeDetalhe.value : this.idNfeDetalhe,
    aliquotaIbsUf:
        aliquotaIbsUf.present ? aliquotaIbsUf.value : this.aliquotaIbsUf,
    valorIbsUf: valorIbsUf.present ? valorIbsUf.value : this.valorIbsUf,
    aliquotaIbsMun:
        aliquotaIbsMun.present ? aliquotaIbsMun.value : this.aliquotaIbsMun,
    valorIbsMun: valorIbsMun.present ? valorIbsMun.value : this.valorIbsMun,
    aliquotaCbs: aliquotaCbs.present ? aliquotaCbs.value : this.aliquotaCbs,
    valorCbs: valorCbs.present ? valorCbs.value : this.valorCbs,
  );
  NfeDetalheCompraGoverno copyWithCompanion(
    NfeDetalheCompraGovernosCompanion data,
  ) {
    return NfeDetalheCompraGoverno(
      id: data.id.present ? data.id.value : this.id,
      idNfeDetalhe:
          data.idNfeDetalhe.present
              ? data.idNfeDetalhe.value
              : this.idNfeDetalhe,
      aliquotaIbsUf:
          data.aliquotaIbsUf.present
              ? data.aliquotaIbsUf.value
              : this.aliquotaIbsUf,
      valorIbsUf:
          data.valorIbsUf.present ? data.valorIbsUf.value : this.valorIbsUf,
      aliquotaIbsMun:
          data.aliquotaIbsMun.present
              ? data.aliquotaIbsMun.value
              : this.aliquotaIbsMun,
      valorIbsMun:
          data.valorIbsMun.present ? data.valorIbsMun.value : this.valorIbsMun,
      aliquotaCbs:
          data.aliquotaCbs.present ? data.aliquotaCbs.value : this.aliquotaCbs,
      valorCbs: data.valorCbs.present ? data.valorCbs.value : this.valorCbs,
    );
  }

  @override
  String toString() {
    return (StringBuffer('NfeDetalheCompraGoverno(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('aliquotaIbsUf: $aliquotaIbsUf, ')
          ..write('valorIbsUf: $valorIbsUf, ')
          ..write('aliquotaIbsMun: $aliquotaIbsMun, ')
          ..write('valorIbsMun: $valorIbsMun, ')
          ..write('aliquotaCbs: $aliquotaCbs, ')
          ..write('valorCbs: $valorCbs')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    idNfeDetalhe,
    aliquotaIbsUf,
    valorIbsUf,
    aliquotaIbsMun,
    valorIbsMun,
    aliquotaCbs,
    valorCbs,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeDetalheCompraGoverno &&
          other.id == this.id &&
          other.idNfeDetalhe == this.idNfeDetalhe &&
          other.aliquotaIbsUf == this.aliquotaIbsUf &&
          other.valorIbsUf == this.valorIbsUf &&
          other.aliquotaIbsMun == this.aliquotaIbsMun &&
          other.valorIbsMun == this.valorIbsMun &&
          other.aliquotaCbs == this.aliquotaCbs &&
          other.valorCbs == this.valorCbs);
}

class NfeDetalheCompraGovernosCompanion
    extends UpdateCompanion<NfeDetalheCompraGoverno> {
  final Value<int?> id;
  final Value<int?> idNfeDetalhe;
  final Value<double?> aliquotaIbsUf;
  final Value<double?> valorIbsUf;
  final Value<double?> aliquotaIbsMun;
  final Value<double?> valorIbsMun;
  final Value<double?> aliquotaCbs;
  final Value<double?> valorCbs;
  const NfeDetalheCompraGovernosCompanion({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.aliquotaIbsUf = const Value.absent(),
    this.valorIbsUf = const Value.absent(),
    this.aliquotaIbsMun = const Value.absent(),
    this.valorIbsMun = const Value.absent(),
    this.aliquotaCbs = const Value.absent(),
    this.valorCbs = const Value.absent(),
  });
  NfeDetalheCompraGovernosCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.aliquotaIbsUf = const Value.absent(),
    this.valorIbsUf = const Value.absent(),
    this.aliquotaIbsMun = const Value.absent(),
    this.valorIbsMun = const Value.absent(),
    this.aliquotaCbs = const Value.absent(),
    this.valorCbs = const Value.absent(),
  });
  static Insertable<NfeDetalheCompraGoverno> custom({
    Expression<int>? id,
    Expression<int>? idNfeDetalhe,
    Expression<double>? aliquotaIbsUf,
    Expression<double>? valorIbsUf,
    Expression<double>? aliquotaIbsMun,
    Expression<double>? valorIbsMun,
    Expression<double>? aliquotaCbs,
    Expression<double>? valorCbs,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (idNfeDetalhe != null) 'id_nfe_detalhe': idNfeDetalhe,
      if (aliquotaIbsUf != null) 'aliquota_ibs_uf': aliquotaIbsUf,
      if (valorIbsUf != null) 'valor_ibs_uf': valorIbsUf,
      if (aliquotaIbsMun != null) 'aliquota_ibs_mun': aliquotaIbsMun,
      if (valorIbsMun != null) 'valor_ibs_mun': valorIbsMun,
      if (aliquotaCbs != null) 'aliquota_cbs': aliquotaCbs,
      if (valorCbs != null) 'valor_cbs': valorCbs,
    });
  }

  NfeDetalheCompraGovernosCompanion copyWith({
    Value<int?>? id,
    Value<int?>? idNfeDetalhe,
    Value<double?>? aliquotaIbsUf,
    Value<double?>? valorIbsUf,
    Value<double?>? aliquotaIbsMun,
    Value<double?>? valorIbsMun,
    Value<double?>? aliquotaCbs,
    Value<double?>? valorCbs,
  }) {
    return NfeDetalheCompraGovernosCompanion(
      id: id ?? this.id,
      idNfeDetalhe: idNfeDetalhe ?? this.idNfeDetalhe,
      aliquotaIbsUf: aliquotaIbsUf ?? this.aliquotaIbsUf,
      valorIbsUf: valorIbsUf ?? this.valorIbsUf,
      aliquotaIbsMun: aliquotaIbsMun ?? this.aliquotaIbsMun,
      valorIbsMun: valorIbsMun ?? this.valorIbsMun,
      aliquotaCbs: aliquotaCbs ?? this.aliquotaCbs,
      valorCbs: valorCbs ?? this.valorCbs,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (idNfeDetalhe.present) {
      map['id_nfe_detalhe'] = Variable<int>(idNfeDetalhe.value);
    }
    if (aliquotaIbsUf.present) {
      map['aliquota_ibs_uf'] = Variable<double>(aliquotaIbsUf.value);
    }
    if (valorIbsUf.present) {
      map['valor_ibs_uf'] = Variable<double>(valorIbsUf.value);
    }
    if (aliquotaIbsMun.present) {
      map['aliquota_ibs_mun'] = Variable<double>(aliquotaIbsMun.value);
    }
    if (valorIbsMun.present) {
      map['valor_ibs_mun'] = Variable<double>(valorIbsMun.value);
    }
    if (aliquotaCbs.present) {
      map['aliquota_cbs'] = Variable<double>(aliquotaCbs.value);
    }
    if (valorCbs.present) {
      map['valor_cbs'] = Variable<double>(valorCbs.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeDetalheCompraGovernosCompanion(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('aliquotaIbsUf: $aliquotaIbsUf, ')
          ..write('valorIbsUf: $valorIbsUf, ')
          ..write('aliquotaIbsMun: $aliquotaIbsMun, ')
          ..write('valorIbsMun: $valorIbsMun, ')
          ..write('aliquotaCbs: $aliquotaCbs, ')
          ..write('valorCbs: $valorCbs')
          ..write(')'))
        .toString();
  }
}

class $NfeDetalheImpostoMonofasicosTable extends NfeDetalheImpostoMonofasicos
    with
        TableInfo<
          $NfeDetalheImpostoMonofasicosTable,
          NfeDetalheImpostoMonofasico
        > {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeDetalheImpostoMonofasicosTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
    'id',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idNfeDetalheMeta = const VerificationMeta(
    'idNfeDetalhe',
  );
  @override
  late final GeneratedColumn<int> idNfeDetalhe = GeneratedColumn<int>(
    'id_nfe_detalhe',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _quantidadeTributadaMeta =
      const VerificationMeta('quantidadeTributada');
  @override
  late final GeneratedColumn<double> quantidadeTributada =
      GeneratedColumn<double>(
        'quantidade_tributada',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _aliquotaIbsMeta = const VerificationMeta(
    'aliquotaIbs',
  );
  @override
  late final GeneratedColumn<double> aliquotaIbs = GeneratedColumn<double>(
    'aliquota_ibs',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _aliquotaCbsMeta = const VerificationMeta(
    'aliquotaCbs',
  );
  @override
  late final GeneratedColumn<double> aliquotaCbs = GeneratedColumn<double>(
    'aliquota_cbs',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _valorIbsMeta = const VerificationMeta(
    'valorIbs',
  );
  @override
  late final GeneratedColumn<double> valorIbs = GeneratedColumn<double>(
    'valor_ibs',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _valorCbsMeta = const VerificationMeta(
    'valorCbs',
  );
  @override
  late final GeneratedColumn<double> valorCbs = GeneratedColumn<double>(
    'valor_cbs',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _quantidadeTributadaRetencaoMeta =
      const VerificationMeta('quantidadeTributadaRetencao');
  @override
  late final GeneratedColumn<double> quantidadeTributadaRetencao =
      GeneratedColumn<double>(
        'quantidade_tributada_retencao',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _aliquotaIbsRetencaoMeta =
      const VerificationMeta('aliquotaIbsRetencao');
  @override
  late final GeneratedColumn<double> aliquotaIbsRetencao =
      GeneratedColumn<double>(
        'aliquota_ibs_retencao',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _valorIbsRetencaoMeta = const VerificationMeta(
    'valorIbsRetencao',
  );
  @override
  late final GeneratedColumn<double> valorIbsRetencao = GeneratedColumn<double>(
    'valor_ibs_retencao',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _aliquotaCbsRetencaoMeta =
      const VerificationMeta('aliquotaCbsRetencao');
  @override
  late final GeneratedColumn<double> aliquotaCbsRetencao =
      GeneratedColumn<double>(
        'aliquota_cbs_retencao',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _valorCbsRetencaoMeta = const VerificationMeta(
    'valorCbsRetencao',
  );
  @override
  late final GeneratedColumn<double> valorCbsRetencao = GeneratedColumn<double>(
    'valor_cbs_retencao',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _quantidadeTributadaRetidoMeta =
      const VerificationMeta('quantidadeTributadaRetido');
  @override
  late final GeneratedColumn<double> quantidadeTributadaRetido =
      GeneratedColumn<double>(
        'quantidade_tributada_retido',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _aliquotaIbsRetidoMeta = const VerificationMeta(
    'aliquotaIbsRetido',
  );
  @override
  late final GeneratedColumn<double> aliquotaIbsRetido =
      GeneratedColumn<double>(
        'aliquota_ibs_retido',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _valorIbsRetidoMeta = const VerificationMeta(
    'valorIbsRetido',
  );
  @override
  late final GeneratedColumn<double> valorIbsRetido = GeneratedColumn<double>(
    'valor_ibs_retido',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _aliquotaCbsRetidoMeta = const VerificationMeta(
    'aliquotaCbsRetido',
  );
  @override
  late final GeneratedColumn<double> aliquotaCbsRetido =
      GeneratedColumn<double>(
        'aliquota_cbs_retido',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _valorCbsRetidoMeta = const VerificationMeta(
    'valorCbsRetido',
  );
  @override
  late final GeneratedColumn<double> valorCbsRetido = GeneratedColumn<double>(
    'valor_cbs_retido',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _percentualIbsDiferidoMeta =
      const VerificationMeta('percentualIbsDiferido');
  @override
  late final GeneratedColumn<double> percentualIbsDiferido =
      GeneratedColumn<double>(
        'percentual_ibs_diferido',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _valorIbsDiferidoMeta = const VerificationMeta(
    'valorIbsDiferido',
  );
  @override
  late final GeneratedColumn<double> valorIbsDiferido = GeneratedColumn<double>(
    'valor_ibs_diferido',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _percentualCbsDiferidoMeta =
      const VerificationMeta('percentualCbsDiferido');
  @override
  late final GeneratedColumn<double> percentualCbsDiferido =
      GeneratedColumn<double>(
        'percentual_cbs_diferido',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _valorCbsDiferidoMeta = const VerificationMeta(
    'valorCbsDiferido',
  );
  @override
  late final GeneratedColumn<double> valorCbsDiferido = GeneratedColumn<double>(
    'valor_cbs_diferido',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _totalIbsMeta = const VerificationMeta(
    'totalIbs',
  );
  @override
  late final GeneratedColumn<double> totalIbs = GeneratedColumn<double>(
    'total_ibs',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _totalCbsMeta = const VerificationMeta(
    'totalCbs',
  );
  @override
  late final GeneratedColumn<double> totalCbs = GeneratedColumn<double>(
    'total_cbs',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    idNfeDetalhe,
    quantidadeTributada,
    aliquotaIbs,
    aliquotaCbs,
    valorIbs,
    valorCbs,
    quantidadeTributadaRetencao,
    aliquotaIbsRetencao,
    valorIbsRetencao,
    aliquotaCbsRetencao,
    valorCbsRetencao,
    quantidadeTributadaRetido,
    aliquotaIbsRetido,
    valorIbsRetido,
    aliquotaCbsRetido,
    valorCbsRetido,
    percentualIbsDiferido,
    valorIbsDiferido,
    percentualCbsDiferido,
    valorCbsDiferido,
    totalIbs,
    totalCbs,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'nfe_detalhe_imposto_monofasico';
  @override
  VerificationContext validateIntegrity(
    Insertable<NfeDetalheImpostoMonofasico> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('id_nfe_detalhe')) {
      context.handle(
        _idNfeDetalheMeta,
        idNfeDetalhe.isAcceptableOrUnknown(
          data['id_nfe_detalhe']!,
          _idNfeDetalheMeta,
        ),
      );
    }
    if (data.containsKey('quantidade_tributada')) {
      context.handle(
        _quantidadeTributadaMeta,
        quantidadeTributada.isAcceptableOrUnknown(
          data['quantidade_tributada']!,
          _quantidadeTributadaMeta,
        ),
      );
    }
    if (data.containsKey('aliquota_ibs')) {
      context.handle(
        _aliquotaIbsMeta,
        aliquotaIbs.isAcceptableOrUnknown(
          data['aliquota_ibs']!,
          _aliquotaIbsMeta,
        ),
      );
    }
    if (data.containsKey('aliquota_cbs')) {
      context.handle(
        _aliquotaCbsMeta,
        aliquotaCbs.isAcceptableOrUnknown(
          data['aliquota_cbs']!,
          _aliquotaCbsMeta,
        ),
      );
    }
    if (data.containsKey('valor_ibs')) {
      context.handle(
        _valorIbsMeta,
        valorIbs.isAcceptableOrUnknown(data['valor_ibs']!, _valorIbsMeta),
      );
    }
    if (data.containsKey('valor_cbs')) {
      context.handle(
        _valorCbsMeta,
        valorCbs.isAcceptableOrUnknown(data['valor_cbs']!, _valorCbsMeta),
      );
    }
    if (data.containsKey('quantidade_tributada_retencao')) {
      context.handle(
        _quantidadeTributadaRetencaoMeta,
        quantidadeTributadaRetencao.isAcceptableOrUnknown(
          data['quantidade_tributada_retencao']!,
          _quantidadeTributadaRetencaoMeta,
        ),
      );
    }
    if (data.containsKey('aliquota_ibs_retencao')) {
      context.handle(
        _aliquotaIbsRetencaoMeta,
        aliquotaIbsRetencao.isAcceptableOrUnknown(
          data['aliquota_ibs_retencao']!,
          _aliquotaIbsRetencaoMeta,
        ),
      );
    }
    if (data.containsKey('valor_ibs_retencao')) {
      context.handle(
        _valorIbsRetencaoMeta,
        valorIbsRetencao.isAcceptableOrUnknown(
          data['valor_ibs_retencao']!,
          _valorIbsRetencaoMeta,
        ),
      );
    }
    if (data.containsKey('aliquota_cbs_retencao')) {
      context.handle(
        _aliquotaCbsRetencaoMeta,
        aliquotaCbsRetencao.isAcceptableOrUnknown(
          data['aliquota_cbs_retencao']!,
          _aliquotaCbsRetencaoMeta,
        ),
      );
    }
    if (data.containsKey('valor_cbs_retencao')) {
      context.handle(
        _valorCbsRetencaoMeta,
        valorCbsRetencao.isAcceptableOrUnknown(
          data['valor_cbs_retencao']!,
          _valorCbsRetencaoMeta,
        ),
      );
    }
    if (data.containsKey('quantidade_tributada_retido')) {
      context.handle(
        _quantidadeTributadaRetidoMeta,
        quantidadeTributadaRetido.isAcceptableOrUnknown(
          data['quantidade_tributada_retido']!,
          _quantidadeTributadaRetidoMeta,
        ),
      );
    }
    if (data.containsKey('aliquota_ibs_retido')) {
      context.handle(
        _aliquotaIbsRetidoMeta,
        aliquotaIbsRetido.isAcceptableOrUnknown(
          data['aliquota_ibs_retido']!,
          _aliquotaIbsRetidoMeta,
        ),
      );
    }
    if (data.containsKey('valor_ibs_retido')) {
      context.handle(
        _valorIbsRetidoMeta,
        valorIbsRetido.isAcceptableOrUnknown(
          data['valor_ibs_retido']!,
          _valorIbsRetidoMeta,
        ),
      );
    }
    if (data.containsKey('aliquota_cbs_retido')) {
      context.handle(
        _aliquotaCbsRetidoMeta,
        aliquotaCbsRetido.isAcceptableOrUnknown(
          data['aliquota_cbs_retido']!,
          _aliquotaCbsRetidoMeta,
        ),
      );
    }
    if (data.containsKey('valor_cbs_retido')) {
      context.handle(
        _valorCbsRetidoMeta,
        valorCbsRetido.isAcceptableOrUnknown(
          data['valor_cbs_retido']!,
          _valorCbsRetidoMeta,
        ),
      );
    }
    if (data.containsKey('percentual_ibs_diferido')) {
      context.handle(
        _percentualIbsDiferidoMeta,
        percentualIbsDiferido.isAcceptableOrUnknown(
          data['percentual_ibs_diferido']!,
          _percentualIbsDiferidoMeta,
        ),
      );
    }
    if (data.containsKey('valor_ibs_diferido')) {
      context.handle(
        _valorIbsDiferidoMeta,
        valorIbsDiferido.isAcceptableOrUnknown(
          data['valor_ibs_diferido']!,
          _valorIbsDiferidoMeta,
        ),
      );
    }
    if (data.containsKey('percentual_cbs_diferido')) {
      context.handle(
        _percentualCbsDiferidoMeta,
        percentualCbsDiferido.isAcceptableOrUnknown(
          data['percentual_cbs_diferido']!,
          _percentualCbsDiferidoMeta,
        ),
      );
    }
    if (data.containsKey('valor_cbs_diferido')) {
      context.handle(
        _valorCbsDiferidoMeta,
        valorCbsDiferido.isAcceptableOrUnknown(
          data['valor_cbs_diferido']!,
          _valorCbsDiferidoMeta,
        ),
      );
    }
    if (data.containsKey('total_ibs')) {
      context.handle(
        _totalIbsMeta,
        totalIbs.isAcceptableOrUnknown(data['total_ibs']!, _totalIbsMeta),
      );
    }
    if (data.containsKey('total_cbs')) {
      context.handle(
        _totalCbsMeta,
        totalCbs.isAcceptableOrUnknown(data['total_cbs']!, _totalCbsMeta),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeDetalheImpostoMonofasico map(
    Map<String, dynamic> data, {
    String? tablePrefix,
  }) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return NfeDetalheImpostoMonofasico(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id'],
      ),
      idNfeDetalhe: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_nfe_detalhe'],
      ),
      quantidadeTributada: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}quantidade_tributada'],
      ),
      aliquotaIbs: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}aliquota_ibs'],
      ),
      aliquotaCbs: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}aliquota_cbs'],
      ),
      valorIbs: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_ibs'],
      ),
      valorCbs: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_cbs'],
      ),
      quantidadeTributadaRetencao: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}quantidade_tributada_retencao'],
      ),
      aliquotaIbsRetencao: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}aliquota_ibs_retencao'],
      ),
      valorIbsRetencao: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_ibs_retencao'],
      ),
      aliquotaCbsRetencao: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}aliquota_cbs_retencao'],
      ),
      valorCbsRetencao: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_cbs_retencao'],
      ),
      quantidadeTributadaRetido: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}quantidade_tributada_retido'],
      ),
      aliquotaIbsRetido: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}aliquota_ibs_retido'],
      ),
      valorIbsRetido: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_ibs_retido'],
      ),
      aliquotaCbsRetido: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}aliquota_cbs_retido'],
      ),
      valorCbsRetido: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_cbs_retido'],
      ),
      percentualIbsDiferido: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}percentual_ibs_diferido'],
      ),
      valorIbsDiferido: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_ibs_diferido'],
      ),
      percentualCbsDiferido: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}percentual_cbs_diferido'],
      ),
      valorCbsDiferido: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_cbs_diferido'],
      ),
      totalIbs: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}total_ibs'],
      ),
      totalCbs: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}total_cbs'],
      ),
    );
  }

  @override
  $NfeDetalheImpostoMonofasicosTable createAlias(String alias) {
    return $NfeDetalheImpostoMonofasicosTable(attachedDatabase, alias);
  }
}

class NfeDetalheImpostoMonofasico extends DataClass
    implements Insertable<NfeDetalheImpostoMonofasico> {
  final int? id;
  final int? idNfeDetalhe;
  final double? quantidadeTributada;
  final double? aliquotaIbs;
  final double? aliquotaCbs;
  final double? valorIbs;
  final double? valorCbs;
  final double? quantidadeTributadaRetencao;
  final double? aliquotaIbsRetencao;
  final double? valorIbsRetencao;
  final double? aliquotaCbsRetencao;
  final double? valorCbsRetencao;
  final double? quantidadeTributadaRetido;
  final double? aliquotaIbsRetido;
  final double? valorIbsRetido;
  final double? aliquotaCbsRetido;
  final double? valorCbsRetido;
  final double? percentualIbsDiferido;
  final double? valorIbsDiferido;
  final double? percentualCbsDiferido;
  final double? valorCbsDiferido;
  final double? totalIbs;
  final double? totalCbs;
  const NfeDetalheImpostoMonofasico({
    this.id,
    this.idNfeDetalhe,
    this.quantidadeTributada,
    this.aliquotaIbs,
    this.aliquotaCbs,
    this.valorIbs,
    this.valorCbs,
    this.quantidadeTributadaRetencao,
    this.aliquotaIbsRetencao,
    this.valorIbsRetencao,
    this.aliquotaCbsRetencao,
    this.valorCbsRetencao,
    this.quantidadeTributadaRetido,
    this.aliquotaIbsRetido,
    this.valorIbsRetido,
    this.aliquotaCbsRetido,
    this.valorCbsRetido,
    this.percentualIbsDiferido,
    this.valorIbsDiferido,
    this.percentualCbsDiferido,
    this.valorCbsDiferido,
    this.totalIbs,
    this.totalCbs,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeDetalhe != null) {
      map['id_nfe_detalhe'] = Variable<int>(idNfeDetalhe);
    }
    if (!nullToAbsent || quantidadeTributada != null) {
      map['quantidade_tributada'] = Variable<double>(quantidadeTributada);
    }
    if (!nullToAbsent || aliquotaIbs != null) {
      map['aliquota_ibs'] = Variable<double>(aliquotaIbs);
    }
    if (!nullToAbsent || aliquotaCbs != null) {
      map['aliquota_cbs'] = Variable<double>(aliquotaCbs);
    }
    if (!nullToAbsent || valorIbs != null) {
      map['valor_ibs'] = Variable<double>(valorIbs);
    }
    if (!nullToAbsent || valorCbs != null) {
      map['valor_cbs'] = Variable<double>(valorCbs);
    }
    if (!nullToAbsent || quantidadeTributadaRetencao != null) {
      map['quantidade_tributada_retencao'] = Variable<double>(
        quantidadeTributadaRetencao,
      );
    }
    if (!nullToAbsent || aliquotaIbsRetencao != null) {
      map['aliquota_ibs_retencao'] = Variable<double>(aliquotaIbsRetencao);
    }
    if (!nullToAbsent || valorIbsRetencao != null) {
      map['valor_ibs_retencao'] = Variable<double>(valorIbsRetencao);
    }
    if (!nullToAbsent || aliquotaCbsRetencao != null) {
      map['aliquota_cbs_retencao'] = Variable<double>(aliquotaCbsRetencao);
    }
    if (!nullToAbsent || valorCbsRetencao != null) {
      map['valor_cbs_retencao'] = Variable<double>(valorCbsRetencao);
    }
    if (!nullToAbsent || quantidadeTributadaRetido != null) {
      map['quantidade_tributada_retido'] = Variable<double>(
        quantidadeTributadaRetido,
      );
    }
    if (!nullToAbsent || aliquotaIbsRetido != null) {
      map['aliquota_ibs_retido'] = Variable<double>(aliquotaIbsRetido);
    }
    if (!nullToAbsent || valorIbsRetido != null) {
      map['valor_ibs_retido'] = Variable<double>(valorIbsRetido);
    }
    if (!nullToAbsent || aliquotaCbsRetido != null) {
      map['aliquota_cbs_retido'] = Variable<double>(aliquotaCbsRetido);
    }
    if (!nullToAbsent || valorCbsRetido != null) {
      map['valor_cbs_retido'] = Variable<double>(valorCbsRetido);
    }
    if (!nullToAbsent || percentualIbsDiferido != null) {
      map['percentual_ibs_diferido'] = Variable<double>(percentualIbsDiferido);
    }
    if (!nullToAbsent || valorIbsDiferido != null) {
      map['valor_ibs_diferido'] = Variable<double>(valorIbsDiferido);
    }
    if (!nullToAbsent || percentualCbsDiferido != null) {
      map['percentual_cbs_diferido'] = Variable<double>(percentualCbsDiferido);
    }
    if (!nullToAbsent || valorCbsDiferido != null) {
      map['valor_cbs_diferido'] = Variable<double>(valorCbsDiferido);
    }
    if (!nullToAbsent || totalIbs != null) {
      map['total_ibs'] = Variable<double>(totalIbs);
    }
    if (!nullToAbsent || totalCbs != null) {
      map['total_cbs'] = Variable<double>(totalCbs);
    }
    return map;
  }

  factory NfeDetalheImpostoMonofasico.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeDetalheImpostoMonofasico(
      id: serializer.fromJson<int?>(json['id']),
      idNfeDetalhe: serializer.fromJson<int?>(json['idNfeDetalhe']),
      quantidadeTributada: serializer.fromJson<double?>(
        json['quantidadeTributada'],
      ),
      aliquotaIbs: serializer.fromJson<double?>(json['aliquotaIbs']),
      aliquotaCbs: serializer.fromJson<double?>(json['aliquotaCbs']),
      valorIbs: serializer.fromJson<double?>(json['valorIbs']),
      valorCbs: serializer.fromJson<double?>(json['valorCbs']),
      quantidadeTributadaRetencao: serializer.fromJson<double?>(
        json['quantidadeTributadaRetencao'],
      ),
      aliquotaIbsRetencao: serializer.fromJson<double?>(
        json['aliquotaIbsRetencao'],
      ),
      valorIbsRetencao: serializer.fromJson<double?>(json['valorIbsRetencao']),
      aliquotaCbsRetencao: serializer.fromJson<double?>(
        json['aliquotaCbsRetencao'],
      ),
      valorCbsRetencao: serializer.fromJson<double?>(json['valorCbsRetencao']),
      quantidadeTributadaRetido: serializer.fromJson<double?>(
        json['quantidadeTributadaRetido'],
      ),
      aliquotaIbsRetido: serializer.fromJson<double?>(
        json['aliquotaIbsRetido'],
      ),
      valorIbsRetido: serializer.fromJson<double?>(json['valorIbsRetido']),
      aliquotaCbsRetido: serializer.fromJson<double?>(
        json['aliquotaCbsRetido'],
      ),
      valorCbsRetido: serializer.fromJson<double?>(json['valorCbsRetido']),
      percentualIbsDiferido: serializer.fromJson<double?>(
        json['percentualIbsDiferido'],
      ),
      valorIbsDiferido: serializer.fromJson<double?>(json['valorIbsDiferido']),
      percentualCbsDiferido: serializer.fromJson<double?>(
        json['percentualCbsDiferido'],
      ),
      valorCbsDiferido: serializer.fromJson<double?>(json['valorCbsDiferido']),
      totalIbs: serializer.fromJson<double?>(json['totalIbs']),
      totalCbs: serializer.fromJson<double?>(json['totalCbs']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeDetalhe': serializer.toJson<int?>(idNfeDetalhe),
      'quantidadeTributada': serializer.toJson<double?>(quantidadeTributada),
      'aliquotaIbs': serializer.toJson<double?>(aliquotaIbs),
      'aliquotaCbs': serializer.toJson<double?>(aliquotaCbs),
      'valorIbs': serializer.toJson<double?>(valorIbs),
      'valorCbs': serializer.toJson<double?>(valorCbs),
      'quantidadeTributadaRetencao': serializer.toJson<double?>(
        quantidadeTributadaRetencao,
      ),
      'aliquotaIbsRetencao': serializer.toJson<double?>(aliquotaIbsRetencao),
      'valorIbsRetencao': serializer.toJson<double?>(valorIbsRetencao),
      'aliquotaCbsRetencao': serializer.toJson<double?>(aliquotaCbsRetencao),
      'valorCbsRetencao': serializer.toJson<double?>(valorCbsRetencao),
      'quantidadeTributadaRetido': serializer.toJson<double?>(
        quantidadeTributadaRetido,
      ),
      'aliquotaIbsRetido': serializer.toJson<double?>(aliquotaIbsRetido),
      'valorIbsRetido': serializer.toJson<double?>(valorIbsRetido),
      'aliquotaCbsRetido': serializer.toJson<double?>(aliquotaCbsRetido),
      'valorCbsRetido': serializer.toJson<double?>(valorCbsRetido),
      'percentualIbsDiferido': serializer.toJson<double?>(
        percentualIbsDiferido,
      ),
      'valorIbsDiferido': serializer.toJson<double?>(valorIbsDiferido),
      'percentualCbsDiferido': serializer.toJson<double?>(
        percentualCbsDiferido,
      ),
      'valorCbsDiferido': serializer.toJson<double?>(valorCbsDiferido),
      'totalIbs': serializer.toJson<double?>(totalIbs),
      'totalCbs': serializer.toJson<double?>(totalCbs),
    };
  }

  NfeDetalheImpostoMonofasico copyWith({
    Value<int?> id = const Value.absent(),
    Value<int?> idNfeDetalhe = const Value.absent(),
    Value<double?> quantidadeTributada = const Value.absent(),
    Value<double?> aliquotaIbs = const Value.absent(),
    Value<double?> aliquotaCbs = const Value.absent(),
    Value<double?> valorIbs = const Value.absent(),
    Value<double?> valorCbs = const Value.absent(),
    Value<double?> quantidadeTributadaRetencao = const Value.absent(),
    Value<double?> aliquotaIbsRetencao = const Value.absent(),
    Value<double?> valorIbsRetencao = const Value.absent(),
    Value<double?> aliquotaCbsRetencao = const Value.absent(),
    Value<double?> valorCbsRetencao = const Value.absent(),
    Value<double?> quantidadeTributadaRetido = const Value.absent(),
    Value<double?> aliquotaIbsRetido = const Value.absent(),
    Value<double?> valorIbsRetido = const Value.absent(),
    Value<double?> aliquotaCbsRetido = const Value.absent(),
    Value<double?> valorCbsRetido = const Value.absent(),
    Value<double?> percentualIbsDiferido = const Value.absent(),
    Value<double?> valorIbsDiferido = const Value.absent(),
    Value<double?> percentualCbsDiferido = const Value.absent(),
    Value<double?> valorCbsDiferido = const Value.absent(),
    Value<double?> totalIbs = const Value.absent(),
    Value<double?> totalCbs = const Value.absent(),
  }) => NfeDetalheImpostoMonofasico(
    id: id.present ? id.value : this.id,
    idNfeDetalhe: idNfeDetalhe.present ? idNfeDetalhe.value : this.idNfeDetalhe,
    quantidadeTributada:
        quantidadeTributada.present
            ? quantidadeTributada.value
            : this.quantidadeTributada,
    aliquotaIbs: aliquotaIbs.present ? aliquotaIbs.value : this.aliquotaIbs,
    aliquotaCbs: aliquotaCbs.present ? aliquotaCbs.value : this.aliquotaCbs,
    valorIbs: valorIbs.present ? valorIbs.value : this.valorIbs,
    valorCbs: valorCbs.present ? valorCbs.value : this.valorCbs,
    quantidadeTributadaRetencao:
        quantidadeTributadaRetencao.present
            ? quantidadeTributadaRetencao.value
            : this.quantidadeTributadaRetencao,
    aliquotaIbsRetencao:
        aliquotaIbsRetencao.present
            ? aliquotaIbsRetencao.value
            : this.aliquotaIbsRetencao,
    valorIbsRetencao:
        valorIbsRetencao.present
            ? valorIbsRetencao.value
            : this.valorIbsRetencao,
    aliquotaCbsRetencao:
        aliquotaCbsRetencao.present
            ? aliquotaCbsRetencao.value
            : this.aliquotaCbsRetencao,
    valorCbsRetencao:
        valorCbsRetencao.present
            ? valorCbsRetencao.value
            : this.valorCbsRetencao,
    quantidadeTributadaRetido:
        quantidadeTributadaRetido.present
            ? quantidadeTributadaRetido.value
            : this.quantidadeTributadaRetido,
    aliquotaIbsRetido:
        aliquotaIbsRetido.present
            ? aliquotaIbsRetido.value
            : this.aliquotaIbsRetido,
    valorIbsRetido:
        valorIbsRetido.present ? valorIbsRetido.value : this.valorIbsRetido,
    aliquotaCbsRetido:
        aliquotaCbsRetido.present
            ? aliquotaCbsRetido.value
            : this.aliquotaCbsRetido,
    valorCbsRetido:
        valorCbsRetido.present ? valorCbsRetido.value : this.valorCbsRetido,
    percentualIbsDiferido:
        percentualIbsDiferido.present
            ? percentualIbsDiferido.value
            : this.percentualIbsDiferido,
    valorIbsDiferido:
        valorIbsDiferido.present
            ? valorIbsDiferido.value
            : this.valorIbsDiferido,
    percentualCbsDiferido:
        percentualCbsDiferido.present
            ? percentualCbsDiferido.value
            : this.percentualCbsDiferido,
    valorCbsDiferido:
        valorCbsDiferido.present
            ? valorCbsDiferido.value
            : this.valorCbsDiferido,
    totalIbs: totalIbs.present ? totalIbs.value : this.totalIbs,
    totalCbs: totalCbs.present ? totalCbs.value : this.totalCbs,
  );
  NfeDetalheImpostoMonofasico copyWithCompanion(
    NfeDetalheImpostoMonofasicosCompanion data,
  ) {
    return NfeDetalheImpostoMonofasico(
      id: data.id.present ? data.id.value : this.id,
      idNfeDetalhe:
          data.idNfeDetalhe.present
              ? data.idNfeDetalhe.value
              : this.idNfeDetalhe,
      quantidadeTributada:
          data.quantidadeTributada.present
              ? data.quantidadeTributada.value
              : this.quantidadeTributada,
      aliquotaIbs:
          data.aliquotaIbs.present ? data.aliquotaIbs.value : this.aliquotaIbs,
      aliquotaCbs:
          data.aliquotaCbs.present ? data.aliquotaCbs.value : this.aliquotaCbs,
      valorIbs: data.valorIbs.present ? data.valorIbs.value : this.valorIbs,
      valorCbs: data.valorCbs.present ? data.valorCbs.value : this.valorCbs,
      quantidadeTributadaRetencao:
          data.quantidadeTributadaRetencao.present
              ? data.quantidadeTributadaRetencao.value
              : this.quantidadeTributadaRetencao,
      aliquotaIbsRetencao:
          data.aliquotaIbsRetencao.present
              ? data.aliquotaIbsRetencao.value
              : this.aliquotaIbsRetencao,
      valorIbsRetencao:
          data.valorIbsRetencao.present
              ? data.valorIbsRetencao.value
              : this.valorIbsRetencao,
      aliquotaCbsRetencao:
          data.aliquotaCbsRetencao.present
              ? data.aliquotaCbsRetencao.value
              : this.aliquotaCbsRetencao,
      valorCbsRetencao:
          data.valorCbsRetencao.present
              ? data.valorCbsRetencao.value
              : this.valorCbsRetencao,
      quantidadeTributadaRetido:
          data.quantidadeTributadaRetido.present
              ? data.quantidadeTributadaRetido.value
              : this.quantidadeTributadaRetido,
      aliquotaIbsRetido:
          data.aliquotaIbsRetido.present
              ? data.aliquotaIbsRetido.value
              : this.aliquotaIbsRetido,
      valorIbsRetido:
          data.valorIbsRetido.present
              ? data.valorIbsRetido.value
              : this.valorIbsRetido,
      aliquotaCbsRetido:
          data.aliquotaCbsRetido.present
              ? data.aliquotaCbsRetido.value
              : this.aliquotaCbsRetido,
      valorCbsRetido:
          data.valorCbsRetido.present
              ? data.valorCbsRetido.value
              : this.valorCbsRetido,
      percentualIbsDiferido:
          data.percentualIbsDiferido.present
              ? data.percentualIbsDiferido.value
              : this.percentualIbsDiferido,
      valorIbsDiferido:
          data.valorIbsDiferido.present
              ? data.valorIbsDiferido.value
              : this.valorIbsDiferido,
      percentualCbsDiferido:
          data.percentualCbsDiferido.present
              ? data.percentualCbsDiferido.value
              : this.percentualCbsDiferido,
      valorCbsDiferido:
          data.valorCbsDiferido.present
              ? data.valorCbsDiferido.value
              : this.valorCbsDiferido,
      totalIbs: data.totalIbs.present ? data.totalIbs.value : this.totalIbs,
      totalCbs: data.totalCbs.present ? data.totalCbs.value : this.totalCbs,
    );
  }

  @override
  String toString() {
    return (StringBuffer('NfeDetalheImpostoMonofasico(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('quantidadeTributada: $quantidadeTributada, ')
          ..write('aliquotaIbs: $aliquotaIbs, ')
          ..write('aliquotaCbs: $aliquotaCbs, ')
          ..write('valorIbs: $valorIbs, ')
          ..write('valorCbs: $valorCbs, ')
          ..write('quantidadeTributadaRetencao: $quantidadeTributadaRetencao, ')
          ..write('aliquotaIbsRetencao: $aliquotaIbsRetencao, ')
          ..write('valorIbsRetencao: $valorIbsRetencao, ')
          ..write('aliquotaCbsRetencao: $aliquotaCbsRetencao, ')
          ..write('valorCbsRetencao: $valorCbsRetencao, ')
          ..write('quantidadeTributadaRetido: $quantidadeTributadaRetido, ')
          ..write('aliquotaIbsRetido: $aliquotaIbsRetido, ')
          ..write('valorIbsRetido: $valorIbsRetido, ')
          ..write('aliquotaCbsRetido: $aliquotaCbsRetido, ')
          ..write('valorCbsRetido: $valorCbsRetido, ')
          ..write('percentualIbsDiferido: $percentualIbsDiferido, ')
          ..write('valorIbsDiferido: $valorIbsDiferido, ')
          ..write('percentualCbsDiferido: $percentualCbsDiferido, ')
          ..write('valorCbsDiferido: $valorCbsDiferido, ')
          ..write('totalIbs: $totalIbs, ')
          ..write('totalCbs: $totalCbs')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hashAll([
    id,
    idNfeDetalhe,
    quantidadeTributada,
    aliquotaIbs,
    aliquotaCbs,
    valorIbs,
    valorCbs,
    quantidadeTributadaRetencao,
    aliquotaIbsRetencao,
    valorIbsRetencao,
    aliquotaCbsRetencao,
    valorCbsRetencao,
    quantidadeTributadaRetido,
    aliquotaIbsRetido,
    valorIbsRetido,
    aliquotaCbsRetido,
    valorCbsRetido,
    percentualIbsDiferido,
    valorIbsDiferido,
    percentualCbsDiferido,
    valorCbsDiferido,
    totalIbs,
    totalCbs,
  ]);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeDetalheImpostoMonofasico &&
          other.id == this.id &&
          other.idNfeDetalhe == this.idNfeDetalhe &&
          other.quantidadeTributada == this.quantidadeTributada &&
          other.aliquotaIbs == this.aliquotaIbs &&
          other.aliquotaCbs == this.aliquotaCbs &&
          other.valorIbs == this.valorIbs &&
          other.valorCbs == this.valorCbs &&
          other.quantidadeTributadaRetencao ==
              this.quantidadeTributadaRetencao &&
          other.aliquotaIbsRetencao == this.aliquotaIbsRetencao &&
          other.valorIbsRetencao == this.valorIbsRetencao &&
          other.aliquotaCbsRetencao == this.aliquotaCbsRetencao &&
          other.valorCbsRetencao == this.valorCbsRetencao &&
          other.quantidadeTributadaRetido == this.quantidadeTributadaRetido &&
          other.aliquotaIbsRetido == this.aliquotaIbsRetido &&
          other.valorIbsRetido == this.valorIbsRetido &&
          other.aliquotaCbsRetido == this.aliquotaCbsRetido &&
          other.valorCbsRetido == this.valorCbsRetido &&
          other.percentualIbsDiferido == this.percentualIbsDiferido &&
          other.valorIbsDiferido == this.valorIbsDiferido &&
          other.percentualCbsDiferido == this.percentualCbsDiferido &&
          other.valorCbsDiferido == this.valorCbsDiferido &&
          other.totalIbs == this.totalIbs &&
          other.totalCbs == this.totalCbs);
}

class NfeDetalheImpostoMonofasicosCompanion
    extends UpdateCompanion<NfeDetalheImpostoMonofasico> {
  final Value<int?> id;
  final Value<int?> idNfeDetalhe;
  final Value<double?> quantidadeTributada;
  final Value<double?> aliquotaIbs;
  final Value<double?> aliquotaCbs;
  final Value<double?> valorIbs;
  final Value<double?> valorCbs;
  final Value<double?> quantidadeTributadaRetencao;
  final Value<double?> aliquotaIbsRetencao;
  final Value<double?> valorIbsRetencao;
  final Value<double?> aliquotaCbsRetencao;
  final Value<double?> valorCbsRetencao;
  final Value<double?> quantidadeTributadaRetido;
  final Value<double?> aliquotaIbsRetido;
  final Value<double?> valorIbsRetido;
  final Value<double?> aliquotaCbsRetido;
  final Value<double?> valorCbsRetido;
  final Value<double?> percentualIbsDiferido;
  final Value<double?> valorIbsDiferido;
  final Value<double?> percentualCbsDiferido;
  final Value<double?> valorCbsDiferido;
  final Value<double?> totalIbs;
  final Value<double?> totalCbs;
  const NfeDetalheImpostoMonofasicosCompanion({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.quantidadeTributada = const Value.absent(),
    this.aliquotaIbs = const Value.absent(),
    this.aliquotaCbs = const Value.absent(),
    this.valorIbs = const Value.absent(),
    this.valorCbs = const Value.absent(),
    this.quantidadeTributadaRetencao = const Value.absent(),
    this.aliquotaIbsRetencao = const Value.absent(),
    this.valorIbsRetencao = const Value.absent(),
    this.aliquotaCbsRetencao = const Value.absent(),
    this.valorCbsRetencao = const Value.absent(),
    this.quantidadeTributadaRetido = const Value.absent(),
    this.aliquotaIbsRetido = const Value.absent(),
    this.valorIbsRetido = const Value.absent(),
    this.aliquotaCbsRetido = const Value.absent(),
    this.valorCbsRetido = const Value.absent(),
    this.percentualIbsDiferido = const Value.absent(),
    this.valorIbsDiferido = const Value.absent(),
    this.percentualCbsDiferido = const Value.absent(),
    this.valorCbsDiferido = const Value.absent(),
    this.totalIbs = const Value.absent(),
    this.totalCbs = const Value.absent(),
  });
  NfeDetalheImpostoMonofasicosCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.quantidadeTributada = const Value.absent(),
    this.aliquotaIbs = const Value.absent(),
    this.aliquotaCbs = const Value.absent(),
    this.valorIbs = const Value.absent(),
    this.valorCbs = const Value.absent(),
    this.quantidadeTributadaRetencao = const Value.absent(),
    this.aliquotaIbsRetencao = const Value.absent(),
    this.valorIbsRetencao = const Value.absent(),
    this.aliquotaCbsRetencao = const Value.absent(),
    this.valorCbsRetencao = const Value.absent(),
    this.quantidadeTributadaRetido = const Value.absent(),
    this.aliquotaIbsRetido = const Value.absent(),
    this.valorIbsRetido = const Value.absent(),
    this.aliquotaCbsRetido = const Value.absent(),
    this.valorCbsRetido = const Value.absent(),
    this.percentualIbsDiferido = const Value.absent(),
    this.valorIbsDiferido = const Value.absent(),
    this.percentualCbsDiferido = const Value.absent(),
    this.valorCbsDiferido = const Value.absent(),
    this.totalIbs = const Value.absent(),
    this.totalCbs = const Value.absent(),
  });
  static Insertable<NfeDetalheImpostoMonofasico> custom({
    Expression<int>? id,
    Expression<int>? idNfeDetalhe,
    Expression<double>? quantidadeTributada,
    Expression<double>? aliquotaIbs,
    Expression<double>? aliquotaCbs,
    Expression<double>? valorIbs,
    Expression<double>? valorCbs,
    Expression<double>? quantidadeTributadaRetencao,
    Expression<double>? aliquotaIbsRetencao,
    Expression<double>? valorIbsRetencao,
    Expression<double>? aliquotaCbsRetencao,
    Expression<double>? valorCbsRetencao,
    Expression<double>? quantidadeTributadaRetido,
    Expression<double>? aliquotaIbsRetido,
    Expression<double>? valorIbsRetido,
    Expression<double>? aliquotaCbsRetido,
    Expression<double>? valorCbsRetido,
    Expression<double>? percentualIbsDiferido,
    Expression<double>? valorIbsDiferido,
    Expression<double>? percentualCbsDiferido,
    Expression<double>? valorCbsDiferido,
    Expression<double>? totalIbs,
    Expression<double>? totalCbs,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (idNfeDetalhe != null) 'id_nfe_detalhe': idNfeDetalhe,
      if (quantidadeTributada != null)
        'quantidade_tributada': quantidadeTributada,
      if (aliquotaIbs != null) 'aliquota_ibs': aliquotaIbs,
      if (aliquotaCbs != null) 'aliquota_cbs': aliquotaCbs,
      if (valorIbs != null) 'valor_ibs': valorIbs,
      if (valorCbs != null) 'valor_cbs': valorCbs,
      if (quantidadeTributadaRetencao != null)
        'quantidade_tributada_retencao': quantidadeTributadaRetencao,
      if (aliquotaIbsRetencao != null)
        'aliquota_ibs_retencao': aliquotaIbsRetencao,
      if (valorIbsRetencao != null) 'valor_ibs_retencao': valorIbsRetencao,
      if (aliquotaCbsRetencao != null)
        'aliquota_cbs_retencao': aliquotaCbsRetencao,
      if (valorCbsRetencao != null) 'valor_cbs_retencao': valorCbsRetencao,
      if (quantidadeTributadaRetido != null)
        'quantidade_tributada_retido': quantidadeTributadaRetido,
      if (aliquotaIbsRetido != null) 'aliquota_ibs_retido': aliquotaIbsRetido,
      if (valorIbsRetido != null) 'valor_ibs_retido': valorIbsRetido,
      if (aliquotaCbsRetido != null) 'aliquota_cbs_retido': aliquotaCbsRetido,
      if (valorCbsRetido != null) 'valor_cbs_retido': valorCbsRetido,
      if (percentualIbsDiferido != null)
        'percentual_ibs_diferido': percentualIbsDiferido,
      if (valorIbsDiferido != null) 'valor_ibs_diferido': valorIbsDiferido,
      if (percentualCbsDiferido != null)
        'percentual_cbs_diferido': percentualCbsDiferido,
      if (valorCbsDiferido != null) 'valor_cbs_diferido': valorCbsDiferido,
      if (totalIbs != null) 'total_ibs': totalIbs,
      if (totalCbs != null) 'total_cbs': totalCbs,
    });
  }

  NfeDetalheImpostoMonofasicosCompanion copyWith({
    Value<int?>? id,
    Value<int?>? idNfeDetalhe,
    Value<double?>? quantidadeTributada,
    Value<double?>? aliquotaIbs,
    Value<double?>? aliquotaCbs,
    Value<double?>? valorIbs,
    Value<double?>? valorCbs,
    Value<double?>? quantidadeTributadaRetencao,
    Value<double?>? aliquotaIbsRetencao,
    Value<double?>? valorIbsRetencao,
    Value<double?>? aliquotaCbsRetencao,
    Value<double?>? valorCbsRetencao,
    Value<double?>? quantidadeTributadaRetido,
    Value<double?>? aliquotaIbsRetido,
    Value<double?>? valorIbsRetido,
    Value<double?>? aliquotaCbsRetido,
    Value<double?>? valorCbsRetido,
    Value<double?>? percentualIbsDiferido,
    Value<double?>? valorIbsDiferido,
    Value<double?>? percentualCbsDiferido,
    Value<double?>? valorCbsDiferido,
    Value<double?>? totalIbs,
    Value<double?>? totalCbs,
  }) {
    return NfeDetalheImpostoMonofasicosCompanion(
      id: id ?? this.id,
      idNfeDetalhe: idNfeDetalhe ?? this.idNfeDetalhe,
      quantidadeTributada: quantidadeTributada ?? this.quantidadeTributada,
      aliquotaIbs: aliquotaIbs ?? this.aliquotaIbs,
      aliquotaCbs: aliquotaCbs ?? this.aliquotaCbs,
      valorIbs: valorIbs ?? this.valorIbs,
      valorCbs: valorCbs ?? this.valorCbs,
      quantidadeTributadaRetencao:
          quantidadeTributadaRetencao ?? this.quantidadeTributadaRetencao,
      aliquotaIbsRetencao: aliquotaIbsRetencao ?? this.aliquotaIbsRetencao,
      valorIbsRetencao: valorIbsRetencao ?? this.valorIbsRetencao,
      aliquotaCbsRetencao: aliquotaCbsRetencao ?? this.aliquotaCbsRetencao,
      valorCbsRetencao: valorCbsRetencao ?? this.valorCbsRetencao,
      quantidadeTributadaRetido:
          quantidadeTributadaRetido ?? this.quantidadeTributadaRetido,
      aliquotaIbsRetido: aliquotaIbsRetido ?? this.aliquotaIbsRetido,
      valorIbsRetido: valorIbsRetido ?? this.valorIbsRetido,
      aliquotaCbsRetido: aliquotaCbsRetido ?? this.aliquotaCbsRetido,
      valorCbsRetido: valorCbsRetido ?? this.valorCbsRetido,
      percentualIbsDiferido:
          percentualIbsDiferido ?? this.percentualIbsDiferido,
      valorIbsDiferido: valorIbsDiferido ?? this.valorIbsDiferido,
      percentualCbsDiferido:
          percentualCbsDiferido ?? this.percentualCbsDiferido,
      valorCbsDiferido: valorCbsDiferido ?? this.valorCbsDiferido,
      totalIbs: totalIbs ?? this.totalIbs,
      totalCbs: totalCbs ?? this.totalCbs,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (idNfeDetalhe.present) {
      map['id_nfe_detalhe'] = Variable<int>(idNfeDetalhe.value);
    }
    if (quantidadeTributada.present) {
      map['quantidade_tributada'] = Variable<double>(quantidadeTributada.value);
    }
    if (aliquotaIbs.present) {
      map['aliquota_ibs'] = Variable<double>(aliquotaIbs.value);
    }
    if (aliquotaCbs.present) {
      map['aliquota_cbs'] = Variable<double>(aliquotaCbs.value);
    }
    if (valorIbs.present) {
      map['valor_ibs'] = Variable<double>(valorIbs.value);
    }
    if (valorCbs.present) {
      map['valor_cbs'] = Variable<double>(valorCbs.value);
    }
    if (quantidadeTributadaRetencao.present) {
      map['quantidade_tributada_retencao'] = Variable<double>(
        quantidadeTributadaRetencao.value,
      );
    }
    if (aliquotaIbsRetencao.present) {
      map['aliquota_ibs_retencao'] = Variable<double>(
        aliquotaIbsRetencao.value,
      );
    }
    if (valorIbsRetencao.present) {
      map['valor_ibs_retencao'] = Variable<double>(valorIbsRetencao.value);
    }
    if (aliquotaCbsRetencao.present) {
      map['aliquota_cbs_retencao'] = Variable<double>(
        aliquotaCbsRetencao.value,
      );
    }
    if (valorCbsRetencao.present) {
      map['valor_cbs_retencao'] = Variable<double>(valorCbsRetencao.value);
    }
    if (quantidadeTributadaRetido.present) {
      map['quantidade_tributada_retido'] = Variable<double>(
        quantidadeTributadaRetido.value,
      );
    }
    if (aliquotaIbsRetido.present) {
      map['aliquota_ibs_retido'] = Variable<double>(aliquotaIbsRetido.value);
    }
    if (valorIbsRetido.present) {
      map['valor_ibs_retido'] = Variable<double>(valorIbsRetido.value);
    }
    if (aliquotaCbsRetido.present) {
      map['aliquota_cbs_retido'] = Variable<double>(aliquotaCbsRetido.value);
    }
    if (valorCbsRetido.present) {
      map['valor_cbs_retido'] = Variable<double>(valorCbsRetido.value);
    }
    if (percentualIbsDiferido.present) {
      map['percentual_ibs_diferido'] = Variable<double>(
        percentualIbsDiferido.value,
      );
    }
    if (valorIbsDiferido.present) {
      map['valor_ibs_diferido'] = Variable<double>(valorIbsDiferido.value);
    }
    if (percentualCbsDiferido.present) {
      map['percentual_cbs_diferido'] = Variable<double>(
        percentualCbsDiferido.value,
      );
    }
    if (valorCbsDiferido.present) {
      map['valor_cbs_diferido'] = Variable<double>(valorCbsDiferido.value);
    }
    if (totalIbs.present) {
      map['total_ibs'] = Variable<double>(totalIbs.value);
    }
    if (totalCbs.present) {
      map['total_cbs'] = Variable<double>(totalCbs.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeDetalheImpostoMonofasicosCompanion(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('quantidadeTributada: $quantidadeTributada, ')
          ..write('aliquotaIbs: $aliquotaIbs, ')
          ..write('aliquotaCbs: $aliquotaCbs, ')
          ..write('valorIbs: $valorIbs, ')
          ..write('valorCbs: $valorCbs, ')
          ..write('quantidadeTributadaRetencao: $quantidadeTributadaRetencao, ')
          ..write('aliquotaIbsRetencao: $aliquotaIbsRetencao, ')
          ..write('valorIbsRetencao: $valorIbsRetencao, ')
          ..write('aliquotaCbsRetencao: $aliquotaCbsRetencao, ')
          ..write('valorCbsRetencao: $valorCbsRetencao, ')
          ..write('quantidadeTributadaRetido: $quantidadeTributadaRetido, ')
          ..write('aliquotaIbsRetido: $aliquotaIbsRetido, ')
          ..write('valorIbsRetido: $valorIbsRetido, ')
          ..write('aliquotaCbsRetido: $aliquotaCbsRetido, ')
          ..write('valorCbsRetido: $valorCbsRetido, ')
          ..write('percentualIbsDiferido: $percentualIbsDiferido, ')
          ..write('valorIbsDiferido: $valorIbsDiferido, ')
          ..write('percentualCbsDiferido: $percentualCbsDiferido, ')
          ..write('valorCbsDiferido: $valorCbsDiferido, ')
          ..write('totalIbs: $totalIbs, ')
          ..write('totalCbs: $totalCbs')
          ..write(')'))
        .toString();
  }
}

class $NfeDetalheTransfCreditosTable extends NfeDetalheTransfCreditos
    with TableInfo<$NfeDetalheTransfCreditosTable, NfeDetalheTransfCredito> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeDetalheTransfCreditosTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
    'id',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idNfeDetalheMeta = const VerificationMeta(
    'idNfeDetalhe',
  );
  @override
  late final GeneratedColumn<int> idNfeDetalhe = GeneratedColumn<int>(
    'id_nfe_detalhe',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _valorIbsMeta = const VerificationMeta(
    'valorIbs',
  );
  @override
  late final GeneratedColumn<double> valorIbs = GeneratedColumn<double>(
    'valor_ibs',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _valorCbsMeta = const VerificationMeta(
    'valorCbs',
  );
  @override
  late final GeneratedColumn<double> valorCbs = GeneratedColumn<double>(
    'valor_cbs',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  @override
  List<GeneratedColumn> get $columns => [id, idNfeDetalhe, valorIbs, valorCbs];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'nfe_detalhe_transf_credito';
  @override
  VerificationContext validateIntegrity(
    Insertable<NfeDetalheTransfCredito> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('id_nfe_detalhe')) {
      context.handle(
        _idNfeDetalheMeta,
        idNfeDetalhe.isAcceptableOrUnknown(
          data['id_nfe_detalhe']!,
          _idNfeDetalheMeta,
        ),
      );
    }
    if (data.containsKey('valor_ibs')) {
      context.handle(
        _valorIbsMeta,
        valorIbs.isAcceptableOrUnknown(data['valor_ibs']!, _valorIbsMeta),
      );
    }
    if (data.containsKey('valor_cbs')) {
      context.handle(
        _valorCbsMeta,
        valorCbs.isAcceptableOrUnknown(data['valor_cbs']!, _valorCbsMeta),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeDetalheTransfCredito map(
    Map<String, dynamic> data, {
    String? tablePrefix,
  }) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return NfeDetalheTransfCredito(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id'],
      ),
      idNfeDetalhe: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_nfe_detalhe'],
      ),
      valorIbs: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_ibs'],
      ),
      valorCbs: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_cbs'],
      ),
    );
  }

  @override
  $NfeDetalheTransfCreditosTable createAlias(String alias) {
    return $NfeDetalheTransfCreditosTable(attachedDatabase, alias);
  }
}

class NfeDetalheTransfCredito extends DataClass
    implements Insertable<NfeDetalheTransfCredito> {
  final int? id;
  final int? idNfeDetalhe;
  final double? valorIbs;
  final double? valorCbs;
  const NfeDetalheTransfCredito({
    this.id,
    this.idNfeDetalhe,
    this.valorIbs,
    this.valorCbs,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeDetalhe != null) {
      map['id_nfe_detalhe'] = Variable<int>(idNfeDetalhe);
    }
    if (!nullToAbsent || valorIbs != null) {
      map['valor_ibs'] = Variable<double>(valorIbs);
    }
    if (!nullToAbsent || valorCbs != null) {
      map['valor_cbs'] = Variable<double>(valorCbs);
    }
    return map;
  }

  factory NfeDetalheTransfCredito.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeDetalheTransfCredito(
      id: serializer.fromJson<int?>(json['id']),
      idNfeDetalhe: serializer.fromJson<int?>(json['idNfeDetalhe']),
      valorIbs: serializer.fromJson<double?>(json['valorIbs']),
      valorCbs: serializer.fromJson<double?>(json['valorCbs']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeDetalhe': serializer.toJson<int?>(idNfeDetalhe),
      'valorIbs': serializer.toJson<double?>(valorIbs),
      'valorCbs': serializer.toJson<double?>(valorCbs),
    };
  }

  NfeDetalheTransfCredito copyWith({
    Value<int?> id = const Value.absent(),
    Value<int?> idNfeDetalhe = const Value.absent(),
    Value<double?> valorIbs = const Value.absent(),
    Value<double?> valorCbs = const Value.absent(),
  }) => NfeDetalheTransfCredito(
    id: id.present ? id.value : this.id,
    idNfeDetalhe: idNfeDetalhe.present ? idNfeDetalhe.value : this.idNfeDetalhe,
    valorIbs: valorIbs.present ? valorIbs.value : this.valorIbs,
    valorCbs: valorCbs.present ? valorCbs.value : this.valorCbs,
  );
  NfeDetalheTransfCredito copyWithCompanion(
    NfeDetalheTransfCreditosCompanion data,
  ) {
    return NfeDetalheTransfCredito(
      id: data.id.present ? data.id.value : this.id,
      idNfeDetalhe:
          data.idNfeDetalhe.present
              ? data.idNfeDetalhe.value
              : this.idNfeDetalhe,
      valorIbs: data.valorIbs.present ? data.valorIbs.value : this.valorIbs,
      valorCbs: data.valorCbs.present ? data.valorCbs.value : this.valorCbs,
    );
  }

  @override
  String toString() {
    return (StringBuffer('NfeDetalheTransfCredito(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('valorIbs: $valorIbs, ')
          ..write('valorCbs: $valorCbs')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(id, idNfeDetalhe, valorIbs, valorCbs);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeDetalheTransfCredito &&
          other.id == this.id &&
          other.idNfeDetalhe == this.idNfeDetalhe &&
          other.valorIbs == this.valorIbs &&
          other.valorCbs == this.valorCbs);
}

class NfeDetalheTransfCreditosCompanion
    extends UpdateCompanion<NfeDetalheTransfCredito> {
  final Value<int?> id;
  final Value<int?> idNfeDetalhe;
  final Value<double?> valorIbs;
  final Value<double?> valorCbs;
  const NfeDetalheTransfCreditosCompanion({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.valorIbs = const Value.absent(),
    this.valorCbs = const Value.absent(),
  });
  NfeDetalheTransfCreditosCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.valorIbs = const Value.absent(),
    this.valorCbs = const Value.absent(),
  });
  static Insertable<NfeDetalheTransfCredito> custom({
    Expression<int>? id,
    Expression<int>? idNfeDetalhe,
    Expression<double>? valorIbs,
    Expression<double>? valorCbs,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (idNfeDetalhe != null) 'id_nfe_detalhe': idNfeDetalhe,
      if (valorIbs != null) 'valor_ibs': valorIbs,
      if (valorCbs != null) 'valor_cbs': valorCbs,
    });
  }

  NfeDetalheTransfCreditosCompanion copyWith({
    Value<int?>? id,
    Value<int?>? idNfeDetalhe,
    Value<double?>? valorIbs,
    Value<double?>? valorCbs,
  }) {
    return NfeDetalheTransfCreditosCompanion(
      id: id ?? this.id,
      idNfeDetalhe: idNfeDetalhe ?? this.idNfeDetalhe,
      valorIbs: valorIbs ?? this.valorIbs,
      valorCbs: valorCbs ?? this.valorCbs,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (idNfeDetalhe.present) {
      map['id_nfe_detalhe'] = Variable<int>(idNfeDetalhe.value);
    }
    if (valorIbs.present) {
      map['valor_ibs'] = Variable<double>(valorIbs.value);
    }
    if (valorCbs.present) {
      map['valor_cbs'] = Variable<double>(valorCbs.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeDetalheTransfCreditosCompanion(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('valorIbs: $valorIbs, ')
          ..write('valorCbs: $valorCbs')
          ..write(')'))
        .toString();
  }
}

class $NfeDetalheIbsZfmsTable extends NfeDetalheIbsZfms
    with TableInfo<$NfeDetalheIbsZfmsTable, NfeDetalheIbsZfm> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeDetalheIbsZfmsTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
    'id',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idNfeDetalheMeta = const VerificationMeta(
    'idNfeDetalhe',
  );
  @override
  late final GeneratedColumn<int> idNfeDetalhe = GeneratedColumn<int>(
    'id_nfe_detalhe',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _tipoCreditoMeta = const VerificationMeta(
    'tipoCredito',
  );
  @override
  late final GeneratedColumn<String> tipoCredito = GeneratedColumn<String>(
    'tipo_credito',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 1,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _valorCreditoMeta = const VerificationMeta(
    'valorCredito',
  );
  @override
  late final GeneratedColumn<double> valorCredito = GeneratedColumn<double>(
    'valor_credito',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    idNfeDetalhe,
    tipoCredito,
    valorCredito,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'nfe_detalhe_ibs_zfm';
  @override
  VerificationContext validateIntegrity(
    Insertable<NfeDetalheIbsZfm> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('id_nfe_detalhe')) {
      context.handle(
        _idNfeDetalheMeta,
        idNfeDetalhe.isAcceptableOrUnknown(
          data['id_nfe_detalhe']!,
          _idNfeDetalheMeta,
        ),
      );
    }
    if (data.containsKey('tipo_credito')) {
      context.handle(
        _tipoCreditoMeta,
        tipoCredito.isAcceptableOrUnknown(
          data['tipo_credito']!,
          _tipoCreditoMeta,
        ),
      );
    }
    if (data.containsKey('valor_credito')) {
      context.handle(
        _valorCreditoMeta,
        valorCredito.isAcceptableOrUnknown(
          data['valor_credito']!,
          _valorCreditoMeta,
        ),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeDetalheIbsZfm map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return NfeDetalheIbsZfm(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id'],
      ),
      idNfeDetalhe: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_nfe_detalhe'],
      ),
      tipoCredito: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}tipo_credito'],
      ),
      valorCredito: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_credito'],
      ),
    );
  }

  @override
  $NfeDetalheIbsZfmsTable createAlias(String alias) {
    return $NfeDetalheIbsZfmsTable(attachedDatabase, alias);
  }
}

class NfeDetalheIbsZfm extends DataClass
    implements Insertable<NfeDetalheIbsZfm> {
  final int? id;
  final int? idNfeDetalhe;
  final String? tipoCredito;
  final double? valorCredito;
  const NfeDetalheIbsZfm({
    this.id,
    this.idNfeDetalhe,
    this.tipoCredito,
    this.valorCredito,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeDetalhe != null) {
      map['id_nfe_detalhe'] = Variable<int>(idNfeDetalhe);
    }
    if (!nullToAbsent || tipoCredito != null) {
      map['tipo_credito'] = Variable<String>(tipoCredito);
    }
    if (!nullToAbsent || valorCredito != null) {
      map['valor_credito'] = Variable<double>(valorCredito);
    }
    return map;
  }

  factory NfeDetalheIbsZfm.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeDetalheIbsZfm(
      id: serializer.fromJson<int?>(json['id']),
      idNfeDetalhe: serializer.fromJson<int?>(json['idNfeDetalhe']),
      tipoCredito: serializer.fromJson<String?>(json['tipoCredito']),
      valorCredito: serializer.fromJson<double?>(json['valorCredito']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeDetalhe': serializer.toJson<int?>(idNfeDetalhe),
      'tipoCredito': serializer.toJson<String?>(tipoCredito),
      'valorCredito': serializer.toJson<double?>(valorCredito),
    };
  }

  NfeDetalheIbsZfm copyWith({
    Value<int?> id = const Value.absent(),
    Value<int?> idNfeDetalhe = const Value.absent(),
    Value<String?> tipoCredito = const Value.absent(),
    Value<double?> valorCredito = const Value.absent(),
  }) => NfeDetalheIbsZfm(
    id: id.present ? id.value : this.id,
    idNfeDetalhe: idNfeDetalhe.present ? idNfeDetalhe.value : this.idNfeDetalhe,
    tipoCredito: tipoCredito.present ? tipoCredito.value : this.tipoCredito,
    valorCredito: valorCredito.present ? valorCredito.value : this.valorCredito,
  );
  NfeDetalheIbsZfm copyWithCompanion(NfeDetalheIbsZfmsCompanion data) {
    return NfeDetalheIbsZfm(
      id: data.id.present ? data.id.value : this.id,
      idNfeDetalhe:
          data.idNfeDetalhe.present
              ? data.idNfeDetalhe.value
              : this.idNfeDetalhe,
      tipoCredito:
          data.tipoCredito.present ? data.tipoCredito.value : this.tipoCredito,
      valorCredito:
          data.valorCredito.present
              ? data.valorCredito.value
              : this.valorCredito,
    );
  }

  @override
  String toString() {
    return (StringBuffer('NfeDetalheIbsZfm(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('tipoCredito: $tipoCredito, ')
          ..write('valorCredito: $valorCredito')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(id, idNfeDetalhe, tipoCredito, valorCredito);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeDetalheIbsZfm &&
          other.id == this.id &&
          other.idNfeDetalhe == this.idNfeDetalhe &&
          other.tipoCredito == this.tipoCredito &&
          other.valorCredito == this.valorCredito);
}

class NfeDetalheIbsZfmsCompanion extends UpdateCompanion<NfeDetalheIbsZfm> {
  final Value<int?> id;
  final Value<int?> idNfeDetalhe;
  final Value<String?> tipoCredito;
  final Value<double?> valorCredito;
  const NfeDetalheIbsZfmsCompanion({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.tipoCredito = const Value.absent(),
    this.valorCredito = const Value.absent(),
  });
  NfeDetalheIbsZfmsCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.tipoCredito = const Value.absent(),
    this.valorCredito = const Value.absent(),
  });
  static Insertable<NfeDetalheIbsZfm> custom({
    Expression<int>? id,
    Expression<int>? idNfeDetalhe,
    Expression<String>? tipoCredito,
    Expression<double>? valorCredito,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (idNfeDetalhe != null) 'id_nfe_detalhe': idNfeDetalhe,
      if (tipoCredito != null) 'tipo_credito': tipoCredito,
      if (valorCredito != null) 'valor_credito': valorCredito,
    });
  }

  NfeDetalheIbsZfmsCompanion copyWith({
    Value<int?>? id,
    Value<int?>? idNfeDetalhe,
    Value<String?>? tipoCredito,
    Value<double?>? valorCredito,
  }) {
    return NfeDetalheIbsZfmsCompanion(
      id: id ?? this.id,
      idNfeDetalhe: idNfeDetalhe ?? this.idNfeDetalhe,
      tipoCredito: tipoCredito ?? this.tipoCredito,
      valorCredito: valorCredito ?? this.valorCredito,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (idNfeDetalhe.present) {
      map['id_nfe_detalhe'] = Variable<int>(idNfeDetalhe.value);
    }
    if (tipoCredito.present) {
      map['tipo_credito'] = Variable<String>(tipoCredito.value);
    }
    if (valorCredito.present) {
      map['valor_credito'] = Variable<double>(valorCredito.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeDetalheIbsZfmsCompanion(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('tipoCredito: $tipoCredito, ')
          ..write('valorCredito: $valorCredito')
          ..write(')'))
        .toString();
  }
}

class $NfeDetalheDfeReferenciadosTable extends NfeDetalheDfeReferenciados
    with
        TableInfo<$NfeDetalheDfeReferenciadosTable, NfeDetalheDfeReferenciado> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeDetalheDfeReferenciadosTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
    'id',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idNfeDetalheMeta = const VerificationMeta(
    'idNfeDetalhe',
  );
  @override
  late final GeneratedColumn<int> idNfeDetalhe = GeneratedColumn<int>(
    'id_nfe_detalhe',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _chaveAcessoMeta = const VerificationMeta(
    'chaveAcesso',
  );
  @override
  late final GeneratedColumn<String> chaveAcesso = GeneratedColumn<String>(
    'chave_acesso',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 44,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _numeroItemMeta = const VerificationMeta(
    'numeroItem',
  );
  @override
  late final GeneratedColumn<int> numeroItem = GeneratedColumn<int>(
    'numero_item',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    idNfeDetalhe,
    chaveAcesso,
    numeroItem,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'nfe_detalhe_dfe_referenciado';
  @override
  VerificationContext validateIntegrity(
    Insertable<NfeDetalheDfeReferenciado> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('id_nfe_detalhe')) {
      context.handle(
        _idNfeDetalheMeta,
        idNfeDetalhe.isAcceptableOrUnknown(
          data['id_nfe_detalhe']!,
          _idNfeDetalheMeta,
        ),
      );
    }
    if (data.containsKey('chave_acesso')) {
      context.handle(
        _chaveAcessoMeta,
        chaveAcesso.isAcceptableOrUnknown(
          data['chave_acesso']!,
          _chaveAcessoMeta,
        ),
      );
    }
    if (data.containsKey('numero_item')) {
      context.handle(
        _numeroItemMeta,
        numeroItem.isAcceptableOrUnknown(data['numero_item']!, _numeroItemMeta),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeDetalheDfeReferenciado map(
    Map<String, dynamic> data, {
    String? tablePrefix,
  }) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return NfeDetalheDfeReferenciado(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id'],
      ),
      idNfeDetalhe: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_nfe_detalhe'],
      ),
      chaveAcesso: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}chave_acesso'],
      ),
      numeroItem: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}numero_item'],
      ),
    );
  }

  @override
  $NfeDetalheDfeReferenciadosTable createAlias(String alias) {
    return $NfeDetalheDfeReferenciadosTable(attachedDatabase, alias);
  }
}

class NfeDetalheDfeReferenciado extends DataClass
    implements Insertable<NfeDetalheDfeReferenciado> {
  final int? id;
  final int? idNfeDetalhe;
  final String? chaveAcesso;
  final int? numeroItem;
  const NfeDetalheDfeReferenciado({
    this.id,
    this.idNfeDetalhe,
    this.chaveAcesso,
    this.numeroItem,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeDetalhe != null) {
      map['id_nfe_detalhe'] = Variable<int>(idNfeDetalhe);
    }
    if (!nullToAbsent || chaveAcesso != null) {
      map['chave_acesso'] = Variable<String>(chaveAcesso);
    }
    if (!nullToAbsent || numeroItem != null) {
      map['numero_item'] = Variable<int>(numeroItem);
    }
    return map;
  }

  factory NfeDetalheDfeReferenciado.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeDetalheDfeReferenciado(
      id: serializer.fromJson<int?>(json['id']),
      idNfeDetalhe: serializer.fromJson<int?>(json['idNfeDetalhe']),
      chaveAcesso: serializer.fromJson<String?>(json['chaveAcesso']),
      numeroItem: serializer.fromJson<int?>(json['numeroItem']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeDetalhe': serializer.toJson<int?>(idNfeDetalhe),
      'chaveAcesso': serializer.toJson<String?>(chaveAcesso),
      'numeroItem': serializer.toJson<int?>(numeroItem),
    };
  }

  NfeDetalheDfeReferenciado copyWith({
    Value<int?> id = const Value.absent(),
    Value<int?> idNfeDetalhe = const Value.absent(),
    Value<String?> chaveAcesso = const Value.absent(),
    Value<int?> numeroItem = const Value.absent(),
  }) => NfeDetalheDfeReferenciado(
    id: id.present ? id.value : this.id,
    idNfeDetalhe: idNfeDetalhe.present ? idNfeDetalhe.value : this.idNfeDetalhe,
    chaveAcesso: chaveAcesso.present ? chaveAcesso.value : this.chaveAcesso,
    numeroItem: numeroItem.present ? numeroItem.value : this.numeroItem,
  );
  NfeDetalheDfeReferenciado copyWithCompanion(
    NfeDetalheDfeReferenciadosCompanion data,
  ) {
    return NfeDetalheDfeReferenciado(
      id: data.id.present ? data.id.value : this.id,
      idNfeDetalhe:
          data.idNfeDetalhe.present
              ? data.idNfeDetalhe.value
              : this.idNfeDetalhe,
      chaveAcesso:
          data.chaveAcesso.present ? data.chaveAcesso.value : this.chaveAcesso,
      numeroItem:
          data.numeroItem.present ? data.numeroItem.value : this.numeroItem,
    );
  }

  @override
  String toString() {
    return (StringBuffer('NfeDetalheDfeReferenciado(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('chaveAcesso: $chaveAcesso, ')
          ..write('numeroItem: $numeroItem')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(id, idNfeDetalhe, chaveAcesso, numeroItem);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeDetalheDfeReferenciado &&
          other.id == this.id &&
          other.idNfeDetalhe == this.idNfeDetalhe &&
          other.chaveAcesso == this.chaveAcesso &&
          other.numeroItem == this.numeroItem);
}

class NfeDetalheDfeReferenciadosCompanion
    extends UpdateCompanion<NfeDetalheDfeReferenciado> {
  final Value<int?> id;
  final Value<int?> idNfeDetalhe;
  final Value<String?> chaveAcesso;
  final Value<int?> numeroItem;
  const NfeDetalheDfeReferenciadosCompanion({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.chaveAcesso = const Value.absent(),
    this.numeroItem = const Value.absent(),
  });
  NfeDetalheDfeReferenciadosCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.chaveAcesso = const Value.absent(),
    this.numeroItem = const Value.absent(),
  });
  static Insertable<NfeDetalheDfeReferenciado> custom({
    Expression<int>? id,
    Expression<int>? idNfeDetalhe,
    Expression<String>? chaveAcesso,
    Expression<int>? numeroItem,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (idNfeDetalhe != null) 'id_nfe_detalhe': idNfeDetalhe,
      if (chaveAcesso != null) 'chave_acesso': chaveAcesso,
      if (numeroItem != null) 'numero_item': numeroItem,
    });
  }

  NfeDetalheDfeReferenciadosCompanion copyWith({
    Value<int?>? id,
    Value<int?>? idNfeDetalhe,
    Value<String?>? chaveAcesso,
    Value<int?>? numeroItem,
  }) {
    return NfeDetalheDfeReferenciadosCompanion(
      id: id ?? this.id,
      idNfeDetalhe: idNfeDetalhe ?? this.idNfeDetalhe,
      chaveAcesso: chaveAcesso ?? this.chaveAcesso,
      numeroItem: numeroItem ?? this.numeroItem,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (idNfeDetalhe.present) {
      map['id_nfe_detalhe'] = Variable<int>(idNfeDetalhe.value);
    }
    if (chaveAcesso.present) {
      map['chave_acesso'] = Variable<String>(chaveAcesso.value);
    }
    if (numeroItem.present) {
      map['numero_item'] = Variable<int>(numeroItem.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeDetalheDfeReferenciadosCompanion(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('chaveAcesso: $chaveAcesso, ')
          ..write('numeroItem: $numeroItem')
          ..write(')'))
        .toString();
  }
}

class $NfeDetCombustivelOrigemsTable extends NfeDetCombustivelOrigems
    with TableInfo<$NfeDetCombustivelOrigemsTable, NfeDetCombustivelOrigem> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeDetCombustivelOrigemsTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
    'id',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idNfeDetEspecificoCombustivelMeta =
      const VerificationMeta('idNfeDetEspecificoCombustivel');
  @override
  late final GeneratedColumn<int> idNfeDetEspecificoCombustivel =
      GeneratedColumn<int>(
        'id_nfe_det_especifico_combustivel',
        aliasedName,
        true,
        type: DriftSqlType.int,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _indicadorImportacaoMeta =
      const VerificationMeta('indicadorImportacao');
  @override
  late final GeneratedColumn<String> indicadorImportacao =
      GeneratedColumn<String>(
        'indicador_importacao',
        aliasedName,
        true,
        additionalChecks: GeneratedColumn.checkTextLength(
          minTextLength: 0,
          maxTextLength: 1,
        ),
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _codigoUfMeta = const VerificationMeta(
    'codigoUf',
  );
  @override
  late final GeneratedColumn<int> codigoUf = GeneratedColumn<int>(
    'codigo_uf',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _percentualOriginarioMeta =
      const VerificationMeta('percentualOriginario');
  @override
  late final GeneratedColumn<double> percentualOriginario =
      GeneratedColumn<double>(
        'percentual_originario',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    idNfeDetEspecificoCombustivel,
    indicadorImportacao,
    codigoUf,
    percentualOriginario,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'nfe_det_combustivel_origem';
  @override
  VerificationContext validateIntegrity(
    Insertable<NfeDetCombustivelOrigem> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('id_nfe_det_especifico_combustivel')) {
      context.handle(
        _idNfeDetEspecificoCombustivelMeta,
        idNfeDetEspecificoCombustivel.isAcceptableOrUnknown(
          data['id_nfe_det_especifico_combustivel']!,
          _idNfeDetEspecificoCombustivelMeta,
        ),
      );
    }
    if (data.containsKey('indicador_importacao')) {
      context.handle(
        _indicadorImportacaoMeta,
        indicadorImportacao.isAcceptableOrUnknown(
          data['indicador_importacao']!,
          _indicadorImportacaoMeta,
        ),
      );
    }
    if (data.containsKey('codigo_uf')) {
      context.handle(
        _codigoUfMeta,
        codigoUf.isAcceptableOrUnknown(data['codigo_uf']!, _codigoUfMeta),
      );
    }
    if (data.containsKey('percentual_originario')) {
      context.handle(
        _percentualOriginarioMeta,
        percentualOriginario.isAcceptableOrUnknown(
          data['percentual_originario']!,
          _percentualOriginarioMeta,
        ),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeDetCombustivelOrigem map(
    Map<String, dynamic> data, {
    String? tablePrefix,
  }) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return NfeDetCombustivelOrigem(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id'],
      ),
      idNfeDetEspecificoCombustivel: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_nfe_det_especifico_combustivel'],
      ),
      indicadorImportacao: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}indicador_importacao'],
      ),
      codigoUf: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}codigo_uf'],
      ),
      percentualOriginario: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}percentual_originario'],
      ),
    );
  }

  @override
  $NfeDetCombustivelOrigemsTable createAlias(String alias) {
    return $NfeDetCombustivelOrigemsTable(attachedDatabase, alias);
  }
}

class NfeDetCombustivelOrigem extends DataClass
    implements Insertable<NfeDetCombustivelOrigem> {
  final int? id;
  final int? idNfeDetEspecificoCombustivel;
  final String? indicadorImportacao;
  final int? codigoUf;
  final double? percentualOriginario;
  const NfeDetCombustivelOrigem({
    this.id,
    this.idNfeDetEspecificoCombustivel,
    this.indicadorImportacao,
    this.codigoUf,
    this.percentualOriginario,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeDetEspecificoCombustivel != null) {
      map['id_nfe_det_especifico_combustivel'] = Variable<int>(
        idNfeDetEspecificoCombustivel,
      );
    }
    if (!nullToAbsent || indicadorImportacao != null) {
      map['indicador_importacao'] = Variable<String>(indicadorImportacao);
    }
    if (!nullToAbsent || codigoUf != null) {
      map['codigo_uf'] = Variable<int>(codigoUf);
    }
    if (!nullToAbsent || percentualOriginario != null) {
      map['percentual_originario'] = Variable<double>(percentualOriginario);
    }
    return map;
  }

  factory NfeDetCombustivelOrigem.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeDetCombustivelOrigem(
      id: serializer.fromJson<int?>(json['id']),
      idNfeDetEspecificoCombustivel: serializer.fromJson<int?>(
        json['idNfeDetEspecificoCombustivel'],
      ),
      indicadorImportacao: serializer.fromJson<String?>(
        json['indicadorImportacao'],
      ),
      codigoUf: serializer.fromJson<int?>(json['codigoUf']),
      percentualOriginario: serializer.fromJson<double?>(
        json['percentualOriginario'],
      ),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeDetEspecificoCombustivel': serializer.toJson<int?>(
        idNfeDetEspecificoCombustivel,
      ),
      'indicadorImportacao': serializer.toJson<String?>(indicadorImportacao),
      'codigoUf': serializer.toJson<int?>(codigoUf),
      'percentualOriginario': serializer.toJson<double?>(percentualOriginario),
    };
  }

  NfeDetCombustivelOrigem copyWith({
    Value<int?> id = const Value.absent(),
    Value<int?> idNfeDetEspecificoCombustivel = const Value.absent(),
    Value<String?> indicadorImportacao = const Value.absent(),
    Value<int?> codigoUf = const Value.absent(),
    Value<double?> percentualOriginario = const Value.absent(),
  }) => NfeDetCombustivelOrigem(
    id: id.present ? id.value : this.id,
    idNfeDetEspecificoCombustivel:
        idNfeDetEspecificoCombustivel.present
            ? idNfeDetEspecificoCombustivel.value
            : this.idNfeDetEspecificoCombustivel,
    indicadorImportacao:
        indicadorImportacao.present
            ? indicadorImportacao.value
            : this.indicadorImportacao,
    codigoUf: codigoUf.present ? codigoUf.value : this.codigoUf,
    percentualOriginario:
        percentualOriginario.present
            ? percentualOriginario.value
            : this.percentualOriginario,
  );
  NfeDetCombustivelOrigem copyWithCompanion(
    NfeDetCombustivelOrigemsCompanion data,
  ) {
    return NfeDetCombustivelOrigem(
      id: data.id.present ? data.id.value : this.id,
      idNfeDetEspecificoCombustivel:
          data.idNfeDetEspecificoCombustivel.present
              ? data.idNfeDetEspecificoCombustivel.value
              : this.idNfeDetEspecificoCombustivel,
      indicadorImportacao:
          data.indicadorImportacao.present
              ? data.indicadorImportacao.value
              : this.indicadorImportacao,
      codigoUf: data.codigoUf.present ? data.codigoUf.value : this.codigoUf,
      percentualOriginario:
          data.percentualOriginario.present
              ? data.percentualOriginario.value
              : this.percentualOriginario,
    );
  }

  @override
  String toString() {
    return (StringBuffer('NfeDetCombustivelOrigem(')
          ..write('id: $id, ')
          ..write(
            'idNfeDetEspecificoCombustivel: $idNfeDetEspecificoCombustivel, ',
          )
          ..write('indicadorImportacao: $indicadorImportacao, ')
          ..write('codigoUf: $codigoUf, ')
          ..write('percentualOriginario: $percentualOriginario')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    idNfeDetEspecificoCombustivel,
    indicadorImportacao,
    codigoUf,
    percentualOriginario,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeDetCombustivelOrigem &&
          other.id == this.id &&
          other.idNfeDetEspecificoCombustivel ==
              this.idNfeDetEspecificoCombustivel &&
          other.indicadorImportacao == this.indicadorImportacao &&
          other.codigoUf == this.codigoUf &&
          other.percentualOriginario == this.percentualOriginario);
}

class NfeDetCombustivelOrigemsCompanion
    extends UpdateCompanion<NfeDetCombustivelOrigem> {
  final Value<int?> id;
  final Value<int?> idNfeDetEspecificoCombustivel;
  final Value<String?> indicadorImportacao;
  final Value<int?> codigoUf;
  final Value<double?> percentualOriginario;
  const NfeDetCombustivelOrigemsCompanion({
    this.id = const Value.absent(),
    this.idNfeDetEspecificoCombustivel = const Value.absent(),
    this.indicadorImportacao = const Value.absent(),
    this.codigoUf = const Value.absent(),
    this.percentualOriginario = const Value.absent(),
  });
  NfeDetCombustivelOrigemsCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeDetEspecificoCombustivel = const Value.absent(),
    this.indicadorImportacao = const Value.absent(),
    this.codigoUf = const Value.absent(),
    this.percentualOriginario = const Value.absent(),
  });
  static Insertable<NfeDetCombustivelOrigem> custom({
    Expression<int>? id,
    Expression<int>? idNfeDetEspecificoCombustivel,
    Expression<String>? indicadorImportacao,
    Expression<int>? codigoUf,
    Expression<double>? percentualOriginario,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (idNfeDetEspecificoCombustivel != null)
        'id_nfe_det_especifico_combustivel': idNfeDetEspecificoCombustivel,
      if (indicadorImportacao != null)
        'indicador_importacao': indicadorImportacao,
      if (codigoUf != null) 'codigo_uf': codigoUf,
      if (percentualOriginario != null)
        'percentual_originario': percentualOriginario,
    });
  }

  NfeDetCombustivelOrigemsCompanion copyWith({
    Value<int?>? id,
    Value<int?>? idNfeDetEspecificoCombustivel,
    Value<String?>? indicadorImportacao,
    Value<int?>? codigoUf,
    Value<double?>? percentualOriginario,
  }) {
    return NfeDetCombustivelOrigemsCompanion(
      id: id ?? this.id,
      idNfeDetEspecificoCombustivel:
          idNfeDetEspecificoCombustivel ?? this.idNfeDetEspecificoCombustivel,
      indicadorImportacao: indicadorImportacao ?? this.indicadorImportacao,
      codigoUf: codigoUf ?? this.codigoUf,
      percentualOriginario: percentualOriginario ?? this.percentualOriginario,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (idNfeDetEspecificoCombustivel.present) {
      map['id_nfe_det_especifico_combustivel'] = Variable<int>(
        idNfeDetEspecificoCombustivel.value,
      );
    }
    if (indicadorImportacao.present) {
      map['indicador_importacao'] = Variable<String>(indicadorImportacao.value);
    }
    if (codigoUf.present) {
      map['codigo_uf'] = Variable<int>(codigoUf.value);
    }
    if (percentualOriginario.present) {
      map['percentual_originario'] = Variable<double>(
        percentualOriginario.value,
      );
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeDetCombustivelOrigemsCompanion(')
          ..write('id: $id, ')
          ..write(
            'idNfeDetEspecificoCombustivel: $idNfeDetEspecificoCombustivel, ',
          )
          ..write('indicadorImportacao: $indicadorImportacao, ')
          ..write('codigoUf: $codigoUf, ')
          ..write('percentualOriginario: $percentualOriginario')
          ..write(')'))
        .toString();
  }
}

class $NfeInformacaoAgropecuariosTable extends NfeInformacaoAgropecuarios
    with
        TableInfo<$NfeInformacaoAgropecuariosTable, NfeInformacaoAgropecuario> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeInformacaoAgropecuariosTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
    'id',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idNfeCabecalhoMeta = const VerificationMeta(
    'idNfeCabecalho',
  );
  @override
  late final GeneratedColumn<int> idNfeCabecalho = GeneratedColumn<int>(
    'id_nfe_cabecalho',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _numeroReceituarioMeta = const VerificationMeta(
    'numeroReceituario',
  );
  @override
  late final GeneratedColumn<String> numeroReceituario =
      GeneratedColumn<String>(
        'numero_receituario',
        aliasedName,
        true,
        additionalChecks: GeneratedColumn.checkTextLength(
          minTextLength: 0,
          maxTextLength: 30,
        ),
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _cpfResponsavelTecnicoMeta =
      const VerificationMeta('cpfResponsavelTecnico');
  @override
  late final GeneratedColumn<String> cpfResponsavelTecnico =
      GeneratedColumn<String>(
        'cpf_responsavel_tecnico',
        aliasedName,
        true,
        additionalChecks: GeneratedColumn.checkTextLength(
          minTextLength: 0,
          maxTextLength: 11,
        ),
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _guiaTipoMeta = const VerificationMeta(
    'guiaTipo',
  );
  @override
  late final GeneratedColumn<String> guiaTipo = GeneratedColumn<String>(
    'guia_tipo',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 1,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _guiaUfEmissaoMeta = const VerificationMeta(
    'guiaUfEmissao',
  );
  @override
  late final GeneratedColumn<String> guiaUfEmissao = GeneratedColumn<String>(
    'guia_uf_emissao',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 2,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _guiaSerieMeta = const VerificationMeta(
    'guiaSerie',
  );
  @override
  late final GeneratedColumn<String> guiaSerie = GeneratedColumn<String>(
    'guia_serie',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 9,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _guiaNumeroMeta = const VerificationMeta(
    'guiaNumero',
  );
  @override
  late final GeneratedColumn<String> guiaNumero = GeneratedColumn<String>(
    'guia_numero',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 9,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    idNfeCabecalho,
    numeroReceituario,
    cpfResponsavelTecnico,
    guiaTipo,
    guiaUfEmissao,
    guiaSerie,
    guiaNumero,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'nfe_informacao_agropecuario';
  @override
  VerificationContext validateIntegrity(
    Insertable<NfeInformacaoAgropecuario> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('id_nfe_cabecalho')) {
      context.handle(
        _idNfeCabecalhoMeta,
        idNfeCabecalho.isAcceptableOrUnknown(
          data['id_nfe_cabecalho']!,
          _idNfeCabecalhoMeta,
        ),
      );
    }
    if (data.containsKey('numero_receituario')) {
      context.handle(
        _numeroReceituarioMeta,
        numeroReceituario.isAcceptableOrUnknown(
          data['numero_receituario']!,
          _numeroReceituarioMeta,
        ),
      );
    }
    if (data.containsKey('cpf_responsavel_tecnico')) {
      context.handle(
        _cpfResponsavelTecnicoMeta,
        cpfResponsavelTecnico.isAcceptableOrUnknown(
          data['cpf_responsavel_tecnico']!,
          _cpfResponsavelTecnicoMeta,
        ),
      );
    }
    if (data.containsKey('guia_tipo')) {
      context.handle(
        _guiaTipoMeta,
        guiaTipo.isAcceptableOrUnknown(data['guia_tipo']!, _guiaTipoMeta),
      );
    }
    if (data.containsKey('guia_uf_emissao')) {
      context.handle(
        _guiaUfEmissaoMeta,
        guiaUfEmissao.isAcceptableOrUnknown(
          data['guia_uf_emissao']!,
          _guiaUfEmissaoMeta,
        ),
      );
    }
    if (data.containsKey('guia_serie')) {
      context.handle(
        _guiaSerieMeta,
        guiaSerie.isAcceptableOrUnknown(data['guia_serie']!, _guiaSerieMeta),
      );
    }
    if (data.containsKey('guia_numero')) {
      context.handle(
        _guiaNumeroMeta,
        guiaNumero.isAcceptableOrUnknown(data['guia_numero']!, _guiaNumeroMeta),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeInformacaoAgropecuario map(
    Map<String, dynamic> data, {
    String? tablePrefix,
  }) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return NfeInformacaoAgropecuario(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id'],
      ),
      idNfeCabecalho: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_nfe_cabecalho'],
      ),
      numeroReceituario: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}numero_receituario'],
      ),
      cpfResponsavelTecnico: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}cpf_responsavel_tecnico'],
      ),
      guiaTipo: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}guia_tipo'],
      ),
      guiaUfEmissao: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}guia_uf_emissao'],
      ),
      guiaSerie: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}guia_serie'],
      ),
      guiaNumero: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}guia_numero'],
      ),
    );
  }

  @override
  $NfeInformacaoAgropecuariosTable createAlias(String alias) {
    return $NfeInformacaoAgropecuariosTable(attachedDatabase, alias);
  }
}

class NfeInformacaoAgropecuario extends DataClass
    implements Insertable<NfeInformacaoAgropecuario> {
  final int? id;
  final int? idNfeCabecalho;
  final String? numeroReceituario;
  final String? cpfResponsavelTecnico;
  final String? guiaTipo;
  final String? guiaUfEmissao;
  final String? guiaSerie;
  final String? guiaNumero;
  const NfeInformacaoAgropecuario({
    this.id,
    this.idNfeCabecalho,
    this.numeroReceituario,
    this.cpfResponsavelTecnico,
    this.guiaTipo,
    this.guiaUfEmissao,
    this.guiaSerie,
    this.guiaNumero,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeCabecalho != null) {
      map['id_nfe_cabecalho'] = Variable<int>(idNfeCabecalho);
    }
    if (!nullToAbsent || numeroReceituario != null) {
      map['numero_receituario'] = Variable<String>(numeroReceituario);
    }
    if (!nullToAbsent || cpfResponsavelTecnico != null) {
      map['cpf_responsavel_tecnico'] = Variable<String>(cpfResponsavelTecnico);
    }
    if (!nullToAbsent || guiaTipo != null) {
      map['guia_tipo'] = Variable<String>(guiaTipo);
    }
    if (!nullToAbsent || guiaUfEmissao != null) {
      map['guia_uf_emissao'] = Variable<String>(guiaUfEmissao);
    }
    if (!nullToAbsent || guiaSerie != null) {
      map['guia_serie'] = Variable<String>(guiaSerie);
    }
    if (!nullToAbsent || guiaNumero != null) {
      map['guia_numero'] = Variable<String>(guiaNumero);
    }
    return map;
  }

  factory NfeInformacaoAgropecuario.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeInformacaoAgropecuario(
      id: serializer.fromJson<int?>(json['id']),
      idNfeCabecalho: serializer.fromJson<int?>(json['idNfeCabecalho']),
      numeroReceituario: serializer.fromJson<String?>(
        json['numeroReceituario'],
      ),
      cpfResponsavelTecnico: serializer.fromJson<String?>(
        json['cpfResponsavelTecnico'],
      ),
      guiaTipo: serializer.fromJson<String?>(json['guiaTipo']),
      guiaUfEmissao: serializer.fromJson<String?>(json['guiaUfEmissao']),
      guiaSerie: serializer.fromJson<String?>(json['guiaSerie']),
      guiaNumero: serializer.fromJson<String?>(json['guiaNumero']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeCabecalho': serializer.toJson<int?>(idNfeCabecalho),
      'numeroReceituario': serializer.toJson<String?>(numeroReceituario),
      'cpfResponsavelTecnico': serializer.toJson<String?>(
        cpfResponsavelTecnico,
      ),
      'guiaTipo': serializer.toJson<String?>(guiaTipo),
      'guiaUfEmissao': serializer.toJson<String?>(guiaUfEmissao),
      'guiaSerie': serializer.toJson<String?>(guiaSerie),
      'guiaNumero': serializer.toJson<String?>(guiaNumero),
    };
  }

  NfeInformacaoAgropecuario copyWith({
    Value<int?> id = const Value.absent(),
    Value<int?> idNfeCabecalho = const Value.absent(),
    Value<String?> numeroReceituario = const Value.absent(),
    Value<String?> cpfResponsavelTecnico = const Value.absent(),
    Value<String?> guiaTipo = const Value.absent(),
    Value<String?> guiaUfEmissao = const Value.absent(),
    Value<String?> guiaSerie = const Value.absent(),
    Value<String?> guiaNumero = const Value.absent(),
  }) => NfeInformacaoAgropecuario(
    id: id.present ? id.value : this.id,
    idNfeCabecalho:
        idNfeCabecalho.present ? idNfeCabecalho.value : this.idNfeCabecalho,
    numeroReceituario:
        numeroReceituario.present
            ? numeroReceituario.value
            : this.numeroReceituario,
    cpfResponsavelTecnico:
        cpfResponsavelTecnico.present
            ? cpfResponsavelTecnico.value
            : this.cpfResponsavelTecnico,
    guiaTipo: guiaTipo.present ? guiaTipo.value : this.guiaTipo,
    guiaUfEmissao:
        guiaUfEmissao.present ? guiaUfEmissao.value : this.guiaUfEmissao,
    guiaSerie: guiaSerie.present ? guiaSerie.value : this.guiaSerie,
    guiaNumero: guiaNumero.present ? guiaNumero.value : this.guiaNumero,
  );
  NfeInformacaoAgropecuario copyWithCompanion(
    NfeInformacaoAgropecuariosCompanion data,
  ) {
    return NfeInformacaoAgropecuario(
      id: data.id.present ? data.id.value : this.id,
      idNfeCabecalho:
          data.idNfeCabecalho.present
              ? data.idNfeCabecalho.value
              : this.idNfeCabecalho,
      numeroReceituario:
          data.numeroReceituario.present
              ? data.numeroReceituario.value
              : this.numeroReceituario,
      cpfResponsavelTecnico:
          data.cpfResponsavelTecnico.present
              ? data.cpfResponsavelTecnico.value
              : this.cpfResponsavelTecnico,
      guiaTipo: data.guiaTipo.present ? data.guiaTipo.value : this.guiaTipo,
      guiaUfEmissao:
          data.guiaUfEmissao.present
              ? data.guiaUfEmissao.value
              : this.guiaUfEmissao,
      guiaSerie: data.guiaSerie.present ? data.guiaSerie.value : this.guiaSerie,
      guiaNumero:
          data.guiaNumero.present ? data.guiaNumero.value : this.guiaNumero,
    );
  }

  @override
  String toString() {
    return (StringBuffer('NfeInformacaoAgropecuario(')
          ..write('id: $id, ')
          ..write('idNfeCabecalho: $idNfeCabecalho, ')
          ..write('numeroReceituario: $numeroReceituario, ')
          ..write('cpfResponsavelTecnico: $cpfResponsavelTecnico, ')
          ..write('guiaTipo: $guiaTipo, ')
          ..write('guiaUfEmissao: $guiaUfEmissao, ')
          ..write('guiaSerie: $guiaSerie, ')
          ..write('guiaNumero: $guiaNumero')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    idNfeCabecalho,
    numeroReceituario,
    cpfResponsavelTecnico,
    guiaTipo,
    guiaUfEmissao,
    guiaSerie,
    guiaNumero,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeInformacaoAgropecuario &&
          other.id == this.id &&
          other.idNfeCabecalho == this.idNfeCabecalho &&
          other.numeroReceituario == this.numeroReceituario &&
          other.cpfResponsavelTecnico == this.cpfResponsavelTecnico &&
          other.guiaTipo == this.guiaTipo &&
          other.guiaUfEmissao == this.guiaUfEmissao &&
          other.guiaSerie == this.guiaSerie &&
          other.guiaNumero == this.guiaNumero);
}

class NfeInformacaoAgropecuariosCompanion
    extends UpdateCompanion<NfeInformacaoAgropecuario> {
  final Value<int?> id;
  final Value<int?> idNfeCabecalho;
  final Value<String?> numeroReceituario;
  final Value<String?> cpfResponsavelTecnico;
  final Value<String?> guiaTipo;
  final Value<String?> guiaUfEmissao;
  final Value<String?> guiaSerie;
  final Value<String?> guiaNumero;
  const NfeInformacaoAgropecuariosCompanion({
    this.id = const Value.absent(),
    this.idNfeCabecalho = const Value.absent(),
    this.numeroReceituario = const Value.absent(),
    this.cpfResponsavelTecnico = const Value.absent(),
    this.guiaTipo = const Value.absent(),
    this.guiaUfEmissao = const Value.absent(),
    this.guiaSerie = const Value.absent(),
    this.guiaNumero = const Value.absent(),
  });
  NfeInformacaoAgropecuariosCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeCabecalho = const Value.absent(),
    this.numeroReceituario = const Value.absent(),
    this.cpfResponsavelTecnico = const Value.absent(),
    this.guiaTipo = const Value.absent(),
    this.guiaUfEmissao = const Value.absent(),
    this.guiaSerie = const Value.absent(),
    this.guiaNumero = const Value.absent(),
  });
  static Insertable<NfeInformacaoAgropecuario> custom({
    Expression<int>? id,
    Expression<int>? idNfeCabecalho,
    Expression<String>? numeroReceituario,
    Expression<String>? cpfResponsavelTecnico,
    Expression<String>? guiaTipo,
    Expression<String>? guiaUfEmissao,
    Expression<String>? guiaSerie,
    Expression<String>? guiaNumero,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (idNfeCabecalho != null) 'id_nfe_cabecalho': idNfeCabecalho,
      if (numeroReceituario != null) 'numero_receituario': numeroReceituario,
      if (cpfResponsavelTecnico != null)
        'cpf_responsavel_tecnico': cpfResponsavelTecnico,
      if (guiaTipo != null) 'guia_tipo': guiaTipo,
      if (guiaUfEmissao != null) 'guia_uf_emissao': guiaUfEmissao,
      if (guiaSerie != null) 'guia_serie': guiaSerie,
      if (guiaNumero != null) 'guia_numero': guiaNumero,
    });
  }

  NfeInformacaoAgropecuariosCompanion copyWith({
    Value<int?>? id,
    Value<int?>? idNfeCabecalho,
    Value<String?>? numeroReceituario,
    Value<String?>? cpfResponsavelTecnico,
    Value<String?>? guiaTipo,
    Value<String?>? guiaUfEmissao,
    Value<String?>? guiaSerie,
    Value<String?>? guiaNumero,
  }) {
    return NfeInformacaoAgropecuariosCompanion(
      id: id ?? this.id,
      idNfeCabecalho: idNfeCabecalho ?? this.idNfeCabecalho,
      numeroReceituario: numeroReceituario ?? this.numeroReceituario,
      cpfResponsavelTecnico:
          cpfResponsavelTecnico ?? this.cpfResponsavelTecnico,
      guiaTipo: guiaTipo ?? this.guiaTipo,
      guiaUfEmissao: guiaUfEmissao ?? this.guiaUfEmissao,
      guiaSerie: guiaSerie ?? this.guiaSerie,
      guiaNumero: guiaNumero ?? this.guiaNumero,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (idNfeCabecalho.present) {
      map['id_nfe_cabecalho'] = Variable<int>(idNfeCabecalho.value);
    }
    if (numeroReceituario.present) {
      map['numero_receituario'] = Variable<String>(numeroReceituario.value);
    }
    if (cpfResponsavelTecnico.present) {
      map['cpf_responsavel_tecnico'] = Variable<String>(
        cpfResponsavelTecnico.value,
      );
    }
    if (guiaTipo.present) {
      map['guia_tipo'] = Variable<String>(guiaTipo.value);
    }
    if (guiaUfEmissao.present) {
      map['guia_uf_emissao'] = Variable<String>(guiaUfEmissao.value);
    }
    if (guiaSerie.present) {
      map['guia_serie'] = Variable<String>(guiaSerie.value);
    }
    if (guiaNumero.present) {
      map['guia_numero'] = Variable<String>(guiaNumero.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeInformacaoAgropecuariosCompanion(')
          ..write('id: $id, ')
          ..write('idNfeCabecalho: $idNfeCabecalho, ')
          ..write('numeroReceituario: $numeroReceituario, ')
          ..write('cpfResponsavelTecnico: $cpfResponsavelTecnico, ')
          ..write('guiaTipo: $guiaTipo, ')
          ..write('guiaUfEmissao: $guiaUfEmissao, ')
          ..write('guiaSerie: $guiaSerie, ')
          ..write('guiaNumero: $guiaNumero')
          ..write(')'))
        .toString();
  }
}

class $ProdutoGruposTable extends ProdutoGrupos
    with TableInfo<$ProdutoGruposTable, ProdutoGrupo> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $ProdutoGruposTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
    'id',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _nomeMeta = const VerificationMeta('nome');
  @override
  late final GeneratedColumn<String> nome = GeneratedColumn<String>(
    'nome',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 100,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _descricaoMeta = const VerificationMeta(
    'descricao',
  );
  @override
  late final GeneratedColumn<String> descricao = GeneratedColumn<String>(
    'descricao',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 250,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  @override
  List<GeneratedColumn> get $columns => [id, nome, descricao];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'produto_grupo';
  @override
  VerificationContext validateIntegrity(
    Insertable<ProdutoGrupo> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('nome')) {
      context.handle(
        _nomeMeta,
        nome.isAcceptableOrUnknown(data['nome']!, _nomeMeta),
      );
    }
    if (data.containsKey('descricao')) {
      context.handle(
        _descricaoMeta,
        descricao.isAcceptableOrUnknown(data['descricao']!, _descricaoMeta),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  ProdutoGrupo map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return ProdutoGrupo(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id'],
      ),
      nome: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}nome'],
      ),
      descricao: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}descricao'],
      ),
    );
  }

  @override
  $ProdutoGruposTable createAlias(String alias) {
    return $ProdutoGruposTable(attachedDatabase, alias);
  }
}

class ProdutoGrupo extends DataClass implements Insertable<ProdutoGrupo> {
  final int? id;
  final String? nome;
  final String? descricao;
  const ProdutoGrupo({this.id, this.nome, this.descricao});
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || nome != null) {
      map['nome'] = Variable<String>(nome);
    }
    if (!nullToAbsent || descricao != null) {
      map['descricao'] = Variable<String>(descricao);
    }
    return map;
  }

  factory ProdutoGrupo.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return ProdutoGrupo(
      id: serializer.fromJson<int?>(json['id']),
      nome: serializer.fromJson<String?>(json['nome']),
      descricao: serializer.fromJson<String?>(json['descricao']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'nome': serializer.toJson<String?>(nome),
      'descricao': serializer.toJson<String?>(descricao),
    };
  }

  ProdutoGrupo copyWith({
    Value<int?> id = const Value.absent(),
    Value<String?> nome = const Value.absent(),
    Value<String?> descricao = const Value.absent(),
  }) => ProdutoGrupo(
    id: id.present ? id.value : this.id,
    nome: nome.present ? nome.value : this.nome,
    descricao: descricao.present ? descricao.value : this.descricao,
  );
  ProdutoGrupo copyWithCompanion(ProdutoGruposCompanion data) {
    return ProdutoGrupo(
      id: data.id.present ? data.id.value : this.id,
      nome: data.nome.present ? data.nome.value : this.nome,
      descricao: data.descricao.present ? data.descricao.value : this.descricao,
    );
  }

  @override
  String toString() {
    return (StringBuffer('ProdutoGrupo(')
          ..write('id: $id, ')
          ..write('nome: $nome, ')
          ..write('descricao: $descricao')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(id, nome, descricao);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is ProdutoGrupo &&
          other.id == this.id &&
          other.nome == this.nome &&
          other.descricao == this.descricao);
}

class ProdutoGruposCompanion extends UpdateCompanion<ProdutoGrupo> {
  final Value<int?> id;
  final Value<String?> nome;
  final Value<String?> descricao;
  const ProdutoGruposCompanion({
    this.id = const Value.absent(),
    this.nome = const Value.absent(),
    this.descricao = const Value.absent(),
  });
  ProdutoGruposCompanion.insert({
    this.id = const Value.absent(),
    this.nome = const Value.absent(),
    this.descricao = const Value.absent(),
  });
  static Insertable<ProdutoGrupo> custom({
    Expression<int>? id,
    Expression<String>? nome,
    Expression<String>? descricao,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (nome != null) 'nome': nome,
      if (descricao != null) 'descricao': descricao,
    });
  }

  ProdutoGruposCompanion copyWith({
    Value<int?>? id,
    Value<String?>? nome,
    Value<String?>? descricao,
  }) {
    return ProdutoGruposCompanion(
      id: id ?? this.id,
      nome: nome ?? this.nome,
      descricao: descricao ?? this.descricao,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (nome.present) {
      map['nome'] = Variable<String>(nome.value);
    }
    if (descricao.present) {
      map['descricao'] = Variable<String>(descricao.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('ProdutoGruposCompanion(')
          ..write('id: $id, ')
          ..write('nome: $nome, ')
          ..write('descricao: $descricao')
          ..write(')'))
        .toString();
  }
}

class $ProdutoSubgruposTable extends ProdutoSubgrupos
    with TableInfo<$ProdutoSubgruposTable, ProdutoSubgrupo> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $ProdutoSubgruposTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
    'id',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idProdutoGrupoMeta = const VerificationMeta(
    'idProdutoGrupo',
  );
  @override
  late final GeneratedColumn<int> idProdutoGrupo = GeneratedColumn<int>(
    'id_produto_grupo',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _nomeMeta = const VerificationMeta('nome');
  @override
  late final GeneratedColumn<String> nome = GeneratedColumn<String>(
    'nome',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 100,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _descricaoMeta = const VerificationMeta(
    'descricao',
  );
  @override
  late final GeneratedColumn<String> descricao = GeneratedColumn<String>(
    'descricao',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 250,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  @override
  List<GeneratedColumn> get $columns => [id, idProdutoGrupo, nome, descricao];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'produto_subgrupo';
  @override
  VerificationContext validateIntegrity(
    Insertable<ProdutoSubgrupo> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('id_produto_grupo')) {
      context.handle(
        _idProdutoGrupoMeta,
        idProdutoGrupo.isAcceptableOrUnknown(
          data['id_produto_grupo']!,
          _idProdutoGrupoMeta,
        ),
      );
    }
    if (data.containsKey('nome')) {
      context.handle(
        _nomeMeta,
        nome.isAcceptableOrUnknown(data['nome']!, _nomeMeta),
      );
    }
    if (data.containsKey('descricao')) {
      context.handle(
        _descricaoMeta,
        descricao.isAcceptableOrUnknown(data['descricao']!, _descricaoMeta),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  ProdutoSubgrupo map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return ProdutoSubgrupo(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id'],
      ),
      idProdutoGrupo: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_produto_grupo'],
      ),
      nome: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}nome'],
      ),
      descricao: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}descricao'],
      ),
    );
  }

  @override
  $ProdutoSubgruposTable createAlias(String alias) {
    return $ProdutoSubgruposTable(attachedDatabase, alias);
  }
}

class ProdutoSubgrupo extends DataClass implements Insertable<ProdutoSubgrupo> {
  final int? id;
  final int? idProdutoGrupo;
  final String? nome;
  final String? descricao;
  const ProdutoSubgrupo({
    this.id,
    this.idProdutoGrupo,
    this.nome,
    this.descricao,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || idProdutoGrupo != null) {
      map['id_produto_grupo'] = Variable<int>(idProdutoGrupo);
    }
    if (!nullToAbsent || nome != null) {
      map['nome'] = Variable<String>(nome);
    }
    if (!nullToAbsent || descricao != null) {
      map['descricao'] = Variable<String>(descricao);
    }
    return map;
  }

  factory ProdutoSubgrupo.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return ProdutoSubgrupo(
      id: serializer.fromJson<int?>(json['id']),
      idProdutoGrupo: serializer.fromJson<int?>(json['idProdutoGrupo']),
      nome: serializer.fromJson<String?>(json['nome']),
      descricao: serializer.fromJson<String?>(json['descricao']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idProdutoGrupo': serializer.toJson<int?>(idProdutoGrupo),
      'nome': serializer.toJson<String?>(nome),
      'descricao': serializer.toJson<String?>(descricao),
    };
  }

  ProdutoSubgrupo copyWith({
    Value<int?> id = const Value.absent(),
    Value<int?> idProdutoGrupo = const Value.absent(),
    Value<String?> nome = const Value.absent(),
    Value<String?> descricao = const Value.absent(),
  }) => ProdutoSubgrupo(
    id: id.present ? id.value : this.id,
    idProdutoGrupo:
        idProdutoGrupo.present ? idProdutoGrupo.value : this.idProdutoGrupo,
    nome: nome.present ? nome.value : this.nome,
    descricao: descricao.present ? descricao.value : this.descricao,
  );
  ProdutoSubgrupo copyWithCompanion(ProdutoSubgruposCompanion data) {
    return ProdutoSubgrupo(
      id: data.id.present ? data.id.value : this.id,
      idProdutoGrupo:
          data.idProdutoGrupo.present
              ? data.idProdutoGrupo.value
              : this.idProdutoGrupo,
      nome: data.nome.present ? data.nome.value : this.nome,
      descricao: data.descricao.present ? data.descricao.value : this.descricao,
    );
  }

  @override
  String toString() {
    return (StringBuffer('ProdutoSubgrupo(')
          ..write('id: $id, ')
          ..write('idProdutoGrupo: $idProdutoGrupo, ')
          ..write('nome: $nome, ')
          ..write('descricao: $descricao')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(id, idProdutoGrupo, nome, descricao);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is ProdutoSubgrupo &&
          other.id == this.id &&
          other.idProdutoGrupo == this.idProdutoGrupo &&
          other.nome == this.nome &&
          other.descricao == this.descricao);
}

class ProdutoSubgruposCompanion extends UpdateCompanion<ProdutoSubgrupo> {
  final Value<int?> id;
  final Value<int?> idProdutoGrupo;
  final Value<String?> nome;
  final Value<String?> descricao;
  const ProdutoSubgruposCompanion({
    this.id = const Value.absent(),
    this.idProdutoGrupo = const Value.absent(),
    this.nome = const Value.absent(),
    this.descricao = const Value.absent(),
  });
  ProdutoSubgruposCompanion.insert({
    this.id = const Value.absent(),
    this.idProdutoGrupo = const Value.absent(),
    this.nome = const Value.absent(),
    this.descricao = const Value.absent(),
  });
  static Insertable<ProdutoSubgrupo> custom({
    Expression<int>? id,
    Expression<int>? idProdutoGrupo,
    Expression<String>? nome,
    Expression<String>? descricao,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (idProdutoGrupo != null) 'id_produto_grupo': idProdutoGrupo,
      if (nome != null) 'nome': nome,
      if (descricao != null) 'descricao': descricao,
    });
  }

  ProdutoSubgruposCompanion copyWith({
    Value<int?>? id,
    Value<int?>? idProdutoGrupo,
    Value<String?>? nome,
    Value<String?>? descricao,
  }) {
    return ProdutoSubgruposCompanion(
      id: id ?? this.id,
      idProdutoGrupo: idProdutoGrupo ?? this.idProdutoGrupo,
      nome: nome ?? this.nome,
      descricao: descricao ?? this.descricao,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (idProdutoGrupo.present) {
      map['id_produto_grupo'] = Variable<int>(idProdutoGrupo.value);
    }
    if (nome.present) {
      map['nome'] = Variable<String>(nome.value);
    }
    if (descricao.present) {
      map['descricao'] = Variable<String>(descricao.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('ProdutoSubgruposCompanion(')
          ..write('id: $id, ')
          ..write('idProdutoGrupo: $idProdutoGrupo, ')
          ..write('nome: $nome, ')
          ..write('descricao: $descricao')
          ..write(')'))
        .toString();
  }
}

class $ProdutoMarcasTable extends ProdutoMarcas
    with TableInfo<$ProdutoMarcasTable, ProdutoMarca> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $ProdutoMarcasTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
    'id',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _nomeMeta = const VerificationMeta('nome');
  @override
  late final GeneratedColumn<String> nome = GeneratedColumn<String>(
    'nome',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 100,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _descricaoMeta = const VerificationMeta(
    'descricao',
  );
  @override
  late final GeneratedColumn<String> descricao = GeneratedColumn<String>(
    'descricao',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 250,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  @override
  List<GeneratedColumn> get $columns => [id, nome, descricao];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'produto_marca';
  @override
  VerificationContext validateIntegrity(
    Insertable<ProdutoMarca> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('nome')) {
      context.handle(
        _nomeMeta,
        nome.isAcceptableOrUnknown(data['nome']!, _nomeMeta),
      );
    }
    if (data.containsKey('descricao')) {
      context.handle(
        _descricaoMeta,
        descricao.isAcceptableOrUnknown(data['descricao']!, _descricaoMeta),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  ProdutoMarca map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return ProdutoMarca(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id'],
      ),
      nome: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}nome'],
      ),
      descricao: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}descricao'],
      ),
    );
  }

  @override
  $ProdutoMarcasTable createAlias(String alias) {
    return $ProdutoMarcasTable(attachedDatabase, alias);
  }
}

class ProdutoMarca extends DataClass implements Insertable<ProdutoMarca> {
  final int? id;
  final String? nome;
  final String? descricao;
  const ProdutoMarca({this.id, this.nome, this.descricao});
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || nome != null) {
      map['nome'] = Variable<String>(nome);
    }
    if (!nullToAbsent || descricao != null) {
      map['descricao'] = Variable<String>(descricao);
    }
    return map;
  }

  factory ProdutoMarca.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return ProdutoMarca(
      id: serializer.fromJson<int?>(json['id']),
      nome: serializer.fromJson<String?>(json['nome']),
      descricao: serializer.fromJson<String?>(json['descricao']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'nome': serializer.toJson<String?>(nome),
      'descricao': serializer.toJson<String?>(descricao),
    };
  }

  ProdutoMarca copyWith({
    Value<int?> id = const Value.absent(),
    Value<String?> nome = const Value.absent(),
    Value<String?> descricao = const Value.absent(),
  }) => ProdutoMarca(
    id: id.present ? id.value : this.id,
    nome: nome.present ? nome.value : this.nome,
    descricao: descricao.present ? descricao.value : this.descricao,
  );
  ProdutoMarca copyWithCompanion(ProdutoMarcasCompanion data) {
    return ProdutoMarca(
      id: data.id.present ? data.id.value : this.id,
      nome: data.nome.present ? data.nome.value : this.nome,
      descricao: data.descricao.present ? data.descricao.value : this.descricao,
    );
  }

  @override
  String toString() {
    return (StringBuffer('ProdutoMarca(')
          ..write('id: $id, ')
          ..write('nome: $nome, ')
          ..write('descricao: $descricao')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(id, nome, descricao);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is ProdutoMarca &&
          other.id == this.id &&
          other.nome == this.nome &&
          other.descricao == this.descricao);
}

class ProdutoMarcasCompanion extends UpdateCompanion<ProdutoMarca> {
  final Value<int?> id;
  final Value<String?> nome;
  final Value<String?> descricao;
  const ProdutoMarcasCompanion({
    this.id = const Value.absent(),
    this.nome = const Value.absent(),
    this.descricao = const Value.absent(),
  });
  ProdutoMarcasCompanion.insert({
    this.id = const Value.absent(),
    this.nome = const Value.absent(),
    this.descricao = const Value.absent(),
  });
  static Insertable<ProdutoMarca> custom({
    Expression<int>? id,
    Expression<String>? nome,
    Expression<String>? descricao,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (nome != null) 'nome': nome,
      if (descricao != null) 'descricao': descricao,
    });
  }

  ProdutoMarcasCompanion copyWith({
    Value<int?>? id,
    Value<String?>? nome,
    Value<String?>? descricao,
  }) {
    return ProdutoMarcasCompanion(
      id: id ?? this.id,
      nome: nome ?? this.nome,
      descricao: descricao ?? this.descricao,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (nome.present) {
      map['nome'] = Variable<String>(nome.value);
    }
    if (descricao.present) {
      map['descricao'] = Variable<String>(descricao.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('ProdutoMarcasCompanion(')
          ..write('id: $id, ')
          ..write('nome: $nome, ')
          ..write('descricao: $descricao')
          ..write(')'))
        .toString();
  }
}

class $ProdutoUnidadesTable extends ProdutoUnidades
    with TableInfo<$ProdutoUnidadesTable, ProdutoUnidade> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $ProdutoUnidadesTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
    'id',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _siglaMeta = const VerificationMeta('sigla');
  @override
  late final GeneratedColumn<String> sigla = GeneratedColumn<String>(
    'sigla',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 10,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _descricaoMeta = const VerificationMeta(
    'descricao',
  );
  @override
  late final GeneratedColumn<String> descricao = GeneratedColumn<String>(
    'descricao',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 250,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _podeFracionarMeta = const VerificationMeta(
    'podeFracionar',
  );
  @override
  late final GeneratedColumn<String> podeFracionar = GeneratedColumn<String>(
    'pode_fracionar',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 1,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  @override
  List<GeneratedColumn> get $columns => [id, sigla, descricao, podeFracionar];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'produto_unidade';
  @override
  VerificationContext validateIntegrity(
    Insertable<ProdutoUnidade> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('sigla')) {
      context.handle(
        _siglaMeta,
        sigla.isAcceptableOrUnknown(data['sigla']!, _siglaMeta),
      );
    }
    if (data.containsKey('descricao')) {
      context.handle(
        _descricaoMeta,
        descricao.isAcceptableOrUnknown(data['descricao']!, _descricaoMeta),
      );
    }
    if (data.containsKey('pode_fracionar')) {
      context.handle(
        _podeFracionarMeta,
        podeFracionar.isAcceptableOrUnknown(
          data['pode_fracionar']!,
          _podeFracionarMeta,
        ),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  ProdutoUnidade map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return ProdutoUnidade(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id'],
      ),
      sigla: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}sigla'],
      ),
      descricao: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}descricao'],
      ),
      podeFracionar: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}pode_fracionar'],
      ),
    );
  }

  @override
  $ProdutoUnidadesTable createAlias(String alias) {
    return $ProdutoUnidadesTable(attachedDatabase, alias);
  }
}

class ProdutoUnidade extends DataClass implements Insertable<ProdutoUnidade> {
  final int? id;
  final String? sigla;
  final String? descricao;
  final String? podeFracionar;
  const ProdutoUnidade({
    this.id,
    this.sigla,
    this.descricao,
    this.podeFracionar,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || sigla != null) {
      map['sigla'] = Variable<String>(sigla);
    }
    if (!nullToAbsent || descricao != null) {
      map['descricao'] = Variable<String>(descricao);
    }
    if (!nullToAbsent || podeFracionar != null) {
      map['pode_fracionar'] = Variable<String>(podeFracionar);
    }
    return map;
  }

  factory ProdutoUnidade.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return ProdutoUnidade(
      id: serializer.fromJson<int?>(json['id']),
      sigla: serializer.fromJson<String?>(json['sigla']),
      descricao: serializer.fromJson<String?>(json['descricao']),
      podeFracionar: serializer.fromJson<String?>(json['podeFracionar']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'sigla': serializer.toJson<String?>(sigla),
      'descricao': serializer.toJson<String?>(descricao),
      'podeFracionar': serializer.toJson<String?>(podeFracionar),
    };
  }

  ProdutoUnidade copyWith({
    Value<int?> id = const Value.absent(),
    Value<String?> sigla = const Value.absent(),
    Value<String?> descricao = const Value.absent(),
    Value<String?> podeFracionar = const Value.absent(),
  }) => ProdutoUnidade(
    id: id.present ? id.value : this.id,
    sigla: sigla.present ? sigla.value : this.sigla,
    descricao: descricao.present ? descricao.value : this.descricao,
    podeFracionar:
        podeFracionar.present ? podeFracionar.value : this.podeFracionar,
  );
  ProdutoUnidade copyWithCompanion(ProdutoUnidadesCompanion data) {
    return ProdutoUnidade(
      id: data.id.present ? data.id.value : this.id,
      sigla: data.sigla.present ? data.sigla.value : this.sigla,
      descricao: data.descricao.present ? data.descricao.value : this.descricao,
      podeFracionar:
          data.podeFracionar.present
              ? data.podeFracionar.value
              : this.podeFracionar,
    );
  }

  @override
  String toString() {
    return (StringBuffer('ProdutoUnidade(')
          ..write('id: $id, ')
          ..write('sigla: $sigla, ')
          ..write('descricao: $descricao, ')
          ..write('podeFracionar: $podeFracionar')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(id, sigla, descricao, podeFracionar);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is ProdutoUnidade &&
          other.id == this.id &&
          other.sigla == this.sigla &&
          other.descricao == this.descricao &&
          other.podeFracionar == this.podeFracionar);
}

class ProdutoUnidadesCompanion extends UpdateCompanion<ProdutoUnidade> {
  final Value<int?> id;
  final Value<String?> sigla;
  final Value<String?> descricao;
  final Value<String?> podeFracionar;
  const ProdutoUnidadesCompanion({
    this.id = const Value.absent(),
    this.sigla = const Value.absent(),
    this.descricao = const Value.absent(),
    this.podeFracionar = const Value.absent(),
  });
  ProdutoUnidadesCompanion.insert({
    this.id = const Value.absent(),
    this.sigla = const Value.absent(),
    this.descricao = const Value.absent(),
    this.podeFracionar = const Value.absent(),
  });
  static Insertable<ProdutoUnidade> custom({
    Expression<int>? id,
    Expression<String>? sigla,
    Expression<String>? descricao,
    Expression<String>? podeFracionar,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (sigla != null) 'sigla': sigla,
      if (descricao != null) 'descricao': descricao,
      if (podeFracionar != null) 'pode_fracionar': podeFracionar,
    });
  }

  ProdutoUnidadesCompanion copyWith({
    Value<int?>? id,
    Value<String?>? sigla,
    Value<String?>? descricao,
    Value<String?>? podeFracionar,
  }) {
    return ProdutoUnidadesCompanion(
      id: id ?? this.id,
      sigla: sigla ?? this.sigla,
      descricao: descricao ?? this.descricao,
      podeFracionar: podeFracionar ?? this.podeFracionar,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (sigla.present) {
      map['sigla'] = Variable<String>(sigla.value);
    }
    if (descricao.present) {
      map['descricao'] = Variable<String>(descricao.value);
    }
    if (podeFracionar.present) {
      map['pode_fracionar'] = Variable<String>(podeFracionar.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('ProdutoUnidadesCompanion(')
          ..write('id: $id, ')
          ..write('sigla: $sigla, ')
          ..write('descricao: $descricao, ')
          ..write('podeFracionar: $podeFracionar')
          ..write(')'))
        .toString();
  }
}

class $NfeCabecalhosTable extends NfeCabecalhos
    with TableInfo<$NfeCabecalhosTable, NfeCabecalho> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeCabecalhosTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
    'id',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idVendaCabecalhoMeta = const VerificationMeta(
    'idVendaCabecalho',
  );
  @override
  late final GeneratedColumn<int> idVendaCabecalho = GeneratedColumn<int>(
    'id_venda_cabecalho',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idTributOperacaoFiscalMeta =
      const VerificationMeta('idTributOperacaoFiscal');
  @override
  late final GeneratedColumn<int> idTributOperacaoFiscal = GeneratedColumn<int>(
    'id_tribut_operacao_fiscal',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idClienteMeta = const VerificationMeta(
    'idCliente',
  );
  @override
  late final GeneratedColumn<int> idCliente = GeneratedColumn<int>(
    'id_cliente',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idColaboradorMeta = const VerificationMeta(
    'idColaborador',
  );
  @override
  late final GeneratedColumn<int> idColaborador = GeneratedColumn<int>(
    'id_colaborador',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idFornecedorMeta = const VerificationMeta(
    'idFornecedor',
  );
  @override
  late final GeneratedColumn<int> idFornecedor = GeneratedColumn<int>(
    'id_fornecedor',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _ufEmitenteMeta = const VerificationMeta(
    'ufEmitente',
  );
  @override
  late final GeneratedColumn<String> ufEmitente = GeneratedColumn<String>(
    'uf_emitente',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 2,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _codigoNumericoMeta = const VerificationMeta(
    'codigoNumerico',
  );
  @override
  late final GeneratedColumn<String> codigoNumerico = GeneratedColumn<String>(
    'codigo_numerico',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 8,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _naturezaOperacaoMeta = const VerificationMeta(
    'naturezaOperacao',
  );
  @override
  late final GeneratedColumn<String> naturezaOperacao = GeneratedColumn<String>(
    'natureza_operacao',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 60,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _codigoModeloMeta = const VerificationMeta(
    'codigoModelo',
  );
  @override
  late final GeneratedColumn<String> codigoModelo = GeneratedColumn<String>(
    'codigo_modelo',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 2,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _serieMeta = const VerificationMeta('serie');
  @override
  late final GeneratedColumn<String> serie = GeneratedColumn<String>(
    'serie',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 3,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _numeroMeta = const VerificationMeta('numero');
  @override
  late final GeneratedColumn<String> numero = GeneratedColumn<String>(
    'numero',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 9,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _dataHoraEmissaoMeta = const VerificationMeta(
    'dataHoraEmissao',
  );
  @override
  late final GeneratedColumn<DateTime> dataHoraEmissao =
      GeneratedColumn<DateTime>(
        'data_hora_emissao',
        aliasedName,
        true,
        type: DriftSqlType.dateTime,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _dataHoraEntradaSaidaMeta =
      const VerificationMeta('dataHoraEntradaSaida');
  @override
  late final GeneratedColumn<DateTime> dataHoraEntradaSaida =
      GeneratedColumn<DateTime>(
        'data_hora_entrada_saida',
        aliasedName,
        true,
        type: DriftSqlType.dateTime,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _tipoOperacaoMeta = const VerificationMeta(
    'tipoOperacao',
  );
  @override
  late final GeneratedColumn<String> tipoOperacao = GeneratedColumn<String>(
    'tipo_operacao',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 1,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _localDestinoMeta = const VerificationMeta(
    'localDestino',
  );
  @override
  late final GeneratedColumn<String> localDestino = GeneratedColumn<String>(
    'local_destino',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 1,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _codigoMunicipioMeta = const VerificationMeta(
    'codigoMunicipio',
  );
  @override
  late final GeneratedColumn<int> codigoMunicipio = GeneratedColumn<int>(
    'codigo_municipio',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _formatoImpressaoDanfeMeta =
      const VerificationMeta('formatoImpressaoDanfe');
  @override
  late final GeneratedColumn<String> formatoImpressaoDanfe =
      GeneratedColumn<String>(
        'formato_impressao_danfe',
        aliasedName,
        true,
        additionalChecks: GeneratedColumn.checkTextLength(
          minTextLength: 0,
          maxTextLength: 1,
        ),
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _tipoEmissaoMeta = const VerificationMeta(
    'tipoEmissao',
  );
  @override
  late final GeneratedColumn<String> tipoEmissao = GeneratedColumn<String>(
    'tipo_emissao',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 1,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _chaveAcessoMeta = const VerificationMeta(
    'chaveAcesso',
  );
  @override
  late final GeneratedColumn<String> chaveAcesso = GeneratedColumn<String>(
    'chave_acesso',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 44,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _digitoChaveAcessoMeta = const VerificationMeta(
    'digitoChaveAcesso',
  );
  @override
  late final GeneratedColumn<String> digitoChaveAcesso =
      GeneratedColumn<String>(
        'digito_chave_acesso',
        aliasedName,
        true,
        additionalChecks: GeneratedColumn.checkTextLength(
          minTextLength: 0,
          maxTextLength: 1,
        ),
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _ambienteMeta = const VerificationMeta(
    'ambiente',
  );
  @override
  late final GeneratedColumn<String> ambiente = GeneratedColumn<String>(
    'ambiente',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 1,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _finalidadeEmissaoMeta = const VerificationMeta(
    'finalidadeEmissao',
  );
  @override
  late final GeneratedColumn<String> finalidadeEmissao =
      GeneratedColumn<String>(
        'finalidade_emissao',
        aliasedName,
        true,
        additionalChecks: GeneratedColumn.checkTextLength(
          minTextLength: 0,
          maxTextLength: 1,
        ),
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _consumidorOperacaoMeta =
      const VerificationMeta('consumidorOperacao');
  @override
  late final GeneratedColumn<String> consumidorOperacao =
      GeneratedColumn<String>(
        'consumidor_operacao',
        aliasedName,
        true,
        additionalChecks: GeneratedColumn.checkTextLength(
          minTextLength: 0,
          maxTextLength: 1,
        ),
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _consumidorPresencaMeta =
      const VerificationMeta('consumidorPresenca');
  @override
  late final GeneratedColumn<String> consumidorPresenca =
      GeneratedColumn<String>(
        'consumidor_presenca',
        aliasedName,
        true,
        additionalChecks: GeneratedColumn.checkTextLength(
          minTextLength: 0,
          maxTextLength: 1,
        ),
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _processoEmissaoMeta = const VerificationMeta(
    'processoEmissao',
  );
  @override
  late final GeneratedColumn<String> processoEmissao = GeneratedColumn<String>(
    'processo_emissao',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 1,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _versaoProcessoEmissaoMeta =
      const VerificationMeta('versaoProcessoEmissao');
  @override
  late final GeneratedColumn<String> versaoProcessoEmissao =
      GeneratedColumn<String>(
        'versao_processo_emissao',
        aliasedName,
        true,
        additionalChecks: GeneratedColumn.checkTextLength(
          minTextLength: 0,
          maxTextLength: 20,
        ),
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _dataEntradaContingenciaMeta =
      const VerificationMeta('dataEntradaContingencia');
  @override
  late final GeneratedColumn<DateTime> dataEntradaContingencia =
      GeneratedColumn<DateTime>(
        'data_entrada_contingencia',
        aliasedName,
        true,
        type: DriftSqlType.dateTime,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _justificativaContingenciaMeta =
      const VerificationMeta('justificativaContingencia');
  @override
  late final GeneratedColumn<String> justificativaContingencia =
      GeneratedColumn<String>(
        'justificativa_contingencia',
        aliasedName,
        true,
        additionalChecks: GeneratedColumn.checkTextLength(
          minTextLength: 0,
          maxTextLength: 255,
        ),
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _baseCalculoIcmsMeta = const VerificationMeta(
    'baseCalculoIcms',
  );
  @override
  late final GeneratedColumn<double> baseCalculoIcms = GeneratedColumn<double>(
    'base_calculo_icms',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _valorIcmsMeta = const VerificationMeta(
    'valorIcms',
  );
  @override
  late final GeneratedColumn<double> valorIcms = GeneratedColumn<double>(
    'valor_icms',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _valorIcmsDesoneradoMeta =
      const VerificationMeta('valorIcmsDesonerado');
  @override
  late final GeneratedColumn<double> valorIcmsDesonerado =
      GeneratedColumn<double>(
        'valor_icms_desonerado',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _totalIcmsFcpUfDestinoMeta =
      const VerificationMeta('totalIcmsFcpUfDestino');
  @override
  late final GeneratedColumn<double> totalIcmsFcpUfDestino =
      GeneratedColumn<double>(
        'total_icms_fcp_uf_destino',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _totalIcmsInterestadualUfDestinoMeta =
      const VerificationMeta('totalIcmsInterestadualUfDestino');
  @override
  late final GeneratedColumn<double> totalIcmsInterestadualUfDestino =
      GeneratedColumn<double>(
        'total_icms_interestadual_uf_destino',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _totalIcmsInterestadualUfRemetenteMeta =
      const VerificationMeta('totalIcmsInterestadualUfRemetente');
  @override
  late final GeneratedColumn<double> totalIcmsInterestadualUfRemetente =
      GeneratedColumn<double>(
        'total_icms_interestadual_uf_remetente',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _valorTotalFcpMeta = const VerificationMeta(
    'valorTotalFcp',
  );
  @override
  late final GeneratedColumn<double> valorTotalFcp = GeneratedColumn<double>(
    'valor_total_fcp',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _baseCalculoIcmsStMeta = const VerificationMeta(
    'baseCalculoIcmsSt',
  );
  @override
  late final GeneratedColumn<double> baseCalculoIcmsSt =
      GeneratedColumn<double>(
        'base_calculo_icms_st',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _valorIcmsStMeta = const VerificationMeta(
    'valorIcmsSt',
  );
  @override
  late final GeneratedColumn<double> valorIcmsSt = GeneratedColumn<double>(
    'valor_icms_st',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _valorTotalFcpStMeta = const VerificationMeta(
    'valorTotalFcpSt',
  );
  @override
  late final GeneratedColumn<double> valorTotalFcpSt = GeneratedColumn<double>(
    'valor_total_fcp_st',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _valorTotalFcpStRetidoMeta =
      const VerificationMeta('valorTotalFcpStRetido');
  @override
  late final GeneratedColumn<double> valorTotalFcpStRetido =
      GeneratedColumn<double>(
        'valor_total_fcp_st_retido',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _valorTotalProdutosMeta =
      const VerificationMeta('valorTotalProdutos');
  @override
  late final GeneratedColumn<double> valorTotalProdutos =
      GeneratedColumn<double>(
        'valor_total_produtos',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _valorFreteMeta = const VerificationMeta(
    'valorFrete',
  );
  @override
  late final GeneratedColumn<double> valorFrete = GeneratedColumn<double>(
    'valor_frete',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _valorSeguroMeta = const VerificationMeta(
    'valorSeguro',
  );
  @override
  late final GeneratedColumn<double> valorSeguro = GeneratedColumn<double>(
    'valor_seguro',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _valorDescontoMeta = const VerificationMeta(
    'valorDesconto',
  );
  @override
  late final GeneratedColumn<double> valorDesconto = GeneratedColumn<double>(
    'valor_desconto',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _valorImpostoImportacaoMeta =
      const VerificationMeta('valorImpostoImportacao');
  @override
  late final GeneratedColumn<double> valorImpostoImportacao =
      GeneratedColumn<double>(
        'valor_imposto_importacao',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _valorIpiMeta = const VerificationMeta(
    'valorIpi',
  );
  @override
  late final GeneratedColumn<double> valorIpi = GeneratedColumn<double>(
    'valor_ipi',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _valorIpiDevolvidoMeta = const VerificationMeta(
    'valorIpiDevolvido',
  );
  @override
  late final GeneratedColumn<double> valorIpiDevolvido =
      GeneratedColumn<double>(
        'valor_ipi_devolvido',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _valorPisMeta = const VerificationMeta(
    'valorPis',
  );
  @override
  late final GeneratedColumn<double> valorPis = GeneratedColumn<double>(
    'valor_pis',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _valorCofinsMeta = const VerificationMeta(
    'valorCofins',
  );
  @override
  late final GeneratedColumn<double> valorCofins = GeneratedColumn<double>(
    'valor_cofins',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _valorDespesasAcessoriasMeta =
      const VerificationMeta('valorDespesasAcessorias');
  @override
  late final GeneratedColumn<double> valorDespesasAcessorias =
      GeneratedColumn<double>(
        'valor_despesas_acessorias',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _valorTotalMeta = const VerificationMeta(
    'valorTotal',
  );
  @override
  late final GeneratedColumn<double> valorTotal = GeneratedColumn<double>(
    'valor_total',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _valorTotalTributosMeta =
      const VerificationMeta('valorTotalTributos');
  @override
  late final GeneratedColumn<double> valorTotalTributos =
      GeneratedColumn<double>(
        'valor_total_tributos',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _valorServicosMeta = const VerificationMeta(
    'valorServicos',
  );
  @override
  late final GeneratedColumn<double> valorServicos = GeneratedColumn<double>(
    'valor_servicos',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _baseCalculoIssqnMeta = const VerificationMeta(
    'baseCalculoIssqn',
  );
  @override
  late final GeneratedColumn<double> baseCalculoIssqn = GeneratedColumn<double>(
    'base_calculo_issqn',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _valorIssqnMeta = const VerificationMeta(
    'valorIssqn',
  );
  @override
  late final GeneratedColumn<double> valorIssqn = GeneratedColumn<double>(
    'valor_issqn',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _valorPisIssqnMeta = const VerificationMeta(
    'valorPisIssqn',
  );
  @override
  late final GeneratedColumn<double> valorPisIssqn = GeneratedColumn<double>(
    'valor_pis_issqn',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _valorCofinsIssqnMeta = const VerificationMeta(
    'valorCofinsIssqn',
  );
  @override
  late final GeneratedColumn<double> valorCofinsIssqn = GeneratedColumn<double>(
    'valor_cofins_issqn',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _dataPrestacaoServicoMeta =
      const VerificationMeta('dataPrestacaoServico');
  @override
  late final GeneratedColumn<DateTime> dataPrestacaoServico =
      GeneratedColumn<DateTime>(
        'data_prestacao_servico',
        aliasedName,
        true,
        type: DriftSqlType.dateTime,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _valorDeducaoIssqnMeta = const VerificationMeta(
    'valorDeducaoIssqn',
  );
  @override
  late final GeneratedColumn<double> valorDeducaoIssqn =
      GeneratedColumn<double>(
        'valor_deducao_issqn',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _outrasRetencoesIssqnMeta =
      const VerificationMeta('outrasRetencoesIssqn');
  @override
  late final GeneratedColumn<double> outrasRetencoesIssqn =
      GeneratedColumn<double>(
        'outras_retencoes_issqn',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _descontoIncondicionadoIssqnMeta =
      const VerificationMeta('descontoIncondicionadoIssqn');
  @override
  late final GeneratedColumn<double> descontoIncondicionadoIssqn =
      GeneratedColumn<double>(
        'desconto_incondicionado_issqn',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _descontoCondicionadoIssqnMeta =
      const VerificationMeta('descontoCondicionadoIssqn');
  @override
  late final GeneratedColumn<double> descontoCondicionadoIssqn =
      GeneratedColumn<double>(
        'desconto_condicionado_issqn',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _totalRetencaoIssqnMeta =
      const VerificationMeta('totalRetencaoIssqn');
  @override
  late final GeneratedColumn<double> totalRetencaoIssqn =
      GeneratedColumn<double>(
        'total_retencao_issqn',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _regimeEspecialTributacaoMeta =
      const VerificationMeta('regimeEspecialTributacao');
  @override
  late final GeneratedColumn<String> regimeEspecialTributacao =
      GeneratedColumn<String>(
        'regime_especial_tributacao',
        aliasedName,
        true,
        additionalChecks: GeneratedColumn.checkTextLength(
          minTextLength: 0,
          maxTextLength: 1,
        ),
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _valorRetidoPisMeta = const VerificationMeta(
    'valorRetidoPis',
  );
  @override
  late final GeneratedColumn<double> valorRetidoPis = GeneratedColumn<double>(
    'valor_retido_pis',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _valorRetidoCofinsMeta = const VerificationMeta(
    'valorRetidoCofins',
  );
  @override
  late final GeneratedColumn<double> valorRetidoCofins =
      GeneratedColumn<double>(
        'valor_retido_cofins',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _valorRetidoCsllMeta = const VerificationMeta(
    'valorRetidoCsll',
  );
  @override
  late final GeneratedColumn<double> valorRetidoCsll = GeneratedColumn<double>(
    'valor_retido_csll',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _baseCalculoIrrfMeta = const VerificationMeta(
    'baseCalculoIrrf',
  );
  @override
  late final GeneratedColumn<double> baseCalculoIrrf = GeneratedColumn<double>(
    'base_calculo_irrf',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _valorRetidoIrrfMeta = const VerificationMeta(
    'valorRetidoIrrf',
  );
  @override
  late final GeneratedColumn<double> valorRetidoIrrf = GeneratedColumn<double>(
    'valor_retido_irrf',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _baseCalculoPrevidenciaMeta =
      const VerificationMeta('baseCalculoPrevidencia');
  @override
  late final GeneratedColumn<double> baseCalculoPrevidencia =
      GeneratedColumn<double>(
        'base_calculo_previdencia',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _valorRetidoPrevidenciaMeta =
      const VerificationMeta('valorRetidoPrevidencia');
  @override
  late final GeneratedColumn<double> valorRetidoPrevidencia =
      GeneratedColumn<double>(
        'valor_retido_previdencia',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _informacoesAddFiscoMeta =
      const VerificationMeta('informacoesAddFisco');
  @override
  late final GeneratedColumn<String> informacoesAddFisco =
      GeneratedColumn<String>(
        'informacoes_add_fisco',
        aliasedName,
        true,
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _informacoesAddContribuinteMeta =
      const VerificationMeta('informacoesAddContribuinte');
  @override
  late final GeneratedColumn<String> informacoesAddContribuinte =
      GeneratedColumn<String>(
        'informacoes_add_contribuinte',
        aliasedName,
        true,
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _comexUfEmbarqueMeta = const VerificationMeta(
    'comexUfEmbarque',
  );
  @override
  late final GeneratedColumn<String> comexUfEmbarque = GeneratedColumn<String>(
    'comex_uf_embarque',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 2,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _comexLocalEmbarqueMeta =
      const VerificationMeta('comexLocalEmbarque');
  @override
  late final GeneratedColumn<String> comexLocalEmbarque =
      GeneratedColumn<String>(
        'comex_local_embarque',
        aliasedName,
        true,
        additionalChecks: GeneratedColumn.checkTextLength(
          minTextLength: 0,
          maxTextLength: 60,
        ),
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _comexLocalDespachoMeta =
      const VerificationMeta('comexLocalDespacho');
  @override
  late final GeneratedColumn<String> comexLocalDespacho =
      GeneratedColumn<String>(
        'comex_local_despacho',
        aliasedName,
        true,
        additionalChecks: GeneratedColumn.checkTextLength(
          minTextLength: 0,
          maxTextLength: 60,
        ),
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _compraNotaEmpenhoMeta = const VerificationMeta(
    'compraNotaEmpenho',
  );
  @override
  late final GeneratedColumn<String> compraNotaEmpenho =
      GeneratedColumn<String>(
        'compra_nota_empenho',
        aliasedName,
        true,
        additionalChecks: GeneratedColumn.checkTextLength(
          minTextLength: 0,
          maxTextLength: 22,
        ),
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _compraPedidoMeta = const VerificationMeta(
    'compraPedido',
  );
  @override
  late final GeneratedColumn<String> compraPedido = GeneratedColumn<String>(
    'compra_pedido',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 60,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _compraContratoMeta = const VerificationMeta(
    'compraContrato',
  );
  @override
  late final GeneratedColumn<String> compraContrato = GeneratedColumn<String>(
    'compra_contrato',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 60,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _qrcodeMeta = const VerificationMeta('qrcode');
  @override
  late final GeneratedColumn<String> qrcode = GeneratedColumn<String>(
    'qrcode',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _urlChaveMeta = const VerificationMeta(
    'urlChave',
  );
  @override
  late final GeneratedColumn<String> urlChave = GeneratedColumn<String>(
    'url_chave',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 85,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _statusNotaMeta = const VerificationMeta(
    'statusNota',
  );
  @override
  late final GeneratedColumn<String> statusNota = GeneratedColumn<String>(
    'status_nota',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 1,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _indicadorIntermediarioMeta =
      const VerificationMeta('indicadorIntermediario');
  @override
  late final GeneratedColumn<String> indicadorIntermediario =
      GeneratedColumn<String>(
        'indicador_intermediario',
        aliasedName,
        true,
        additionalChecks: GeneratedColumn.checkTextLength(
          minTextLength: 0,
          maxTextLength: 1,
        ),
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _intermediadorCnpjMeta = const VerificationMeta(
    'intermediadorCnpj',
  );
  @override
  late final GeneratedColumn<String> intermediadorCnpj =
      GeneratedColumn<String>(
        'intermediador_cnpj',
        aliasedName,
        true,
        additionalChecks: GeneratedColumn.checkTextLength(
          minTextLength: 0,
          maxTextLength: 14,
        ),
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _intermediadorIdCadastroMeta =
      const VerificationMeta('intermediadorIdCadastro');
  @override
  late final GeneratedColumn<String> intermediadorIdCadastro =
      GeneratedColumn<String>(
        'intermediador_id_cadastro',
        aliasedName,
        true,
        additionalChecks: GeneratedColumn.checkTextLength(
          minTextLength: 0,
          maxTextLength: 60,
        ),
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _codigoMunicipioFgIbsMeta =
      const VerificationMeta('codigoMunicipioFgIbs');
  @override
  late final GeneratedColumn<int> codigoMunicipioFgIbs = GeneratedColumn<int>(
    'codigo_municipio_fg_ibs',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _tipoNotaDebitoMeta = const VerificationMeta(
    'tipoNotaDebito',
  );
  @override
  late final GeneratedColumn<String> tipoNotaDebito = GeneratedColumn<String>(
    'tipo_nota_debito',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 1,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _tipoNotaCreditoMeta = const VerificationMeta(
    'tipoNotaCredito',
  );
  @override
  late final GeneratedColumn<String> tipoNotaCredito = GeneratedColumn<String>(
    'tipo_nota_credito',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 1,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _totalImpostoSeletivoMeta =
      const VerificationMeta('totalImpostoSeletivo');
  @override
  late final GeneratedColumn<double> totalImpostoSeletivo =
      GeneratedColumn<double>(
        'total_imposto_seletivo',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _totalBcIbsCbsMeta = const VerificationMeta(
    'totalBcIbsCbs',
  );
  @override
  late final GeneratedColumn<double> totalBcIbsCbs = GeneratedColumn<double>(
    'total_bc_ibs_cbs',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _ibsUfTotalDiferimentoMeta =
      const VerificationMeta('ibsUfTotalDiferimento');
  @override
  late final GeneratedColumn<double> ibsUfTotalDiferimento =
      GeneratedColumn<double>(
        'ibs_uf_total_diferimento',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _ibsUfTotalDevTributosMeta =
      const VerificationMeta('ibsUfTotalDevTributos');
  @override
  late final GeneratedColumn<double> ibsUfTotalDevTributos =
      GeneratedColumn<double>(
        'ibs_uf_total_dev_tributos',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _ibsUfValorTotalMeta = const VerificationMeta(
    'ibsUfValorTotal',
  );
  @override
  late final GeneratedColumn<double> ibsUfValorTotal = GeneratedColumn<double>(
    'ibs_uf_valor_total',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _ibsMunTotalDiferimentoMeta =
      const VerificationMeta('ibsMunTotalDiferimento');
  @override
  late final GeneratedColumn<double> ibsMunTotalDiferimento =
      GeneratedColumn<double>(
        'ibs_mun_total_diferimento',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _ibsMunTotalDevTributosMeta =
      const VerificationMeta('ibsMunTotalDevTributos');
  @override
  late final GeneratedColumn<double> ibsMunTotalDevTributos =
      GeneratedColumn<double>(
        'ibs_mun_total_dev_tributos',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _ibsMunValorTotalMeta = const VerificationMeta(
    'ibsMunValorTotal',
  );
  @override
  late final GeneratedColumn<double> ibsMunValorTotal = GeneratedColumn<double>(
    'ibs_mun_valor_total',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _cbsTotalDiferimentoMeta =
      const VerificationMeta('cbsTotalDiferimento');
  @override
  late final GeneratedColumn<double> cbsTotalDiferimento =
      GeneratedColumn<double>(
        'cbs_total_diferimento',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _cbsTotalDevTributosMeta =
      const VerificationMeta('cbsTotalDevTributos');
  @override
  late final GeneratedColumn<double> cbsTotalDevTributos =
      GeneratedColumn<double>(
        'cbs_total_dev_tributos',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _cbsValorTotalMeta = const VerificationMeta(
    'cbsValorTotal',
  );
  @override
  late final GeneratedColumn<double> cbsValorTotal = GeneratedColumn<double>(
    'cbs_valor_total',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _cbsTotalCreditoPresumidoMeta =
      const VerificationMeta('cbsTotalCreditoPresumido');
  @override
  late final GeneratedColumn<double> cbsTotalCreditoPresumido =
      GeneratedColumn<double>(
        'cbs_total_credito_presumido',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _cbsTotCrePreSuspensivoMeta =
      const VerificationMeta('cbsTotCrePreSuspensivo');
  @override
  late final GeneratedColumn<double> cbsTotCrePreSuspensivo =
      GeneratedColumn<double>(
        'cbs_tot_cre_pre_suspensivo',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _monoIbsTotalMeta = const VerificationMeta(
    'monoIbsTotal',
  );
  @override
  late final GeneratedColumn<double> monoIbsTotal = GeneratedColumn<double>(
    'mono_ibs_total',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _monoCbsTotalMeta = const VerificationMeta(
    'monoCbsTotal',
  );
  @override
  late final GeneratedColumn<double> monoCbsTotal = GeneratedColumn<double>(
    'mono_cbs_total',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _monoIbsTotalRetencaoMeta =
      const VerificationMeta('monoIbsTotalRetencao');
  @override
  late final GeneratedColumn<double> monoIbsTotalRetencao =
      GeneratedColumn<double>(
        'mono_ibs_total_retencao',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _monoCbsTotalRetencaoMeta =
      const VerificationMeta('monoCbsTotalRetencao');
  @override
  late final GeneratedColumn<double> monoCbsTotalRetencao =
      GeneratedColumn<double>(
        'mono_cbs_total_retencao',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _monoIbsRetidoMeta = const VerificationMeta(
    'monoIbsRetido',
  );
  @override
  late final GeneratedColumn<double> monoIbsRetido = GeneratedColumn<double>(
    'mono_ibs_retido',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _monoCbsRetidoMeta = const VerificationMeta(
    'monoCbsRetido',
  );
  @override
  late final GeneratedColumn<double> monoCbsRetido = GeneratedColumn<double>(
    'mono_cbs_retido',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _valorTotalNfeMeta = const VerificationMeta(
    'valorTotalNfe',
  );
  @override
  late final GeneratedColumn<double> valorTotalNfe = GeneratedColumn<double>(
    'valor_total_nfe',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _totalQtdeTributadaMonoMeta =
      const VerificationMeta('totalQtdeTributadaMono');
  @override
  late final GeneratedColumn<double> totalQtdeTributadaMono =
      GeneratedColumn<double>(
        'total_qtde_tributada_mono',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _totalIcmsMonoMeta = const VerificationMeta(
    'totalIcmsMono',
  );
  @override
  late final GeneratedColumn<double> totalIcmsMono = GeneratedColumn<double>(
    'total_icms_mono',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _totalQuantidadeMonoRetencaoMeta =
      const VerificationMeta('totalQuantidadeMonoRetencao');
  @override
  late final GeneratedColumn<double> totalQuantidadeMonoRetencao =
      GeneratedColumn<double>(
        'total_quantidade_mono_retencao',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _totalIcmsMonoRetencaoMeta =
      const VerificationMeta('totalIcmsMonoRetencao');
  @override
  late final GeneratedColumn<double> totalIcmsMonoRetencao =
      GeneratedColumn<double>(
        'total_icms_mono_retencao',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _totalQuantidadeMonoRetidaMeta =
      const VerificationMeta('totalQuantidadeMonoRetida');
  @override
  late final GeneratedColumn<double> totalQuantidadeMonoRetida =
      GeneratedColumn<double>(
        'total_quantidade_mono_retida',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _totalIcmsMonoRetidoMeta =
      const VerificationMeta('totalIcmsMonoRetido');
  @override
  late final GeneratedColumn<double> totalIcmsMonoRetido =
      GeneratedColumn<double>(
        'total_icms_mono_retido',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _ibsValorTotalMeta = const VerificationMeta(
    'ibsValorTotal',
  );
  @override
  late final GeneratedColumn<double> ibsValorTotal = GeneratedColumn<double>(
    'ibs_valor_total',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _totalCreditoPresumidoMeta =
      const VerificationMeta('totalCreditoPresumido');
  @override
  late final GeneratedColumn<double> totalCreditoPresumido =
      GeneratedColumn<double>(
        'total_credito_presumido',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _totalCredPresSuspensivoMeta =
      const VerificationMeta('totalCredPresSuspensivo');
  @override
  late final GeneratedColumn<double> totalCredPresSuspensivo =
      GeneratedColumn<double>(
        'total_cred_pres_suspensivo',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    idVendaCabecalho,
    idTributOperacaoFiscal,
    idCliente,
    idColaborador,
    idFornecedor,
    ufEmitente,
    codigoNumerico,
    naturezaOperacao,
    codigoModelo,
    serie,
    numero,
    dataHoraEmissao,
    dataHoraEntradaSaida,
    tipoOperacao,
    localDestino,
    codigoMunicipio,
    formatoImpressaoDanfe,
    tipoEmissao,
    chaveAcesso,
    digitoChaveAcesso,
    ambiente,
    finalidadeEmissao,
    consumidorOperacao,
    consumidorPresenca,
    processoEmissao,
    versaoProcessoEmissao,
    dataEntradaContingencia,
    justificativaContingencia,
    baseCalculoIcms,
    valorIcms,
    valorIcmsDesonerado,
    totalIcmsFcpUfDestino,
    totalIcmsInterestadualUfDestino,
    totalIcmsInterestadualUfRemetente,
    valorTotalFcp,
    baseCalculoIcmsSt,
    valorIcmsSt,
    valorTotalFcpSt,
    valorTotalFcpStRetido,
    valorTotalProdutos,
    valorFrete,
    valorSeguro,
    valorDesconto,
    valorImpostoImportacao,
    valorIpi,
    valorIpiDevolvido,
    valorPis,
    valorCofins,
    valorDespesasAcessorias,
    valorTotal,
    valorTotalTributos,
    valorServicos,
    baseCalculoIssqn,
    valorIssqn,
    valorPisIssqn,
    valorCofinsIssqn,
    dataPrestacaoServico,
    valorDeducaoIssqn,
    outrasRetencoesIssqn,
    descontoIncondicionadoIssqn,
    descontoCondicionadoIssqn,
    totalRetencaoIssqn,
    regimeEspecialTributacao,
    valorRetidoPis,
    valorRetidoCofins,
    valorRetidoCsll,
    baseCalculoIrrf,
    valorRetidoIrrf,
    baseCalculoPrevidencia,
    valorRetidoPrevidencia,
    informacoesAddFisco,
    informacoesAddContribuinte,
    comexUfEmbarque,
    comexLocalEmbarque,
    comexLocalDespacho,
    compraNotaEmpenho,
    compraPedido,
    compraContrato,
    qrcode,
    urlChave,
    statusNota,
    indicadorIntermediario,
    intermediadorCnpj,
    intermediadorIdCadastro,
    codigoMunicipioFgIbs,
    tipoNotaDebito,
    tipoNotaCredito,
    totalImpostoSeletivo,
    totalBcIbsCbs,
    ibsUfTotalDiferimento,
    ibsUfTotalDevTributos,
    ibsUfValorTotal,
    ibsMunTotalDiferimento,
    ibsMunTotalDevTributos,
    ibsMunValorTotal,
    cbsTotalDiferimento,
    cbsTotalDevTributos,
    cbsValorTotal,
    cbsTotalCreditoPresumido,
    cbsTotCrePreSuspensivo,
    monoIbsTotal,
    monoCbsTotal,
    monoIbsTotalRetencao,
    monoCbsTotalRetencao,
    monoIbsRetido,
    monoCbsRetido,
    valorTotalNfe,
    totalQtdeTributadaMono,
    totalIcmsMono,
    totalQuantidadeMonoRetencao,
    totalIcmsMonoRetencao,
    totalQuantidadeMonoRetida,
    totalIcmsMonoRetido,
    ibsValorTotal,
    totalCreditoPresumido,
    totalCredPresSuspensivo,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'nfe_cabecalho';
  @override
  VerificationContext validateIntegrity(
    Insertable<NfeCabecalho> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('id_venda_cabecalho')) {
      context.handle(
        _idVendaCabecalhoMeta,
        idVendaCabecalho.isAcceptableOrUnknown(
          data['id_venda_cabecalho']!,
          _idVendaCabecalhoMeta,
        ),
      );
    }
    if (data.containsKey('id_tribut_operacao_fiscal')) {
      context.handle(
        _idTributOperacaoFiscalMeta,
        idTributOperacaoFiscal.isAcceptableOrUnknown(
          data['id_tribut_operacao_fiscal']!,
          _idTributOperacaoFiscalMeta,
        ),
      );
    }
    if (data.containsKey('id_cliente')) {
      context.handle(
        _idClienteMeta,
        idCliente.isAcceptableOrUnknown(data['id_cliente']!, _idClienteMeta),
      );
    }
    if (data.containsKey('id_colaborador')) {
      context.handle(
        _idColaboradorMeta,
        idColaborador.isAcceptableOrUnknown(
          data['id_colaborador']!,
          _idColaboradorMeta,
        ),
      );
    }
    if (data.containsKey('id_fornecedor')) {
      context.handle(
        _idFornecedorMeta,
        idFornecedor.isAcceptableOrUnknown(
          data['id_fornecedor']!,
          _idFornecedorMeta,
        ),
      );
    }
    if (data.containsKey('uf_emitente')) {
      context.handle(
        _ufEmitenteMeta,
        ufEmitente.isAcceptableOrUnknown(data['uf_emitente']!, _ufEmitenteMeta),
      );
    }
    if (data.containsKey('codigo_numerico')) {
      context.handle(
        _codigoNumericoMeta,
        codigoNumerico.isAcceptableOrUnknown(
          data['codigo_numerico']!,
          _codigoNumericoMeta,
        ),
      );
    }
    if (data.containsKey('natureza_operacao')) {
      context.handle(
        _naturezaOperacaoMeta,
        naturezaOperacao.isAcceptableOrUnknown(
          data['natureza_operacao']!,
          _naturezaOperacaoMeta,
        ),
      );
    }
    if (data.containsKey('codigo_modelo')) {
      context.handle(
        _codigoModeloMeta,
        codigoModelo.isAcceptableOrUnknown(
          data['codigo_modelo']!,
          _codigoModeloMeta,
        ),
      );
    }
    if (data.containsKey('serie')) {
      context.handle(
        _serieMeta,
        serie.isAcceptableOrUnknown(data['serie']!, _serieMeta),
      );
    }
    if (data.containsKey('numero')) {
      context.handle(
        _numeroMeta,
        numero.isAcceptableOrUnknown(data['numero']!, _numeroMeta),
      );
    }
    if (data.containsKey('data_hora_emissao')) {
      context.handle(
        _dataHoraEmissaoMeta,
        dataHoraEmissao.isAcceptableOrUnknown(
          data['data_hora_emissao']!,
          _dataHoraEmissaoMeta,
        ),
      );
    }
    if (data.containsKey('data_hora_entrada_saida')) {
      context.handle(
        _dataHoraEntradaSaidaMeta,
        dataHoraEntradaSaida.isAcceptableOrUnknown(
          data['data_hora_entrada_saida']!,
          _dataHoraEntradaSaidaMeta,
        ),
      );
    }
    if (data.containsKey('tipo_operacao')) {
      context.handle(
        _tipoOperacaoMeta,
        tipoOperacao.isAcceptableOrUnknown(
          data['tipo_operacao']!,
          _tipoOperacaoMeta,
        ),
      );
    }
    if (data.containsKey('local_destino')) {
      context.handle(
        _localDestinoMeta,
        localDestino.isAcceptableOrUnknown(
          data['local_destino']!,
          _localDestinoMeta,
        ),
      );
    }
    if (data.containsKey('codigo_municipio')) {
      context.handle(
        _codigoMunicipioMeta,
        codigoMunicipio.isAcceptableOrUnknown(
          data['codigo_municipio']!,
          _codigoMunicipioMeta,
        ),
      );
    }
    if (data.containsKey('formato_impressao_danfe')) {
      context.handle(
        _formatoImpressaoDanfeMeta,
        formatoImpressaoDanfe.isAcceptableOrUnknown(
          data['formato_impressao_danfe']!,
          _formatoImpressaoDanfeMeta,
        ),
      );
    }
    if (data.containsKey('tipo_emissao')) {
      context.handle(
        _tipoEmissaoMeta,
        tipoEmissao.isAcceptableOrUnknown(
          data['tipo_emissao']!,
          _tipoEmissaoMeta,
        ),
      );
    }
    if (data.containsKey('chave_acesso')) {
      context.handle(
        _chaveAcessoMeta,
        chaveAcesso.isAcceptableOrUnknown(
          data['chave_acesso']!,
          _chaveAcessoMeta,
        ),
      );
    }
    if (data.containsKey('digito_chave_acesso')) {
      context.handle(
        _digitoChaveAcessoMeta,
        digitoChaveAcesso.isAcceptableOrUnknown(
          data['digito_chave_acesso']!,
          _digitoChaveAcessoMeta,
        ),
      );
    }
    if (data.containsKey('ambiente')) {
      context.handle(
        _ambienteMeta,
        ambiente.isAcceptableOrUnknown(data['ambiente']!, _ambienteMeta),
      );
    }
    if (data.containsKey('finalidade_emissao')) {
      context.handle(
        _finalidadeEmissaoMeta,
        finalidadeEmissao.isAcceptableOrUnknown(
          data['finalidade_emissao']!,
          _finalidadeEmissaoMeta,
        ),
      );
    }
    if (data.containsKey('consumidor_operacao')) {
      context.handle(
        _consumidorOperacaoMeta,
        consumidorOperacao.isAcceptableOrUnknown(
          data['consumidor_operacao']!,
          _consumidorOperacaoMeta,
        ),
      );
    }
    if (data.containsKey('consumidor_presenca')) {
      context.handle(
        _consumidorPresencaMeta,
        consumidorPresenca.isAcceptableOrUnknown(
          data['consumidor_presenca']!,
          _consumidorPresencaMeta,
        ),
      );
    }
    if (data.containsKey('processo_emissao')) {
      context.handle(
        _processoEmissaoMeta,
        processoEmissao.isAcceptableOrUnknown(
          data['processo_emissao']!,
          _processoEmissaoMeta,
        ),
      );
    }
    if (data.containsKey('versao_processo_emissao')) {
      context.handle(
        _versaoProcessoEmissaoMeta,
        versaoProcessoEmissao.isAcceptableOrUnknown(
          data['versao_processo_emissao']!,
          _versaoProcessoEmissaoMeta,
        ),
      );
    }
    if (data.containsKey('data_entrada_contingencia')) {
      context.handle(
        _dataEntradaContingenciaMeta,
        dataEntradaContingencia.isAcceptableOrUnknown(
          data['data_entrada_contingencia']!,
          _dataEntradaContingenciaMeta,
        ),
      );
    }
    if (data.containsKey('justificativa_contingencia')) {
      context.handle(
        _justificativaContingenciaMeta,
        justificativaContingencia.isAcceptableOrUnknown(
          data['justificativa_contingencia']!,
          _justificativaContingenciaMeta,
        ),
      );
    }
    if (data.containsKey('base_calculo_icms')) {
      context.handle(
        _baseCalculoIcmsMeta,
        baseCalculoIcms.isAcceptableOrUnknown(
          data['base_calculo_icms']!,
          _baseCalculoIcmsMeta,
        ),
      );
    }
    if (data.containsKey('valor_icms')) {
      context.handle(
        _valorIcmsMeta,
        valorIcms.isAcceptableOrUnknown(data['valor_icms']!, _valorIcmsMeta),
      );
    }
    if (data.containsKey('valor_icms_desonerado')) {
      context.handle(
        _valorIcmsDesoneradoMeta,
        valorIcmsDesonerado.isAcceptableOrUnknown(
          data['valor_icms_desonerado']!,
          _valorIcmsDesoneradoMeta,
        ),
      );
    }
    if (data.containsKey('total_icms_fcp_uf_destino')) {
      context.handle(
        _totalIcmsFcpUfDestinoMeta,
        totalIcmsFcpUfDestino.isAcceptableOrUnknown(
          data['total_icms_fcp_uf_destino']!,
          _totalIcmsFcpUfDestinoMeta,
        ),
      );
    }
    if (data.containsKey('total_icms_interestadual_uf_destino')) {
      context.handle(
        _totalIcmsInterestadualUfDestinoMeta,
        totalIcmsInterestadualUfDestino.isAcceptableOrUnknown(
          data['total_icms_interestadual_uf_destino']!,
          _totalIcmsInterestadualUfDestinoMeta,
        ),
      );
    }
    if (data.containsKey('total_icms_interestadual_uf_remetente')) {
      context.handle(
        _totalIcmsInterestadualUfRemetenteMeta,
        totalIcmsInterestadualUfRemetente.isAcceptableOrUnknown(
          data['total_icms_interestadual_uf_remetente']!,
          _totalIcmsInterestadualUfRemetenteMeta,
        ),
      );
    }
    if (data.containsKey('valor_total_fcp')) {
      context.handle(
        _valorTotalFcpMeta,
        valorTotalFcp.isAcceptableOrUnknown(
          data['valor_total_fcp']!,
          _valorTotalFcpMeta,
        ),
      );
    }
    if (data.containsKey('base_calculo_icms_st')) {
      context.handle(
        _baseCalculoIcmsStMeta,
        baseCalculoIcmsSt.isAcceptableOrUnknown(
          data['base_calculo_icms_st']!,
          _baseCalculoIcmsStMeta,
        ),
      );
    }
    if (data.containsKey('valor_icms_st')) {
      context.handle(
        _valorIcmsStMeta,
        valorIcmsSt.isAcceptableOrUnknown(
          data['valor_icms_st']!,
          _valorIcmsStMeta,
        ),
      );
    }
    if (data.containsKey('valor_total_fcp_st')) {
      context.handle(
        _valorTotalFcpStMeta,
        valorTotalFcpSt.isAcceptableOrUnknown(
          data['valor_total_fcp_st']!,
          _valorTotalFcpStMeta,
        ),
      );
    }
    if (data.containsKey('valor_total_fcp_st_retido')) {
      context.handle(
        _valorTotalFcpStRetidoMeta,
        valorTotalFcpStRetido.isAcceptableOrUnknown(
          data['valor_total_fcp_st_retido']!,
          _valorTotalFcpStRetidoMeta,
        ),
      );
    }
    if (data.containsKey('valor_total_produtos')) {
      context.handle(
        _valorTotalProdutosMeta,
        valorTotalProdutos.isAcceptableOrUnknown(
          data['valor_total_produtos']!,
          _valorTotalProdutosMeta,
        ),
      );
    }
    if (data.containsKey('valor_frete')) {
      context.handle(
        _valorFreteMeta,
        valorFrete.isAcceptableOrUnknown(data['valor_frete']!, _valorFreteMeta),
      );
    }
    if (data.containsKey('valor_seguro')) {
      context.handle(
        _valorSeguroMeta,
        valorSeguro.isAcceptableOrUnknown(
          data['valor_seguro']!,
          _valorSeguroMeta,
        ),
      );
    }
    if (data.containsKey('valor_desconto')) {
      context.handle(
        _valorDescontoMeta,
        valorDesconto.isAcceptableOrUnknown(
          data['valor_desconto']!,
          _valorDescontoMeta,
        ),
      );
    }
    if (data.containsKey('valor_imposto_importacao')) {
      context.handle(
        _valorImpostoImportacaoMeta,
        valorImpostoImportacao.isAcceptableOrUnknown(
          data['valor_imposto_importacao']!,
          _valorImpostoImportacaoMeta,
        ),
      );
    }
    if (data.containsKey('valor_ipi')) {
      context.handle(
        _valorIpiMeta,
        valorIpi.isAcceptableOrUnknown(data['valor_ipi']!, _valorIpiMeta),
      );
    }
    if (data.containsKey('valor_ipi_devolvido')) {
      context.handle(
        _valorIpiDevolvidoMeta,
        valorIpiDevolvido.isAcceptableOrUnknown(
          data['valor_ipi_devolvido']!,
          _valorIpiDevolvidoMeta,
        ),
      );
    }
    if (data.containsKey('valor_pis')) {
      context.handle(
        _valorPisMeta,
        valorPis.isAcceptableOrUnknown(data['valor_pis']!, _valorPisMeta),
      );
    }
    if (data.containsKey('valor_cofins')) {
      context.handle(
        _valorCofinsMeta,
        valorCofins.isAcceptableOrUnknown(
          data['valor_cofins']!,
          _valorCofinsMeta,
        ),
      );
    }
    if (data.containsKey('valor_despesas_acessorias')) {
      context.handle(
        _valorDespesasAcessoriasMeta,
        valorDespesasAcessorias.isAcceptableOrUnknown(
          data['valor_despesas_acessorias']!,
          _valorDespesasAcessoriasMeta,
        ),
      );
    }
    if (data.containsKey('valor_total')) {
      context.handle(
        _valorTotalMeta,
        valorTotal.isAcceptableOrUnknown(data['valor_total']!, _valorTotalMeta),
      );
    }
    if (data.containsKey('valor_total_tributos')) {
      context.handle(
        _valorTotalTributosMeta,
        valorTotalTributos.isAcceptableOrUnknown(
          data['valor_total_tributos']!,
          _valorTotalTributosMeta,
        ),
      );
    }
    if (data.containsKey('valor_servicos')) {
      context.handle(
        _valorServicosMeta,
        valorServicos.isAcceptableOrUnknown(
          data['valor_servicos']!,
          _valorServicosMeta,
        ),
      );
    }
    if (data.containsKey('base_calculo_issqn')) {
      context.handle(
        _baseCalculoIssqnMeta,
        baseCalculoIssqn.isAcceptableOrUnknown(
          data['base_calculo_issqn']!,
          _baseCalculoIssqnMeta,
        ),
      );
    }
    if (data.containsKey('valor_issqn')) {
      context.handle(
        _valorIssqnMeta,
        valorIssqn.isAcceptableOrUnknown(data['valor_issqn']!, _valorIssqnMeta),
      );
    }
    if (data.containsKey('valor_pis_issqn')) {
      context.handle(
        _valorPisIssqnMeta,
        valorPisIssqn.isAcceptableOrUnknown(
          data['valor_pis_issqn']!,
          _valorPisIssqnMeta,
        ),
      );
    }
    if (data.containsKey('valor_cofins_issqn')) {
      context.handle(
        _valorCofinsIssqnMeta,
        valorCofinsIssqn.isAcceptableOrUnknown(
          data['valor_cofins_issqn']!,
          _valorCofinsIssqnMeta,
        ),
      );
    }
    if (data.containsKey('data_prestacao_servico')) {
      context.handle(
        _dataPrestacaoServicoMeta,
        dataPrestacaoServico.isAcceptableOrUnknown(
          data['data_prestacao_servico']!,
          _dataPrestacaoServicoMeta,
        ),
      );
    }
    if (data.containsKey('valor_deducao_issqn')) {
      context.handle(
        _valorDeducaoIssqnMeta,
        valorDeducaoIssqn.isAcceptableOrUnknown(
          data['valor_deducao_issqn']!,
          _valorDeducaoIssqnMeta,
        ),
      );
    }
    if (data.containsKey('outras_retencoes_issqn')) {
      context.handle(
        _outrasRetencoesIssqnMeta,
        outrasRetencoesIssqn.isAcceptableOrUnknown(
          data['outras_retencoes_issqn']!,
          _outrasRetencoesIssqnMeta,
        ),
      );
    }
    if (data.containsKey('desconto_incondicionado_issqn')) {
      context.handle(
        _descontoIncondicionadoIssqnMeta,
        descontoIncondicionadoIssqn.isAcceptableOrUnknown(
          data['desconto_incondicionado_issqn']!,
          _descontoIncondicionadoIssqnMeta,
        ),
      );
    }
    if (data.containsKey('desconto_condicionado_issqn')) {
      context.handle(
        _descontoCondicionadoIssqnMeta,
        descontoCondicionadoIssqn.isAcceptableOrUnknown(
          data['desconto_condicionado_issqn']!,
          _descontoCondicionadoIssqnMeta,
        ),
      );
    }
    if (data.containsKey('total_retencao_issqn')) {
      context.handle(
        _totalRetencaoIssqnMeta,
        totalRetencaoIssqn.isAcceptableOrUnknown(
          data['total_retencao_issqn']!,
          _totalRetencaoIssqnMeta,
        ),
      );
    }
    if (data.containsKey('regime_especial_tributacao')) {
      context.handle(
        _regimeEspecialTributacaoMeta,
        regimeEspecialTributacao.isAcceptableOrUnknown(
          data['regime_especial_tributacao']!,
          _regimeEspecialTributacaoMeta,
        ),
      );
    }
    if (data.containsKey('valor_retido_pis')) {
      context.handle(
        _valorRetidoPisMeta,
        valorRetidoPis.isAcceptableOrUnknown(
          data['valor_retido_pis']!,
          _valorRetidoPisMeta,
        ),
      );
    }
    if (data.containsKey('valor_retido_cofins')) {
      context.handle(
        _valorRetidoCofinsMeta,
        valorRetidoCofins.isAcceptableOrUnknown(
          data['valor_retido_cofins']!,
          _valorRetidoCofinsMeta,
        ),
      );
    }
    if (data.containsKey('valor_retido_csll')) {
      context.handle(
        _valorRetidoCsllMeta,
        valorRetidoCsll.isAcceptableOrUnknown(
          data['valor_retido_csll']!,
          _valorRetidoCsllMeta,
        ),
      );
    }
    if (data.containsKey('base_calculo_irrf')) {
      context.handle(
        _baseCalculoIrrfMeta,
        baseCalculoIrrf.isAcceptableOrUnknown(
          data['base_calculo_irrf']!,
          _baseCalculoIrrfMeta,
        ),
      );
    }
    if (data.containsKey('valor_retido_irrf')) {
      context.handle(
        _valorRetidoIrrfMeta,
        valorRetidoIrrf.isAcceptableOrUnknown(
          data['valor_retido_irrf']!,
          _valorRetidoIrrfMeta,
        ),
      );
    }
    if (data.containsKey('base_calculo_previdencia')) {
      context.handle(
        _baseCalculoPrevidenciaMeta,
        baseCalculoPrevidencia.isAcceptableOrUnknown(
          data['base_calculo_previdencia']!,
          _baseCalculoPrevidenciaMeta,
        ),
      );
    }
    if (data.containsKey('valor_retido_previdencia')) {
      context.handle(
        _valorRetidoPrevidenciaMeta,
        valorRetidoPrevidencia.isAcceptableOrUnknown(
          data['valor_retido_previdencia']!,
          _valorRetidoPrevidenciaMeta,
        ),
      );
    }
    if (data.containsKey('informacoes_add_fisco')) {
      context.handle(
        _informacoesAddFiscoMeta,
        informacoesAddFisco.isAcceptableOrUnknown(
          data['informacoes_add_fisco']!,
          _informacoesAddFiscoMeta,
        ),
      );
    }
    if (data.containsKey('informacoes_add_contribuinte')) {
      context.handle(
        _informacoesAddContribuinteMeta,
        informacoesAddContribuinte.isAcceptableOrUnknown(
          data['informacoes_add_contribuinte']!,
          _informacoesAddContribuinteMeta,
        ),
      );
    }
    if (data.containsKey('comex_uf_embarque')) {
      context.handle(
        _comexUfEmbarqueMeta,
        comexUfEmbarque.isAcceptableOrUnknown(
          data['comex_uf_embarque']!,
          _comexUfEmbarqueMeta,
        ),
      );
    }
    if (data.containsKey('comex_local_embarque')) {
      context.handle(
        _comexLocalEmbarqueMeta,
        comexLocalEmbarque.isAcceptableOrUnknown(
          data['comex_local_embarque']!,
          _comexLocalEmbarqueMeta,
        ),
      );
    }
    if (data.containsKey('comex_local_despacho')) {
      context.handle(
        _comexLocalDespachoMeta,
        comexLocalDespacho.isAcceptableOrUnknown(
          data['comex_local_despacho']!,
          _comexLocalDespachoMeta,
        ),
      );
    }
    if (data.containsKey('compra_nota_empenho')) {
      context.handle(
        _compraNotaEmpenhoMeta,
        compraNotaEmpenho.isAcceptableOrUnknown(
          data['compra_nota_empenho']!,
          _compraNotaEmpenhoMeta,
        ),
      );
    }
    if (data.containsKey('compra_pedido')) {
      context.handle(
        _compraPedidoMeta,
        compraPedido.isAcceptableOrUnknown(
          data['compra_pedido']!,
          _compraPedidoMeta,
        ),
      );
    }
    if (data.containsKey('compra_contrato')) {
      context.handle(
        _compraContratoMeta,
        compraContrato.isAcceptableOrUnknown(
          data['compra_contrato']!,
          _compraContratoMeta,
        ),
      );
    }
    if (data.containsKey('qrcode')) {
      context.handle(
        _qrcodeMeta,
        qrcode.isAcceptableOrUnknown(data['qrcode']!, _qrcodeMeta),
      );
    }
    if (data.containsKey('url_chave')) {
      context.handle(
        _urlChaveMeta,
        urlChave.isAcceptableOrUnknown(data['url_chave']!, _urlChaveMeta),
      );
    }
    if (data.containsKey('status_nota')) {
      context.handle(
        _statusNotaMeta,
        statusNota.isAcceptableOrUnknown(data['status_nota']!, _statusNotaMeta),
      );
    }
    if (data.containsKey('indicador_intermediario')) {
      context.handle(
        _indicadorIntermediarioMeta,
        indicadorIntermediario.isAcceptableOrUnknown(
          data['indicador_intermediario']!,
          _indicadorIntermediarioMeta,
        ),
      );
    }
    if (data.containsKey('intermediador_cnpj')) {
      context.handle(
        _intermediadorCnpjMeta,
        intermediadorCnpj.isAcceptableOrUnknown(
          data['intermediador_cnpj']!,
          _intermediadorCnpjMeta,
        ),
      );
    }
    if (data.containsKey('intermediador_id_cadastro')) {
      context.handle(
        _intermediadorIdCadastroMeta,
        intermediadorIdCadastro.isAcceptableOrUnknown(
          data['intermediador_id_cadastro']!,
          _intermediadorIdCadastroMeta,
        ),
      );
    }
    if (data.containsKey('codigo_municipio_fg_ibs')) {
      context.handle(
        _codigoMunicipioFgIbsMeta,
        codigoMunicipioFgIbs.isAcceptableOrUnknown(
          data['codigo_municipio_fg_ibs']!,
          _codigoMunicipioFgIbsMeta,
        ),
      );
    }
    if (data.containsKey('tipo_nota_debito')) {
      context.handle(
        _tipoNotaDebitoMeta,
        tipoNotaDebito.isAcceptableOrUnknown(
          data['tipo_nota_debito']!,
          _tipoNotaDebitoMeta,
        ),
      );
    }
    if (data.containsKey('tipo_nota_credito')) {
      context.handle(
        _tipoNotaCreditoMeta,
        tipoNotaCredito.isAcceptableOrUnknown(
          data['tipo_nota_credito']!,
          _tipoNotaCreditoMeta,
        ),
      );
    }
    if (data.containsKey('total_imposto_seletivo')) {
      context.handle(
        _totalImpostoSeletivoMeta,
        totalImpostoSeletivo.isAcceptableOrUnknown(
          data['total_imposto_seletivo']!,
          _totalImpostoSeletivoMeta,
        ),
      );
    }
    if (data.containsKey('total_bc_ibs_cbs')) {
      context.handle(
        _totalBcIbsCbsMeta,
        totalBcIbsCbs.isAcceptableOrUnknown(
          data['total_bc_ibs_cbs']!,
          _totalBcIbsCbsMeta,
        ),
      );
    }
    if (data.containsKey('ibs_uf_total_diferimento')) {
      context.handle(
        _ibsUfTotalDiferimentoMeta,
        ibsUfTotalDiferimento.isAcceptableOrUnknown(
          data['ibs_uf_total_diferimento']!,
          _ibsUfTotalDiferimentoMeta,
        ),
      );
    }
    if (data.containsKey('ibs_uf_total_dev_tributos')) {
      context.handle(
        _ibsUfTotalDevTributosMeta,
        ibsUfTotalDevTributos.isAcceptableOrUnknown(
          data['ibs_uf_total_dev_tributos']!,
          _ibsUfTotalDevTributosMeta,
        ),
      );
    }
    if (data.containsKey('ibs_uf_valor_total')) {
      context.handle(
        _ibsUfValorTotalMeta,
        ibsUfValorTotal.isAcceptableOrUnknown(
          data['ibs_uf_valor_total']!,
          _ibsUfValorTotalMeta,
        ),
      );
    }
    if (data.containsKey('ibs_mun_total_diferimento')) {
      context.handle(
        _ibsMunTotalDiferimentoMeta,
        ibsMunTotalDiferimento.isAcceptableOrUnknown(
          data['ibs_mun_total_diferimento']!,
          _ibsMunTotalDiferimentoMeta,
        ),
      );
    }
    if (data.containsKey('ibs_mun_total_dev_tributos')) {
      context.handle(
        _ibsMunTotalDevTributosMeta,
        ibsMunTotalDevTributos.isAcceptableOrUnknown(
          data['ibs_mun_total_dev_tributos']!,
          _ibsMunTotalDevTributosMeta,
        ),
      );
    }
    if (data.containsKey('ibs_mun_valor_total')) {
      context.handle(
        _ibsMunValorTotalMeta,
        ibsMunValorTotal.isAcceptableOrUnknown(
          data['ibs_mun_valor_total']!,
          _ibsMunValorTotalMeta,
        ),
      );
    }
    if (data.containsKey('cbs_total_diferimento')) {
      context.handle(
        _cbsTotalDiferimentoMeta,
        cbsTotalDiferimento.isAcceptableOrUnknown(
          data['cbs_total_diferimento']!,
          _cbsTotalDiferimentoMeta,
        ),
      );
    }
    if (data.containsKey('cbs_total_dev_tributos')) {
      context.handle(
        _cbsTotalDevTributosMeta,
        cbsTotalDevTributos.isAcceptableOrUnknown(
          data['cbs_total_dev_tributos']!,
          _cbsTotalDevTributosMeta,
        ),
      );
    }
    if (data.containsKey('cbs_valor_total')) {
      context.handle(
        _cbsValorTotalMeta,
        cbsValorTotal.isAcceptableOrUnknown(
          data['cbs_valor_total']!,
          _cbsValorTotalMeta,
        ),
      );
    }
    if (data.containsKey('cbs_total_credito_presumido')) {
      context.handle(
        _cbsTotalCreditoPresumidoMeta,
        cbsTotalCreditoPresumido.isAcceptableOrUnknown(
          data['cbs_total_credito_presumido']!,
          _cbsTotalCreditoPresumidoMeta,
        ),
      );
    }
    if (data.containsKey('cbs_tot_cre_pre_suspensivo')) {
      context.handle(
        _cbsTotCrePreSuspensivoMeta,
        cbsTotCrePreSuspensivo.isAcceptableOrUnknown(
          data['cbs_tot_cre_pre_suspensivo']!,
          _cbsTotCrePreSuspensivoMeta,
        ),
      );
    }
    if (data.containsKey('mono_ibs_total')) {
      context.handle(
        _monoIbsTotalMeta,
        monoIbsTotal.isAcceptableOrUnknown(
          data['mono_ibs_total']!,
          _monoIbsTotalMeta,
        ),
      );
    }
    if (data.containsKey('mono_cbs_total')) {
      context.handle(
        _monoCbsTotalMeta,
        monoCbsTotal.isAcceptableOrUnknown(
          data['mono_cbs_total']!,
          _monoCbsTotalMeta,
        ),
      );
    }
    if (data.containsKey('mono_ibs_total_retencao')) {
      context.handle(
        _monoIbsTotalRetencaoMeta,
        monoIbsTotalRetencao.isAcceptableOrUnknown(
          data['mono_ibs_total_retencao']!,
          _monoIbsTotalRetencaoMeta,
        ),
      );
    }
    if (data.containsKey('mono_cbs_total_retencao')) {
      context.handle(
        _monoCbsTotalRetencaoMeta,
        monoCbsTotalRetencao.isAcceptableOrUnknown(
          data['mono_cbs_total_retencao']!,
          _monoCbsTotalRetencaoMeta,
        ),
      );
    }
    if (data.containsKey('mono_ibs_retido')) {
      context.handle(
        _monoIbsRetidoMeta,
        monoIbsRetido.isAcceptableOrUnknown(
          data['mono_ibs_retido']!,
          _monoIbsRetidoMeta,
        ),
      );
    }
    if (data.containsKey('mono_cbs_retido')) {
      context.handle(
        _monoCbsRetidoMeta,
        monoCbsRetido.isAcceptableOrUnknown(
          data['mono_cbs_retido']!,
          _monoCbsRetidoMeta,
        ),
      );
    }
    if (data.containsKey('valor_total_nfe')) {
      context.handle(
        _valorTotalNfeMeta,
        valorTotalNfe.isAcceptableOrUnknown(
          data['valor_total_nfe']!,
          _valorTotalNfeMeta,
        ),
      );
    }
    if (data.containsKey('total_qtde_tributada_mono')) {
      context.handle(
        _totalQtdeTributadaMonoMeta,
        totalQtdeTributadaMono.isAcceptableOrUnknown(
          data['total_qtde_tributada_mono']!,
          _totalQtdeTributadaMonoMeta,
        ),
      );
    }
    if (data.containsKey('total_icms_mono')) {
      context.handle(
        _totalIcmsMonoMeta,
        totalIcmsMono.isAcceptableOrUnknown(
          data['total_icms_mono']!,
          _totalIcmsMonoMeta,
        ),
      );
    }
    if (data.containsKey('total_quantidade_mono_retencao')) {
      context.handle(
        _totalQuantidadeMonoRetencaoMeta,
        totalQuantidadeMonoRetencao.isAcceptableOrUnknown(
          data['total_quantidade_mono_retencao']!,
          _totalQuantidadeMonoRetencaoMeta,
        ),
      );
    }
    if (data.containsKey('total_icms_mono_retencao')) {
      context.handle(
        _totalIcmsMonoRetencaoMeta,
        totalIcmsMonoRetencao.isAcceptableOrUnknown(
          data['total_icms_mono_retencao']!,
          _totalIcmsMonoRetencaoMeta,
        ),
      );
    }
    if (data.containsKey('total_quantidade_mono_retida')) {
      context.handle(
        _totalQuantidadeMonoRetidaMeta,
        totalQuantidadeMonoRetida.isAcceptableOrUnknown(
          data['total_quantidade_mono_retida']!,
          _totalQuantidadeMonoRetidaMeta,
        ),
      );
    }
    if (data.containsKey('total_icms_mono_retido')) {
      context.handle(
        _totalIcmsMonoRetidoMeta,
        totalIcmsMonoRetido.isAcceptableOrUnknown(
          data['total_icms_mono_retido']!,
          _totalIcmsMonoRetidoMeta,
        ),
      );
    }
    if (data.containsKey('ibs_valor_total')) {
      context.handle(
        _ibsValorTotalMeta,
        ibsValorTotal.isAcceptableOrUnknown(
          data['ibs_valor_total']!,
          _ibsValorTotalMeta,
        ),
      );
    }
    if (data.containsKey('total_credito_presumido')) {
      context.handle(
        _totalCreditoPresumidoMeta,
        totalCreditoPresumido.isAcceptableOrUnknown(
          data['total_credito_presumido']!,
          _totalCreditoPresumidoMeta,
        ),
      );
    }
    if (data.containsKey('total_cred_pres_suspensivo')) {
      context.handle(
        _totalCredPresSuspensivoMeta,
        totalCredPresSuspensivo.isAcceptableOrUnknown(
          data['total_cred_pres_suspensivo']!,
          _totalCredPresSuspensivoMeta,
        ),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeCabecalho map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return NfeCabecalho(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id'],
      ),
      idVendaCabecalho: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_venda_cabecalho'],
      ),
      idTributOperacaoFiscal: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_tribut_operacao_fiscal'],
      ),
      idCliente: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_cliente'],
      ),
      idColaborador: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_colaborador'],
      ),
      idFornecedor: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_fornecedor'],
      ),
      ufEmitente: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}uf_emitente'],
      ),
      codigoNumerico: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}codigo_numerico'],
      ),
      naturezaOperacao: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}natureza_operacao'],
      ),
      codigoModelo: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}codigo_modelo'],
      ),
      serie: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}serie'],
      ),
      numero: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}numero'],
      ),
      dataHoraEmissao: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}data_hora_emissao'],
      ),
      dataHoraEntradaSaida: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}data_hora_entrada_saida'],
      ),
      tipoOperacao: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}tipo_operacao'],
      ),
      localDestino: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}local_destino'],
      ),
      codigoMunicipio: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}codigo_municipio'],
      ),
      formatoImpressaoDanfe: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}formato_impressao_danfe'],
      ),
      tipoEmissao: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}tipo_emissao'],
      ),
      chaveAcesso: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}chave_acesso'],
      ),
      digitoChaveAcesso: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}digito_chave_acesso'],
      ),
      ambiente: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ambiente'],
      ),
      finalidadeEmissao: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}finalidade_emissao'],
      ),
      consumidorOperacao: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}consumidor_operacao'],
      ),
      consumidorPresenca: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}consumidor_presenca'],
      ),
      processoEmissao: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}processo_emissao'],
      ),
      versaoProcessoEmissao: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}versao_processo_emissao'],
      ),
      dataEntradaContingencia: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}data_entrada_contingencia'],
      ),
      justificativaContingencia: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}justificativa_contingencia'],
      ),
      baseCalculoIcms: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}base_calculo_icms'],
      ),
      valorIcms: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_icms'],
      ),
      valorIcmsDesonerado: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_icms_desonerado'],
      ),
      totalIcmsFcpUfDestino: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}total_icms_fcp_uf_destino'],
      ),
      totalIcmsInterestadualUfDestino: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}total_icms_interestadual_uf_destino'],
      ),
      totalIcmsInterestadualUfRemetente: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}total_icms_interestadual_uf_remetente'],
      ),
      valorTotalFcp: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_total_fcp'],
      ),
      baseCalculoIcmsSt: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}base_calculo_icms_st'],
      ),
      valorIcmsSt: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_icms_st'],
      ),
      valorTotalFcpSt: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_total_fcp_st'],
      ),
      valorTotalFcpStRetido: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_total_fcp_st_retido'],
      ),
      valorTotalProdutos: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_total_produtos'],
      ),
      valorFrete: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_frete'],
      ),
      valorSeguro: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_seguro'],
      ),
      valorDesconto: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_desconto'],
      ),
      valorImpostoImportacao: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_imposto_importacao'],
      ),
      valorIpi: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_ipi'],
      ),
      valorIpiDevolvido: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_ipi_devolvido'],
      ),
      valorPis: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_pis'],
      ),
      valorCofins: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_cofins'],
      ),
      valorDespesasAcessorias: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_despesas_acessorias'],
      ),
      valorTotal: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_total'],
      ),
      valorTotalTributos: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_total_tributos'],
      ),
      valorServicos: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_servicos'],
      ),
      baseCalculoIssqn: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}base_calculo_issqn'],
      ),
      valorIssqn: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_issqn'],
      ),
      valorPisIssqn: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_pis_issqn'],
      ),
      valorCofinsIssqn: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_cofins_issqn'],
      ),
      dataPrestacaoServico: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}data_prestacao_servico'],
      ),
      valorDeducaoIssqn: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_deducao_issqn'],
      ),
      outrasRetencoesIssqn: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}outras_retencoes_issqn'],
      ),
      descontoIncondicionadoIssqn: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}desconto_incondicionado_issqn'],
      ),
      descontoCondicionadoIssqn: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}desconto_condicionado_issqn'],
      ),
      totalRetencaoIssqn: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}total_retencao_issqn'],
      ),
      regimeEspecialTributacao: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}regime_especial_tributacao'],
      ),
      valorRetidoPis: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_retido_pis'],
      ),
      valorRetidoCofins: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_retido_cofins'],
      ),
      valorRetidoCsll: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_retido_csll'],
      ),
      baseCalculoIrrf: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}base_calculo_irrf'],
      ),
      valorRetidoIrrf: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_retido_irrf'],
      ),
      baseCalculoPrevidencia: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}base_calculo_previdencia'],
      ),
      valorRetidoPrevidencia: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_retido_previdencia'],
      ),
      informacoesAddFisco: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}informacoes_add_fisco'],
      ),
      informacoesAddContribuinte: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}informacoes_add_contribuinte'],
      ),
      comexUfEmbarque: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}comex_uf_embarque'],
      ),
      comexLocalEmbarque: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}comex_local_embarque'],
      ),
      comexLocalDespacho: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}comex_local_despacho'],
      ),
      compraNotaEmpenho: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}compra_nota_empenho'],
      ),
      compraPedido: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}compra_pedido'],
      ),
      compraContrato: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}compra_contrato'],
      ),
      qrcode: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}qrcode'],
      ),
      urlChave: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}url_chave'],
      ),
      statusNota: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}status_nota'],
      ),
      indicadorIntermediario: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}indicador_intermediario'],
      ),
      intermediadorCnpj: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}intermediador_cnpj'],
      ),
      intermediadorIdCadastro: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}intermediador_id_cadastro'],
      ),
      codigoMunicipioFgIbs: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}codigo_municipio_fg_ibs'],
      ),
      tipoNotaDebito: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}tipo_nota_debito'],
      ),
      tipoNotaCredito: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}tipo_nota_credito'],
      ),
      totalImpostoSeletivo: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}total_imposto_seletivo'],
      ),
      totalBcIbsCbs: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}total_bc_ibs_cbs'],
      ),
      ibsUfTotalDiferimento: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}ibs_uf_total_diferimento'],
      ),
      ibsUfTotalDevTributos: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}ibs_uf_total_dev_tributos'],
      ),
      ibsUfValorTotal: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}ibs_uf_valor_total'],
      ),
      ibsMunTotalDiferimento: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}ibs_mun_total_diferimento'],
      ),
      ibsMunTotalDevTributos: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}ibs_mun_total_dev_tributos'],
      ),
      ibsMunValorTotal: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}ibs_mun_valor_total'],
      ),
      cbsTotalDiferimento: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}cbs_total_diferimento'],
      ),
      cbsTotalDevTributos: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}cbs_total_dev_tributos'],
      ),
      cbsValorTotal: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}cbs_valor_total'],
      ),
      cbsTotalCreditoPresumido: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}cbs_total_credito_presumido'],
      ),
      cbsTotCrePreSuspensivo: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}cbs_tot_cre_pre_suspensivo'],
      ),
      monoIbsTotal: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}mono_ibs_total'],
      ),
      monoCbsTotal: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}mono_cbs_total'],
      ),
      monoIbsTotalRetencao: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}mono_ibs_total_retencao'],
      ),
      monoCbsTotalRetencao: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}mono_cbs_total_retencao'],
      ),
      monoIbsRetido: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}mono_ibs_retido'],
      ),
      monoCbsRetido: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}mono_cbs_retido'],
      ),
      valorTotalNfe: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_total_nfe'],
      ),
      totalQtdeTributadaMono: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}total_qtde_tributada_mono'],
      ),
      totalIcmsMono: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}total_icms_mono'],
      ),
      totalQuantidadeMonoRetencao: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}total_quantidade_mono_retencao'],
      ),
      totalIcmsMonoRetencao: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}total_icms_mono_retencao'],
      ),
      totalQuantidadeMonoRetida: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}total_quantidade_mono_retida'],
      ),
      totalIcmsMonoRetido: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}total_icms_mono_retido'],
      ),
      ibsValorTotal: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}ibs_valor_total'],
      ),
      totalCreditoPresumido: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}total_credito_presumido'],
      ),
      totalCredPresSuspensivo: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}total_cred_pres_suspensivo'],
      ),
    );
  }

  @override
  $NfeCabecalhosTable createAlias(String alias) {
    return $NfeCabecalhosTable(attachedDatabase, alias);
  }
}

class NfeCabecalho extends DataClass implements Insertable<NfeCabecalho> {
  final int? id;
  final int? idVendaCabecalho;
  final int? idTributOperacaoFiscal;
  final int? idCliente;
  final int? idColaborador;
  final int? idFornecedor;
  final String? ufEmitente;
  final String? codigoNumerico;
  final String? naturezaOperacao;
  final String? codigoModelo;
  final String? serie;
  final String? numero;
  final DateTime? dataHoraEmissao;
  final DateTime? dataHoraEntradaSaida;
  final String? tipoOperacao;
  final String? localDestino;
  final int? codigoMunicipio;
  final String? formatoImpressaoDanfe;
  final String? tipoEmissao;
  final String? chaveAcesso;
  final String? digitoChaveAcesso;
  final String? ambiente;
  final String? finalidadeEmissao;
  final String? consumidorOperacao;
  final String? consumidorPresenca;
  final String? processoEmissao;
  final String? versaoProcessoEmissao;
  final DateTime? dataEntradaContingencia;
  final String? justificativaContingencia;
  final double? baseCalculoIcms;
  final double? valorIcms;
  final double? valorIcmsDesonerado;
  final double? totalIcmsFcpUfDestino;
  final double? totalIcmsInterestadualUfDestino;
  final double? totalIcmsInterestadualUfRemetente;
  final double? valorTotalFcp;
  final double? baseCalculoIcmsSt;
  final double? valorIcmsSt;
  final double? valorTotalFcpSt;
  final double? valorTotalFcpStRetido;
  final double? valorTotalProdutos;
  final double? valorFrete;
  final double? valorSeguro;
  final double? valorDesconto;
  final double? valorImpostoImportacao;
  final double? valorIpi;
  final double? valorIpiDevolvido;
  final double? valorPis;
  final double? valorCofins;
  final double? valorDespesasAcessorias;
  final double? valorTotal;
  final double? valorTotalTributos;
  final double? valorServicos;
  final double? baseCalculoIssqn;
  final double? valorIssqn;
  final double? valorPisIssqn;
  final double? valorCofinsIssqn;
  final DateTime? dataPrestacaoServico;
  final double? valorDeducaoIssqn;
  final double? outrasRetencoesIssqn;
  final double? descontoIncondicionadoIssqn;
  final double? descontoCondicionadoIssqn;
  final double? totalRetencaoIssqn;
  final String? regimeEspecialTributacao;
  final double? valorRetidoPis;
  final double? valorRetidoCofins;
  final double? valorRetidoCsll;
  final double? baseCalculoIrrf;
  final double? valorRetidoIrrf;
  final double? baseCalculoPrevidencia;
  final double? valorRetidoPrevidencia;
  final String? informacoesAddFisco;
  final String? informacoesAddContribuinte;
  final String? comexUfEmbarque;
  final String? comexLocalEmbarque;
  final String? comexLocalDespacho;
  final String? compraNotaEmpenho;
  final String? compraPedido;
  final String? compraContrato;
  final String? qrcode;
  final String? urlChave;
  final String? statusNota;
  final String? indicadorIntermediario;
  final String? intermediadorCnpj;
  final String? intermediadorIdCadastro;
  final int? codigoMunicipioFgIbs;
  final String? tipoNotaDebito;
  final String? tipoNotaCredito;
  final double? totalImpostoSeletivo;
  final double? totalBcIbsCbs;
  final double? ibsUfTotalDiferimento;
  final double? ibsUfTotalDevTributos;
  final double? ibsUfValorTotal;
  final double? ibsMunTotalDiferimento;
  final double? ibsMunTotalDevTributos;
  final double? ibsMunValorTotal;
  final double? cbsTotalDiferimento;
  final double? cbsTotalDevTributos;
  final double? cbsValorTotal;
  final double? cbsTotalCreditoPresumido;
  final double? cbsTotCrePreSuspensivo;
  final double? monoIbsTotal;
  final double? monoCbsTotal;
  final double? monoIbsTotalRetencao;
  final double? monoCbsTotalRetencao;
  final double? monoIbsRetido;
  final double? monoCbsRetido;
  final double? valorTotalNfe;
  final double? totalQtdeTributadaMono;
  final double? totalIcmsMono;
  final double? totalQuantidadeMonoRetencao;
  final double? totalIcmsMonoRetencao;
  final double? totalQuantidadeMonoRetida;
  final double? totalIcmsMonoRetido;
  final double? ibsValorTotal;
  final double? totalCreditoPresumido;
  final double? totalCredPresSuspensivo;
  const NfeCabecalho({
    this.id,
    this.idVendaCabecalho,
    this.idTributOperacaoFiscal,
    this.idCliente,
    this.idColaborador,
    this.idFornecedor,
    this.ufEmitente,
    this.codigoNumerico,
    this.naturezaOperacao,
    this.codigoModelo,
    this.serie,
    this.numero,
    this.dataHoraEmissao,
    this.dataHoraEntradaSaida,
    this.tipoOperacao,
    this.localDestino,
    this.codigoMunicipio,
    this.formatoImpressaoDanfe,
    this.tipoEmissao,
    this.chaveAcesso,
    this.digitoChaveAcesso,
    this.ambiente,
    this.finalidadeEmissao,
    this.consumidorOperacao,
    this.consumidorPresenca,
    this.processoEmissao,
    this.versaoProcessoEmissao,
    this.dataEntradaContingencia,
    this.justificativaContingencia,
    this.baseCalculoIcms,
    this.valorIcms,
    this.valorIcmsDesonerado,
    this.totalIcmsFcpUfDestino,
    this.totalIcmsInterestadualUfDestino,
    this.totalIcmsInterestadualUfRemetente,
    this.valorTotalFcp,
    this.baseCalculoIcmsSt,
    this.valorIcmsSt,
    this.valorTotalFcpSt,
    this.valorTotalFcpStRetido,
    this.valorTotalProdutos,
    this.valorFrete,
    this.valorSeguro,
    this.valorDesconto,
    this.valorImpostoImportacao,
    this.valorIpi,
    this.valorIpiDevolvido,
    this.valorPis,
    this.valorCofins,
    this.valorDespesasAcessorias,
    this.valorTotal,
    this.valorTotalTributos,
    this.valorServicos,
    this.baseCalculoIssqn,
    this.valorIssqn,
    this.valorPisIssqn,
    this.valorCofinsIssqn,
    this.dataPrestacaoServico,
    this.valorDeducaoIssqn,
    this.outrasRetencoesIssqn,
    this.descontoIncondicionadoIssqn,
    this.descontoCondicionadoIssqn,
    this.totalRetencaoIssqn,
    this.regimeEspecialTributacao,
    this.valorRetidoPis,
    this.valorRetidoCofins,
    this.valorRetidoCsll,
    this.baseCalculoIrrf,
    this.valorRetidoIrrf,
    this.baseCalculoPrevidencia,
    this.valorRetidoPrevidencia,
    this.informacoesAddFisco,
    this.informacoesAddContribuinte,
    this.comexUfEmbarque,
    this.comexLocalEmbarque,
    this.comexLocalDespacho,
    this.compraNotaEmpenho,
    this.compraPedido,
    this.compraContrato,
    this.qrcode,
    this.urlChave,
    this.statusNota,
    this.indicadorIntermediario,
    this.intermediadorCnpj,
    this.intermediadorIdCadastro,
    this.codigoMunicipioFgIbs,
    this.tipoNotaDebito,
    this.tipoNotaCredito,
    this.totalImpostoSeletivo,
    this.totalBcIbsCbs,
    this.ibsUfTotalDiferimento,
    this.ibsUfTotalDevTributos,
    this.ibsUfValorTotal,
    this.ibsMunTotalDiferimento,
    this.ibsMunTotalDevTributos,
    this.ibsMunValorTotal,
    this.cbsTotalDiferimento,
    this.cbsTotalDevTributos,
    this.cbsValorTotal,
    this.cbsTotalCreditoPresumido,
    this.cbsTotCrePreSuspensivo,
    this.monoIbsTotal,
    this.monoCbsTotal,
    this.monoIbsTotalRetencao,
    this.monoCbsTotalRetencao,
    this.monoIbsRetido,
    this.monoCbsRetido,
    this.valorTotalNfe,
    this.totalQtdeTributadaMono,
    this.totalIcmsMono,
    this.totalQuantidadeMonoRetencao,
    this.totalIcmsMonoRetencao,
    this.totalQuantidadeMonoRetida,
    this.totalIcmsMonoRetido,
    this.ibsValorTotal,
    this.totalCreditoPresumido,
    this.totalCredPresSuspensivo,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || idVendaCabecalho != null) {
      map['id_venda_cabecalho'] = Variable<int>(idVendaCabecalho);
    }
    if (!nullToAbsent || idTributOperacaoFiscal != null) {
      map['id_tribut_operacao_fiscal'] = Variable<int>(idTributOperacaoFiscal);
    }
    if (!nullToAbsent || idCliente != null) {
      map['id_cliente'] = Variable<int>(idCliente);
    }
    if (!nullToAbsent || idColaborador != null) {
      map['id_colaborador'] = Variable<int>(idColaborador);
    }
    if (!nullToAbsent || idFornecedor != null) {
      map['id_fornecedor'] = Variable<int>(idFornecedor);
    }
    if (!nullToAbsent || ufEmitente != null) {
      map['uf_emitente'] = Variable<String>(ufEmitente);
    }
    if (!nullToAbsent || codigoNumerico != null) {
      map['codigo_numerico'] = Variable<String>(codigoNumerico);
    }
    if (!nullToAbsent || naturezaOperacao != null) {
      map['natureza_operacao'] = Variable<String>(naturezaOperacao);
    }
    if (!nullToAbsent || codigoModelo != null) {
      map['codigo_modelo'] = Variable<String>(codigoModelo);
    }
    if (!nullToAbsent || serie != null) {
      map['serie'] = Variable<String>(serie);
    }
    if (!nullToAbsent || numero != null) {
      map['numero'] = Variable<String>(numero);
    }
    if (!nullToAbsent || dataHoraEmissao != null) {
      map['data_hora_emissao'] = Variable<DateTime>(dataHoraEmissao);
    }
    if (!nullToAbsent || dataHoraEntradaSaida != null) {
      map['data_hora_entrada_saida'] = Variable<DateTime>(dataHoraEntradaSaida);
    }
    if (!nullToAbsent || tipoOperacao != null) {
      map['tipo_operacao'] = Variable<String>(tipoOperacao);
    }
    if (!nullToAbsent || localDestino != null) {
      map['local_destino'] = Variable<String>(localDestino);
    }
    if (!nullToAbsent || codigoMunicipio != null) {
      map['codigo_municipio'] = Variable<int>(codigoMunicipio);
    }
    if (!nullToAbsent || formatoImpressaoDanfe != null) {
      map['formato_impressao_danfe'] = Variable<String>(formatoImpressaoDanfe);
    }
    if (!nullToAbsent || tipoEmissao != null) {
      map['tipo_emissao'] = Variable<String>(tipoEmissao);
    }
    if (!nullToAbsent || chaveAcesso != null) {
      map['chave_acesso'] = Variable<String>(chaveAcesso);
    }
    if (!nullToAbsent || digitoChaveAcesso != null) {
      map['digito_chave_acesso'] = Variable<String>(digitoChaveAcesso);
    }
    if (!nullToAbsent || ambiente != null) {
      map['ambiente'] = Variable<String>(ambiente);
    }
    if (!nullToAbsent || finalidadeEmissao != null) {
      map['finalidade_emissao'] = Variable<String>(finalidadeEmissao);
    }
    if (!nullToAbsent || consumidorOperacao != null) {
      map['consumidor_operacao'] = Variable<String>(consumidorOperacao);
    }
    if (!nullToAbsent || consumidorPresenca != null) {
      map['consumidor_presenca'] = Variable<String>(consumidorPresenca);
    }
    if (!nullToAbsent || processoEmissao != null) {
      map['processo_emissao'] = Variable<String>(processoEmissao);
    }
    if (!nullToAbsent || versaoProcessoEmissao != null) {
      map['versao_processo_emissao'] = Variable<String>(versaoProcessoEmissao);
    }
    if (!nullToAbsent || dataEntradaContingencia != null) {
      map['data_entrada_contingencia'] = Variable<DateTime>(
        dataEntradaContingencia,
      );
    }
    if (!nullToAbsent || justificativaContingencia != null) {
      map['justificativa_contingencia'] = Variable<String>(
        justificativaContingencia,
      );
    }
    if (!nullToAbsent || baseCalculoIcms != null) {
      map['base_calculo_icms'] = Variable<double>(baseCalculoIcms);
    }
    if (!nullToAbsent || valorIcms != null) {
      map['valor_icms'] = Variable<double>(valorIcms);
    }
    if (!nullToAbsent || valorIcmsDesonerado != null) {
      map['valor_icms_desonerado'] = Variable<double>(valorIcmsDesonerado);
    }
    if (!nullToAbsent || totalIcmsFcpUfDestino != null) {
      map['total_icms_fcp_uf_destino'] = Variable<double>(
        totalIcmsFcpUfDestino,
      );
    }
    if (!nullToAbsent || totalIcmsInterestadualUfDestino != null) {
      map['total_icms_interestadual_uf_destino'] = Variable<double>(
        totalIcmsInterestadualUfDestino,
      );
    }
    if (!nullToAbsent || totalIcmsInterestadualUfRemetente != null) {
      map['total_icms_interestadual_uf_remetente'] = Variable<double>(
        totalIcmsInterestadualUfRemetente,
      );
    }
    if (!nullToAbsent || valorTotalFcp != null) {
      map['valor_total_fcp'] = Variable<double>(valorTotalFcp);
    }
    if (!nullToAbsent || baseCalculoIcmsSt != null) {
      map['base_calculo_icms_st'] = Variable<double>(baseCalculoIcmsSt);
    }
    if (!nullToAbsent || valorIcmsSt != null) {
      map['valor_icms_st'] = Variable<double>(valorIcmsSt);
    }
    if (!nullToAbsent || valorTotalFcpSt != null) {
      map['valor_total_fcp_st'] = Variable<double>(valorTotalFcpSt);
    }
    if (!nullToAbsent || valorTotalFcpStRetido != null) {
      map['valor_total_fcp_st_retido'] = Variable<double>(
        valorTotalFcpStRetido,
      );
    }
    if (!nullToAbsent || valorTotalProdutos != null) {
      map['valor_total_produtos'] = Variable<double>(valorTotalProdutos);
    }
    if (!nullToAbsent || valorFrete != null) {
      map['valor_frete'] = Variable<double>(valorFrete);
    }
    if (!nullToAbsent || valorSeguro != null) {
      map['valor_seguro'] = Variable<double>(valorSeguro);
    }
    if (!nullToAbsent || valorDesconto != null) {
      map['valor_desconto'] = Variable<double>(valorDesconto);
    }
    if (!nullToAbsent || valorImpostoImportacao != null) {
      map['valor_imposto_importacao'] = Variable<double>(
        valorImpostoImportacao,
      );
    }
    if (!nullToAbsent || valorIpi != null) {
      map['valor_ipi'] = Variable<double>(valorIpi);
    }
    if (!nullToAbsent || valorIpiDevolvido != null) {
      map['valor_ipi_devolvido'] = Variable<double>(valorIpiDevolvido);
    }
    if (!nullToAbsent || valorPis != null) {
      map['valor_pis'] = Variable<double>(valorPis);
    }
    if (!nullToAbsent || valorCofins != null) {
      map['valor_cofins'] = Variable<double>(valorCofins);
    }
    if (!nullToAbsent || valorDespesasAcessorias != null) {
      map['valor_despesas_acessorias'] = Variable<double>(
        valorDespesasAcessorias,
      );
    }
    if (!nullToAbsent || valorTotal != null) {
      map['valor_total'] = Variable<double>(valorTotal);
    }
    if (!nullToAbsent || valorTotalTributos != null) {
      map['valor_total_tributos'] = Variable<double>(valorTotalTributos);
    }
    if (!nullToAbsent || valorServicos != null) {
      map['valor_servicos'] = Variable<double>(valorServicos);
    }
    if (!nullToAbsent || baseCalculoIssqn != null) {
      map['base_calculo_issqn'] = Variable<double>(baseCalculoIssqn);
    }
    if (!nullToAbsent || valorIssqn != null) {
      map['valor_issqn'] = Variable<double>(valorIssqn);
    }
    if (!nullToAbsent || valorPisIssqn != null) {
      map['valor_pis_issqn'] = Variable<double>(valorPisIssqn);
    }
    if (!nullToAbsent || valorCofinsIssqn != null) {
      map['valor_cofins_issqn'] = Variable<double>(valorCofinsIssqn);
    }
    if (!nullToAbsent || dataPrestacaoServico != null) {
      map['data_prestacao_servico'] = Variable<DateTime>(dataPrestacaoServico);
    }
    if (!nullToAbsent || valorDeducaoIssqn != null) {
      map['valor_deducao_issqn'] = Variable<double>(valorDeducaoIssqn);
    }
    if (!nullToAbsent || outrasRetencoesIssqn != null) {
      map['outras_retencoes_issqn'] = Variable<double>(outrasRetencoesIssqn);
    }
    if (!nullToAbsent || descontoIncondicionadoIssqn != null) {
      map['desconto_incondicionado_issqn'] = Variable<double>(
        descontoIncondicionadoIssqn,
      );
    }
    if (!nullToAbsent || descontoCondicionadoIssqn != null) {
      map['desconto_condicionado_issqn'] = Variable<double>(
        descontoCondicionadoIssqn,
      );
    }
    if (!nullToAbsent || totalRetencaoIssqn != null) {
      map['total_retencao_issqn'] = Variable<double>(totalRetencaoIssqn);
    }
    if (!nullToAbsent || regimeEspecialTributacao != null) {
      map['regime_especial_tributacao'] = Variable<String>(
        regimeEspecialTributacao,
      );
    }
    if (!nullToAbsent || valorRetidoPis != null) {
      map['valor_retido_pis'] = Variable<double>(valorRetidoPis);
    }
    if (!nullToAbsent || valorRetidoCofins != null) {
      map['valor_retido_cofins'] = Variable<double>(valorRetidoCofins);
    }
    if (!nullToAbsent || valorRetidoCsll != null) {
      map['valor_retido_csll'] = Variable<double>(valorRetidoCsll);
    }
    if (!nullToAbsent || baseCalculoIrrf != null) {
      map['base_calculo_irrf'] = Variable<double>(baseCalculoIrrf);
    }
    if (!nullToAbsent || valorRetidoIrrf != null) {
      map['valor_retido_irrf'] = Variable<double>(valorRetidoIrrf);
    }
    if (!nullToAbsent || baseCalculoPrevidencia != null) {
      map['base_calculo_previdencia'] = Variable<double>(
        baseCalculoPrevidencia,
      );
    }
    if (!nullToAbsent || valorRetidoPrevidencia != null) {
      map['valor_retido_previdencia'] = Variable<double>(
        valorRetidoPrevidencia,
      );
    }
    if (!nullToAbsent || informacoesAddFisco != null) {
      map['informacoes_add_fisco'] = Variable<String>(informacoesAddFisco);
    }
    if (!nullToAbsent || informacoesAddContribuinte != null) {
      map['informacoes_add_contribuinte'] = Variable<String>(
        informacoesAddContribuinte,
      );
    }
    if (!nullToAbsent || comexUfEmbarque != null) {
      map['comex_uf_embarque'] = Variable<String>(comexUfEmbarque);
    }
    if (!nullToAbsent || comexLocalEmbarque != null) {
      map['comex_local_embarque'] = Variable<String>(comexLocalEmbarque);
    }
    if (!nullToAbsent || comexLocalDespacho != null) {
      map['comex_local_despacho'] = Variable<String>(comexLocalDespacho);
    }
    if (!nullToAbsent || compraNotaEmpenho != null) {
      map['compra_nota_empenho'] = Variable<String>(compraNotaEmpenho);
    }
    if (!nullToAbsent || compraPedido != null) {
      map['compra_pedido'] = Variable<String>(compraPedido);
    }
    if (!nullToAbsent || compraContrato != null) {
      map['compra_contrato'] = Variable<String>(compraContrato);
    }
    if (!nullToAbsent || qrcode != null) {
      map['qrcode'] = Variable<String>(qrcode);
    }
    if (!nullToAbsent || urlChave != null) {
      map['url_chave'] = Variable<String>(urlChave);
    }
    if (!nullToAbsent || statusNota != null) {
      map['status_nota'] = Variable<String>(statusNota);
    }
    if (!nullToAbsent || indicadorIntermediario != null) {
      map['indicador_intermediario'] = Variable<String>(indicadorIntermediario);
    }
    if (!nullToAbsent || intermediadorCnpj != null) {
      map['intermediador_cnpj'] = Variable<String>(intermediadorCnpj);
    }
    if (!nullToAbsent || intermediadorIdCadastro != null) {
      map['intermediador_id_cadastro'] = Variable<String>(
        intermediadorIdCadastro,
      );
    }
    if (!nullToAbsent || codigoMunicipioFgIbs != null) {
      map['codigo_municipio_fg_ibs'] = Variable<int>(codigoMunicipioFgIbs);
    }
    if (!nullToAbsent || tipoNotaDebito != null) {
      map['tipo_nota_debito'] = Variable<String>(tipoNotaDebito);
    }
    if (!nullToAbsent || tipoNotaCredito != null) {
      map['tipo_nota_credito'] = Variable<String>(tipoNotaCredito);
    }
    if (!nullToAbsent || totalImpostoSeletivo != null) {
      map['total_imposto_seletivo'] = Variable<double>(totalImpostoSeletivo);
    }
    if (!nullToAbsent || totalBcIbsCbs != null) {
      map['total_bc_ibs_cbs'] = Variable<double>(totalBcIbsCbs);
    }
    if (!nullToAbsent || ibsUfTotalDiferimento != null) {
      map['ibs_uf_total_diferimento'] = Variable<double>(ibsUfTotalDiferimento);
    }
    if (!nullToAbsent || ibsUfTotalDevTributos != null) {
      map['ibs_uf_total_dev_tributos'] = Variable<double>(
        ibsUfTotalDevTributos,
      );
    }
    if (!nullToAbsent || ibsUfValorTotal != null) {
      map['ibs_uf_valor_total'] = Variable<double>(ibsUfValorTotal);
    }
    if (!nullToAbsent || ibsMunTotalDiferimento != null) {
      map['ibs_mun_total_diferimento'] = Variable<double>(
        ibsMunTotalDiferimento,
      );
    }
    if (!nullToAbsent || ibsMunTotalDevTributos != null) {
      map['ibs_mun_total_dev_tributos'] = Variable<double>(
        ibsMunTotalDevTributos,
      );
    }
    if (!nullToAbsent || ibsMunValorTotal != null) {
      map['ibs_mun_valor_total'] = Variable<double>(ibsMunValorTotal);
    }
    if (!nullToAbsent || cbsTotalDiferimento != null) {
      map['cbs_total_diferimento'] = Variable<double>(cbsTotalDiferimento);
    }
    if (!nullToAbsent || cbsTotalDevTributos != null) {
      map['cbs_total_dev_tributos'] = Variable<double>(cbsTotalDevTributos);
    }
    if (!nullToAbsent || cbsValorTotal != null) {
      map['cbs_valor_total'] = Variable<double>(cbsValorTotal);
    }
    if (!nullToAbsent || cbsTotalCreditoPresumido != null) {
      map['cbs_total_credito_presumido'] = Variable<double>(
        cbsTotalCreditoPresumido,
      );
    }
    if (!nullToAbsent || cbsTotCrePreSuspensivo != null) {
      map['cbs_tot_cre_pre_suspensivo'] = Variable<double>(
        cbsTotCrePreSuspensivo,
      );
    }
    if (!nullToAbsent || monoIbsTotal != null) {
      map['mono_ibs_total'] = Variable<double>(monoIbsTotal);
    }
    if (!nullToAbsent || monoCbsTotal != null) {
      map['mono_cbs_total'] = Variable<double>(monoCbsTotal);
    }
    if (!nullToAbsent || monoIbsTotalRetencao != null) {
      map['mono_ibs_total_retencao'] = Variable<double>(monoIbsTotalRetencao);
    }
    if (!nullToAbsent || monoCbsTotalRetencao != null) {
      map['mono_cbs_total_retencao'] = Variable<double>(monoCbsTotalRetencao);
    }
    if (!nullToAbsent || monoIbsRetido != null) {
      map['mono_ibs_retido'] = Variable<double>(monoIbsRetido);
    }
    if (!nullToAbsent || monoCbsRetido != null) {
      map['mono_cbs_retido'] = Variable<double>(monoCbsRetido);
    }
    if (!nullToAbsent || valorTotalNfe != null) {
      map['valor_total_nfe'] = Variable<double>(valorTotalNfe);
    }
    if (!nullToAbsent || totalQtdeTributadaMono != null) {
      map['total_qtde_tributada_mono'] = Variable<double>(
        totalQtdeTributadaMono,
      );
    }
    if (!nullToAbsent || totalIcmsMono != null) {
      map['total_icms_mono'] = Variable<double>(totalIcmsMono);
    }
    if (!nullToAbsent || totalQuantidadeMonoRetencao != null) {
      map['total_quantidade_mono_retencao'] = Variable<double>(
        totalQuantidadeMonoRetencao,
      );
    }
    if (!nullToAbsent || totalIcmsMonoRetencao != null) {
      map['total_icms_mono_retencao'] = Variable<double>(totalIcmsMonoRetencao);
    }
    if (!nullToAbsent || totalQuantidadeMonoRetida != null) {
      map['total_quantidade_mono_retida'] = Variable<double>(
        totalQuantidadeMonoRetida,
      );
    }
    if (!nullToAbsent || totalIcmsMonoRetido != null) {
      map['total_icms_mono_retido'] = Variable<double>(totalIcmsMonoRetido);
    }
    if (!nullToAbsent || ibsValorTotal != null) {
      map['ibs_valor_total'] = Variable<double>(ibsValorTotal);
    }
    if (!nullToAbsent || totalCreditoPresumido != null) {
      map['total_credito_presumido'] = Variable<double>(totalCreditoPresumido);
    }
    if (!nullToAbsent || totalCredPresSuspensivo != null) {
      map['total_cred_pres_suspensivo'] = Variable<double>(
        totalCredPresSuspensivo,
      );
    }
    return map;
  }

  factory NfeCabecalho.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeCabecalho(
      id: serializer.fromJson<int?>(json['id']),
      idVendaCabecalho: serializer.fromJson<int?>(json['idVendaCabecalho']),
      idTributOperacaoFiscal: serializer.fromJson<int?>(
        json['idTributOperacaoFiscal'],
      ),
      idCliente: serializer.fromJson<int?>(json['idCliente']),
      idColaborador: serializer.fromJson<int?>(json['idColaborador']),
      idFornecedor: serializer.fromJson<int?>(json['idFornecedor']),
      ufEmitente: serializer.fromJson<String?>(json['ufEmitente']),
      codigoNumerico: serializer.fromJson<String?>(json['codigoNumerico']),
      naturezaOperacao: serializer.fromJson<String?>(json['naturezaOperacao']),
      codigoModelo: serializer.fromJson<String?>(json['codigoModelo']),
      serie: serializer.fromJson<String?>(json['serie']),
      numero: serializer.fromJson<String?>(json['numero']),
      dataHoraEmissao: serializer.fromJson<DateTime?>(json['dataHoraEmissao']),
      dataHoraEntradaSaida: serializer.fromJson<DateTime?>(
        json['dataHoraEntradaSaida'],
      ),
      tipoOperacao: serializer.fromJson<String?>(json['tipoOperacao']),
      localDestino: serializer.fromJson<String?>(json['localDestino']),
      codigoMunicipio: serializer.fromJson<int?>(json['codigoMunicipio']),
      formatoImpressaoDanfe: serializer.fromJson<String?>(
        json['formatoImpressaoDanfe'],
      ),
      tipoEmissao: serializer.fromJson<String?>(json['tipoEmissao']),
      chaveAcesso: serializer.fromJson<String?>(json['chaveAcesso']),
      digitoChaveAcesso: serializer.fromJson<String?>(
        json['digitoChaveAcesso'],
      ),
      ambiente: serializer.fromJson<String?>(json['ambiente']),
      finalidadeEmissao: serializer.fromJson<String?>(
        json['finalidadeEmissao'],
      ),
      consumidorOperacao: serializer.fromJson<String?>(
        json['consumidorOperacao'],
      ),
      consumidorPresenca: serializer.fromJson<String?>(
        json['consumidorPresenca'],
      ),
      processoEmissao: serializer.fromJson<String?>(json['processoEmissao']),
      versaoProcessoEmissao: serializer.fromJson<String?>(
        json['versaoProcessoEmissao'],
      ),
      dataEntradaContingencia: serializer.fromJson<DateTime?>(
        json['dataEntradaContingencia'],
      ),
      justificativaContingencia: serializer.fromJson<String?>(
        json['justificativaContingencia'],
      ),
      baseCalculoIcms: serializer.fromJson<double?>(json['baseCalculoIcms']),
      valorIcms: serializer.fromJson<double?>(json['valorIcms']),
      valorIcmsDesonerado: serializer.fromJson<double?>(
        json['valorIcmsDesonerado'],
      ),
      totalIcmsFcpUfDestino: serializer.fromJson<double?>(
        json['totalIcmsFcpUfDestino'],
      ),
      totalIcmsInterestadualUfDestino: serializer.fromJson<double?>(
        json['totalIcmsInterestadualUfDestino'],
      ),
      totalIcmsInterestadualUfRemetente: serializer.fromJson<double?>(
        json['totalIcmsInterestadualUfRemetente'],
      ),
      valorTotalFcp: serializer.fromJson<double?>(json['valorTotalFcp']),
      baseCalculoIcmsSt: serializer.fromJson<double?>(
        json['baseCalculoIcmsSt'],
      ),
      valorIcmsSt: serializer.fromJson<double?>(json['valorIcmsSt']),
      valorTotalFcpSt: serializer.fromJson<double?>(json['valorTotalFcpSt']),
      valorTotalFcpStRetido: serializer.fromJson<double?>(
        json['valorTotalFcpStRetido'],
      ),
      valorTotalProdutos: serializer.fromJson<double?>(
        json['valorTotalProdutos'],
      ),
      valorFrete: serializer.fromJson<double?>(json['valorFrete']),
      valorSeguro: serializer.fromJson<double?>(json['valorSeguro']),
      valorDesconto: serializer.fromJson<double?>(json['valorDesconto']),
      valorImpostoImportacao: serializer.fromJson<double?>(
        json['valorImpostoImportacao'],
      ),
      valorIpi: serializer.fromJson<double?>(json['valorIpi']),
      valorIpiDevolvido: serializer.fromJson<double?>(
        json['valorIpiDevolvido'],
      ),
      valorPis: serializer.fromJson<double?>(json['valorPis']),
      valorCofins: serializer.fromJson<double?>(json['valorCofins']),
      valorDespesasAcessorias: serializer.fromJson<double?>(
        json['valorDespesasAcessorias'],
      ),
      valorTotal: serializer.fromJson<double?>(json['valorTotal']),
      valorTotalTributos: serializer.fromJson<double?>(
        json['valorTotalTributos'],
      ),
      valorServicos: serializer.fromJson<double?>(json['valorServicos']),
      baseCalculoIssqn: serializer.fromJson<double?>(json['baseCalculoIssqn']),
      valorIssqn: serializer.fromJson<double?>(json['valorIssqn']),
      valorPisIssqn: serializer.fromJson<double?>(json['valorPisIssqn']),
      valorCofinsIssqn: serializer.fromJson<double?>(json['valorCofinsIssqn']),
      dataPrestacaoServico: serializer.fromJson<DateTime?>(
        json['dataPrestacaoServico'],
      ),
      valorDeducaoIssqn: serializer.fromJson<double?>(
        json['valorDeducaoIssqn'],
      ),
      outrasRetencoesIssqn: serializer.fromJson<double?>(
        json['outrasRetencoesIssqn'],
      ),
      descontoIncondicionadoIssqn: serializer.fromJson<double?>(
        json['descontoIncondicionadoIssqn'],
      ),
      descontoCondicionadoIssqn: serializer.fromJson<double?>(
        json['descontoCondicionadoIssqn'],
      ),
      totalRetencaoIssqn: serializer.fromJson<double?>(
        json['totalRetencaoIssqn'],
      ),
      regimeEspecialTributacao: serializer.fromJson<String?>(
        json['regimeEspecialTributacao'],
      ),
      valorRetidoPis: serializer.fromJson<double?>(json['valorRetidoPis']),
      valorRetidoCofins: serializer.fromJson<double?>(
        json['valorRetidoCofins'],
      ),
      valorRetidoCsll: serializer.fromJson<double?>(json['valorRetidoCsll']),
      baseCalculoIrrf: serializer.fromJson<double?>(json['baseCalculoIrrf']),
      valorRetidoIrrf: serializer.fromJson<double?>(json['valorRetidoIrrf']),
      baseCalculoPrevidencia: serializer.fromJson<double?>(
        json['baseCalculoPrevidencia'],
      ),
      valorRetidoPrevidencia: serializer.fromJson<double?>(
        json['valorRetidoPrevidencia'],
      ),
      informacoesAddFisco: serializer.fromJson<String?>(
        json['informacoesAddFisco'],
      ),
      informacoesAddContribuinte: serializer.fromJson<String?>(
        json['informacoesAddContribuinte'],
      ),
      comexUfEmbarque: serializer.fromJson<String?>(json['comexUfEmbarque']),
      comexLocalEmbarque: serializer.fromJson<String?>(
        json['comexLocalEmbarque'],
      ),
      comexLocalDespacho: serializer.fromJson<String?>(
        json['comexLocalDespacho'],
      ),
      compraNotaEmpenho: serializer.fromJson<String?>(
        json['compraNotaEmpenho'],
      ),
      compraPedido: serializer.fromJson<String?>(json['compraPedido']),
      compraContrato: serializer.fromJson<String?>(json['compraContrato']),
      qrcode: serializer.fromJson<String?>(json['qrcode']),
      urlChave: serializer.fromJson<String?>(json['urlChave']),
      statusNota: serializer.fromJson<String?>(json['statusNota']),
      indicadorIntermediario: serializer.fromJson<String?>(
        json['indicadorIntermediario'],
      ),
      intermediadorCnpj: serializer.fromJson<String?>(
        json['intermediadorCnpj'],
      ),
      intermediadorIdCadastro: serializer.fromJson<String?>(
        json['intermediadorIdCadastro'],
      ),
      codigoMunicipioFgIbs: serializer.fromJson<int?>(
        json['codigoMunicipioFgIbs'],
      ),
      tipoNotaDebito: serializer.fromJson<String?>(json['tipoNotaDebito']),
      tipoNotaCredito: serializer.fromJson<String?>(json['tipoNotaCredito']),
      totalImpostoSeletivo: serializer.fromJson<double?>(
        json['totalImpostoSeletivo'],
      ),
      totalBcIbsCbs: serializer.fromJson<double?>(json['totalBcIbsCbs']),
      ibsUfTotalDiferimento: serializer.fromJson<double?>(
        json['ibsUfTotalDiferimento'],
      ),
      ibsUfTotalDevTributos: serializer.fromJson<double?>(
        json['ibsUfTotalDevTributos'],
      ),
      ibsUfValorTotal: serializer.fromJson<double?>(json['ibsUfValorTotal']),
      ibsMunTotalDiferimento: serializer.fromJson<double?>(
        json['ibsMunTotalDiferimento'],
      ),
      ibsMunTotalDevTributos: serializer.fromJson<double?>(
        json['ibsMunTotalDevTributos'],
      ),
      ibsMunValorTotal: serializer.fromJson<double?>(json['ibsMunValorTotal']),
      cbsTotalDiferimento: serializer.fromJson<double?>(
        json['cbsTotalDiferimento'],
      ),
      cbsTotalDevTributos: serializer.fromJson<double?>(
        json['cbsTotalDevTributos'],
      ),
      cbsValorTotal: serializer.fromJson<double?>(json['cbsValorTotal']),
      cbsTotalCreditoPresumido: serializer.fromJson<double?>(
        json['cbsTotalCreditoPresumido'],
      ),
      cbsTotCrePreSuspensivo: serializer.fromJson<double?>(
        json['cbsTotCrePreSuspensivo'],
      ),
      monoIbsTotal: serializer.fromJson<double?>(json['monoIbsTotal']),
      monoCbsTotal: serializer.fromJson<double?>(json['monoCbsTotal']),
      monoIbsTotalRetencao: serializer.fromJson<double?>(
        json['monoIbsTotalRetencao'],
      ),
      monoCbsTotalRetencao: serializer.fromJson<double?>(
        json['monoCbsTotalRetencao'],
      ),
      monoIbsRetido: serializer.fromJson<double?>(json['monoIbsRetido']),
      monoCbsRetido: serializer.fromJson<double?>(json['monoCbsRetido']),
      valorTotalNfe: serializer.fromJson<double?>(json['valorTotalNfe']),
      totalQtdeTributadaMono: serializer.fromJson<double?>(
        json['totalQtdeTributadaMono'],
      ),
      totalIcmsMono: serializer.fromJson<double?>(json['totalIcmsMono']),
      totalQuantidadeMonoRetencao: serializer.fromJson<double?>(
        json['totalQuantidadeMonoRetencao'],
      ),
      totalIcmsMonoRetencao: serializer.fromJson<double?>(
        json['totalIcmsMonoRetencao'],
      ),
      totalQuantidadeMonoRetida: serializer.fromJson<double?>(
        json['totalQuantidadeMonoRetida'],
      ),
      totalIcmsMonoRetido: serializer.fromJson<double?>(
        json['totalIcmsMonoRetido'],
      ),
      ibsValorTotal: serializer.fromJson<double?>(json['ibsValorTotal']),
      totalCreditoPresumido: serializer.fromJson<double?>(
        json['totalCreditoPresumido'],
      ),
      totalCredPresSuspensivo: serializer.fromJson<double?>(
        json['totalCredPresSuspensivo'],
      ),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idVendaCabecalho': serializer.toJson<int?>(idVendaCabecalho),
      'idTributOperacaoFiscal': serializer.toJson<int?>(idTributOperacaoFiscal),
      'idCliente': serializer.toJson<int?>(idCliente),
      'idColaborador': serializer.toJson<int?>(idColaborador),
      'idFornecedor': serializer.toJson<int?>(idFornecedor),
      'ufEmitente': serializer.toJson<String?>(ufEmitente),
      'codigoNumerico': serializer.toJson<String?>(codigoNumerico),
      'naturezaOperacao': serializer.toJson<String?>(naturezaOperacao),
      'codigoModelo': serializer.toJson<String?>(codigoModelo),
      'serie': serializer.toJson<String?>(serie),
      'numero': serializer.toJson<String?>(numero),
      'dataHoraEmissao': serializer.toJson<DateTime?>(dataHoraEmissao),
      'dataHoraEntradaSaida': serializer.toJson<DateTime?>(
        dataHoraEntradaSaida,
      ),
      'tipoOperacao': serializer.toJson<String?>(tipoOperacao),
      'localDestino': serializer.toJson<String?>(localDestino),
      'codigoMunicipio': serializer.toJson<int?>(codigoMunicipio),
      'formatoImpressaoDanfe': serializer.toJson<String?>(
        formatoImpressaoDanfe,
      ),
      'tipoEmissao': serializer.toJson<String?>(tipoEmissao),
      'chaveAcesso': serializer.toJson<String?>(chaveAcesso),
      'digitoChaveAcesso': serializer.toJson<String?>(digitoChaveAcesso),
      'ambiente': serializer.toJson<String?>(ambiente),
      'finalidadeEmissao': serializer.toJson<String?>(finalidadeEmissao),
      'consumidorOperacao': serializer.toJson<String?>(consumidorOperacao),
      'consumidorPresenca': serializer.toJson<String?>(consumidorPresenca),
      'processoEmissao': serializer.toJson<String?>(processoEmissao),
      'versaoProcessoEmissao': serializer.toJson<String?>(
        versaoProcessoEmissao,
      ),
      'dataEntradaContingencia': serializer.toJson<DateTime?>(
        dataEntradaContingencia,
      ),
      'justificativaContingencia': serializer.toJson<String?>(
        justificativaContingencia,
      ),
      'baseCalculoIcms': serializer.toJson<double?>(baseCalculoIcms),
      'valorIcms': serializer.toJson<double?>(valorIcms),
      'valorIcmsDesonerado': serializer.toJson<double?>(valorIcmsDesonerado),
      'totalIcmsFcpUfDestino': serializer.toJson<double?>(
        totalIcmsFcpUfDestino,
      ),
      'totalIcmsInterestadualUfDestino': serializer.toJson<double?>(
        totalIcmsInterestadualUfDestino,
      ),
      'totalIcmsInterestadualUfRemetente': serializer.toJson<double?>(
        totalIcmsInterestadualUfRemetente,
      ),
      'valorTotalFcp': serializer.toJson<double?>(valorTotalFcp),
      'baseCalculoIcmsSt': serializer.toJson<double?>(baseCalculoIcmsSt),
      'valorIcmsSt': serializer.toJson<double?>(valorIcmsSt),
      'valorTotalFcpSt': serializer.toJson<double?>(valorTotalFcpSt),
      'valorTotalFcpStRetido': serializer.toJson<double?>(
        valorTotalFcpStRetido,
      ),
      'valorTotalProdutos': serializer.toJson<double?>(valorTotalProdutos),
      'valorFrete': serializer.toJson<double?>(valorFrete),
      'valorSeguro': serializer.toJson<double?>(valorSeguro),
      'valorDesconto': serializer.toJson<double?>(valorDesconto),
      'valorImpostoImportacao': serializer.toJson<double?>(
        valorImpostoImportacao,
      ),
      'valorIpi': serializer.toJson<double?>(valorIpi),
      'valorIpiDevolvido': serializer.toJson<double?>(valorIpiDevolvido),
      'valorPis': serializer.toJson<double?>(valorPis),
      'valorCofins': serializer.toJson<double?>(valorCofins),
      'valorDespesasAcessorias': serializer.toJson<double?>(
        valorDespesasAcessorias,
      ),
      'valorTotal': serializer.toJson<double?>(valorTotal),
      'valorTotalTributos': serializer.toJson<double?>(valorTotalTributos),
      'valorServicos': serializer.toJson<double?>(valorServicos),
      'baseCalculoIssqn': serializer.toJson<double?>(baseCalculoIssqn),
      'valorIssqn': serializer.toJson<double?>(valorIssqn),
      'valorPisIssqn': serializer.toJson<double?>(valorPisIssqn),
      'valorCofinsIssqn': serializer.toJson<double?>(valorCofinsIssqn),
      'dataPrestacaoServico': serializer.toJson<DateTime?>(
        dataPrestacaoServico,
      ),
      'valorDeducaoIssqn': serializer.toJson<double?>(valorDeducaoIssqn),
      'outrasRetencoesIssqn': serializer.toJson<double?>(outrasRetencoesIssqn),
      'descontoIncondicionadoIssqn': serializer.toJson<double?>(
        descontoIncondicionadoIssqn,
      ),
      'descontoCondicionadoIssqn': serializer.toJson<double?>(
        descontoCondicionadoIssqn,
      ),
      'totalRetencaoIssqn': serializer.toJson<double?>(totalRetencaoIssqn),
      'regimeEspecialTributacao': serializer.toJson<String?>(
        regimeEspecialTributacao,
      ),
      'valorRetidoPis': serializer.toJson<double?>(valorRetidoPis),
      'valorRetidoCofins': serializer.toJson<double?>(valorRetidoCofins),
      'valorRetidoCsll': serializer.toJson<double?>(valorRetidoCsll),
      'baseCalculoIrrf': serializer.toJson<double?>(baseCalculoIrrf),
      'valorRetidoIrrf': serializer.toJson<double?>(valorRetidoIrrf),
      'baseCalculoPrevidencia': serializer.toJson<double?>(
        baseCalculoPrevidencia,
      ),
      'valorRetidoPrevidencia': serializer.toJson<double?>(
        valorRetidoPrevidencia,
      ),
      'informacoesAddFisco': serializer.toJson<String?>(informacoesAddFisco),
      'informacoesAddContribuinte': serializer.toJson<String?>(
        informacoesAddContribuinte,
      ),
      'comexUfEmbarque': serializer.toJson<String?>(comexUfEmbarque),
      'comexLocalEmbarque': serializer.toJson<String?>(comexLocalEmbarque),
      'comexLocalDespacho': serializer.toJson<String?>(comexLocalDespacho),
      'compraNotaEmpenho': serializer.toJson<String?>(compraNotaEmpenho),
      'compraPedido': serializer.toJson<String?>(compraPedido),
      'compraContrato': serializer.toJson<String?>(compraContrato),
      'qrcode': serializer.toJson<String?>(qrcode),
      'urlChave': serializer.toJson<String?>(urlChave),
      'statusNota': serializer.toJson<String?>(statusNota),
      'indicadorIntermediario': serializer.toJson<String?>(
        indicadorIntermediario,
      ),
      'intermediadorCnpj': serializer.toJson<String?>(intermediadorCnpj),
      'intermediadorIdCadastro': serializer.toJson<String?>(
        intermediadorIdCadastro,
      ),
      'codigoMunicipioFgIbs': serializer.toJson<int?>(codigoMunicipioFgIbs),
      'tipoNotaDebito': serializer.toJson<String?>(tipoNotaDebito),
      'tipoNotaCredito': serializer.toJson<String?>(tipoNotaCredito),
      'totalImpostoSeletivo': serializer.toJson<double?>(totalImpostoSeletivo),
      'totalBcIbsCbs': serializer.toJson<double?>(totalBcIbsCbs),
      'ibsUfTotalDiferimento': serializer.toJson<double?>(
        ibsUfTotalDiferimento,
      ),
      'ibsUfTotalDevTributos': serializer.toJson<double?>(
        ibsUfTotalDevTributos,
      ),
      'ibsUfValorTotal': serializer.toJson<double?>(ibsUfValorTotal),
      'ibsMunTotalDiferimento': serializer.toJson<double?>(
        ibsMunTotalDiferimento,
      ),
      'ibsMunTotalDevTributos': serializer.toJson<double?>(
        ibsMunTotalDevTributos,
      ),
      'ibsMunValorTotal': serializer.toJson<double?>(ibsMunValorTotal),
      'cbsTotalDiferimento': serializer.toJson<double?>(cbsTotalDiferimento),
      'cbsTotalDevTributos': serializer.toJson<double?>(cbsTotalDevTributos),
      'cbsValorTotal': serializer.toJson<double?>(cbsValorTotal),
      'cbsTotalCreditoPresumido': serializer.toJson<double?>(
        cbsTotalCreditoPresumido,
      ),
      'cbsTotCrePreSuspensivo': serializer.toJson<double?>(
        cbsTotCrePreSuspensivo,
      ),
      'monoIbsTotal': serializer.toJson<double?>(monoIbsTotal),
      'monoCbsTotal': serializer.toJson<double?>(monoCbsTotal),
      'monoIbsTotalRetencao': serializer.toJson<double?>(monoIbsTotalRetencao),
      'monoCbsTotalRetencao': serializer.toJson<double?>(monoCbsTotalRetencao),
      'monoIbsRetido': serializer.toJson<double?>(monoIbsRetido),
      'monoCbsRetido': serializer.toJson<double?>(monoCbsRetido),
      'valorTotalNfe': serializer.toJson<double?>(valorTotalNfe),
      'totalQtdeTributadaMono': serializer.toJson<double?>(
        totalQtdeTributadaMono,
      ),
      'totalIcmsMono': serializer.toJson<double?>(totalIcmsMono),
      'totalQuantidadeMonoRetencao': serializer.toJson<double?>(
        totalQuantidadeMonoRetencao,
      ),
      'totalIcmsMonoRetencao': serializer.toJson<double?>(
        totalIcmsMonoRetencao,
      ),
      'totalQuantidadeMonoRetida': serializer.toJson<double?>(
        totalQuantidadeMonoRetida,
      ),
      'totalIcmsMonoRetido': serializer.toJson<double?>(totalIcmsMonoRetido),
      'ibsValorTotal': serializer.toJson<double?>(ibsValorTotal),
      'totalCreditoPresumido': serializer.toJson<double?>(
        totalCreditoPresumido,
      ),
      'totalCredPresSuspensivo': serializer.toJson<double?>(
        totalCredPresSuspensivo,
      ),
    };
  }

  NfeCabecalho copyWith({
    Value<int?> id = const Value.absent(),
    Value<int?> idVendaCabecalho = const Value.absent(),
    Value<int?> idTributOperacaoFiscal = const Value.absent(),
    Value<int?> idCliente = const Value.absent(),
    Value<int?> idColaborador = const Value.absent(),
    Value<int?> idFornecedor = const Value.absent(),
    Value<String?> ufEmitente = const Value.absent(),
    Value<String?> codigoNumerico = const Value.absent(),
    Value<String?> naturezaOperacao = const Value.absent(),
    Value<String?> codigoModelo = const Value.absent(),
    Value<String?> serie = const Value.absent(),
    Value<String?> numero = const Value.absent(),
    Value<DateTime?> dataHoraEmissao = const Value.absent(),
    Value<DateTime?> dataHoraEntradaSaida = const Value.absent(),
    Value<String?> tipoOperacao = const Value.absent(),
    Value<String?> localDestino = const Value.absent(),
    Value<int?> codigoMunicipio = const Value.absent(),
    Value<String?> formatoImpressaoDanfe = const Value.absent(),
    Value<String?> tipoEmissao = const Value.absent(),
    Value<String?> chaveAcesso = const Value.absent(),
    Value<String?> digitoChaveAcesso = const Value.absent(),
    Value<String?> ambiente = const Value.absent(),
    Value<String?> finalidadeEmissao = const Value.absent(),
    Value<String?> consumidorOperacao = const Value.absent(),
    Value<String?> consumidorPresenca = const Value.absent(),
    Value<String?> processoEmissao = const Value.absent(),
    Value<String?> versaoProcessoEmissao = const Value.absent(),
    Value<DateTime?> dataEntradaContingencia = const Value.absent(),
    Value<String?> justificativaContingencia = const Value.absent(),
    Value<double?> baseCalculoIcms = const Value.absent(),
    Value<double?> valorIcms = const Value.absent(),
    Value<double?> valorIcmsDesonerado = const Value.absent(),
    Value<double?> totalIcmsFcpUfDestino = const Value.absent(),
    Value<double?> totalIcmsInterestadualUfDestino = const Value.absent(),
    Value<double?> totalIcmsInterestadualUfRemetente = const Value.absent(),
    Value<double?> valorTotalFcp = const Value.absent(),
    Value<double?> baseCalculoIcmsSt = const Value.absent(),
    Value<double?> valorIcmsSt = const Value.absent(),
    Value<double?> valorTotalFcpSt = const Value.absent(),
    Value<double?> valorTotalFcpStRetido = const Value.absent(),
    Value<double?> valorTotalProdutos = const Value.absent(),
    Value<double?> valorFrete = const Value.absent(),
    Value<double?> valorSeguro = const Value.absent(),
    Value<double?> valorDesconto = const Value.absent(),
    Value<double?> valorImpostoImportacao = const Value.absent(),
    Value<double?> valorIpi = const Value.absent(),
    Value<double?> valorIpiDevolvido = const Value.absent(),
    Value<double?> valorPis = const Value.absent(),
    Value<double?> valorCofins = const Value.absent(),
    Value<double?> valorDespesasAcessorias = const Value.absent(),
    Value<double?> valorTotal = const Value.absent(),
    Value<double?> valorTotalTributos = const Value.absent(),
    Value<double?> valorServicos = const Value.absent(),
    Value<double?> baseCalculoIssqn = const Value.absent(),
    Value<double?> valorIssqn = const Value.absent(),
    Value<double?> valorPisIssqn = const Value.absent(),
    Value<double?> valorCofinsIssqn = const Value.absent(),
    Value<DateTime?> dataPrestacaoServico = const Value.absent(),
    Value<double?> valorDeducaoIssqn = const Value.absent(),
    Value<double?> outrasRetencoesIssqn = const Value.absent(),
    Value<double?> descontoIncondicionadoIssqn = const Value.absent(),
    Value<double?> descontoCondicionadoIssqn = const Value.absent(),
    Value<double?> totalRetencaoIssqn = const Value.absent(),
    Value<String?> regimeEspecialTributacao = const Value.absent(),
    Value<double?> valorRetidoPis = const Value.absent(),
    Value<double?> valorRetidoCofins = const Value.absent(),
    Value<double?> valorRetidoCsll = const Value.absent(),
    Value<double?> baseCalculoIrrf = const Value.absent(),
    Value<double?> valorRetidoIrrf = const Value.absent(),
    Value<double?> baseCalculoPrevidencia = const Value.absent(),
    Value<double?> valorRetidoPrevidencia = const Value.absent(),
    Value<String?> informacoesAddFisco = const Value.absent(),
    Value<String?> informacoesAddContribuinte = const Value.absent(),
    Value<String?> comexUfEmbarque = const Value.absent(),
    Value<String?> comexLocalEmbarque = const Value.absent(),
    Value<String?> comexLocalDespacho = const Value.absent(),
    Value<String?> compraNotaEmpenho = const Value.absent(),
    Value<String?> compraPedido = const Value.absent(),
    Value<String?> compraContrato = const Value.absent(),
    Value<String?> qrcode = const Value.absent(),
    Value<String?> urlChave = const Value.absent(),
    Value<String?> statusNota = const Value.absent(),
    Value<String?> indicadorIntermediario = const Value.absent(),
    Value<String?> intermediadorCnpj = const Value.absent(),
    Value<String?> intermediadorIdCadastro = const Value.absent(),
    Value<int?> codigoMunicipioFgIbs = const Value.absent(),
    Value<String?> tipoNotaDebito = const Value.absent(),
    Value<String?> tipoNotaCredito = const Value.absent(),
    Value<double?> totalImpostoSeletivo = const Value.absent(),
    Value<double?> totalBcIbsCbs = const Value.absent(),
    Value<double?> ibsUfTotalDiferimento = const Value.absent(),
    Value<double?> ibsUfTotalDevTributos = const Value.absent(),
    Value<double?> ibsUfValorTotal = const Value.absent(),
    Value<double?> ibsMunTotalDiferimento = const Value.absent(),
    Value<double?> ibsMunTotalDevTributos = const Value.absent(),
    Value<double?> ibsMunValorTotal = const Value.absent(),
    Value<double?> cbsTotalDiferimento = const Value.absent(),
    Value<double?> cbsTotalDevTributos = const Value.absent(),
    Value<double?> cbsValorTotal = const Value.absent(),
    Value<double?> cbsTotalCreditoPresumido = const Value.absent(),
    Value<double?> cbsTotCrePreSuspensivo = const Value.absent(),
    Value<double?> monoIbsTotal = const Value.absent(),
    Value<double?> monoCbsTotal = const Value.absent(),
    Value<double?> monoIbsTotalRetencao = const Value.absent(),
    Value<double?> monoCbsTotalRetencao = const Value.absent(),
    Value<double?> monoIbsRetido = const Value.absent(),
    Value<double?> monoCbsRetido = const Value.absent(),
    Value<double?> valorTotalNfe = const Value.absent(),
    Value<double?> totalQtdeTributadaMono = const Value.absent(),
    Value<double?> totalIcmsMono = const Value.absent(),
    Value<double?> totalQuantidadeMonoRetencao = const Value.absent(),
    Value<double?> totalIcmsMonoRetencao = const Value.absent(),
    Value<double?> totalQuantidadeMonoRetida = const Value.absent(),
    Value<double?> totalIcmsMonoRetido = const Value.absent(),
    Value<double?> ibsValorTotal = const Value.absent(),
    Value<double?> totalCreditoPresumido = const Value.absent(),
    Value<double?> totalCredPresSuspensivo = const Value.absent(),
  }) => NfeCabecalho(
    id: id.present ? id.value : this.id,
    idVendaCabecalho:
        idVendaCabecalho.present
            ? idVendaCabecalho.value
            : this.idVendaCabecalho,
    idTributOperacaoFiscal:
        idTributOperacaoFiscal.present
            ? idTributOperacaoFiscal.value
            : this.idTributOperacaoFiscal,
    idCliente: idCliente.present ? idCliente.value : this.idCliente,
    idColaborador:
        idColaborador.present ? idColaborador.value : this.idColaborador,
    idFornecedor: idFornecedor.present ? idFornecedor.value : this.idFornecedor,
    ufEmitente: ufEmitente.present ? ufEmitente.value : this.ufEmitente,
    codigoNumerico:
        codigoNumerico.present ? codigoNumerico.value : this.codigoNumerico,
    naturezaOperacao:
        naturezaOperacao.present
            ? naturezaOperacao.value
            : this.naturezaOperacao,
    codigoModelo: codigoModelo.present ? codigoModelo.value : this.codigoModelo,
    serie: serie.present ? serie.value : this.serie,
    numero: numero.present ? numero.value : this.numero,
    dataHoraEmissao:
        dataHoraEmissao.present ? dataHoraEmissao.value : this.dataHoraEmissao,
    dataHoraEntradaSaida:
        dataHoraEntradaSaida.present
            ? dataHoraEntradaSaida.value
            : this.dataHoraEntradaSaida,
    tipoOperacao: tipoOperacao.present ? tipoOperacao.value : this.tipoOperacao,
    localDestino: localDestino.present ? localDestino.value : this.localDestino,
    codigoMunicipio:
        codigoMunicipio.present ? codigoMunicipio.value : this.codigoMunicipio,
    formatoImpressaoDanfe:
        formatoImpressaoDanfe.present
            ? formatoImpressaoDanfe.value
            : this.formatoImpressaoDanfe,
    tipoEmissao: tipoEmissao.present ? tipoEmissao.value : this.tipoEmissao,
    chaveAcesso: chaveAcesso.present ? chaveAcesso.value : this.chaveAcesso,
    digitoChaveAcesso:
        digitoChaveAcesso.present
            ? digitoChaveAcesso.value
            : this.digitoChaveAcesso,
    ambiente: ambiente.present ? ambiente.value : this.ambiente,
    finalidadeEmissao:
        finalidadeEmissao.present
            ? finalidadeEmissao.value
            : this.finalidadeEmissao,
    consumidorOperacao:
        consumidorOperacao.present
            ? consumidorOperacao.value
            : this.consumidorOperacao,
    consumidorPresenca:
        consumidorPresenca.present
            ? consumidorPresenca.value
            : this.consumidorPresenca,
    processoEmissao:
        processoEmissao.present ? processoEmissao.value : this.processoEmissao,
    versaoProcessoEmissao:
        versaoProcessoEmissao.present
            ? versaoProcessoEmissao.value
            : this.versaoProcessoEmissao,
    dataEntradaContingencia:
        dataEntradaContingencia.present
            ? dataEntradaContingencia.value
            : this.dataEntradaContingencia,
    justificativaContingencia:
        justificativaContingencia.present
            ? justificativaContingencia.value
            : this.justificativaContingencia,
    baseCalculoIcms:
        baseCalculoIcms.present ? baseCalculoIcms.value : this.baseCalculoIcms,
    valorIcms: valorIcms.present ? valorIcms.value : this.valorIcms,
    valorIcmsDesonerado:
        valorIcmsDesonerado.present
            ? valorIcmsDesonerado.value
            : this.valorIcmsDesonerado,
    totalIcmsFcpUfDestino:
        totalIcmsFcpUfDestino.present
            ? totalIcmsFcpUfDestino.value
            : this.totalIcmsFcpUfDestino,
    totalIcmsInterestadualUfDestino:
        totalIcmsInterestadualUfDestino.present
            ? totalIcmsInterestadualUfDestino.value
            : this.totalIcmsInterestadualUfDestino,
    totalIcmsInterestadualUfRemetente:
        totalIcmsInterestadualUfRemetente.present
            ? totalIcmsInterestadualUfRemetente.value
            : this.totalIcmsInterestadualUfRemetente,
    valorTotalFcp:
        valorTotalFcp.present ? valorTotalFcp.value : this.valorTotalFcp,
    baseCalculoIcmsSt:
        baseCalculoIcmsSt.present
            ? baseCalculoIcmsSt.value
            : this.baseCalculoIcmsSt,
    valorIcmsSt: valorIcmsSt.present ? valorIcmsSt.value : this.valorIcmsSt,
    valorTotalFcpSt:
        valorTotalFcpSt.present ? valorTotalFcpSt.value : this.valorTotalFcpSt,
    valorTotalFcpStRetido:
        valorTotalFcpStRetido.present
            ? valorTotalFcpStRetido.value
            : this.valorTotalFcpStRetido,
    valorTotalProdutos:
        valorTotalProdutos.present
            ? valorTotalProdutos.value
            : this.valorTotalProdutos,
    valorFrete: valorFrete.present ? valorFrete.value : this.valorFrete,
    valorSeguro: valorSeguro.present ? valorSeguro.value : this.valorSeguro,
    valorDesconto:
        valorDesconto.present ? valorDesconto.value : this.valorDesconto,
    valorImpostoImportacao:
        valorImpostoImportacao.present
            ? valorImpostoImportacao.value
            : this.valorImpostoImportacao,
    valorIpi: valorIpi.present ? valorIpi.value : this.valorIpi,
    valorIpiDevolvido:
        valorIpiDevolvido.present
            ? valorIpiDevolvido.value
            : this.valorIpiDevolvido,
    valorPis: valorPis.present ? valorPis.value : this.valorPis,
    valorCofins: valorCofins.present ? valorCofins.value : this.valorCofins,
    valorDespesasAcessorias:
        valorDespesasAcessorias.present
            ? valorDespesasAcessorias.value
            : this.valorDespesasAcessorias,
    valorTotal: valorTotal.present ? valorTotal.value : this.valorTotal,
    valorTotalTributos:
        valorTotalTributos.present
            ? valorTotalTributos.value
            : this.valorTotalTributos,
    valorServicos:
        valorServicos.present ? valorServicos.value : this.valorServicos,
    baseCalculoIssqn:
        baseCalculoIssqn.present
            ? baseCalculoIssqn.value
            : this.baseCalculoIssqn,
    valorIssqn: valorIssqn.present ? valorIssqn.value : this.valorIssqn,
    valorPisIssqn:
        valorPisIssqn.present ? valorPisIssqn.value : this.valorPisIssqn,
    valorCofinsIssqn:
        valorCofinsIssqn.present
            ? valorCofinsIssqn.value
            : this.valorCofinsIssqn,
    dataPrestacaoServico:
        dataPrestacaoServico.present
            ? dataPrestacaoServico.value
            : this.dataPrestacaoServico,
    valorDeducaoIssqn:
        valorDeducaoIssqn.present
            ? valorDeducaoIssqn.value
            : this.valorDeducaoIssqn,
    outrasRetencoesIssqn:
        outrasRetencoesIssqn.present
            ? outrasRetencoesIssqn.value
            : this.outrasRetencoesIssqn,
    descontoIncondicionadoIssqn:
        descontoIncondicionadoIssqn.present
            ? descontoIncondicionadoIssqn.value
            : this.descontoIncondicionadoIssqn,
    descontoCondicionadoIssqn:
        descontoCondicionadoIssqn.present
            ? descontoCondicionadoIssqn.value
            : this.descontoCondicionadoIssqn,
    totalRetencaoIssqn:
        totalRetencaoIssqn.present
            ? totalRetencaoIssqn.value
            : this.totalRetencaoIssqn,
    regimeEspecialTributacao:
        regimeEspecialTributacao.present
            ? regimeEspecialTributacao.value
            : this.regimeEspecialTributacao,
    valorRetidoPis:
        valorRetidoPis.present ? valorRetidoPis.value : this.valorRetidoPis,
    valorRetidoCofins:
        valorRetidoCofins.present
            ? valorRetidoCofins.value
            : this.valorRetidoCofins,
    valorRetidoCsll:
        valorRetidoCsll.present ? valorRetidoCsll.value : this.valorRetidoCsll,
    baseCalculoIrrf:
        baseCalculoIrrf.present ? baseCalculoIrrf.value : this.baseCalculoIrrf,
    valorRetidoIrrf:
        valorRetidoIrrf.present ? valorRetidoIrrf.value : this.valorRetidoIrrf,
    baseCalculoPrevidencia:
        baseCalculoPrevidencia.present
            ? baseCalculoPrevidencia.value
            : this.baseCalculoPrevidencia,
    valorRetidoPrevidencia:
        valorRetidoPrevidencia.present
            ? valorRetidoPrevidencia.value
            : this.valorRetidoPrevidencia,
    informacoesAddFisco:
        informacoesAddFisco.present
            ? informacoesAddFisco.value
            : this.informacoesAddFisco,
    informacoesAddContribuinte:
        informacoesAddContribuinte.present
            ? informacoesAddContribuinte.value
            : this.informacoesAddContribuinte,
    comexUfEmbarque:
        comexUfEmbarque.present ? comexUfEmbarque.value : this.comexUfEmbarque,
    comexLocalEmbarque:
        comexLocalEmbarque.present
            ? comexLocalEmbarque.value
            : this.comexLocalEmbarque,
    comexLocalDespacho:
        comexLocalDespacho.present
            ? comexLocalDespacho.value
            : this.comexLocalDespacho,
    compraNotaEmpenho:
        compraNotaEmpenho.present
            ? compraNotaEmpenho.value
            : this.compraNotaEmpenho,
    compraPedido: compraPedido.present ? compraPedido.value : this.compraPedido,
    compraContrato:
        compraContrato.present ? compraContrato.value : this.compraContrato,
    qrcode: qrcode.present ? qrcode.value : this.qrcode,
    urlChave: urlChave.present ? urlChave.value : this.urlChave,
    statusNota: statusNota.present ? statusNota.value : this.statusNota,
    indicadorIntermediario:
        indicadorIntermediario.present
            ? indicadorIntermediario.value
            : this.indicadorIntermediario,
    intermediadorCnpj:
        intermediadorCnpj.present
            ? intermediadorCnpj.value
            : this.intermediadorCnpj,
    intermediadorIdCadastro:
        intermediadorIdCadastro.present
            ? intermediadorIdCadastro.value
            : this.intermediadorIdCadastro,
    codigoMunicipioFgIbs:
        codigoMunicipioFgIbs.present
            ? codigoMunicipioFgIbs.value
            : this.codigoMunicipioFgIbs,
    tipoNotaDebito:
        tipoNotaDebito.present ? tipoNotaDebito.value : this.tipoNotaDebito,
    tipoNotaCredito:
        tipoNotaCredito.present ? tipoNotaCredito.value : this.tipoNotaCredito,
    totalImpostoSeletivo:
        totalImpostoSeletivo.present
            ? totalImpostoSeletivo.value
            : this.totalImpostoSeletivo,
    totalBcIbsCbs:
        totalBcIbsCbs.present ? totalBcIbsCbs.value : this.totalBcIbsCbs,
    ibsUfTotalDiferimento:
        ibsUfTotalDiferimento.present
            ? ibsUfTotalDiferimento.value
            : this.ibsUfTotalDiferimento,
    ibsUfTotalDevTributos:
        ibsUfTotalDevTributos.present
            ? ibsUfTotalDevTributos.value
            : this.ibsUfTotalDevTributos,
    ibsUfValorTotal:
        ibsUfValorTotal.present ? ibsUfValorTotal.value : this.ibsUfValorTotal,
    ibsMunTotalDiferimento:
        ibsMunTotalDiferimento.present
            ? ibsMunTotalDiferimento.value
            : this.ibsMunTotalDiferimento,
    ibsMunTotalDevTributos:
        ibsMunTotalDevTributos.present
            ? ibsMunTotalDevTributos.value
            : this.ibsMunTotalDevTributos,
    ibsMunValorTotal:
        ibsMunValorTotal.present
            ? ibsMunValorTotal.value
            : this.ibsMunValorTotal,
    cbsTotalDiferimento:
        cbsTotalDiferimento.present
            ? cbsTotalDiferimento.value
            : this.cbsTotalDiferimento,
    cbsTotalDevTributos:
        cbsTotalDevTributos.present
            ? cbsTotalDevTributos.value
            : this.cbsTotalDevTributos,
    cbsValorTotal:
        cbsValorTotal.present ? cbsValorTotal.value : this.cbsValorTotal,
    cbsTotalCreditoPresumido:
        cbsTotalCreditoPresumido.present
            ? cbsTotalCreditoPresumido.value
            : this.cbsTotalCreditoPresumido,
    cbsTotCrePreSuspensivo:
        cbsTotCrePreSuspensivo.present
            ? cbsTotCrePreSuspensivo.value
            : this.cbsTotCrePreSuspensivo,
    monoIbsTotal: monoIbsTotal.present ? monoIbsTotal.value : this.monoIbsTotal,
    monoCbsTotal: monoCbsTotal.present ? monoCbsTotal.value : this.monoCbsTotal,
    monoIbsTotalRetencao:
        monoIbsTotalRetencao.present
            ? monoIbsTotalRetencao.value
            : this.monoIbsTotalRetencao,
    monoCbsTotalRetencao:
        monoCbsTotalRetencao.present
            ? monoCbsTotalRetencao.value
            : this.monoCbsTotalRetencao,
    monoIbsRetido:
        monoIbsRetido.present ? monoIbsRetido.value : this.monoIbsRetido,
    monoCbsRetido:
        monoCbsRetido.present ? monoCbsRetido.value : this.monoCbsRetido,
    valorTotalNfe:
        valorTotalNfe.present ? valorTotalNfe.value : this.valorTotalNfe,
    totalQtdeTributadaMono:
        totalQtdeTributadaMono.present
            ? totalQtdeTributadaMono.value
            : this.totalQtdeTributadaMono,
    totalIcmsMono:
        totalIcmsMono.present ? totalIcmsMono.value : this.totalIcmsMono,
    totalQuantidadeMonoRetencao:
        totalQuantidadeMonoRetencao.present
            ? totalQuantidadeMonoRetencao.value
            : this.totalQuantidadeMonoRetencao,
    totalIcmsMonoRetencao:
        totalIcmsMonoRetencao.present
            ? totalIcmsMonoRetencao.value
            : this.totalIcmsMonoRetencao,
    totalQuantidadeMonoRetida:
        totalQuantidadeMonoRetida.present
            ? totalQuantidadeMonoRetida.value
            : this.totalQuantidadeMonoRetida,
    totalIcmsMonoRetido:
        totalIcmsMonoRetido.present
            ? totalIcmsMonoRetido.value
            : this.totalIcmsMonoRetido,
    ibsValorTotal:
        ibsValorTotal.present ? ibsValorTotal.value : this.ibsValorTotal,
    totalCreditoPresumido:
        totalCreditoPresumido.present
            ? totalCreditoPresumido.value
            : this.totalCreditoPresumido,
    totalCredPresSuspensivo:
        totalCredPresSuspensivo.present
            ? totalCredPresSuspensivo.value
            : this.totalCredPresSuspensivo,
  );
  NfeCabecalho copyWithCompanion(NfeCabecalhosCompanion data) {
    return NfeCabecalho(
      id: data.id.present ? data.id.value : this.id,
      idVendaCabecalho:
          data.idVendaCabecalho.present
              ? data.idVendaCabecalho.value
              : this.idVendaCabecalho,
      idTributOperacaoFiscal:
          data.idTributOperacaoFiscal.present
              ? data.idTributOperacaoFiscal.value
              : this.idTributOperacaoFiscal,
      idCliente: data.idCliente.present ? data.idCliente.value : this.idCliente,
      idColaborador:
          data.idColaborador.present
              ? data.idColaborador.value
              : this.idColaborador,
      idFornecedor:
          data.idFornecedor.present
              ? data.idFornecedor.value
              : this.idFornecedor,
      ufEmitente:
          data.ufEmitente.present ? data.ufEmitente.value : this.ufEmitente,
      codigoNumerico:
          data.codigoNumerico.present
              ? data.codigoNumerico.value
              : this.codigoNumerico,
      naturezaOperacao:
          data.naturezaOperacao.present
              ? data.naturezaOperacao.value
              : this.naturezaOperacao,
      codigoModelo:
          data.codigoModelo.present
              ? data.codigoModelo.value
              : this.codigoModelo,
      serie: data.serie.present ? data.serie.value : this.serie,
      numero: data.numero.present ? data.numero.value : this.numero,
      dataHoraEmissao:
          data.dataHoraEmissao.present
              ? data.dataHoraEmissao.value
              : this.dataHoraEmissao,
      dataHoraEntradaSaida:
          data.dataHoraEntradaSaida.present
              ? data.dataHoraEntradaSaida.value
              : this.dataHoraEntradaSaida,
      tipoOperacao:
          data.tipoOperacao.present
              ? data.tipoOperacao.value
              : this.tipoOperacao,
      localDestino:
          data.localDestino.present
              ? data.localDestino.value
              : this.localDestino,
      codigoMunicipio:
          data.codigoMunicipio.present
              ? data.codigoMunicipio.value
              : this.codigoMunicipio,
      formatoImpressaoDanfe:
          data.formatoImpressaoDanfe.present
              ? data.formatoImpressaoDanfe.value
              : this.formatoImpressaoDanfe,
      tipoEmissao:
          data.tipoEmissao.present ? data.tipoEmissao.value : this.tipoEmissao,
      chaveAcesso:
          data.chaveAcesso.present ? data.chaveAcesso.value : this.chaveAcesso,
      digitoChaveAcesso:
          data.digitoChaveAcesso.present
              ? data.digitoChaveAcesso.value
              : this.digitoChaveAcesso,
      ambiente: data.ambiente.present ? data.ambiente.value : this.ambiente,
      finalidadeEmissao:
          data.finalidadeEmissao.present
              ? data.finalidadeEmissao.value
              : this.finalidadeEmissao,
      consumidorOperacao:
          data.consumidorOperacao.present
              ? data.consumidorOperacao.value
              : this.consumidorOperacao,
      consumidorPresenca:
          data.consumidorPresenca.present
              ? data.consumidorPresenca.value
              : this.consumidorPresenca,
      processoEmissao:
          data.processoEmissao.present
              ? data.processoEmissao.value
              : this.processoEmissao,
      versaoProcessoEmissao:
          data.versaoProcessoEmissao.present
              ? data.versaoProcessoEmissao.value
              : this.versaoProcessoEmissao,
      dataEntradaContingencia:
          data.dataEntradaContingencia.present
              ? data.dataEntradaContingencia.value
              : this.dataEntradaContingencia,
      justificativaContingencia:
          data.justificativaContingencia.present
              ? data.justificativaContingencia.value
              : this.justificativaContingencia,
      baseCalculoIcms:
          data.baseCalculoIcms.present
              ? data.baseCalculoIcms.value
              : this.baseCalculoIcms,
      valorIcms: data.valorIcms.present ? data.valorIcms.value : this.valorIcms,
      valorIcmsDesonerado:
          data.valorIcmsDesonerado.present
              ? data.valorIcmsDesonerado.value
              : this.valorIcmsDesonerado,
      totalIcmsFcpUfDestino:
          data.totalIcmsFcpUfDestino.present
              ? data.totalIcmsFcpUfDestino.value
              : this.totalIcmsFcpUfDestino,
      totalIcmsInterestadualUfDestino:
          data.totalIcmsInterestadualUfDestino.present
              ? data.totalIcmsInterestadualUfDestino.value
              : this.totalIcmsInterestadualUfDestino,
      totalIcmsInterestadualUfRemetente:
          data.totalIcmsInterestadualUfRemetente.present
              ? data.totalIcmsInterestadualUfRemetente.value
              : this.totalIcmsInterestadualUfRemetente,
      valorTotalFcp:
          data.valorTotalFcp.present
              ? data.valorTotalFcp.value
              : this.valorTotalFcp,
      baseCalculoIcmsSt:
          data.baseCalculoIcmsSt.present
              ? data.baseCalculoIcmsSt.value
              : this.baseCalculoIcmsSt,
      valorIcmsSt:
          data.valorIcmsSt.present ? data.valorIcmsSt.value : this.valorIcmsSt,
      valorTotalFcpSt:
          data.valorTotalFcpSt.present
              ? data.valorTotalFcpSt.value
              : this.valorTotalFcpSt,
      valorTotalFcpStRetido:
          data.valorTotalFcpStRetido.present
              ? data.valorTotalFcpStRetido.value
              : this.valorTotalFcpStRetido,
      valorTotalProdutos:
          data.valorTotalProdutos.present
              ? data.valorTotalProdutos.value
              : this.valorTotalProdutos,
      valorFrete:
          data.valorFrete.present ? data.valorFrete.value : this.valorFrete,
      valorSeguro:
          data.valorSeguro.present ? data.valorSeguro.value : this.valorSeguro,
      valorDesconto:
          data.valorDesconto.present
              ? data.valorDesconto.value
              : this.valorDesconto,
      valorImpostoImportacao:
          data.valorImpostoImportacao.present
              ? data.valorImpostoImportacao.value
              : this.valorImpostoImportacao,
      valorIpi: data.valorIpi.present ? data.valorIpi.value : this.valorIpi,
      valorIpiDevolvido:
          data.valorIpiDevolvido.present
              ? data.valorIpiDevolvido.value
              : this.valorIpiDevolvido,
      valorPis: data.valorPis.present ? data.valorPis.value : this.valorPis,
      valorCofins:
          data.valorCofins.present ? data.valorCofins.value : this.valorCofins,
      valorDespesasAcessorias:
          data.valorDespesasAcessorias.present
              ? data.valorDespesasAcessorias.value
              : this.valorDespesasAcessorias,
      valorTotal:
          data.valorTotal.present ? data.valorTotal.value : this.valorTotal,
      valorTotalTributos:
          data.valorTotalTributos.present
              ? data.valorTotalTributos.value
              : this.valorTotalTributos,
      valorServicos:
          data.valorServicos.present
              ? data.valorServicos.value
              : this.valorServicos,
      baseCalculoIssqn:
          data.baseCalculoIssqn.present
              ? data.baseCalculoIssqn.value
              : this.baseCalculoIssqn,
      valorIssqn:
          data.valorIssqn.present ? data.valorIssqn.value : this.valorIssqn,
      valorPisIssqn:
          data.valorPisIssqn.present
              ? data.valorPisIssqn.value
              : this.valorPisIssqn,
      valorCofinsIssqn:
          data.valorCofinsIssqn.present
              ? data.valorCofinsIssqn.value
              : this.valorCofinsIssqn,
      dataPrestacaoServico:
          data.dataPrestacaoServico.present
              ? data.dataPrestacaoServico.value
              : this.dataPrestacaoServico,
      valorDeducaoIssqn:
          data.valorDeducaoIssqn.present
              ? data.valorDeducaoIssqn.value
              : this.valorDeducaoIssqn,
      outrasRetencoesIssqn:
          data.outrasRetencoesIssqn.present
              ? data.outrasRetencoesIssqn.value
              : this.outrasRetencoesIssqn,
      descontoIncondicionadoIssqn:
          data.descontoIncondicionadoIssqn.present
              ? data.descontoIncondicionadoIssqn.value
              : this.descontoIncondicionadoIssqn,
      descontoCondicionadoIssqn:
          data.descontoCondicionadoIssqn.present
              ? data.descontoCondicionadoIssqn.value
              : this.descontoCondicionadoIssqn,
      totalRetencaoIssqn:
          data.totalRetencaoIssqn.present
              ? data.totalRetencaoIssqn.value
              : this.totalRetencaoIssqn,
      regimeEspecialTributacao:
          data.regimeEspecialTributacao.present
              ? data.regimeEspecialTributacao.value
              : this.regimeEspecialTributacao,
      valorRetidoPis:
          data.valorRetidoPis.present
              ? data.valorRetidoPis.value
              : this.valorRetidoPis,
      valorRetidoCofins:
          data.valorRetidoCofins.present
              ? data.valorRetidoCofins.value
              : this.valorRetidoCofins,
      valorRetidoCsll:
          data.valorRetidoCsll.present
              ? data.valorRetidoCsll.value
              : this.valorRetidoCsll,
      baseCalculoIrrf:
          data.baseCalculoIrrf.present
              ? data.baseCalculoIrrf.value
              : this.baseCalculoIrrf,
      valorRetidoIrrf:
          data.valorRetidoIrrf.present
              ? data.valorRetidoIrrf.value
              : this.valorRetidoIrrf,
      baseCalculoPrevidencia:
          data.baseCalculoPrevidencia.present
              ? data.baseCalculoPrevidencia.value
              : this.baseCalculoPrevidencia,
      valorRetidoPrevidencia:
          data.valorRetidoPrevidencia.present
              ? data.valorRetidoPrevidencia.value
              : this.valorRetidoPrevidencia,
      informacoesAddFisco:
          data.informacoesAddFisco.present
              ? data.informacoesAddFisco.value
              : this.informacoesAddFisco,
      informacoesAddContribuinte:
          data.informacoesAddContribuinte.present
              ? data.informacoesAddContribuinte.value
              : this.informacoesAddContribuinte,
      comexUfEmbarque:
          data.comexUfEmbarque.present
              ? data.comexUfEmbarque.value
              : this.comexUfEmbarque,
      comexLocalEmbarque:
          data.comexLocalEmbarque.present
              ? data.comexLocalEmbarque.value
              : this.comexLocalEmbarque,
      comexLocalDespacho:
          data.comexLocalDespacho.present
              ? data.comexLocalDespacho.value
              : this.comexLocalDespacho,
      compraNotaEmpenho:
          data.compraNotaEmpenho.present
              ? data.compraNotaEmpenho.value
              : this.compraNotaEmpenho,
      compraPedido:
          data.compraPedido.present
              ? data.compraPedido.value
              : this.compraPedido,
      compraContrato:
          data.compraContrato.present
              ? data.compraContrato.value
              : this.compraContrato,
      qrcode: data.qrcode.present ? data.qrcode.value : this.qrcode,
      urlChave: data.urlChave.present ? data.urlChave.value : this.urlChave,
      statusNota:
          data.statusNota.present ? data.statusNota.value : this.statusNota,
      indicadorIntermediario:
          data.indicadorIntermediario.present
              ? data.indicadorIntermediario.value
              : this.indicadorIntermediario,
      intermediadorCnpj:
          data.intermediadorCnpj.present
              ? data.intermediadorCnpj.value
              : this.intermediadorCnpj,
      intermediadorIdCadastro:
          data.intermediadorIdCadastro.present
              ? data.intermediadorIdCadastro.value
              : this.intermediadorIdCadastro,
      codigoMunicipioFgIbs:
          data.codigoMunicipioFgIbs.present
              ? data.codigoMunicipioFgIbs.value
              : this.codigoMunicipioFgIbs,
      tipoNotaDebito:
          data.tipoNotaDebito.present
              ? data.tipoNotaDebito.value
              : this.tipoNotaDebito,
      tipoNotaCredito:
          data.tipoNotaCredito.present
              ? data.tipoNotaCredito.value
              : this.tipoNotaCredito,
      totalImpostoSeletivo:
          data.totalImpostoSeletivo.present
              ? data.totalImpostoSeletivo.value
              : this.totalImpostoSeletivo,
      totalBcIbsCbs:
          data.totalBcIbsCbs.present
              ? data.totalBcIbsCbs.value
              : this.totalBcIbsCbs,
      ibsUfTotalDiferimento:
          data.ibsUfTotalDiferimento.present
              ? data.ibsUfTotalDiferimento.value
              : this.ibsUfTotalDiferimento,
      ibsUfTotalDevTributos:
          data.ibsUfTotalDevTributos.present
              ? data.ibsUfTotalDevTributos.value
              : this.ibsUfTotalDevTributos,
      ibsUfValorTotal:
          data.ibsUfValorTotal.present
              ? data.ibsUfValorTotal.value
              : this.ibsUfValorTotal,
      ibsMunTotalDiferimento:
          data.ibsMunTotalDiferimento.present
              ? data.ibsMunTotalDiferimento.value
              : this.ibsMunTotalDiferimento,
      ibsMunTotalDevTributos:
          data.ibsMunTotalDevTributos.present
              ? data.ibsMunTotalDevTributos.value
              : this.ibsMunTotalDevTributos,
      ibsMunValorTotal:
          data.ibsMunValorTotal.present
              ? data.ibsMunValorTotal.value
              : this.ibsMunValorTotal,
      cbsTotalDiferimento:
          data.cbsTotalDiferimento.present
              ? data.cbsTotalDiferimento.value
              : this.cbsTotalDiferimento,
      cbsTotalDevTributos:
          data.cbsTotalDevTributos.present
              ? data.cbsTotalDevTributos.value
              : this.cbsTotalDevTributos,
      cbsValorTotal:
          data.cbsValorTotal.present
              ? data.cbsValorTotal.value
              : this.cbsValorTotal,
      cbsTotalCreditoPresumido:
          data.cbsTotalCreditoPresumido.present
              ? data.cbsTotalCreditoPresumido.value
              : this.cbsTotalCreditoPresumido,
      cbsTotCrePreSuspensivo:
          data.cbsTotCrePreSuspensivo.present
              ? data.cbsTotCrePreSuspensivo.value
              : this.cbsTotCrePreSuspensivo,
      monoIbsTotal:
          data.monoIbsTotal.present
              ? data.monoIbsTotal.value
              : this.monoIbsTotal,
      monoCbsTotal:
          data.monoCbsTotal.present
              ? data.monoCbsTotal.value
              : this.monoCbsTotal,
      monoIbsTotalRetencao:
          data.monoIbsTotalRetencao.present
              ? data.monoIbsTotalRetencao.value
              : this.monoIbsTotalRetencao,
      monoCbsTotalRetencao:
          data.monoCbsTotalRetencao.present
              ? data.monoCbsTotalRetencao.value
              : this.monoCbsTotalRetencao,
      monoIbsRetido:
          data.monoIbsRetido.present
              ? data.monoIbsRetido.value
              : this.monoIbsRetido,
      monoCbsRetido:
          data.monoCbsRetido.present
              ? data.monoCbsRetido.value
              : this.monoCbsRetido,
      valorTotalNfe:
          data.valorTotalNfe.present
              ? data.valorTotalNfe.value
              : this.valorTotalNfe,
      totalQtdeTributadaMono:
          data.totalQtdeTributadaMono.present
              ? data.totalQtdeTributadaMono.value
              : this.totalQtdeTributadaMono,
      totalIcmsMono:
          data.totalIcmsMono.present
              ? data.totalIcmsMono.value
              : this.totalIcmsMono,
      totalQuantidadeMonoRetencao:
          data.totalQuantidadeMonoRetencao.present
              ? data.totalQuantidadeMonoRetencao.value
              : this.totalQuantidadeMonoRetencao,
      totalIcmsMonoRetencao:
          data.totalIcmsMonoRetencao.present
              ? data.totalIcmsMonoRetencao.value
              : this.totalIcmsMonoRetencao,
      totalQuantidadeMonoRetida:
          data.totalQuantidadeMonoRetida.present
              ? data.totalQuantidadeMonoRetida.value
              : this.totalQuantidadeMonoRetida,
      totalIcmsMonoRetido:
          data.totalIcmsMonoRetido.present
              ? data.totalIcmsMonoRetido.value
              : this.totalIcmsMonoRetido,
      ibsValorTotal:
          data.ibsValorTotal.present
              ? data.ibsValorTotal.value
              : this.ibsValorTotal,
      totalCreditoPresumido:
          data.totalCreditoPresumido.present
              ? data.totalCreditoPresumido.value
              : this.totalCreditoPresumido,
      totalCredPresSuspensivo:
          data.totalCredPresSuspensivo.present
              ? data.totalCredPresSuspensivo.value
              : this.totalCredPresSuspensivo,
    );
  }

  @override
  String toString() {
    return (StringBuffer('NfeCabecalho(')
          ..write('id: $id, ')
          ..write('idVendaCabecalho: $idVendaCabecalho, ')
          ..write('idTributOperacaoFiscal: $idTributOperacaoFiscal, ')
          ..write('idCliente: $idCliente, ')
          ..write('idColaborador: $idColaborador, ')
          ..write('idFornecedor: $idFornecedor, ')
          ..write('ufEmitente: $ufEmitente, ')
          ..write('codigoNumerico: $codigoNumerico, ')
          ..write('naturezaOperacao: $naturezaOperacao, ')
          ..write('codigoModelo: $codigoModelo, ')
          ..write('serie: $serie, ')
          ..write('numero: $numero, ')
          ..write('dataHoraEmissao: $dataHoraEmissao, ')
          ..write('dataHoraEntradaSaida: $dataHoraEntradaSaida, ')
          ..write('tipoOperacao: $tipoOperacao, ')
          ..write('localDestino: $localDestino, ')
          ..write('codigoMunicipio: $codigoMunicipio, ')
          ..write('formatoImpressaoDanfe: $formatoImpressaoDanfe, ')
          ..write('tipoEmissao: $tipoEmissao, ')
          ..write('chaveAcesso: $chaveAcesso, ')
          ..write('digitoChaveAcesso: $digitoChaveAcesso, ')
          ..write('ambiente: $ambiente, ')
          ..write('finalidadeEmissao: $finalidadeEmissao, ')
          ..write('consumidorOperacao: $consumidorOperacao, ')
          ..write('consumidorPresenca: $consumidorPresenca, ')
          ..write('processoEmissao: $processoEmissao, ')
          ..write('versaoProcessoEmissao: $versaoProcessoEmissao, ')
          ..write('dataEntradaContingencia: $dataEntradaContingencia, ')
          ..write('justificativaContingencia: $justificativaContingencia, ')
          ..write('baseCalculoIcms: $baseCalculoIcms, ')
          ..write('valorIcms: $valorIcms, ')
          ..write('valorIcmsDesonerado: $valorIcmsDesonerado, ')
          ..write('totalIcmsFcpUfDestino: $totalIcmsFcpUfDestino, ')
          ..write(
            'totalIcmsInterestadualUfDestino: $totalIcmsInterestadualUfDestino, ',
          )
          ..write(
            'totalIcmsInterestadualUfRemetente: $totalIcmsInterestadualUfRemetente, ',
          )
          ..write('valorTotalFcp: $valorTotalFcp, ')
          ..write('baseCalculoIcmsSt: $baseCalculoIcmsSt, ')
          ..write('valorIcmsSt: $valorIcmsSt, ')
          ..write('valorTotalFcpSt: $valorTotalFcpSt, ')
          ..write('valorTotalFcpStRetido: $valorTotalFcpStRetido, ')
          ..write('valorTotalProdutos: $valorTotalProdutos, ')
          ..write('valorFrete: $valorFrete, ')
          ..write('valorSeguro: $valorSeguro, ')
          ..write('valorDesconto: $valorDesconto, ')
          ..write('valorImpostoImportacao: $valorImpostoImportacao, ')
          ..write('valorIpi: $valorIpi, ')
          ..write('valorIpiDevolvido: $valorIpiDevolvido, ')
          ..write('valorPis: $valorPis, ')
          ..write('valorCofins: $valorCofins, ')
          ..write('valorDespesasAcessorias: $valorDespesasAcessorias, ')
          ..write('valorTotal: $valorTotal, ')
          ..write('valorTotalTributos: $valorTotalTributos, ')
          ..write('valorServicos: $valorServicos, ')
          ..write('baseCalculoIssqn: $baseCalculoIssqn, ')
          ..write('valorIssqn: $valorIssqn, ')
          ..write('valorPisIssqn: $valorPisIssqn, ')
          ..write('valorCofinsIssqn: $valorCofinsIssqn, ')
          ..write('dataPrestacaoServico: $dataPrestacaoServico, ')
          ..write('valorDeducaoIssqn: $valorDeducaoIssqn, ')
          ..write('outrasRetencoesIssqn: $outrasRetencoesIssqn, ')
          ..write('descontoIncondicionadoIssqn: $descontoIncondicionadoIssqn, ')
          ..write('descontoCondicionadoIssqn: $descontoCondicionadoIssqn, ')
          ..write('totalRetencaoIssqn: $totalRetencaoIssqn, ')
          ..write('regimeEspecialTributacao: $regimeEspecialTributacao, ')
          ..write('valorRetidoPis: $valorRetidoPis, ')
          ..write('valorRetidoCofins: $valorRetidoCofins, ')
          ..write('valorRetidoCsll: $valorRetidoCsll, ')
          ..write('baseCalculoIrrf: $baseCalculoIrrf, ')
          ..write('valorRetidoIrrf: $valorRetidoIrrf, ')
          ..write('baseCalculoPrevidencia: $baseCalculoPrevidencia, ')
          ..write('valorRetidoPrevidencia: $valorRetidoPrevidencia, ')
          ..write('informacoesAddFisco: $informacoesAddFisco, ')
          ..write('informacoesAddContribuinte: $informacoesAddContribuinte, ')
          ..write('comexUfEmbarque: $comexUfEmbarque, ')
          ..write('comexLocalEmbarque: $comexLocalEmbarque, ')
          ..write('comexLocalDespacho: $comexLocalDespacho, ')
          ..write('compraNotaEmpenho: $compraNotaEmpenho, ')
          ..write('compraPedido: $compraPedido, ')
          ..write('compraContrato: $compraContrato, ')
          ..write('qrcode: $qrcode, ')
          ..write('urlChave: $urlChave, ')
          ..write('statusNota: $statusNota, ')
          ..write('indicadorIntermediario: $indicadorIntermediario, ')
          ..write('intermediadorCnpj: $intermediadorCnpj, ')
          ..write('intermediadorIdCadastro: $intermediadorIdCadastro, ')
          ..write('codigoMunicipioFgIbs: $codigoMunicipioFgIbs, ')
          ..write('tipoNotaDebito: $tipoNotaDebito, ')
          ..write('tipoNotaCredito: $tipoNotaCredito, ')
          ..write('totalImpostoSeletivo: $totalImpostoSeletivo, ')
          ..write('totalBcIbsCbs: $totalBcIbsCbs, ')
          ..write('ibsUfTotalDiferimento: $ibsUfTotalDiferimento, ')
          ..write('ibsUfTotalDevTributos: $ibsUfTotalDevTributos, ')
          ..write('ibsUfValorTotal: $ibsUfValorTotal, ')
          ..write('ibsMunTotalDiferimento: $ibsMunTotalDiferimento, ')
          ..write('ibsMunTotalDevTributos: $ibsMunTotalDevTributos, ')
          ..write('ibsMunValorTotal: $ibsMunValorTotal, ')
          ..write('cbsTotalDiferimento: $cbsTotalDiferimento, ')
          ..write('cbsTotalDevTributos: $cbsTotalDevTributos, ')
          ..write('cbsValorTotal: $cbsValorTotal, ')
          ..write('cbsTotalCreditoPresumido: $cbsTotalCreditoPresumido, ')
          ..write('cbsTotCrePreSuspensivo: $cbsTotCrePreSuspensivo, ')
          ..write('monoIbsTotal: $monoIbsTotal, ')
          ..write('monoCbsTotal: $monoCbsTotal, ')
          ..write('monoIbsTotalRetencao: $monoIbsTotalRetencao, ')
          ..write('monoCbsTotalRetencao: $monoCbsTotalRetencao, ')
          ..write('monoIbsRetido: $monoIbsRetido, ')
          ..write('monoCbsRetido: $monoCbsRetido, ')
          ..write('valorTotalNfe: $valorTotalNfe, ')
          ..write('totalQtdeTributadaMono: $totalQtdeTributadaMono, ')
          ..write('totalIcmsMono: $totalIcmsMono, ')
          ..write('totalQuantidadeMonoRetencao: $totalQuantidadeMonoRetencao, ')
          ..write('totalIcmsMonoRetencao: $totalIcmsMonoRetencao, ')
          ..write('totalQuantidadeMonoRetida: $totalQuantidadeMonoRetida, ')
          ..write('totalIcmsMonoRetido: $totalIcmsMonoRetido, ')
          ..write('ibsValorTotal: $ibsValorTotal, ')
          ..write('totalCreditoPresumido: $totalCreditoPresumido, ')
          ..write('totalCredPresSuspensivo: $totalCredPresSuspensivo')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hashAll([
    id,
    idVendaCabecalho,
    idTributOperacaoFiscal,
    idCliente,
    idColaborador,
    idFornecedor,
    ufEmitente,
    codigoNumerico,
    naturezaOperacao,
    codigoModelo,
    serie,
    numero,
    dataHoraEmissao,
    dataHoraEntradaSaida,
    tipoOperacao,
    localDestino,
    codigoMunicipio,
    formatoImpressaoDanfe,
    tipoEmissao,
    chaveAcesso,
    digitoChaveAcesso,
    ambiente,
    finalidadeEmissao,
    consumidorOperacao,
    consumidorPresenca,
    processoEmissao,
    versaoProcessoEmissao,
    dataEntradaContingencia,
    justificativaContingencia,
    baseCalculoIcms,
    valorIcms,
    valorIcmsDesonerado,
    totalIcmsFcpUfDestino,
    totalIcmsInterestadualUfDestino,
    totalIcmsInterestadualUfRemetente,
    valorTotalFcp,
    baseCalculoIcmsSt,
    valorIcmsSt,
    valorTotalFcpSt,
    valorTotalFcpStRetido,
    valorTotalProdutos,
    valorFrete,
    valorSeguro,
    valorDesconto,
    valorImpostoImportacao,
    valorIpi,
    valorIpiDevolvido,
    valorPis,
    valorCofins,
    valorDespesasAcessorias,
    valorTotal,
    valorTotalTributos,
    valorServicos,
    baseCalculoIssqn,
    valorIssqn,
    valorPisIssqn,
    valorCofinsIssqn,
    dataPrestacaoServico,
    valorDeducaoIssqn,
    outrasRetencoesIssqn,
    descontoIncondicionadoIssqn,
    descontoCondicionadoIssqn,
    totalRetencaoIssqn,
    regimeEspecialTributacao,
    valorRetidoPis,
    valorRetidoCofins,
    valorRetidoCsll,
    baseCalculoIrrf,
    valorRetidoIrrf,
    baseCalculoPrevidencia,
    valorRetidoPrevidencia,
    informacoesAddFisco,
    informacoesAddContribuinte,
    comexUfEmbarque,
    comexLocalEmbarque,
    comexLocalDespacho,
    compraNotaEmpenho,
    compraPedido,
    compraContrato,
    qrcode,
    urlChave,
    statusNota,
    indicadorIntermediario,
    intermediadorCnpj,
    intermediadorIdCadastro,
    codigoMunicipioFgIbs,
    tipoNotaDebito,
    tipoNotaCredito,
    totalImpostoSeletivo,
    totalBcIbsCbs,
    ibsUfTotalDiferimento,
    ibsUfTotalDevTributos,
    ibsUfValorTotal,
    ibsMunTotalDiferimento,
    ibsMunTotalDevTributos,
    ibsMunValorTotal,
    cbsTotalDiferimento,
    cbsTotalDevTributos,
    cbsValorTotal,
    cbsTotalCreditoPresumido,
    cbsTotCrePreSuspensivo,
    monoIbsTotal,
    monoCbsTotal,
    monoIbsTotalRetencao,
    monoCbsTotalRetencao,
    monoIbsRetido,
    monoCbsRetido,
    valorTotalNfe,
    totalQtdeTributadaMono,
    totalIcmsMono,
    totalQuantidadeMonoRetencao,
    totalIcmsMonoRetencao,
    totalQuantidadeMonoRetida,
    totalIcmsMonoRetido,
    ibsValorTotal,
    totalCreditoPresumido,
    totalCredPresSuspensivo,
  ]);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeCabecalho &&
          other.id == this.id &&
          other.idVendaCabecalho == this.idVendaCabecalho &&
          other.idTributOperacaoFiscal == this.idTributOperacaoFiscal &&
          other.idCliente == this.idCliente &&
          other.idColaborador == this.idColaborador &&
          other.idFornecedor == this.idFornecedor &&
          other.ufEmitente == this.ufEmitente &&
          other.codigoNumerico == this.codigoNumerico &&
          other.naturezaOperacao == this.naturezaOperacao &&
          other.codigoModelo == this.codigoModelo &&
          other.serie == this.serie &&
          other.numero == this.numero &&
          other.dataHoraEmissao == this.dataHoraEmissao &&
          other.dataHoraEntradaSaida == this.dataHoraEntradaSaida &&
          other.tipoOperacao == this.tipoOperacao &&
          other.localDestino == this.localDestino &&
          other.codigoMunicipio == this.codigoMunicipio &&
          other.formatoImpressaoDanfe == this.formatoImpressaoDanfe &&
          other.tipoEmissao == this.tipoEmissao &&
          other.chaveAcesso == this.chaveAcesso &&
          other.digitoChaveAcesso == this.digitoChaveAcesso &&
          other.ambiente == this.ambiente &&
          other.finalidadeEmissao == this.finalidadeEmissao &&
          other.consumidorOperacao == this.consumidorOperacao &&
          other.consumidorPresenca == this.consumidorPresenca &&
          other.processoEmissao == this.processoEmissao &&
          other.versaoProcessoEmissao == this.versaoProcessoEmissao &&
          other.dataEntradaContingencia == this.dataEntradaContingencia &&
          other.justificativaContingencia == this.justificativaContingencia &&
          other.baseCalculoIcms == this.baseCalculoIcms &&
          other.valorIcms == this.valorIcms &&
          other.valorIcmsDesonerado == this.valorIcmsDesonerado &&
          other.totalIcmsFcpUfDestino == this.totalIcmsFcpUfDestino &&
          other.totalIcmsInterestadualUfDestino ==
              this.totalIcmsInterestadualUfDestino &&
          other.totalIcmsInterestadualUfRemetente ==
              this.totalIcmsInterestadualUfRemetente &&
          other.valorTotalFcp == this.valorTotalFcp &&
          other.baseCalculoIcmsSt == this.baseCalculoIcmsSt &&
          other.valorIcmsSt == this.valorIcmsSt &&
          other.valorTotalFcpSt == this.valorTotalFcpSt &&
          other.valorTotalFcpStRetido == this.valorTotalFcpStRetido &&
          other.valorTotalProdutos == this.valorTotalProdutos &&
          other.valorFrete == this.valorFrete &&
          other.valorSeguro == this.valorSeguro &&
          other.valorDesconto == this.valorDesconto &&
          other.valorImpostoImportacao == this.valorImpostoImportacao &&
          other.valorIpi == this.valorIpi &&
          other.valorIpiDevolvido == this.valorIpiDevolvido &&
          other.valorPis == this.valorPis &&
          other.valorCofins == this.valorCofins &&
          other.valorDespesasAcessorias == this.valorDespesasAcessorias &&
          other.valorTotal == this.valorTotal &&
          other.valorTotalTributos == this.valorTotalTributos &&
          other.valorServicos == this.valorServicos &&
          other.baseCalculoIssqn == this.baseCalculoIssqn &&
          other.valorIssqn == this.valorIssqn &&
          other.valorPisIssqn == this.valorPisIssqn &&
          other.valorCofinsIssqn == this.valorCofinsIssqn &&
          other.dataPrestacaoServico == this.dataPrestacaoServico &&
          other.valorDeducaoIssqn == this.valorDeducaoIssqn &&
          other.outrasRetencoesIssqn == this.outrasRetencoesIssqn &&
          other.descontoIncondicionadoIssqn ==
              this.descontoIncondicionadoIssqn &&
          other.descontoCondicionadoIssqn == this.descontoCondicionadoIssqn &&
          other.totalRetencaoIssqn == this.totalRetencaoIssqn &&
          other.regimeEspecialTributacao == this.regimeEspecialTributacao &&
          other.valorRetidoPis == this.valorRetidoPis &&
          other.valorRetidoCofins == this.valorRetidoCofins &&
          other.valorRetidoCsll == this.valorRetidoCsll &&
          other.baseCalculoIrrf == this.baseCalculoIrrf &&
          other.valorRetidoIrrf == this.valorRetidoIrrf &&
          other.baseCalculoPrevidencia == this.baseCalculoPrevidencia &&
          other.valorRetidoPrevidencia == this.valorRetidoPrevidencia &&
          other.informacoesAddFisco == this.informacoesAddFisco &&
          other.informacoesAddContribuinte == this.informacoesAddContribuinte &&
          other.comexUfEmbarque == this.comexUfEmbarque &&
          other.comexLocalEmbarque == this.comexLocalEmbarque &&
          other.comexLocalDespacho == this.comexLocalDespacho &&
          other.compraNotaEmpenho == this.compraNotaEmpenho &&
          other.compraPedido == this.compraPedido &&
          other.compraContrato == this.compraContrato &&
          other.qrcode == this.qrcode &&
          other.urlChave == this.urlChave &&
          other.statusNota == this.statusNota &&
          other.indicadorIntermediario == this.indicadorIntermediario &&
          other.intermediadorCnpj == this.intermediadorCnpj &&
          other.intermediadorIdCadastro == this.intermediadorIdCadastro &&
          other.codigoMunicipioFgIbs == this.codigoMunicipioFgIbs &&
          other.tipoNotaDebito == this.tipoNotaDebito &&
          other.tipoNotaCredito == this.tipoNotaCredito &&
          other.totalImpostoSeletivo == this.totalImpostoSeletivo &&
          other.totalBcIbsCbs == this.totalBcIbsCbs &&
          other.ibsUfTotalDiferimento == this.ibsUfTotalDiferimento &&
          other.ibsUfTotalDevTributos == this.ibsUfTotalDevTributos &&
          other.ibsUfValorTotal == this.ibsUfValorTotal &&
          other.ibsMunTotalDiferimento == this.ibsMunTotalDiferimento &&
          other.ibsMunTotalDevTributos == this.ibsMunTotalDevTributos &&
          other.ibsMunValorTotal == this.ibsMunValorTotal &&
          other.cbsTotalDiferimento == this.cbsTotalDiferimento &&
          other.cbsTotalDevTributos == this.cbsTotalDevTributos &&
          other.cbsValorTotal == this.cbsValorTotal &&
          other.cbsTotalCreditoPresumido == this.cbsTotalCreditoPresumido &&
          other.cbsTotCrePreSuspensivo == this.cbsTotCrePreSuspensivo &&
          other.monoIbsTotal == this.monoIbsTotal &&
          other.monoCbsTotal == this.monoCbsTotal &&
          other.monoIbsTotalRetencao == this.monoIbsTotalRetencao &&
          other.monoCbsTotalRetencao == this.monoCbsTotalRetencao &&
          other.monoIbsRetido == this.monoIbsRetido &&
          other.monoCbsRetido == this.monoCbsRetido &&
          other.valorTotalNfe == this.valorTotalNfe &&
          other.totalQtdeTributadaMono == this.totalQtdeTributadaMono &&
          other.totalIcmsMono == this.totalIcmsMono &&
          other.totalQuantidadeMonoRetencao ==
              this.totalQuantidadeMonoRetencao &&
          other.totalIcmsMonoRetencao == this.totalIcmsMonoRetencao &&
          other.totalQuantidadeMonoRetida == this.totalQuantidadeMonoRetida &&
          other.totalIcmsMonoRetido == this.totalIcmsMonoRetido &&
          other.ibsValorTotal == this.ibsValorTotal &&
          other.totalCreditoPresumido == this.totalCreditoPresumido &&
          other.totalCredPresSuspensivo == this.totalCredPresSuspensivo);
}

class NfeCabecalhosCompanion extends UpdateCompanion<NfeCabecalho> {
  final Value<int?> id;
  final Value<int?> idVendaCabecalho;
  final Value<int?> idTributOperacaoFiscal;
  final Value<int?> idCliente;
  final Value<int?> idColaborador;
  final Value<int?> idFornecedor;
  final Value<String?> ufEmitente;
  final Value<String?> codigoNumerico;
  final Value<String?> naturezaOperacao;
  final Value<String?> codigoModelo;
  final Value<String?> serie;
  final Value<String?> numero;
  final Value<DateTime?> dataHoraEmissao;
  final Value<DateTime?> dataHoraEntradaSaida;
  final Value<String?> tipoOperacao;
  final Value<String?> localDestino;
  final Value<int?> codigoMunicipio;
  final Value<String?> formatoImpressaoDanfe;
  final Value<String?> tipoEmissao;
  final Value<String?> chaveAcesso;
  final Value<String?> digitoChaveAcesso;
  final Value<String?> ambiente;
  final Value<String?> finalidadeEmissao;
  final Value<String?> consumidorOperacao;
  final Value<String?> consumidorPresenca;
  final Value<String?> processoEmissao;
  final Value<String?> versaoProcessoEmissao;
  final Value<DateTime?> dataEntradaContingencia;
  final Value<String?> justificativaContingencia;
  final Value<double?> baseCalculoIcms;
  final Value<double?> valorIcms;
  final Value<double?> valorIcmsDesonerado;
  final Value<double?> totalIcmsFcpUfDestino;
  final Value<double?> totalIcmsInterestadualUfDestino;
  final Value<double?> totalIcmsInterestadualUfRemetente;
  final Value<double?> valorTotalFcp;
  final Value<double?> baseCalculoIcmsSt;
  final Value<double?> valorIcmsSt;
  final Value<double?> valorTotalFcpSt;
  final Value<double?> valorTotalFcpStRetido;
  final Value<double?> valorTotalProdutos;
  final Value<double?> valorFrete;
  final Value<double?> valorSeguro;
  final Value<double?> valorDesconto;
  final Value<double?> valorImpostoImportacao;
  final Value<double?> valorIpi;
  final Value<double?> valorIpiDevolvido;
  final Value<double?> valorPis;
  final Value<double?> valorCofins;
  final Value<double?> valorDespesasAcessorias;
  final Value<double?> valorTotal;
  final Value<double?> valorTotalTributos;
  final Value<double?> valorServicos;
  final Value<double?> baseCalculoIssqn;
  final Value<double?> valorIssqn;
  final Value<double?> valorPisIssqn;
  final Value<double?> valorCofinsIssqn;
  final Value<DateTime?> dataPrestacaoServico;
  final Value<double?> valorDeducaoIssqn;
  final Value<double?> outrasRetencoesIssqn;
  final Value<double?> descontoIncondicionadoIssqn;
  final Value<double?> descontoCondicionadoIssqn;
  final Value<double?> totalRetencaoIssqn;
  final Value<String?> regimeEspecialTributacao;
  final Value<double?> valorRetidoPis;
  final Value<double?> valorRetidoCofins;
  final Value<double?> valorRetidoCsll;
  final Value<double?> baseCalculoIrrf;
  final Value<double?> valorRetidoIrrf;
  final Value<double?> baseCalculoPrevidencia;
  final Value<double?> valorRetidoPrevidencia;
  final Value<String?> informacoesAddFisco;
  final Value<String?> informacoesAddContribuinte;
  final Value<String?> comexUfEmbarque;
  final Value<String?> comexLocalEmbarque;
  final Value<String?> comexLocalDespacho;
  final Value<String?> compraNotaEmpenho;
  final Value<String?> compraPedido;
  final Value<String?> compraContrato;
  final Value<String?> qrcode;
  final Value<String?> urlChave;
  final Value<String?> statusNota;
  final Value<String?> indicadorIntermediario;
  final Value<String?> intermediadorCnpj;
  final Value<String?> intermediadorIdCadastro;
  final Value<int?> codigoMunicipioFgIbs;
  final Value<String?> tipoNotaDebito;
  final Value<String?> tipoNotaCredito;
  final Value<double?> totalImpostoSeletivo;
  final Value<double?> totalBcIbsCbs;
  final Value<double?> ibsUfTotalDiferimento;
  final Value<double?> ibsUfTotalDevTributos;
  final Value<double?> ibsUfValorTotal;
  final Value<double?> ibsMunTotalDiferimento;
  final Value<double?> ibsMunTotalDevTributos;
  final Value<double?> ibsMunValorTotal;
  final Value<double?> cbsTotalDiferimento;
  final Value<double?> cbsTotalDevTributos;
  final Value<double?> cbsValorTotal;
  final Value<double?> cbsTotalCreditoPresumido;
  final Value<double?> cbsTotCrePreSuspensivo;
  final Value<double?> monoIbsTotal;
  final Value<double?> monoCbsTotal;
  final Value<double?> monoIbsTotalRetencao;
  final Value<double?> monoCbsTotalRetencao;
  final Value<double?> monoIbsRetido;
  final Value<double?> monoCbsRetido;
  final Value<double?> valorTotalNfe;
  final Value<double?> totalQtdeTributadaMono;
  final Value<double?> totalIcmsMono;
  final Value<double?> totalQuantidadeMonoRetencao;
  final Value<double?> totalIcmsMonoRetencao;
  final Value<double?> totalQuantidadeMonoRetida;
  final Value<double?> totalIcmsMonoRetido;
  final Value<double?> ibsValorTotal;
  final Value<double?> totalCreditoPresumido;
  final Value<double?> totalCredPresSuspensivo;
  const NfeCabecalhosCompanion({
    this.id = const Value.absent(),
    this.idVendaCabecalho = const Value.absent(),
    this.idTributOperacaoFiscal = const Value.absent(),
    this.idCliente = const Value.absent(),
    this.idColaborador = const Value.absent(),
    this.idFornecedor = const Value.absent(),
    this.ufEmitente = const Value.absent(),
    this.codigoNumerico = const Value.absent(),
    this.naturezaOperacao = const Value.absent(),
    this.codigoModelo = const Value.absent(),
    this.serie = const Value.absent(),
    this.numero = const Value.absent(),
    this.dataHoraEmissao = const Value.absent(),
    this.dataHoraEntradaSaida = const Value.absent(),
    this.tipoOperacao = const Value.absent(),
    this.localDestino = const Value.absent(),
    this.codigoMunicipio = const Value.absent(),
    this.formatoImpressaoDanfe = const Value.absent(),
    this.tipoEmissao = const Value.absent(),
    this.chaveAcesso = const Value.absent(),
    this.digitoChaveAcesso = const Value.absent(),
    this.ambiente = const Value.absent(),
    this.finalidadeEmissao = const Value.absent(),
    this.consumidorOperacao = const Value.absent(),
    this.consumidorPresenca = const Value.absent(),
    this.processoEmissao = const Value.absent(),
    this.versaoProcessoEmissao = const Value.absent(),
    this.dataEntradaContingencia = const Value.absent(),
    this.justificativaContingencia = const Value.absent(),
    this.baseCalculoIcms = const Value.absent(),
    this.valorIcms = const Value.absent(),
    this.valorIcmsDesonerado = const Value.absent(),
    this.totalIcmsFcpUfDestino = const Value.absent(),
    this.totalIcmsInterestadualUfDestino = const Value.absent(),
    this.totalIcmsInterestadualUfRemetente = const Value.absent(),
    this.valorTotalFcp = const Value.absent(),
    this.baseCalculoIcmsSt = const Value.absent(),
    this.valorIcmsSt = const Value.absent(),
    this.valorTotalFcpSt = const Value.absent(),
    this.valorTotalFcpStRetido = const Value.absent(),
    this.valorTotalProdutos = const Value.absent(),
    this.valorFrete = const Value.absent(),
    this.valorSeguro = const Value.absent(),
    this.valorDesconto = const Value.absent(),
    this.valorImpostoImportacao = const Value.absent(),
    this.valorIpi = const Value.absent(),
    this.valorIpiDevolvido = const Value.absent(),
    this.valorPis = const Value.absent(),
    this.valorCofins = const Value.absent(),
    this.valorDespesasAcessorias = const Value.absent(),
    this.valorTotal = const Value.absent(),
    this.valorTotalTributos = const Value.absent(),
    this.valorServicos = const Value.absent(),
    this.baseCalculoIssqn = const Value.absent(),
    this.valorIssqn = const Value.absent(),
    this.valorPisIssqn = const Value.absent(),
    this.valorCofinsIssqn = const Value.absent(),
    this.dataPrestacaoServico = const Value.absent(),
    this.valorDeducaoIssqn = const Value.absent(),
    this.outrasRetencoesIssqn = const Value.absent(),
    this.descontoIncondicionadoIssqn = const Value.absent(),
    this.descontoCondicionadoIssqn = const Value.absent(),
    this.totalRetencaoIssqn = const Value.absent(),
    this.regimeEspecialTributacao = const Value.absent(),
    this.valorRetidoPis = const Value.absent(),
    this.valorRetidoCofins = const Value.absent(),
    this.valorRetidoCsll = const Value.absent(),
    this.baseCalculoIrrf = const Value.absent(),
    this.valorRetidoIrrf = const Value.absent(),
    this.baseCalculoPrevidencia = const Value.absent(),
    this.valorRetidoPrevidencia = const Value.absent(),
    this.informacoesAddFisco = const Value.absent(),
    this.informacoesAddContribuinte = const Value.absent(),
    this.comexUfEmbarque = const Value.absent(),
    this.comexLocalEmbarque = const Value.absent(),
    this.comexLocalDespacho = const Value.absent(),
    this.compraNotaEmpenho = const Value.absent(),
    this.compraPedido = const Value.absent(),
    this.compraContrato = const Value.absent(),
    this.qrcode = const Value.absent(),
    this.urlChave = const Value.absent(),
    this.statusNota = const Value.absent(),
    this.indicadorIntermediario = const Value.absent(),
    this.intermediadorCnpj = const Value.absent(),
    this.intermediadorIdCadastro = const Value.absent(),
    this.codigoMunicipioFgIbs = const Value.absent(),
    this.tipoNotaDebito = const Value.absent(),
    this.tipoNotaCredito = const Value.absent(),
    this.totalImpostoSeletivo = const Value.absent(),
    this.totalBcIbsCbs = const Value.absent(),
    this.ibsUfTotalDiferimento = const Value.absent(),
    this.ibsUfTotalDevTributos = const Value.absent(),
    this.ibsUfValorTotal = const Value.absent(),
    this.ibsMunTotalDiferimento = const Value.absent(),
    this.ibsMunTotalDevTributos = const Value.absent(),
    this.ibsMunValorTotal = const Value.absent(),
    this.cbsTotalDiferimento = const Value.absent(),
    this.cbsTotalDevTributos = const Value.absent(),
    this.cbsValorTotal = const Value.absent(),
    this.cbsTotalCreditoPresumido = const Value.absent(),
    this.cbsTotCrePreSuspensivo = const Value.absent(),
    this.monoIbsTotal = const Value.absent(),
    this.monoCbsTotal = const Value.absent(),
    this.monoIbsTotalRetencao = const Value.absent(),
    this.monoCbsTotalRetencao = const Value.absent(),
    this.monoIbsRetido = const Value.absent(),
    this.monoCbsRetido = const Value.absent(),
    this.valorTotalNfe = const Value.absent(),
    this.totalQtdeTributadaMono = const Value.absent(),
    this.totalIcmsMono = const Value.absent(),
    this.totalQuantidadeMonoRetencao = const Value.absent(),
    this.totalIcmsMonoRetencao = const Value.absent(),
    this.totalQuantidadeMonoRetida = const Value.absent(),
    this.totalIcmsMonoRetido = const Value.absent(),
    this.ibsValorTotal = const Value.absent(),
    this.totalCreditoPresumido = const Value.absent(),
    this.totalCredPresSuspensivo = const Value.absent(),
  });
  NfeCabecalhosCompanion.insert({
    this.id = const Value.absent(),
    this.idVendaCabecalho = const Value.absent(),
    this.idTributOperacaoFiscal = const Value.absent(),
    this.idCliente = const Value.absent(),
    this.idColaborador = const Value.absent(),
    this.idFornecedor = const Value.absent(),
    this.ufEmitente = const Value.absent(),
    this.codigoNumerico = const Value.absent(),
    this.naturezaOperacao = const Value.absent(),
    this.codigoModelo = const Value.absent(),
    this.serie = const Value.absent(),
    this.numero = const Value.absent(),
    this.dataHoraEmissao = const Value.absent(),
    this.dataHoraEntradaSaida = const Value.absent(),
    this.tipoOperacao = const Value.absent(),
    this.localDestino = const Value.absent(),
    this.codigoMunicipio = const Value.absent(),
    this.formatoImpressaoDanfe = const Value.absent(),
    this.tipoEmissao = const Value.absent(),
    this.chaveAcesso = const Value.absent(),
    this.digitoChaveAcesso = const Value.absent(),
    this.ambiente = const Value.absent(),
    this.finalidadeEmissao = const Value.absent(),
    this.consumidorOperacao = const Value.absent(),
    this.consumidorPresenca = const Value.absent(),
    this.processoEmissao = const Value.absent(),
    this.versaoProcessoEmissao = const Value.absent(),
    this.dataEntradaContingencia = const Value.absent(),
    this.justificativaContingencia = const Value.absent(),
    this.baseCalculoIcms = const Value.absent(),
    this.valorIcms = const Value.absent(),
    this.valorIcmsDesonerado = const Value.absent(),
    this.totalIcmsFcpUfDestino = const Value.absent(),
    this.totalIcmsInterestadualUfDestino = const Value.absent(),
    this.totalIcmsInterestadualUfRemetente = const Value.absent(),
    this.valorTotalFcp = const Value.absent(),
    this.baseCalculoIcmsSt = const Value.absent(),
    this.valorIcmsSt = const Value.absent(),
    this.valorTotalFcpSt = const Value.absent(),
    this.valorTotalFcpStRetido = const Value.absent(),
    this.valorTotalProdutos = const Value.absent(),
    this.valorFrete = const Value.absent(),
    this.valorSeguro = const Value.absent(),
    this.valorDesconto = const Value.absent(),
    this.valorImpostoImportacao = const Value.absent(),
    this.valorIpi = const Value.absent(),
    this.valorIpiDevolvido = const Value.absent(),
    this.valorPis = const Value.absent(),
    this.valorCofins = const Value.absent(),
    this.valorDespesasAcessorias = const Value.absent(),
    this.valorTotal = const Value.absent(),
    this.valorTotalTributos = const Value.absent(),
    this.valorServicos = const Value.absent(),
    this.baseCalculoIssqn = const Value.absent(),
    this.valorIssqn = const Value.absent(),
    this.valorPisIssqn = const Value.absent(),
    this.valorCofinsIssqn = const Value.absent(),
    this.dataPrestacaoServico = const Value.absent(),
    this.valorDeducaoIssqn = const Value.absent(),
    this.outrasRetencoesIssqn = const Value.absent(),
    this.descontoIncondicionadoIssqn = const Value.absent(),
    this.descontoCondicionadoIssqn = const Value.absent(),
    this.totalRetencaoIssqn = const Value.absent(),
    this.regimeEspecialTributacao = const Value.absent(),
    this.valorRetidoPis = const Value.absent(),
    this.valorRetidoCofins = const Value.absent(),
    this.valorRetidoCsll = const Value.absent(),
    this.baseCalculoIrrf = const Value.absent(),
    this.valorRetidoIrrf = const Value.absent(),
    this.baseCalculoPrevidencia = const Value.absent(),
    this.valorRetidoPrevidencia = const Value.absent(),
    this.informacoesAddFisco = const Value.absent(),
    this.informacoesAddContribuinte = const Value.absent(),
    this.comexUfEmbarque = const Value.absent(),
    this.comexLocalEmbarque = const Value.absent(),
    this.comexLocalDespacho = const Value.absent(),
    this.compraNotaEmpenho = const Value.absent(),
    this.compraPedido = const Value.absent(),
    this.compraContrato = const Value.absent(),
    this.qrcode = const Value.absent(),
    this.urlChave = const Value.absent(),
    this.statusNota = const Value.absent(),
    this.indicadorIntermediario = const Value.absent(),
    this.intermediadorCnpj = const Value.absent(),
    this.intermediadorIdCadastro = const Value.absent(),
    this.codigoMunicipioFgIbs = const Value.absent(),
    this.tipoNotaDebito = const Value.absent(),
    this.tipoNotaCredito = const Value.absent(),
    this.totalImpostoSeletivo = const Value.absent(),
    this.totalBcIbsCbs = const Value.absent(),
    this.ibsUfTotalDiferimento = const Value.absent(),
    this.ibsUfTotalDevTributos = const Value.absent(),
    this.ibsUfValorTotal = const Value.absent(),
    this.ibsMunTotalDiferimento = const Value.absent(),
    this.ibsMunTotalDevTributos = const Value.absent(),
    this.ibsMunValorTotal = const Value.absent(),
    this.cbsTotalDiferimento = const Value.absent(),
    this.cbsTotalDevTributos = const Value.absent(),
    this.cbsValorTotal = const Value.absent(),
    this.cbsTotalCreditoPresumido = const Value.absent(),
    this.cbsTotCrePreSuspensivo = const Value.absent(),
    this.monoIbsTotal = const Value.absent(),
    this.monoCbsTotal = const Value.absent(),
    this.monoIbsTotalRetencao = const Value.absent(),
    this.monoCbsTotalRetencao = const Value.absent(),
    this.monoIbsRetido = const Value.absent(),
    this.monoCbsRetido = const Value.absent(),
    this.valorTotalNfe = const Value.absent(),
    this.totalQtdeTributadaMono = const Value.absent(),
    this.totalIcmsMono = const Value.absent(),
    this.totalQuantidadeMonoRetencao = const Value.absent(),
    this.totalIcmsMonoRetencao = const Value.absent(),
    this.totalQuantidadeMonoRetida = const Value.absent(),
    this.totalIcmsMonoRetido = const Value.absent(),
    this.ibsValorTotal = const Value.absent(),
    this.totalCreditoPresumido = const Value.absent(),
    this.totalCredPresSuspensivo = const Value.absent(),
  });
  static Insertable<NfeCabecalho> custom({
    Expression<int>? id,
    Expression<int>? idVendaCabecalho,
    Expression<int>? idTributOperacaoFiscal,
    Expression<int>? idCliente,
    Expression<int>? idColaborador,
    Expression<int>? idFornecedor,
    Expression<String>? ufEmitente,
    Expression<String>? codigoNumerico,
    Expression<String>? naturezaOperacao,
    Expression<String>? codigoModelo,
    Expression<String>? serie,
    Expression<String>? numero,
    Expression<DateTime>? dataHoraEmissao,
    Expression<DateTime>? dataHoraEntradaSaida,
    Expression<String>? tipoOperacao,
    Expression<String>? localDestino,
    Expression<int>? codigoMunicipio,
    Expression<String>? formatoImpressaoDanfe,
    Expression<String>? tipoEmissao,
    Expression<String>? chaveAcesso,
    Expression<String>? digitoChaveAcesso,
    Expression<String>? ambiente,
    Expression<String>? finalidadeEmissao,
    Expression<String>? consumidorOperacao,
    Expression<String>? consumidorPresenca,
    Expression<String>? processoEmissao,
    Expression<String>? versaoProcessoEmissao,
    Expression<DateTime>? dataEntradaContingencia,
    Expression<String>? justificativaContingencia,
    Expression<double>? baseCalculoIcms,
    Expression<double>? valorIcms,
    Expression<double>? valorIcmsDesonerado,
    Expression<double>? totalIcmsFcpUfDestino,
    Expression<double>? totalIcmsInterestadualUfDestino,
    Expression<double>? totalIcmsInterestadualUfRemetente,
    Expression<double>? valorTotalFcp,
    Expression<double>? baseCalculoIcmsSt,
    Expression<double>? valorIcmsSt,
    Expression<double>? valorTotalFcpSt,
    Expression<double>? valorTotalFcpStRetido,
    Expression<double>? valorTotalProdutos,
    Expression<double>? valorFrete,
    Expression<double>? valorSeguro,
    Expression<double>? valorDesconto,
    Expression<double>? valorImpostoImportacao,
    Expression<double>? valorIpi,
    Expression<double>? valorIpiDevolvido,
    Expression<double>? valorPis,
    Expression<double>? valorCofins,
    Expression<double>? valorDespesasAcessorias,
    Expression<double>? valorTotal,
    Expression<double>? valorTotalTributos,
    Expression<double>? valorServicos,
    Expression<double>? baseCalculoIssqn,
    Expression<double>? valorIssqn,
    Expression<double>? valorPisIssqn,
    Expression<double>? valorCofinsIssqn,
    Expression<DateTime>? dataPrestacaoServico,
    Expression<double>? valorDeducaoIssqn,
    Expression<double>? outrasRetencoesIssqn,
    Expression<double>? descontoIncondicionadoIssqn,
    Expression<double>? descontoCondicionadoIssqn,
    Expression<double>? totalRetencaoIssqn,
    Expression<String>? regimeEspecialTributacao,
    Expression<double>? valorRetidoPis,
    Expression<double>? valorRetidoCofins,
    Expression<double>? valorRetidoCsll,
    Expression<double>? baseCalculoIrrf,
    Expression<double>? valorRetidoIrrf,
    Expression<double>? baseCalculoPrevidencia,
    Expression<double>? valorRetidoPrevidencia,
    Expression<String>? informacoesAddFisco,
    Expression<String>? informacoesAddContribuinte,
    Expression<String>? comexUfEmbarque,
    Expression<String>? comexLocalEmbarque,
    Expression<String>? comexLocalDespacho,
    Expression<String>? compraNotaEmpenho,
    Expression<String>? compraPedido,
    Expression<String>? compraContrato,
    Expression<String>? qrcode,
    Expression<String>? urlChave,
    Expression<String>? statusNota,
    Expression<String>? indicadorIntermediario,
    Expression<String>? intermediadorCnpj,
    Expression<String>? intermediadorIdCadastro,
    Expression<int>? codigoMunicipioFgIbs,
    Expression<String>? tipoNotaDebito,
    Expression<String>? tipoNotaCredito,
    Expression<double>? totalImpostoSeletivo,
    Expression<double>? totalBcIbsCbs,
    Expression<double>? ibsUfTotalDiferimento,
    Expression<double>? ibsUfTotalDevTributos,
    Expression<double>? ibsUfValorTotal,
    Expression<double>? ibsMunTotalDiferimento,
    Expression<double>? ibsMunTotalDevTributos,
    Expression<double>? ibsMunValorTotal,
    Expression<double>? cbsTotalDiferimento,
    Expression<double>? cbsTotalDevTributos,
    Expression<double>? cbsValorTotal,
    Expression<double>? cbsTotalCreditoPresumido,
    Expression<double>? cbsTotCrePreSuspensivo,
    Expression<double>? monoIbsTotal,
    Expression<double>? monoCbsTotal,
    Expression<double>? monoIbsTotalRetencao,
    Expression<double>? monoCbsTotalRetencao,
    Expression<double>? monoIbsRetido,
    Expression<double>? monoCbsRetido,
    Expression<double>? valorTotalNfe,
    Expression<double>? totalQtdeTributadaMono,
    Expression<double>? totalIcmsMono,
    Expression<double>? totalQuantidadeMonoRetencao,
    Expression<double>? totalIcmsMonoRetencao,
    Expression<double>? totalQuantidadeMonoRetida,
    Expression<double>? totalIcmsMonoRetido,
    Expression<double>? ibsValorTotal,
    Expression<double>? totalCreditoPresumido,
    Expression<double>? totalCredPresSuspensivo,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (idVendaCabecalho != null) 'id_venda_cabecalho': idVendaCabecalho,
      if (idTributOperacaoFiscal != null)
        'id_tribut_operacao_fiscal': idTributOperacaoFiscal,
      if (idCliente != null) 'id_cliente': idCliente,
      if (idColaborador != null) 'id_colaborador': idColaborador,
      if (idFornecedor != null) 'id_fornecedor': idFornecedor,
      if (ufEmitente != null) 'uf_emitente': ufEmitente,
      if (codigoNumerico != null) 'codigo_numerico': codigoNumerico,
      if (naturezaOperacao != null) 'natureza_operacao': naturezaOperacao,
      if (codigoModelo != null) 'codigo_modelo': codigoModelo,
      if (serie != null) 'serie': serie,
      if (numero != null) 'numero': numero,
      if (dataHoraEmissao != null) 'data_hora_emissao': dataHoraEmissao,
      if (dataHoraEntradaSaida != null)
        'data_hora_entrada_saida': dataHoraEntradaSaida,
      if (tipoOperacao != null) 'tipo_operacao': tipoOperacao,
      if (localDestino != null) 'local_destino': localDestino,
      if (codigoMunicipio != null) 'codigo_municipio': codigoMunicipio,
      if (formatoImpressaoDanfe != null)
        'formato_impressao_danfe': formatoImpressaoDanfe,
      if (tipoEmissao != null) 'tipo_emissao': tipoEmissao,
      if (chaveAcesso != null) 'chave_acesso': chaveAcesso,
      if (digitoChaveAcesso != null) 'digito_chave_acesso': digitoChaveAcesso,
      if (ambiente != null) 'ambiente': ambiente,
      if (finalidadeEmissao != null) 'finalidade_emissao': finalidadeEmissao,
      if (consumidorOperacao != null) 'consumidor_operacao': consumidorOperacao,
      if (consumidorPresenca != null) 'consumidor_presenca': consumidorPresenca,
      if (processoEmissao != null) 'processo_emissao': processoEmissao,
      if (versaoProcessoEmissao != null)
        'versao_processo_emissao': versaoProcessoEmissao,
      if (dataEntradaContingencia != null)
        'data_entrada_contingencia': dataEntradaContingencia,
      if (justificativaContingencia != null)
        'justificativa_contingencia': justificativaContingencia,
      if (baseCalculoIcms != null) 'base_calculo_icms': baseCalculoIcms,
      if (valorIcms != null) 'valor_icms': valorIcms,
      if (valorIcmsDesonerado != null)
        'valor_icms_desonerado': valorIcmsDesonerado,
      if (totalIcmsFcpUfDestino != null)
        'total_icms_fcp_uf_destino': totalIcmsFcpUfDestino,
      if (totalIcmsInterestadualUfDestino != null)
        'total_icms_interestadual_uf_destino': totalIcmsInterestadualUfDestino,
      if (totalIcmsInterestadualUfRemetente != null)
        'total_icms_interestadual_uf_remetente':
            totalIcmsInterestadualUfRemetente,
      if (valorTotalFcp != null) 'valor_total_fcp': valorTotalFcp,
      if (baseCalculoIcmsSt != null) 'base_calculo_icms_st': baseCalculoIcmsSt,
      if (valorIcmsSt != null) 'valor_icms_st': valorIcmsSt,
      if (valorTotalFcpSt != null) 'valor_total_fcp_st': valorTotalFcpSt,
      if (valorTotalFcpStRetido != null)
        'valor_total_fcp_st_retido': valorTotalFcpStRetido,
      if (valorTotalProdutos != null)
        'valor_total_produtos': valorTotalProdutos,
      if (valorFrete != null) 'valor_frete': valorFrete,
      if (valorSeguro != null) 'valor_seguro': valorSeguro,
      if (valorDesconto != null) 'valor_desconto': valorDesconto,
      if (valorImpostoImportacao != null)
        'valor_imposto_importacao': valorImpostoImportacao,
      if (valorIpi != null) 'valor_ipi': valorIpi,
      if (valorIpiDevolvido != null) 'valor_ipi_devolvido': valorIpiDevolvido,
      if (valorPis != null) 'valor_pis': valorPis,
      if (valorCofins != null) 'valor_cofins': valorCofins,
      if (valorDespesasAcessorias != null)
        'valor_despesas_acessorias': valorDespesasAcessorias,
      if (valorTotal != null) 'valor_total': valorTotal,
      if (valorTotalTributos != null)
        'valor_total_tributos': valorTotalTributos,
      if (valorServicos != null) 'valor_servicos': valorServicos,
      if (baseCalculoIssqn != null) 'base_calculo_issqn': baseCalculoIssqn,
      if (valorIssqn != null) 'valor_issqn': valorIssqn,
      if (valorPisIssqn != null) 'valor_pis_issqn': valorPisIssqn,
      if (valorCofinsIssqn != null) 'valor_cofins_issqn': valorCofinsIssqn,
      if (dataPrestacaoServico != null)
        'data_prestacao_servico': dataPrestacaoServico,
      if (valorDeducaoIssqn != null) 'valor_deducao_issqn': valorDeducaoIssqn,
      if (outrasRetencoesIssqn != null)
        'outras_retencoes_issqn': outrasRetencoesIssqn,
      if (descontoIncondicionadoIssqn != null)
        'desconto_incondicionado_issqn': descontoIncondicionadoIssqn,
      if (descontoCondicionadoIssqn != null)
        'desconto_condicionado_issqn': descontoCondicionadoIssqn,
      if (totalRetencaoIssqn != null)
        'total_retencao_issqn': totalRetencaoIssqn,
      if (regimeEspecialTributacao != null)
        'regime_especial_tributacao': regimeEspecialTributacao,
      if (valorRetidoPis != null) 'valor_retido_pis': valorRetidoPis,
      if (valorRetidoCofins != null) 'valor_retido_cofins': valorRetidoCofins,
      if (valorRetidoCsll != null) 'valor_retido_csll': valorRetidoCsll,
      if (baseCalculoIrrf != null) 'base_calculo_irrf': baseCalculoIrrf,
      if (valorRetidoIrrf != null) 'valor_retido_irrf': valorRetidoIrrf,
      if (baseCalculoPrevidencia != null)
        'base_calculo_previdencia': baseCalculoPrevidencia,
      if (valorRetidoPrevidencia != null)
        'valor_retido_previdencia': valorRetidoPrevidencia,
      if (informacoesAddFisco != null)
        'informacoes_add_fisco': informacoesAddFisco,
      if (informacoesAddContribuinte != null)
        'informacoes_add_contribuinte': informacoesAddContribuinte,
      if (comexUfEmbarque != null) 'comex_uf_embarque': comexUfEmbarque,
      if (comexLocalEmbarque != null)
        'comex_local_embarque': comexLocalEmbarque,
      if (comexLocalDespacho != null)
        'comex_local_despacho': comexLocalDespacho,
      if (compraNotaEmpenho != null) 'compra_nota_empenho': compraNotaEmpenho,
      if (compraPedido != null) 'compra_pedido': compraPedido,
      if (compraContrato != null) 'compra_contrato': compraContrato,
      if (qrcode != null) 'qrcode': qrcode,
      if (urlChave != null) 'url_chave': urlChave,
      if (statusNota != null) 'status_nota': statusNota,
      if (indicadorIntermediario != null)
        'indicador_intermediario': indicadorIntermediario,
      if (intermediadorCnpj != null) 'intermediador_cnpj': intermediadorCnpj,
      if (intermediadorIdCadastro != null)
        'intermediador_id_cadastro': intermediadorIdCadastro,
      if (codigoMunicipioFgIbs != null)
        'codigo_municipio_fg_ibs': codigoMunicipioFgIbs,
      if (tipoNotaDebito != null) 'tipo_nota_debito': tipoNotaDebito,
      if (tipoNotaCredito != null) 'tipo_nota_credito': tipoNotaCredito,
      if (totalImpostoSeletivo != null)
        'total_imposto_seletivo': totalImpostoSeletivo,
      if (totalBcIbsCbs != null) 'total_bc_ibs_cbs': totalBcIbsCbs,
      if (ibsUfTotalDiferimento != null)
        'ibs_uf_total_diferimento': ibsUfTotalDiferimento,
      if (ibsUfTotalDevTributos != null)
        'ibs_uf_total_dev_tributos': ibsUfTotalDevTributos,
      if (ibsUfValorTotal != null) 'ibs_uf_valor_total': ibsUfValorTotal,
      if (ibsMunTotalDiferimento != null)
        'ibs_mun_total_diferimento': ibsMunTotalDiferimento,
      if (ibsMunTotalDevTributos != null)
        'ibs_mun_total_dev_tributos': ibsMunTotalDevTributos,
      if (ibsMunValorTotal != null) 'ibs_mun_valor_total': ibsMunValorTotal,
      if (cbsTotalDiferimento != null)
        'cbs_total_diferimento': cbsTotalDiferimento,
      if (cbsTotalDevTributos != null)
        'cbs_total_dev_tributos': cbsTotalDevTributos,
      if (cbsValorTotal != null) 'cbs_valor_total': cbsValorTotal,
      if (cbsTotalCreditoPresumido != null)
        'cbs_total_credito_presumido': cbsTotalCreditoPresumido,
      if (cbsTotCrePreSuspensivo != null)
        'cbs_tot_cre_pre_suspensivo': cbsTotCrePreSuspensivo,
      if (monoIbsTotal != null) 'mono_ibs_total': monoIbsTotal,
      if (monoCbsTotal != null) 'mono_cbs_total': monoCbsTotal,
      if (monoIbsTotalRetencao != null)
        'mono_ibs_total_retencao': monoIbsTotalRetencao,
      if (monoCbsTotalRetencao != null)
        'mono_cbs_total_retencao': monoCbsTotalRetencao,
      if (monoIbsRetido != null) 'mono_ibs_retido': monoIbsRetido,
      if (monoCbsRetido != null) 'mono_cbs_retido': monoCbsRetido,
      if (valorTotalNfe != null) 'valor_total_nfe': valorTotalNfe,
      if (totalQtdeTributadaMono != null)
        'total_qtde_tributada_mono': totalQtdeTributadaMono,
      if (totalIcmsMono != null) 'total_icms_mono': totalIcmsMono,
      if (totalQuantidadeMonoRetencao != null)
        'total_quantidade_mono_retencao': totalQuantidadeMonoRetencao,
      if (totalIcmsMonoRetencao != null)
        'total_icms_mono_retencao': totalIcmsMonoRetencao,
      if (totalQuantidadeMonoRetida != null)
        'total_quantidade_mono_retida': totalQuantidadeMonoRetida,
      if (totalIcmsMonoRetido != null)
        'total_icms_mono_retido': totalIcmsMonoRetido,
      if (ibsValorTotal != null) 'ibs_valor_total': ibsValorTotal,
      if (totalCreditoPresumido != null)
        'total_credito_presumido': totalCreditoPresumido,
      if (totalCredPresSuspensivo != null)
        'total_cred_pres_suspensivo': totalCredPresSuspensivo,
    });
  }

  NfeCabecalhosCompanion copyWith({
    Value<int?>? id,
    Value<int?>? idVendaCabecalho,
    Value<int?>? idTributOperacaoFiscal,
    Value<int?>? idCliente,
    Value<int?>? idColaborador,
    Value<int?>? idFornecedor,
    Value<String?>? ufEmitente,
    Value<String?>? codigoNumerico,
    Value<String?>? naturezaOperacao,
    Value<String?>? codigoModelo,
    Value<String?>? serie,
    Value<String?>? numero,
    Value<DateTime?>? dataHoraEmissao,
    Value<DateTime?>? dataHoraEntradaSaida,
    Value<String?>? tipoOperacao,
    Value<String?>? localDestino,
    Value<int?>? codigoMunicipio,
    Value<String?>? formatoImpressaoDanfe,
    Value<String?>? tipoEmissao,
    Value<String?>? chaveAcesso,
    Value<String?>? digitoChaveAcesso,
    Value<String?>? ambiente,
    Value<String?>? finalidadeEmissao,
    Value<String?>? consumidorOperacao,
    Value<String?>? consumidorPresenca,
    Value<String?>? processoEmissao,
    Value<String?>? versaoProcessoEmissao,
    Value<DateTime?>? dataEntradaContingencia,
    Value<String?>? justificativaContingencia,
    Value<double?>? baseCalculoIcms,
    Value<double?>? valorIcms,
    Value<double?>? valorIcmsDesonerado,
    Value<double?>? totalIcmsFcpUfDestino,
    Value<double?>? totalIcmsInterestadualUfDestino,
    Value<double?>? totalIcmsInterestadualUfRemetente,
    Value<double?>? valorTotalFcp,
    Value<double?>? baseCalculoIcmsSt,
    Value<double?>? valorIcmsSt,
    Value<double?>? valorTotalFcpSt,
    Value<double?>? valorTotalFcpStRetido,
    Value<double?>? valorTotalProdutos,
    Value<double?>? valorFrete,
    Value<double?>? valorSeguro,
    Value<double?>? valorDesconto,
    Value<double?>? valorImpostoImportacao,
    Value<double?>? valorIpi,
    Value<double?>? valorIpiDevolvido,
    Value<double?>? valorPis,
    Value<double?>? valorCofins,
    Value<double?>? valorDespesasAcessorias,
    Value<double?>? valorTotal,
    Value<double?>? valorTotalTributos,
    Value<double?>? valorServicos,
    Value<double?>? baseCalculoIssqn,
    Value<double?>? valorIssqn,
    Value<double?>? valorPisIssqn,
    Value<double?>? valorCofinsIssqn,
    Value<DateTime?>? dataPrestacaoServico,
    Value<double?>? valorDeducaoIssqn,
    Value<double?>? outrasRetencoesIssqn,
    Value<double?>? descontoIncondicionadoIssqn,
    Value<double?>? descontoCondicionadoIssqn,
    Value<double?>? totalRetencaoIssqn,
    Value<String?>? regimeEspecialTributacao,
    Value<double?>? valorRetidoPis,
    Value<double?>? valorRetidoCofins,
    Value<double?>? valorRetidoCsll,
    Value<double?>? baseCalculoIrrf,
    Value<double?>? valorRetidoIrrf,
    Value<double?>? baseCalculoPrevidencia,
    Value<double?>? valorRetidoPrevidencia,
    Value<String?>? informacoesAddFisco,
    Value<String?>? informacoesAddContribuinte,
    Value<String?>? comexUfEmbarque,
    Value<String?>? comexLocalEmbarque,
    Value<String?>? comexLocalDespacho,
    Value<String?>? compraNotaEmpenho,
    Value<String?>? compraPedido,
    Value<String?>? compraContrato,
    Value<String?>? qrcode,
    Value<String?>? urlChave,
    Value<String?>? statusNota,
    Value<String?>? indicadorIntermediario,
    Value<String?>? intermediadorCnpj,
    Value<String?>? intermediadorIdCadastro,
    Value<int?>? codigoMunicipioFgIbs,
    Value<String?>? tipoNotaDebito,
    Value<String?>? tipoNotaCredito,
    Value<double?>? totalImpostoSeletivo,
    Value<double?>? totalBcIbsCbs,
    Value<double?>? ibsUfTotalDiferimento,
    Value<double?>? ibsUfTotalDevTributos,
    Value<double?>? ibsUfValorTotal,
    Value<double?>? ibsMunTotalDiferimento,
    Value<double?>? ibsMunTotalDevTributos,
    Value<double?>? ibsMunValorTotal,
    Value<double?>? cbsTotalDiferimento,
    Value<double?>? cbsTotalDevTributos,
    Value<double?>? cbsValorTotal,
    Value<double?>? cbsTotalCreditoPresumido,
    Value<double?>? cbsTotCrePreSuspensivo,
    Value<double?>? monoIbsTotal,
    Value<double?>? monoCbsTotal,
    Value<double?>? monoIbsTotalRetencao,
    Value<double?>? monoCbsTotalRetencao,
    Value<double?>? monoIbsRetido,
    Value<double?>? monoCbsRetido,
    Value<double?>? valorTotalNfe,
    Value<double?>? totalQtdeTributadaMono,
    Value<double?>? totalIcmsMono,
    Value<double?>? totalQuantidadeMonoRetencao,
    Value<double?>? totalIcmsMonoRetencao,
    Value<double?>? totalQuantidadeMonoRetida,
    Value<double?>? totalIcmsMonoRetido,
    Value<double?>? ibsValorTotal,
    Value<double?>? totalCreditoPresumido,
    Value<double?>? totalCredPresSuspensivo,
  }) {
    return NfeCabecalhosCompanion(
      id: id ?? this.id,
      idVendaCabecalho: idVendaCabecalho ?? this.idVendaCabecalho,
      idTributOperacaoFiscal:
          idTributOperacaoFiscal ?? this.idTributOperacaoFiscal,
      idCliente: idCliente ?? this.idCliente,
      idColaborador: idColaborador ?? this.idColaborador,
      idFornecedor: idFornecedor ?? this.idFornecedor,
      ufEmitente: ufEmitente ?? this.ufEmitente,
      codigoNumerico: codigoNumerico ?? this.codigoNumerico,
      naturezaOperacao: naturezaOperacao ?? this.naturezaOperacao,
      codigoModelo: codigoModelo ?? this.codigoModelo,
      serie: serie ?? this.serie,
      numero: numero ?? this.numero,
      dataHoraEmissao: dataHoraEmissao ?? this.dataHoraEmissao,
      dataHoraEntradaSaida: dataHoraEntradaSaida ?? this.dataHoraEntradaSaida,
      tipoOperacao: tipoOperacao ?? this.tipoOperacao,
      localDestino: localDestino ?? this.localDestino,
      codigoMunicipio: codigoMunicipio ?? this.codigoMunicipio,
      formatoImpressaoDanfe:
          formatoImpressaoDanfe ?? this.formatoImpressaoDanfe,
      tipoEmissao: tipoEmissao ?? this.tipoEmissao,
      chaveAcesso: chaveAcesso ?? this.chaveAcesso,
      digitoChaveAcesso: digitoChaveAcesso ?? this.digitoChaveAcesso,
      ambiente: ambiente ?? this.ambiente,
      finalidadeEmissao: finalidadeEmissao ?? this.finalidadeEmissao,
      consumidorOperacao: consumidorOperacao ?? this.consumidorOperacao,
      consumidorPresenca: consumidorPresenca ?? this.consumidorPresenca,
      processoEmissao: processoEmissao ?? this.processoEmissao,
      versaoProcessoEmissao:
          versaoProcessoEmissao ?? this.versaoProcessoEmissao,
      dataEntradaContingencia:
          dataEntradaContingencia ?? this.dataEntradaContingencia,
      justificativaContingencia:
          justificativaContingencia ?? this.justificativaContingencia,
      baseCalculoIcms: baseCalculoIcms ?? this.baseCalculoIcms,
      valorIcms: valorIcms ?? this.valorIcms,
      valorIcmsDesonerado: valorIcmsDesonerado ?? this.valorIcmsDesonerado,
      totalIcmsFcpUfDestino:
          totalIcmsFcpUfDestino ?? this.totalIcmsFcpUfDestino,
      totalIcmsInterestadualUfDestino:
          totalIcmsInterestadualUfDestino ??
          this.totalIcmsInterestadualUfDestino,
      totalIcmsInterestadualUfRemetente:
          totalIcmsInterestadualUfRemetente ??
          this.totalIcmsInterestadualUfRemetente,
      valorTotalFcp: valorTotalFcp ?? this.valorTotalFcp,
      baseCalculoIcmsSt: baseCalculoIcmsSt ?? this.baseCalculoIcmsSt,
      valorIcmsSt: valorIcmsSt ?? this.valorIcmsSt,
      valorTotalFcpSt: valorTotalFcpSt ?? this.valorTotalFcpSt,
      valorTotalFcpStRetido:
          valorTotalFcpStRetido ?? this.valorTotalFcpStRetido,
      valorTotalProdutos: valorTotalProdutos ?? this.valorTotalProdutos,
      valorFrete: valorFrete ?? this.valorFrete,
      valorSeguro: valorSeguro ?? this.valorSeguro,
      valorDesconto: valorDesconto ?? this.valorDesconto,
      valorImpostoImportacao:
          valorImpostoImportacao ?? this.valorImpostoImportacao,
      valorIpi: valorIpi ?? this.valorIpi,
      valorIpiDevolvido: valorIpiDevolvido ?? this.valorIpiDevolvido,
      valorPis: valorPis ?? this.valorPis,
      valorCofins: valorCofins ?? this.valorCofins,
      valorDespesasAcessorias:
          valorDespesasAcessorias ?? this.valorDespesasAcessorias,
      valorTotal: valorTotal ?? this.valorTotal,
      valorTotalTributos: valorTotalTributos ?? this.valorTotalTributos,
      valorServicos: valorServicos ?? this.valorServicos,
      baseCalculoIssqn: baseCalculoIssqn ?? this.baseCalculoIssqn,
      valorIssqn: valorIssqn ?? this.valorIssqn,
      valorPisIssqn: valorPisIssqn ?? this.valorPisIssqn,
      valorCofinsIssqn: valorCofinsIssqn ?? this.valorCofinsIssqn,
      dataPrestacaoServico: dataPrestacaoServico ?? this.dataPrestacaoServico,
      valorDeducaoIssqn: valorDeducaoIssqn ?? this.valorDeducaoIssqn,
      outrasRetencoesIssqn: outrasRetencoesIssqn ?? this.outrasRetencoesIssqn,
      descontoIncondicionadoIssqn:
          descontoIncondicionadoIssqn ?? this.descontoIncondicionadoIssqn,
      descontoCondicionadoIssqn:
          descontoCondicionadoIssqn ?? this.descontoCondicionadoIssqn,
      totalRetencaoIssqn: totalRetencaoIssqn ?? this.totalRetencaoIssqn,
      regimeEspecialTributacao:
          regimeEspecialTributacao ?? this.regimeEspecialTributacao,
      valorRetidoPis: valorRetidoPis ?? this.valorRetidoPis,
      valorRetidoCofins: valorRetidoCofins ?? this.valorRetidoCofins,
      valorRetidoCsll: valorRetidoCsll ?? this.valorRetidoCsll,
      baseCalculoIrrf: baseCalculoIrrf ?? this.baseCalculoIrrf,
      valorRetidoIrrf: valorRetidoIrrf ?? this.valorRetidoIrrf,
      baseCalculoPrevidencia:
          baseCalculoPrevidencia ?? this.baseCalculoPrevidencia,
      valorRetidoPrevidencia:
          valorRetidoPrevidencia ?? this.valorRetidoPrevidencia,
      informacoesAddFisco: informacoesAddFisco ?? this.informacoesAddFisco,
      informacoesAddContribuinte:
          informacoesAddContribuinte ?? this.informacoesAddContribuinte,
      comexUfEmbarque: comexUfEmbarque ?? this.comexUfEmbarque,
      comexLocalEmbarque: comexLocalEmbarque ?? this.comexLocalEmbarque,
      comexLocalDespacho: comexLocalDespacho ?? this.comexLocalDespacho,
      compraNotaEmpenho: compraNotaEmpenho ?? this.compraNotaEmpenho,
      compraPedido: compraPedido ?? this.compraPedido,
      compraContrato: compraContrato ?? this.compraContrato,
      qrcode: qrcode ?? this.qrcode,
      urlChave: urlChave ?? this.urlChave,
      statusNota: statusNota ?? this.statusNota,
      indicadorIntermediario:
          indicadorIntermediario ?? this.indicadorIntermediario,
      intermediadorCnpj: intermediadorCnpj ?? this.intermediadorCnpj,
      intermediadorIdCadastro:
          intermediadorIdCadastro ?? this.intermediadorIdCadastro,
      codigoMunicipioFgIbs: codigoMunicipioFgIbs ?? this.codigoMunicipioFgIbs,
      tipoNotaDebito: tipoNotaDebito ?? this.tipoNotaDebito,
      tipoNotaCredito: tipoNotaCredito ?? this.tipoNotaCredito,
      totalImpostoSeletivo: totalImpostoSeletivo ?? this.totalImpostoSeletivo,
      totalBcIbsCbs: totalBcIbsCbs ?? this.totalBcIbsCbs,
      ibsUfTotalDiferimento:
          ibsUfTotalDiferimento ?? this.ibsUfTotalDiferimento,
      ibsUfTotalDevTributos:
          ibsUfTotalDevTributos ?? this.ibsUfTotalDevTributos,
      ibsUfValorTotal: ibsUfValorTotal ?? this.ibsUfValorTotal,
      ibsMunTotalDiferimento:
          ibsMunTotalDiferimento ?? this.ibsMunTotalDiferimento,
      ibsMunTotalDevTributos:
          ibsMunTotalDevTributos ?? this.ibsMunTotalDevTributos,
      ibsMunValorTotal: ibsMunValorTotal ?? this.ibsMunValorTotal,
      cbsTotalDiferimento: cbsTotalDiferimento ?? this.cbsTotalDiferimento,
      cbsTotalDevTributos: cbsTotalDevTributos ?? this.cbsTotalDevTributos,
      cbsValorTotal: cbsValorTotal ?? this.cbsValorTotal,
      cbsTotalCreditoPresumido:
          cbsTotalCreditoPresumido ?? this.cbsTotalCreditoPresumido,
      cbsTotCrePreSuspensivo:
          cbsTotCrePreSuspensivo ?? this.cbsTotCrePreSuspensivo,
      monoIbsTotal: monoIbsTotal ?? this.monoIbsTotal,
      monoCbsTotal: monoCbsTotal ?? this.monoCbsTotal,
      monoIbsTotalRetencao: monoIbsTotalRetencao ?? this.monoIbsTotalRetencao,
      monoCbsTotalRetencao: monoCbsTotalRetencao ?? this.monoCbsTotalRetencao,
      monoIbsRetido: monoIbsRetido ?? this.monoIbsRetido,
      monoCbsRetido: monoCbsRetido ?? this.monoCbsRetido,
      valorTotalNfe: valorTotalNfe ?? this.valorTotalNfe,
      totalQtdeTributadaMono:
          totalQtdeTributadaMono ?? this.totalQtdeTributadaMono,
      totalIcmsMono: totalIcmsMono ?? this.totalIcmsMono,
      totalQuantidadeMonoRetencao:
          totalQuantidadeMonoRetencao ?? this.totalQuantidadeMonoRetencao,
      totalIcmsMonoRetencao:
          totalIcmsMonoRetencao ?? this.totalIcmsMonoRetencao,
      totalQuantidadeMonoRetida:
          totalQuantidadeMonoRetida ?? this.totalQuantidadeMonoRetida,
      totalIcmsMonoRetido: totalIcmsMonoRetido ?? this.totalIcmsMonoRetido,
      ibsValorTotal: ibsValorTotal ?? this.ibsValorTotal,
      totalCreditoPresumido:
          totalCreditoPresumido ?? this.totalCreditoPresumido,
      totalCredPresSuspensivo:
          totalCredPresSuspensivo ?? this.totalCredPresSuspensivo,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (idVendaCabecalho.present) {
      map['id_venda_cabecalho'] = Variable<int>(idVendaCabecalho.value);
    }
    if (idTributOperacaoFiscal.present) {
      map['id_tribut_operacao_fiscal'] = Variable<int>(
        idTributOperacaoFiscal.value,
      );
    }
    if (idCliente.present) {
      map['id_cliente'] = Variable<int>(idCliente.value);
    }
    if (idColaborador.present) {
      map['id_colaborador'] = Variable<int>(idColaborador.value);
    }
    if (idFornecedor.present) {
      map['id_fornecedor'] = Variable<int>(idFornecedor.value);
    }
    if (ufEmitente.present) {
      map['uf_emitente'] = Variable<String>(ufEmitente.value);
    }
    if (codigoNumerico.present) {
      map['codigo_numerico'] = Variable<String>(codigoNumerico.value);
    }
    if (naturezaOperacao.present) {
      map['natureza_operacao'] = Variable<String>(naturezaOperacao.value);
    }
    if (codigoModelo.present) {
      map['codigo_modelo'] = Variable<String>(codigoModelo.value);
    }
    if (serie.present) {
      map['serie'] = Variable<String>(serie.value);
    }
    if (numero.present) {
      map['numero'] = Variable<String>(numero.value);
    }
    if (dataHoraEmissao.present) {
      map['data_hora_emissao'] = Variable<DateTime>(dataHoraEmissao.value);
    }
    if (dataHoraEntradaSaida.present) {
      map['data_hora_entrada_saida'] = Variable<DateTime>(
        dataHoraEntradaSaida.value,
      );
    }
    if (tipoOperacao.present) {
      map['tipo_operacao'] = Variable<String>(tipoOperacao.value);
    }
    if (localDestino.present) {
      map['local_destino'] = Variable<String>(localDestino.value);
    }
    if (codigoMunicipio.present) {
      map['codigo_municipio'] = Variable<int>(codigoMunicipio.value);
    }
    if (formatoImpressaoDanfe.present) {
      map['formato_impressao_danfe'] = Variable<String>(
        formatoImpressaoDanfe.value,
      );
    }
    if (tipoEmissao.present) {
      map['tipo_emissao'] = Variable<String>(tipoEmissao.value);
    }
    if (chaveAcesso.present) {
      map['chave_acesso'] = Variable<String>(chaveAcesso.value);
    }
    if (digitoChaveAcesso.present) {
      map['digito_chave_acesso'] = Variable<String>(digitoChaveAcesso.value);
    }
    if (ambiente.present) {
      map['ambiente'] = Variable<String>(ambiente.value);
    }
    if (finalidadeEmissao.present) {
      map['finalidade_emissao'] = Variable<String>(finalidadeEmissao.value);
    }
    if (consumidorOperacao.present) {
      map['consumidor_operacao'] = Variable<String>(consumidorOperacao.value);
    }
    if (consumidorPresenca.present) {
      map['consumidor_presenca'] = Variable<String>(consumidorPresenca.value);
    }
    if (processoEmissao.present) {
      map['processo_emissao'] = Variable<String>(processoEmissao.value);
    }
    if (versaoProcessoEmissao.present) {
      map['versao_processo_emissao'] = Variable<String>(
        versaoProcessoEmissao.value,
      );
    }
    if (dataEntradaContingencia.present) {
      map['data_entrada_contingencia'] = Variable<DateTime>(
        dataEntradaContingencia.value,
      );
    }
    if (justificativaContingencia.present) {
      map['justificativa_contingencia'] = Variable<String>(
        justificativaContingencia.value,
      );
    }
    if (baseCalculoIcms.present) {
      map['base_calculo_icms'] = Variable<double>(baseCalculoIcms.value);
    }
    if (valorIcms.present) {
      map['valor_icms'] = Variable<double>(valorIcms.value);
    }
    if (valorIcmsDesonerado.present) {
      map['valor_icms_desonerado'] = Variable<double>(
        valorIcmsDesonerado.value,
      );
    }
    if (totalIcmsFcpUfDestino.present) {
      map['total_icms_fcp_uf_destino'] = Variable<double>(
        totalIcmsFcpUfDestino.value,
      );
    }
    if (totalIcmsInterestadualUfDestino.present) {
      map['total_icms_interestadual_uf_destino'] = Variable<double>(
        totalIcmsInterestadualUfDestino.value,
      );
    }
    if (totalIcmsInterestadualUfRemetente.present) {
      map['total_icms_interestadual_uf_remetente'] = Variable<double>(
        totalIcmsInterestadualUfRemetente.value,
      );
    }
    if (valorTotalFcp.present) {
      map['valor_total_fcp'] = Variable<double>(valorTotalFcp.value);
    }
    if (baseCalculoIcmsSt.present) {
      map['base_calculo_icms_st'] = Variable<double>(baseCalculoIcmsSt.value);
    }
    if (valorIcmsSt.present) {
      map['valor_icms_st'] = Variable<double>(valorIcmsSt.value);
    }
    if (valorTotalFcpSt.present) {
      map['valor_total_fcp_st'] = Variable<double>(valorTotalFcpSt.value);
    }
    if (valorTotalFcpStRetido.present) {
      map['valor_total_fcp_st_retido'] = Variable<double>(
        valorTotalFcpStRetido.value,
      );
    }
    if (valorTotalProdutos.present) {
      map['valor_total_produtos'] = Variable<double>(valorTotalProdutos.value);
    }
    if (valorFrete.present) {
      map['valor_frete'] = Variable<double>(valorFrete.value);
    }
    if (valorSeguro.present) {
      map['valor_seguro'] = Variable<double>(valorSeguro.value);
    }
    if (valorDesconto.present) {
      map['valor_desconto'] = Variable<double>(valorDesconto.value);
    }
    if (valorImpostoImportacao.present) {
      map['valor_imposto_importacao'] = Variable<double>(
        valorImpostoImportacao.value,
      );
    }
    if (valorIpi.present) {
      map['valor_ipi'] = Variable<double>(valorIpi.value);
    }
    if (valorIpiDevolvido.present) {
      map['valor_ipi_devolvido'] = Variable<double>(valorIpiDevolvido.value);
    }
    if (valorPis.present) {
      map['valor_pis'] = Variable<double>(valorPis.value);
    }
    if (valorCofins.present) {
      map['valor_cofins'] = Variable<double>(valorCofins.value);
    }
    if (valorDespesasAcessorias.present) {
      map['valor_despesas_acessorias'] = Variable<double>(
        valorDespesasAcessorias.value,
      );
    }
    if (valorTotal.present) {
      map['valor_total'] = Variable<double>(valorTotal.value);
    }
    if (valorTotalTributos.present) {
      map['valor_total_tributos'] = Variable<double>(valorTotalTributos.value);
    }
    if (valorServicos.present) {
      map['valor_servicos'] = Variable<double>(valorServicos.value);
    }
    if (baseCalculoIssqn.present) {
      map['base_calculo_issqn'] = Variable<double>(baseCalculoIssqn.value);
    }
    if (valorIssqn.present) {
      map['valor_issqn'] = Variable<double>(valorIssqn.value);
    }
    if (valorPisIssqn.present) {
      map['valor_pis_issqn'] = Variable<double>(valorPisIssqn.value);
    }
    if (valorCofinsIssqn.present) {
      map['valor_cofins_issqn'] = Variable<double>(valorCofinsIssqn.value);
    }
    if (dataPrestacaoServico.present) {
      map['data_prestacao_servico'] = Variable<DateTime>(
        dataPrestacaoServico.value,
      );
    }
    if (valorDeducaoIssqn.present) {
      map['valor_deducao_issqn'] = Variable<double>(valorDeducaoIssqn.value);
    }
    if (outrasRetencoesIssqn.present) {
      map['outras_retencoes_issqn'] = Variable<double>(
        outrasRetencoesIssqn.value,
      );
    }
    if (descontoIncondicionadoIssqn.present) {
      map['desconto_incondicionado_issqn'] = Variable<double>(
        descontoIncondicionadoIssqn.value,
      );
    }
    if (descontoCondicionadoIssqn.present) {
      map['desconto_condicionado_issqn'] = Variable<double>(
        descontoCondicionadoIssqn.value,
      );
    }
    if (totalRetencaoIssqn.present) {
      map['total_retencao_issqn'] = Variable<double>(totalRetencaoIssqn.value);
    }
    if (regimeEspecialTributacao.present) {
      map['regime_especial_tributacao'] = Variable<String>(
        regimeEspecialTributacao.value,
      );
    }
    if (valorRetidoPis.present) {
      map['valor_retido_pis'] = Variable<double>(valorRetidoPis.value);
    }
    if (valorRetidoCofins.present) {
      map['valor_retido_cofins'] = Variable<double>(valorRetidoCofins.value);
    }
    if (valorRetidoCsll.present) {
      map['valor_retido_csll'] = Variable<double>(valorRetidoCsll.value);
    }
    if (baseCalculoIrrf.present) {
      map['base_calculo_irrf'] = Variable<double>(baseCalculoIrrf.value);
    }
    if (valorRetidoIrrf.present) {
      map['valor_retido_irrf'] = Variable<double>(valorRetidoIrrf.value);
    }
    if (baseCalculoPrevidencia.present) {
      map['base_calculo_previdencia'] = Variable<double>(
        baseCalculoPrevidencia.value,
      );
    }
    if (valorRetidoPrevidencia.present) {
      map['valor_retido_previdencia'] = Variable<double>(
        valorRetidoPrevidencia.value,
      );
    }
    if (informacoesAddFisco.present) {
      map['informacoes_add_fisco'] = Variable<String>(
        informacoesAddFisco.value,
      );
    }
    if (informacoesAddContribuinte.present) {
      map['informacoes_add_contribuinte'] = Variable<String>(
        informacoesAddContribuinte.value,
      );
    }
    if (comexUfEmbarque.present) {
      map['comex_uf_embarque'] = Variable<String>(comexUfEmbarque.value);
    }
    if (comexLocalEmbarque.present) {
      map['comex_local_embarque'] = Variable<String>(comexLocalEmbarque.value);
    }
    if (comexLocalDespacho.present) {
      map['comex_local_despacho'] = Variable<String>(comexLocalDespacho.value);
    }
    if (compraNotaEmpenho.present) {
      map['compra_nota_empenho'] = Variable<String>(compraNotaEmpenho.value);
    }
    if (compraPedido.present) {
      map['compra_pedido'] = Variable<String>(compraPedido.value);
    }
    if (compraContrato.present) {
      map['compra_contrato'] = Variable<String>(compraContrato.value);
    }
    if (qrcode.present) {
      map['qrcode'] = Variable<String>(qrcode.value);
    }
    if (urlChave.present) {
      map['url_chave'] = Variable<String>(urlChave.value);
    }
    if (statusNota.present) {
      map['status_nota'] = Variable<String>(statusNota.value);
    }
    if (indicadorIntermediario.present) {
      map['indicador_intermediario'] = Variable<String>(
        indicadorIntermediario.value,
      );
    }
    if (intermediadorCnpj.present) {
      map['intermediador_cnpj'] = Variable<String>(intermediadorCnpj.value);
    }
    if (intermediadorIdCadastro.present) {
      map['intermediador_id_cadastro'] = Variable<String>(
        intermediadorIdCadastro.value,
      );
    }
    if (codigoMunicipioFgIbs.present) {
      map['codigo_municipio_fg_ibs'] = Variable<int>(
        codigoMunicipioFgIbs.value,
      );
    }
    if (tipoNotaDebito.present) {
      map['tipo_nota_debito'] = Variable<String>(tipoNotaDebito.value);
    }
    if (tipoNotaCredito.present) {
      map['tipo_nota_credito'] = Variable<String>(tipoNotaCredito.value);
    }
    if (totalImpostoSeletivo.present) {
      map['total_imposto_seletivo'] = Variable<double>(
        totalImpostoSeletivo.value,
      );
    }
    if (totalBcIbsCbs.present) {
      map['total_bc_ibs_cbs'] = Variable<double>(totalBcIbsCbs.value);
    }
    if (ibsUfTotalDiferimento.present) {
      map['ibs_uf_total_diferimento'] = Variable<double>(
        ibsUfTotalDiferimento.value,
      );
    }
    if (ibsUfTotalDevTributos.present) {
      map['ibs_uf_total_dev_tributos'] = Variable<double>(
        ibsUfTotalDevTributos.value,
      );
    }
    if (ibsUfValorTotal.present) {
      map['ibs_uf_valor_total'] = Variable<double>(ibsUfValorTotal.value);
    }
    if (ibsMunTotalDiferimento.present) {
      map['ibs_mun_total_diferimento'] = Variable<double>(
        ibsMunTotalDiferimento.value,
      );
    }
    if (ibsMunTotalDevTributos.present) {
      map['ibs_mun_total_dev_tributos'] = Variable<double>(
        ibsMunTotalDevTributos.value,
      );
    }
    if (ibsMunValorTotal.present) {
      map['ibs_mun_valor_total'] = Variable<double>(ibsMunValorTotal.value);
    }
    if (cbsTotalDiferimento.present) {
      map['cbs_total_diferimento'] = Variable<double>(
        cbsTotalDiferimento.value,
      );
    }
    if (cbsTotalDevTributos.present) {
      map['cbs_total_dev_tributos'] = Variable<double>(
        cbsTotalDevTributos.value,
      );
    }
    if (cbsValorTotal.present) {
      map['cbs_valor_total'] = Variable<double>(cbsValorTotal.value);
    }
    if (cbsTotalCreditoPresumido.present) {
      map['cbs_total_credito_presumido'] = Variable<double>(
        cbsTotalCreditoPresumido.value,
      );
    }
    if (cbsTotCrePreSuspensivo.present) {
      map['cbs_tot_cre_pre_suspensivo'] = Variable<double>(
        cbsTotCrePreSuspensivo.value,
      );
    }
    if (monoIbsTotal.present) {
      map['mono_ibs_total'] = Variable<double>(monoIbsTotal.value);
    }
    if (monoCbsTotal.present) {
      map['mono_cbs_total'] = Variable<double>(monoCbsTotal.value);
    }
    if (monoIbsTotalRetencao.present) {
      map['mono_ibs_total_retencao'] = Variable<double>(
        monoIbsTotalRetencao.value,
      );
    }
    if (monoCbsTotalRetencao.present) {
      map['mono_cbs_total_retencao'] = Variable<double>(
        monoCbsTotalRetencao.value,
      );
    }
    if (monoIbsRetido.present) {
      map['mono_ibs_retido'] = Variable<double>(monoIbsRetido.value);
    }
    if (monoCbsRetido.present) {
      map['mono_cbs_retido'] = Variable<double>(monoCbsRetido.value);
    }
    if (valorTotalNfe.present) {
      map['valor_total_nfe'] = Variable<double>(valorTotalNfe.value);
    }
    if (totalQtdeTributadaMono.present) {
      map['total_qtde_tributada_mono'] = Variable<double>(
        totalQtdeTributadaMono.value,
      );
    }
    if (totalIcmsMono.present) {
      map['total_icms_mono'] = Variable<double>(totalIcmsMono.value);
    }
    if (totalQuantidadeMonoRetencao.present) {
      map['total_quantidade_mono_retencao'] = Variable<double>(
        totalQuantidadeMonoRetencao.value,
      );
    }
    if (totalIcmsMonoRetencao.present) {
      map['total_icms_mono_retencao'] = Variable<double>(
        totalIcmsMonoRetencao.value,
      );
    }
    if (totalQuantidadeMonoRetida.present) {
      map['total_quantidade_mono_retida'] = Variable<double>(
        totalQuantidadeMonoRetida.value,
      );
    }
    if (totalIcmsMonoRetido.present) {
      map['total_icms_mono_retido'] = Variable<double>(
        totalIcmsMonoRetido.value,
      );
    }
    if (ibsValorTotal.present) {
      map['ibs_valor_total'] = Variable<double>(ibsValorTotal.value);
    }
    if (totalCreditoPresumido.present) {
      map['total_credito_presumido'] = Variable<double>(
        totalCreditoPresumido.value,
      );
    }
    if (totalCredPresSuspensivo.present) {
      map['total_cred_pres_suspensivo'] = Variable<double>(
        totalCredPresSuspensivo.value,
      );
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeCabecalhosCompanion(')
          ..write('id: $id, ')
          ..write('idVendaCabecalho: $idVendaCabecalho, ')
          ..write('idTributOperacaoFiscal: $idTributOperacaoFiscal, ')
          ..write('idCliente: $idCliente, ')
          ..write('idColaborador: $idColaborador, ')
          ..write('idFornecedor: $idFornecedor, ')
          ..write('ufEmitente: $ufEmitente, ')
          ..write('codigoNumerico: $codigoNumerico, ')
          ..write('naturezaOperacao: $naturezaOperacao, ')
          ..write('codigoModelo: $codigoModelo, ')
          ..write('serie: $serie, ')
          ..write('numero: $numero, ')
          ..write('dataHoraEmissao: $dataHoraEmissao, ')
          ..write('dataHoraEntradaSaida: $dataHoraEntradaSaida, ')
          ..write('tipoOperacao: $tipoOperacao, ')
          ..write('localDestino: $localDestino, ')
          ..write('codigoMunicipio: $codigoMunicipio, ')
          ..write('formatoImpressaoDanfe: $formatoImpressaoDanfe, ')
          ..write('tipoEmissao: $tipoEmissao, ')
          ..write('chaveAcesso: $chaveAcesso, ')
          ..write('digitoChaveAcesso: $digitoChaveAcesso, ')
          ..write('ambiente: $ambiente, ')
          ..write('finalidadeEmissao: $finalidadeEmissao, ')
          ..write('consumidorOperacao: $consumidorOperacao, ')
          ..write('consumidorPresenca: $consumidorPresenca, ')
          ..write('processoEmissao: $processoEmissao, ')
          ..write('versaoProcessoEmissao: $versaoProcessoEmissao, ')
          ..write('dataEntradaContingencia: $dataEntradaContingencia, ')
          ..write('justificativaContingencia: $justificativaContingencia, ')
          ..write('baseCalculoIcms: $baseCalculoIcms, ')
          ..write('valorIcms: $valorIcms, ')
          ..write('valorIcmsDesonerado: $valorIcmsDesonerado, ')
          ..write('totalIcmsFcpUfDestino: $totalIcmsFcpUfDestino, ')
          ..write(
            'totalIcmsInterestadualUfDestino: $totalIcmsInterestadualUfDestino, ',
          )
          ..write(
            'totalIcmsInterestadualUfRemetente: $totalIcmsInterestadualUfRemetente, ',
          )
          ..write('valorTotalFcp: $valorTotalFcp, ')
          ..write('baseCalculoIcmsSt: $baseCalculoIcmsSt, ')
          ..write('valorIcmsSt: $valorIcmsSt, ')
          ..write('valorTotalFcpSt: $valorTotalFcpSt, ')
          ..write('valorTotalFcpStRetido: $valorTotalFcpStRetido, ')
          ..write('valorTotalProdutos: $valorTotalProdutos, ')
          ..write('valorFrete: $valorFrete, ')
          ..write('valorSeguro: $valorSeguro, ')
          ..write('valorDesconto: $valorDesconto, ')
          ..write('valorImpostoImportacao: $valorImpostoImportacao, ')
          ..write('valorIpi: $valorIpi, ')
          ..write('valorIpiDevolvido: $valorIpiDevolvido, ')
          ..write('valorPis: $valorPis, ')
          ..write('valorCofins: $valorCofins, ')
          ..write('valorDespesasAcessorias: $valorDespesasAcessorias, ')
          ..write('valorTotal: $valorTotal, ')
          ..write('valorTotalTributos: $valorTotalTributos, ')
          ..write('valorServicos: $valorServicos, ')
          ..write('baseCalculoIssqn: $baseCalculoIssqn, ')
          ..write('valorIssqn: $valorIssqn, ')
          ..write('valorPisIssqn: $valorPisIssqn, ')
          ..write('valorCofinsIssqn: $valorCofinsIssqn, ')
          ..write('dataPrestacaoServico: $dataPrestacaoServico, ')
          ..write('valorDeducaoIssqn: $valorDeducaoIssqn, ')
          ..write('outrasRetencoesIssqn: $outrasRetencoesIssqn, ')
          ..write('descontoIncondicionadoIssqn: $descontoIncondicionadoIssqn, ')
          ..write('descontoCondicionadoIssqn: $descontoCondicionadoIssqn, ')
          ..write('totalRetencaoIssqn: $totalRetencaoIssqn, ')
          ..write('regimeEspecialTributacao: $regimeEspecialTributacao, ')
          ..write('valorRetidoPis: $valorRetidoPis, ')
          ..write('valorRetidoCofins: $valorRetidoCofins, ')
          ..write('valorRetidoCsll: $valorRetidoCsll, ')
          ..write('baseCalculoIrrf: $baseCalculoIrrf, ')
          ..write('valorRetidoIrrf: $valorRetidoIrrf, ')
          ..write('baseCalculoPrevidencia: $baseCalculoPrevidencia, ')
          ..write('valorRetidoPrevidencia: $valorRetidoPrevidencia, ')
          ..write('informacoesAddFisco: $informacoesAddFisco, ')
          ..write('informacoesAddContribuinte: $informacoesAddContribuinte, ')
          ..write('comexUfEmbarque: $comexUfEmbarque, ')
          ..write('comexLocalEmbarque: $comexLocalEmbarque, ')
          ..write('comexLocalDespacho: $comexLocalDespacho, ')
          ..write('compraNotaEmpenho: $compraNotaEmpenho, ')
          ..write('compraPedido: $compraPedido, ')
          ..write('compraContrato: $compraContrato, ')
          ..write('qrcode: $qrcode, ')
          ..write('urlChave: $urlChave, ')
          ..write('statusNota: $statusNota, ')
          ..write('indicadorIntermediario: $indicadorIntermediario, ')
          ..write('intermediadorCnpj: $intermediadorCnpj, ')
          ..write('intermediadorIdCadastro: $intermediadorIdCadastro, ')
          ..write('codigoMunicipioFgIbs: $codigoMunicipioFgIbs, ')
          ..write('tipoNotaDebito: $tipoNotaDebito, ')
          ..write('tipoNotaCredito: $tipoNotaCredito, ')
          ..write('totalImpostoSeletivo: $totalImpostoSeletivo, ')
          ..write('totalBcIbsCbs: $totalBcIbsCbs, ')
          ..write('ibsUfTotalDiferimento: $ibsUfTotalDiferimento, ')
          ..write('ibsUfTotalDevTributos: $ibsUfTotalDevTributos, ')
          ..write('ibsUfValorTotal: $ibsUfValorTotal, ')
          ..write('ibsMunTotalDiferimento: $ibsMunTotalDiferimento, ')
          ..write('ibsMunTotalDevTributos: $ibsMunTotalDevTributos, ')
          ..write('ibsMunValorTotal: $ibsMunValorTotal, ')
          ..write('cbsTotalDiferimento: $cbsTotalDiferimento, ')
          ..write('cbsTotalDevTributos: $cbsTotalDevTributos, ')
          ..write('cbsValorTotal: $cbsValorTotal, ')
          ..write('cbsTotalCreditoPresumido: $cbsTotalCreditoPresumido, ')
          ..write('cbsTotCrePreSuspensivo: $cbsTotCrePreSuspensivo, ')
          ..write('monoIbsTotal: $monoIbsTotal, ')
          ..write('monoCbsTotal: $monoCbsTotal, ')
          ..write('monoIbsTotalRetencao: $monoIbsTotalRetencao, ')
          ..write('monoCbsTotalRetencao: $monoCbsTotalRetencao, ')
          ..write('monoIbsRetido: $monoIbsRetido, ')
          ..write('monoCbsRetido: $monoCbsRetido, ')
          ..write('valorTotalNfe: $valorTotalNfe, ')
          ..write('totalQtdeTributadaMono: $totalQtdeTributadaMono, ')
          ..write('totalIcmsMono: $totalIcmsMono, ')
          ..write('totalQuantidadeMonoRetencao: $totalQuantidadeMonoRetencao, ')
          ..write('totalIcmsMonoRetencao: $totalIcmsMonoRetencao, ')
          ..write('totalQuantidadeMonoRetida: $totalQuantidadeMonoRetida, ')
          ..write('totalIcmsMonoRetido: $totalIcmsMonoRetido, ')
          ..write('ibsValorTotal: $ibsValorTotal, ')
          ..write('totalCreditoPresumido: $totalCreditoPresumido, ')
          ..write('totalCredPresSuspensivo: $totalCredPresSuspensivo')
          ..write(')'))
        .toString();
  }
}

class $NfeDetalhesTable extends NfeDetalhes
    with TableInfo<$NfeDetalhesTable, NfeDetalhe> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeDetalhesTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
    'id',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idNfeCabecalhoMeta = const VerificationMeta(
    'idNfeCabecalho',
  );
  @override
  late final GeneratedColumn<int> idNfeCabecalho = GeneratedColumn<int>(
    'id_nfe_cabecalho',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idProdutoMeta = const VerificationMeta(
    'idProduto',
  );
  @override
  late final GeneratedColumn<int> idProduto = GeneratedColumn<int>(
    'id_produto',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _numeroItemMeta = const VerificationMeta(
    'numeroItem',
  );
  @override
  late final GeneratedColumn<int> numeroItem = GeneratedColumn<int>(
    'numero_item',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _codigoProdutoMeta = const VerificationMeta(
    'codigoProduto',
  );
  @override
  late final GeneratedColumn<String> codigoProduto = GeneratedColumn<String>(
    'codigo_produto',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 60,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _gtinMeta = const VerificationMeta('gtin');
  @override
  late final GeneratedColumn<String> gtin = GeneratedColumn<String>(
    'gtin',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 14,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _nomeProdutoMeta = const VerificationMeta(
    'nomeProduto',
  );
  @override
  late final GeneratedColumn<String> nomeProduto = GeneratedColumn<String>(
    'nome_produto',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 120,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _ncmMeta = const VerificationMeta('ncm');
  @override
  late final GeneratedColumn<String> ncm = GeneratedColumn<String>(
    'ncm',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 8,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _nveMeta = const VerificationMeta('nve');
  @override
  late final GeneratedColumn<String> nve = GeneratedColumn<String>(
    'nve',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 6,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _cestMeta = const VerificationMeta('cest');
  @override
  late final GeneratedColumn<String> cest = GeneratedColumn<String>(
    'cest',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 7,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _indicadorEscalaRelevanteMeta =
      const VerificationMeta('indicadorEscalaRelevante');
  @override
  late final GeneratedColumn<String> indicadorEscalaRelevante =
      GeneratedColumn<String>(
        'indicador_escala_relevante',
        aliasedName,
        true,
        additionalChecks: GeneratedColumn.checkTextLength(
          minTextLength: 0,
          maxTextLength: 1,
        ),
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _cnpjFabricanteMeta = const VerificationMeta(
    'cnpjFabricante',
  );
  @override
  late final GeneratedColumn<String> cnpjFabricante = GeneratedColumn<String>(
    'cnpj_fabricante',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 14,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _codigoBeneficioFiscalMeta =
      const VerificationMeta('codigoBeneficioFiscal');
  @override
  late final GeneratedColumn<String> codigoBeneficioFiscal =
      GeneratedColumn<String>(
        'codigo_beneficio_fiscal',
        aliasedName,
        true,
        additionalChecks: GeneratedColumn.checkTextLength(
          minTextLength: 0,
          maxTextLength: 10,
        ),
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _exTipiMeta = const VerificationMeta('exTipi');
  @override
  late final GeneratedColumn<int> exTipi = GeneratedColumn<int>(
    'ex_tipi',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _cfopMeta = const VerificationMeta('cfop');
  @override
  late final GeneratedColumn<int> cfop = GeneratedColumn<int>(
    'cfop',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _unidadeComercialMeta = const VerificationMeta(
    'unidadeComercial',
  );
  @override
  late final GeneratedColumn<String> unidadeComercial = GeneratedColumn<String>(
    'unidade_comercial',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 6,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _quantidadeComercialMeta =
      const VerificationMeta('quantidadeComercial');
  @override
  late final GeneratedColumn<double> quantidadeComercial =
      GeneratedColumn<double>(
        'quantidade_comercial',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _numeroPedidoCompraMeta =
      const VerificationMeta('numeroPedidoCompra');
  @override
  late final GeneratedColumn<String> numeroPedidoCompra =
      GeneratedColumn<String>(
        'numero_pedido_compra',
        aliasedName,
        true,
        additionalChecks: GeneratedColumn.checkTextLength(
          minTextLength: 0,
          maxTextLength: 15,
        ),
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _itemPedidoCompraMeta = const VerificationMeta(
    'itemPedidoCompra',
  );
  @override
  late final GeneratedColumn<int> itemPedidoCompra = GeneratedColumn<int>(
    'item_pedido_compra',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _numeroFciMeta = const VerificationMeta(
    'numeroFci',
  );
  @override
  late final GeneratedColumn<String> numeroFci = GeneratedColumn<String>(
    'numero_fci',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 36,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _numeroRecopiMeta = const VerificationMeta(
    'numeroRecopi',
  );
  @override
  late final GeneratedColumn<String> numeroRecopi = GeneratedColumn<String>(
    'numero_recopi',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 20,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _valorUnitarioComercialMeta =
      const VerificationMeta('valorUnitarioComercial');
  @override
  late final GeneratedColumn<double> valorUnitarioComercial =
      GeneratedColumn<double>(
        'valor_unitario_comercial',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _valorBrutoProdutoMeta = const VerificationMeta(
    'valorBrutoProduto',
  );
  @override
  late final GeneratedColumn<double> valorBrutoProduto =
      GeneratedColumn<double>(
        'valor_bruto_produto',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _gtinUnidadeTributavelMeta =
      const VerificationMeta('gtinUnidadeTributavel');
  @override
  late final GeneratedColumn<String> gtinUnidadeTributavel =
      GeneratedColumn<String>(
        'gtin_unidade_tributavel',
        aliasedName,
        true,
        additionalChecks: GeneratedColumn.checkTextLength(
          minTextLength: 0,
          maxTextLength: 14,
        ),
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _unidadeTributavelMeta = const VerificationMeta(
    'unidadeTributavel',
  );
  @override
  late final GeneratedColumn<String> unidadeTributavel =
      GeneratedColumn<String>(
        'unidade_tributavel',
        aliasedName,
        true,
        additionalChecks: GeneratedColumn.checkTextLength(
          minTextLength: 0,
          maxTextLength: 6,
        ),
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _quantidadeTributavelMeta =
      const VerificationMeta('quantidadeTributavel');
  @override
  late final GeneratedColumn<double> quantidadeTributavel =
      GeneratedColumn<double>(
        'quantidade_tributavel',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _valorUnitarioTributavelMeta =
      const VerificationMeta('valorUnitarioTributavel');
  @override
  late final GeneratedColumn<double> valorUnitarioTributavel =
      GeneratedColumn<double>(
        'valor_unitario_tributavel',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _valorFreteMeta = const VerificationMeta(
    'valorFrete',
  );
  @override
  late final GeneratedColumn<double> valorFrete = GeneratedColumn<double>(
    'valor_frete',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _valorSeguroMeta = const VerificationMeta(
    'valorSeguro',
  );
  @override
  late final GeneratedColumn<double> valorSeguro = GeneratedColumn<double>(
    'valor_seguro',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _valorDescontoMeta = const VerificationMeta(
    'valorDesconto',
  );
  @override
  late final GeneratedColumn<double> valorDesconto = GeneratedColumn<double>(
    'valor_desconto',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _valorOutrasDespesasMeta =
      const VerificationMeta('valorOutrasDespesas');
  @override
  late final GeneratedColumn<double> valorOutrasDespesas =
      GeneratedColumn<double>(
        'valor_outras_despesas',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _entraTotalMeta = const VerificationMeta(
    'entraTotal',
  );
  @override
  late final GeneratedColumn<String> entraTotal = GeneratedColumn<String>(
    'entra_total',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 1,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _valorTotalTributosMeta =
      const VerificationMeta('valorTotalTributos');
  @override
  late final GeneratedColumn<double> valorTotalTributos =
      GeneratedColumn<double>(
        'valor_total_tributos',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _percentualDevolvidoMeta =
      const VerificationMeta('percentualDevolvido');
  @override
  late final GeneratedColumn<double> percentualDevolvido =
      GeneratedColumn<double>(
        'percentual_devolvido',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _valorIpiDevolvidoMeta = const VerificationMeta(
    'valorIpiDevolvido',
  );
  @override
  late final GeneratedColumn<double> valorIpiDevolvido =
      GeneratedColumn<double>(
        'valor_ipi_devolvido',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _informacoesAdicionaisMeta =
      const VerificationMeta('informacoesAdicionais');
  @override
  late final GeneratedColumn<String> informacoesAdicionais =
      GeneratedColumn<String>(
        'informacoes_adicionais',
        aliasedName,
        true,
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _valorSubtotalMeta = const VerificationMeta(
    'valorSubtotal',
  );
  @override
  late final GeneratedColumn<double> valorSubtotal = GeneratedColumn<double>(
    'valor_subtotal',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _valorTotalMeta = const VerificationMeta(
    'valorTotal',
  );
  @override
  late final GeneratedColumn<double> valorTotal = GeneratedColumn<double>(
    'valor_total',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _indicadorBemMovelUsadoMeta =
      const VerificationMeta('indicadorBemMovelUsado');
  @override
  late final GeneratedColumn<String> indicadorBemMovelUsado =
      GeneratedColumn<String>(
        'indicador_bem_movel_usado',
        aliasedName,
        true,
        additionalChecks: GeneratedColumn.checkTextLength(
          minTextLength: 0,
          maxTextLength: 1,
        ),
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _codigoBarraDifGtinMeta =
      const VerificationMeta('codigoBarraDifGtin');
  @override
  late final GeneratedColumn<String> codigoBarraDifGtin =
      GeneratedColumn<String>(
        'codigo_barra_dif_gtin',
        aliasedName,
        true,
        additionalChecks: GeneratedColumn.checkTextLength(
          minTextLength: 0,
          maxTextLength: 30,
        ),
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _codigoBarraTribDifGtinMeta =
      const VerificationMeta('codigoBarraTribDifGtin');
  @override
  late final GeneratedColumn<String> codigoBarraTribDifGtin =
      GeneratedColumn<String>(
        'codigo_barra_trib_dif_gtin',
        aliasedName,
        true,
        additionalChecks: GeneratedColumn.checkTextLength(
          minTextLength: 0,
          maxTextLength: 30,
        ),
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    idNfeCabecalho,
    idProduto,
    numeroItem,
    codigoProduto,
    gtin,
    nomeProduto,
    ncm,
    nve,
    cest,
    indicadorEscalaRelevante,
    cnpjFabricante,
    codigoBeneficioFiscal,
    exTipi,
    cfop,
    unidadeComercial,
    quantidadeComercial,
    numeroPedidoCompra,
    itemPedidoCompra,
    numeroFci,
    numeroRecopi,
    valorUnitarioComercial,
    valorBrutoProduto,
    gtinUnidadeTributavel,
    unidadeTributavel,
    quantidadeTributavel,
    valorUnitarioTributavel,
    valorFrete,
    valorSeguro,
    valorDesconto,
    valorOutrasDespesas,
    entraTotal,
    valorTotalTributos,
    percentualDevolvido,
    valorIpiDevolvido,
    informacoesAdicionais,
    valorSubtotal,
    valorTotal,
    indicadorBemMovelUsado,
    codigoBarraDifGtin,
    codigoBarraTribDifGtin,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'nfe_detalhe';
  @override
  VerificationContext validateIntegrity(
    Insertable<NfeDetalhe> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('id_nfe_cabecalho')) {
      context.handle(
        _idNfeCabecalhoMeta,
        idNfeCabecalho.isAcceptableOrUnknown(
          data['id_nfe_cabecalho']!,
          _idNfeCabecalhoMeta,
        ),
      );
    }
    if (data.containsKey('id_produto')) {
      context.handle(
        _idProdutoMeta,
        idProduto.isAcceptableOrUnknown(data['id_produto']!, _idProdutoMeta),
      );
    }
    if (data.containsKey('numero_item')) {
      context.handle(
        _numeroItemMeta,
        numeroItem.isAcceptableOrUnknown(data['numero_item']!, _numeroItemMeta),
      );
    }
    if (data.containsKey('codigo_produto')) {
      context.handle(
        _codigoProdutoMeta,
        codigoProduto.isAcceptableOrUnknown(
          data['codigo_produto']!,
          _codigoProdutoMeta,
        ),
      );
    }
    if (data.containsKey('gtin')) {
      context.handle(
        _gtinMeta,
        gtin.isAcceptableOrUnknown(data['gtin']!, _gtinMeta),
      );
    }
    if (data.containsKey('nome_produto')) {
      context.handle(
        _nomeProdutoMeta,
        nomeProduto.isAcceptableOrUnknown(
          data['nome_produto']!,
          _nomeProdutoMeta,
        ),
      );
    }
    if (data.containsKey('ncm')) {
      context.handle(
        _ncmMeta,
        ncm.isAcceptableOrUnknown(data['ncm']!, _ncmMeta),
      );
    }
    if (data.containsKey('nve')) {
      context.handle(
        _nveMeta,
        nve.isAcceptableOrUnknown(data['nve']!, _nveMeta),
      );
    }
    if (data.containsKey('cest')) {
      context.handle(
        _cestMeta,
        cest.isAcceptableOrUnknown(data['cest']!, _cestMeta),
      );
    }
    if (data.containsKey('indicador_escala_relevante')) {
      context.handle(
        _indicadorEscalaRelevanteMeta,
        indicadorEscalaRelevante.isAcceptableOrUnknown(
          data['indicador_escala_relevante']!,
          _indicadorEscalaRelevanteMeta,
        ),
      );
    }
    if (data.containsKey('cnpj_fabricante')) {
      context.handle(
        _cnpjFabricanteMeta,
        cnpjFabricante.isAcceptableOrUnknown(
          data['cnpj_fabricante']!,
          _cnpjFabricanteMeta,
        ),
      );
    }
    if (data.containsKey('codigo_beneficio_fiscal')) {
      context.handle(
        _codigoBeneficioFiscalMeta,
        codigoBeneficioFiscal.isAcceptableOrUnknown(
          data['codigo_beneficio_fiscal']!,
          _codigoBeneficioFiscalMeta,
        ),
      );
    }
    if (data.containsKey('ex_tipi')) {
      context.handle(
        _exTipiMeta,
        exTipi.isAcceptableOrUnknown(data['ex_tipi']!, _exTipiMeta),
      );
    }
    if (data.containsKey('cfop')) {
      context.handle(
        _cfopMeta,
        cfop.isAcceptableOrUnknown(data['cfop']!, _cfopMeta),
      );
    }
    if (data.containsKey('unidade_comercial')) {
      context.handle(
        _unidadeComercialMeta,
        unidadeComercial.isAcceptableOrUnknown(
          data['unidade_comercial']!,
          _unidadeComercialMeta,
        ),
      );
    }
    if (data.containsKey('quantidade_comercial')) {
      context.handle(
        _quantidadeComercialMeta,
        quantidadeComercial.isAcceptableOrUnknown(
          data['quantidade_comercial']!,
          _quantidadeComercialMeta,
        ),
      );
    }
    if (data.containsKey('numero_pedido_compra')) {
      context.handle(
        _numeroPedidoCompraMeta,
        numeroPedidoCompra.isAcceptableOrUnknown(
          data['numero_pedido_compra']!,
          _numeroPedidoCompraMeta,
        ),
      );
    }
    if (data.containsKey('item_pedido_compra')) {
      context.handle(
        _itemPedidoCompraMeta,
        itemPedidoCompra.isAcceptableOrUnknown(
          data['item_pedido_compra']!,
          _itemPedidoCompraMeta,
        ),
      );
    }
    if (data.containsKey('numero_fci')) {
      context.handle(
        _numeroFciMeta,
        numeroFci.isAcceptableOrUnknown(data['numero_fci']!, _numeroFciMeta),
      );
    }
    if (data.containsKey('numero_recopi')) {
      context.handle(
        _numeroRecopiMeta,
        numeroRecopi.isAcceptableOrUnknown(
          data['numero_recopi']!,
          _numeroRecopiMeta,
        ),
      );
    }
    if (data.containsKey('valor_unitario_comercial')) {
      context.handle(
        _valorUnitarioComercialMeta,
        valorUnitarioComercial.isAcceptableOrUnknown(
          data['valor_unitario_comercial']!,
          _valorUnitarioComercialMeta,
        ),
      );
    }
    if (data.containsKey('valor_bruto_produto')) {
      context.handle(
        _valorBrutoProdutoMeta,
        valorBrutoProduto.isAcceptableOrUnknown(
          data['valor_bruto_produto']!,
          _valorBrutoProdutoMeta,
        ),
      );
    }
    if (data.containsKey('gtin_unidade_tributavel')) {
      context.handle(
        _gtinUnidadeTributavelMeta,
        gtinUnidadeTributavel.isAcceptableOrUnknown(
          data['gtin_unidade_tributavel']!,
          _gtinUnidadeTributavelMeta,
        ),
      );
    }
    if (data.containsKey('unidade_tributavel')) {
      context.handle(
        _unidadeTributavelMeta,
        unidadeTributavel.isAcceptableOrUnknown(
          data['unidade_tributavel']!,
          _unidadeTributavelMeta,
        ),
      );
    }
    if (data.containsKey('quantidade_tributavel')) {
      context.handle(
        _quantidadeTributavelMeta,
        quantidadeTributavel.isAcceptableOrUnknown(
          data['quantidade_tributavel']!,
          _quantidadeTributavelMeta,
        ),
      );
    }
    if (data.containsKey('valor_unitario_tributavel')) {
      context.handle(
        _valorUnitarioTributavelMeta,
        valorUnitarioTributavel.isAcceptableOrUnknown(
          data['valor_unitario_tributavel']!,
          _valorUnitarioTributavelMeta,
        ),
      );
    }
    if (data.containsKey('valor_frete')) {
      context.handle(
        _valorFreteMeta,
        valorFrete.isAcceptableOrUnknown(data['valor_frete']!, _valorFreteMeta),
      );
    }
    if (data.containsKey('valor_seguro')) {
      context.handle(
        _valorSeguroMeta,
        valorSeguro.isAcceptableOrUnknown(
          data['valor_seguro']!,
          _valorSeguroMeta,
        ),
      );
    }
    if (data.containsKey('valor_desconto')) {
      context.handle(
        _valorDescontoMeta,
        valorDesconto.isAcceptableOrUnknown(
          data['valor_desconto']!,
          _valorDescontoMeta,
        ),
      );
    }
    if (data.containsKey('valor_outras_despesas')) {
      context.handle(
        _valorOutrasDespesasMeta,
        valorOutrasDespesas.isAcceptableOrUnknown(
          data['valor_outras_despesas']!,
          _valorOutrasDespesasMeta,
        ),
      );
    }
    if (data.containsKey('entra_total')) {
      context.handle(
        _entraTotalMeta,
        entraTotal.isAcceptableOrUnknown(data['entra_total']!, _entraTotalMeta),
      );
    }
    if (data.containsKey('valor_total_tributos')) {
      context.handle(
        _valorTotalTributosMeta,
        valorTotalTributos.isAcceptableOrUnknown(
          data['valor_total_tributos']!,
          _valorTotalTributosMeta,
        ),
      );
    }
    if (data.containsKey('percentual_devolvido')) {
      context.handle(
        _percentualDevolvidoMeta,
        percentualDevolvido.isAcceptableOrUnknown(
          data['percentual_devolvido']!,
          _percentualDevolvidoMeta,
        ),
      );
    }
    if (data.containsKey('valor_ipi_devolvido')) {
      context.handle(
        _valorIpiDevolvidoMeta,
        valorIpiDevolvido.isAcceptableOrUnknown(
          data['valor_ipi_devolvido']!,
          _valorIpiDevolvidoMeta,
        ),
      );
    }
    if (data.containsKey('informacoes_adicionais')) {
      context.handle(
        _informacoesAdicionaisMeta,
        informacoesAdicionais.isAcceptableOrUnknown(
          data['informacoes_adicionais']!,
          _informacoesAdicionaisMeta,
        ),
      );
    }
    if (data.containsKey('valor_subtotal')) {
      context.handle(
        _valorSubtotalMeta,
        valorSubtotal.isAcceptableOrUnknown(
          data['valor_subtotal']!,
          _valorSubtotalMeta,
        ),
      );
    }
    if (data.containsKey('valor_total')) {
      context.handle(
        _valorTotalMeta,
        valorTotal.isAcceptableOrUnknown(data['valor_total']!, _valorTotalMeta),
      );
    }
    if (data.containsKey('indicador_bem_movel_usado')) {
      context.handle(
        _indicadorBemMovelUsadoMeta,
        indicadorBemMovelUsado.isAcceptableOrUnknown(
          data['indicador_bem_movel_usado']!,
          _indicadorBemMovelUsadoMeta,
        ),
      );
    }
    if (data.containsKey('codigo_barra_dif_gtin')) {
      context.handle(
        _codigoBarraDifGtinMeta,
        codigoBarraDifGtin.isAcceptableOrUnknown(
          data['codigo_barra_dif_gtin']!,
          _codigoBarraDifGtinMeta,
        ),
      );
    }
    if (data.containsKey('codigo_barra_trib_dif_gtin')) {
      context.handle(
        _codigoBarraTribDifGtinMeta,
        codigoBarraTribDifGtin.isAcceptableOrUnknown(
          data['codigo_barra_trib_dif_gtin']!,
          _codigoBarraTribDifGtinMeta,
        ),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeDetalhe map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return NfeDetalhe(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id'],
      ),
      idNfeCabecalho: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_nfe_cabecalho'],
      ),
      idProduto: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_produto'],
      ),
      numeroItem: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}numero_item'],
      ),
      codigoProduto: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}codigo_produto'],
      ),
      gtin: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}gtin'],
      ),
      nomeProduto: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}nome_produto'],
      ),
      ncm: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ncm'],
      ),
      nve: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}nve'],
      ),
      cest: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}cest'],
      ),
      indicadorEscalaRelevante: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}indicador_escala_relevante'],
      ),
      cnpjFabricante: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}cnpj_fabricante'],
      ),
      codigoBeneficioFiscal: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}codigo_beneficio_fiscal'],
      ),
      exTipi: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}ex_tipi'],
      ),
      cfop: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}cfop'],
      ),
      unidadeComercial: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}unidade_comercial'],
      ),
      quantidadeComercial: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}quantidade_comercial'],
      ),
      numeroPedidoCompra: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}numero_pedido_compra'],
      ),
      itemPedidoCompra: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}item_pedido_compra'],
      ),
      numeroFci: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}numero_fci'],
      ),
      numeroRecopi: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}numero_recopi'],
      ),
      valorUnitarioComercial: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_unitario_comercial'],
      ),
      valorBrutoProduto: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_bruto_produto'],
      ),
      gtinUnidadeTributavel: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}gtin_unidade_tributavel'],
      ),
      unidadeTributavel: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}unidade_tributavel'],
      ),
      quantidadeTributavel: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}quantidade_tributavel'],
      ),
      valorUnitarioTributavel: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_unitario_tributavel'],
      ),
      valorFrete: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_frete'],
      ),
      valorSeguro: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_seguro'],
      ),
      valorDesconto: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_desconto'],
      ),
      valorOutrasDespesas: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_outras_despesas'],
      ),
      entraTotal: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}entra_total'],
      ),
      valorTotalTributos: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_total_tributos'],
      ),
      percentualDevolvido: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}percentual_devolvido'],
      ),
      valorIpiDevolvido: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_ipi_devolvido'],
      ),
      informacoesAdicionais: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}informacoes_adicionais'],
      ),
      valorSubtotal: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_subtotal'],
      ),
      valorTotal: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_total'],
      ),
      indicadorBemMovelUsado: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}indicador_bem_movel_usado'],
      ),
      codigoBarraDifGtin: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}codigo_barra_dif_gtin'],
      ),
      codigoBarraTribDifGtin: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}codigo_barra_trib_dif_gtin'],
      ),
    );
  }

  @override
  $NfeDetalhesTable createAlias(String alias) {
    return $NfeDetalhesTable(attachedDatabase, alias);
  }
}

class NfeDetalhe extends DataClass implements Insertable<NfeDetalhe> {
  final int? id;
  final int? idNfeCabecalho;
  final int? idProduto;
  final int? numeroItem;
  final String? codigoProduto;
  final String? gtin;
  final String? nomeProduto;
  final String? ncm;
  final String? nve;
  final String? cest;
  final String? indicadorEscalaRelevante;
  final String? cnpjFabricante;
  final String? codigoBeneficioFiscal;
  final int? exTipi;
  final int? cfop;
  final String? unidadeComercial;
  final double? quantidadeComercial;
  final String? numeroPedidoCompra;
  final int? itemPedidoCompra;
  final String? numeroFci;
  final String? numeroRecopi;
  final double? valorUnitarioComercial;
  final double? valorBrutoProduto;
  final String? gtinUnidadeTributavel;
  final String? unidadeTributavel;
  final double? quantidadeTributavel;
  final double? valorUnitarioTributavel;
  final double? valorFrete;
  final double? valorSeguro;
  final double? valorDesconto;
  final double? valorOutrasDespesas;
  final String? entraTotal;
  final double? valorTotalTributos;
  final double? percentualDevolvido;
  final double? valorIpiDevolvido;
  final String? informacoesAdicionais;
  final double? valorSubtotal;
  final double? valorTotal;
  final String? indicadorBemMovelUsado;
  final String? codigoBarraDifGtin;
  final String? codigoBarraTribDifGtin;
  const NfeDetalhe({
    this.id,
    this.idNfeCabecalho,
    this.idProduto,
    this.numeroItem,
    this.codigoProduto,
    this.gtin,
    this.nomeProduto,
    this.ncm,
    this.nve,
    this.cest,
    this.indicadorEscalaRelevante,
    this.cnpjFabricante,
    this.codigoBeneficioFiscal,
    this.exTipi,
    this.cfop,
    this.unidadeComercial,
    this.quantidadeComercial,
    this.numeroPedidoCompra,
    this.itemPedidoCompra,
    this.numeroFci,
    this.numeroRecopi,
    this.valorUnitarioComercial,
    this.valorBrutoProduto,
    this.gtinUnidadeTributavel,
    this.unidadeTributavel,
    this.quantidadeTributavel,
    this.valorUnitarioTributavel,
    this.valorFrete,
    this.valorSeguro,
    this.valorDesconto,
    this.valorOutrasDespesas,
    this.entraTotal,
    this.valorTotalTributos,
    this.percentualDevolvido,
    this.valorIpiDevolvido,
    this.informacoesAdicionais,
    this.valorSubtotal,
    this.valorTotal,
    this.indicadorBemMovelUsado,
    this.codigoBarraDifGtin,
    this.codigoBarraTribDifGtin,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeCabecalho != null) {
      map['id_nfe_cabecalho'] = Variable<int>(idNfeCabecalho);
    }
    if (!nullToAbsent || idProduto != null) {
      map['id_produto'] = Variable<int>(idProduto);
    }
    if (!nullToAbsent || numeroItem != null) {
      map['numero_item'] = Variable<int>(numeroItem);
    }
    if (!nullToAbsent || codigoProduto != null) {
      map['codigo_produto'] = Variable<String>(codigoProduto);
    }
    if (!nullToAbsent || gtin != null) {
      map['gtin'] = Variable<String>(gtin);
    }
    if (!nullToAbsent || nomeProduto != null) {
      map['nome_produto'] = Variable<String>(nomeProduto);
    }
    if (!nullToAbsent || ncm != null) {
      map['ncm'] = Variable<String>(ncm);
    }
    if (!nullToAbsent || nve != null) {
      map['nve'] = Variable<String>(nve);
    }
    if (!nullToAbsent || cest != null) {
      map['cest'] = Variable<String>(cest);
    }
    if (!nullToAbsent || indicadorEscalaRelevante != null) {
      map['indicador_escala_relevante'] = Variable<String>(
        indicadorEscalaRelevante,
      );
    }
    if (!nullToAbsent || cnpjFabricante != null) {
      map['cnpj_fabricante'] = Variable<String>(cnpjFabricante);
    }
    if (!nullToAbsent || codigoBeneficioFiscal != null) {
      map['codigo_beneficio_fiscal'] = Variable<String>(codigoBeneficioFiscal);
    }
    if (!nullToAbsent || exTipi != null) {
      map['ex_tipi'] = Variable<int>(exTipi);
    }
    if (!nullToAbsent || cfop != null) {
      map['cfop'] = Variable<int>(cfop);
    }
    if (!nullToAbsent || unidadeComercial != null) {
      map['unidade_comercial'] = Variable<String>(unidadeComercial);
    }
    if (!nullToAbsent || quantidadeComercial != null) {
      map['quantidade_comercial'] = Variable<double>(quantidadeComercial);
    }
    if (!nullToAbsent || numeroPedidoCompra != null) {
      map['numero_pedido_compra'] = Variable<String>(numeroPedidoCompra);
    }
    if (!nullToAbsent || itemPedidoCompra != null) {
      map['item_pedido_compra'] = Variable<int>(itemPedidoCompra);
    }
    if (!nullToAbsent || numeroFci != null) {
      map['numero_fci'] = Variable<String>(numeroFci);
    }
    if (!nullToAbsent || numeroRecopi != null) {
      map['numero_recopi'] = Variable<String>(numeroRecopi);
    }
    if (!nullToAbsent || valorUnitarioComercial != null) {
      map['valor_unitario_comercial'] = Variable<double>(
        valorUnitarioComercial,
      );
    }
    if (!nullToAbsent || valorBrutoProduto != null) {
      map['valor_bruto_produto'] = Variable<double>(valorBrutoProduto);
    }
    if (!nullToAbsent || gtinUnidadeTributavel != null) {
      map['gtin_unidade_tributavel'] = Variable<String>(gtinUnidadeTributavel);
    }
    if (!nullToAbsent || unidadeTributavel != null) {
      map['unidade_tributavel'] = Variable<String>(unidadeTributavel);
    }
    if (!nullToAbsent || quantidadeTributavel != null) {
      map['quantidade_tributavel'] = Variable<double>(quantidadeTributavel);
    }
    if (!nullToAbsent || valorUnitarioTributavel != null) {
      map['valor_unitario_tributavel'] = Variable<double>(
        valorUnitarioTributavel,
      );
    }
    if (!nullToAbsent || valorFrete != null) {
      map['valor_frete'] = Variable<double>(valorFrete);
    }
    if (!nullToAbsent || valorSeguro != null) {
      map['valor_seguro'] = Variable<double>(valorSeguro);
    }
    if (!nullToAbsent || valorDesconto != null) {
      map['valor_desconto'] = Variable<double>(valorDesconto);
    }
    if (!nullToAbsent || valorOutrasDespesas != null) {
      map['valor_outras_despesas'] = Variable<double>(valorOutrasDespesas);
    }
    if (!nullToAbsent || entraTotal != null) {
      map['entra_total'] = Variable<String>(entraTotal);
    }
    if (!nullToAbsent || valorTotalTributos != null) {
      map['valor_total_tributos'] = Variable<double>(valorTotalTributos);
    }
    if (!nullToAbsent || percentualDevolvido != null) {
      map['percentual_devolvido'] = Variable<double>(percentualDevolvido);
    }
    if (!nullToAbsent || valorIpiDevolvido != null) {
      map['valor_ipi_devolvido'] = Variable<double>(valorIpiDevolvido);
    }
    if (!nullToAbsent || informacoesAdicionais != null) {
      map['informacoes_adicionais'] = Variable<String>(informacoesAdicionais);
    }
    if (!nullToAbsent || valorSubtotal != null) {
      map['valor_subtotal'] = Variable<double>(valorSubtotal);
    }
    if (!nullToAbsent || valorTotal != null) {
      map['valor_total'] = Variable<double>(valorTotal);
    }
    if (!nullToAbsent || indicadorBemMovelUsado != null) {
      map['indicador_bem_movel_usado'] = Variable<String>(
        indicadorBemMovelUsado,
      );
    }
    if (!nullToAbsent || codigoBarraDifGtin != null) {
      map['codigo_barra_dif_gtin'] = Variable<String>(codigoBarraDifGtin);
    }
    if (!nullToAbsent || codigoBarraTribDifGtin != null) {
      map['codigo_barra_trib_dif_gtin'] = Variable<String>(
        codigoBarraTribDifGtin,
      );
    }
    return map;
  }

  factory NfeDetalhe.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeDetalhe(
      id: serializer.fromJson<int?>(json['id']),
      idNfeCabecalho: serializer.fromJson<int?>(json['idNfeCabecalho']),
      idProduto: serializer.fromJson<int?>(json['idProduto']),
      numeroItem: serializer.fromJson<int?>(json['numeroItem']),
      codigoProduto: serializer.fromJson<String?>(json['codigoProduto']),
      gtin: serializer.fromJson<String?>(json['gtin']),
      nomeProduto: serializer.fromJson<String?>(json['nomeProduto']),
      ncm: serializer.fromJson<String?>(json['ncm']),
      nve: serializer.fromJson<String?>(json['nve']),
      cest: serializer.fromJson<String?>(json['cest']),
      indicadorEscalaRelevante: serializer.fromJson<String?>(
        json['indicadorEscalaRelevante'],
      ),
      cnpjFabricante: serializer.fromJson<String?>(json['cnpjFabricante']),
      codigoBeneficioFiscal: serializer.fromJson<String?>(
        json['codigoBeneficioFiscal'],
      ),
      exTipi: serializer.fromJson<int?>(json['exTipi']),
      cfop: serializer.fromJson<int?>(json['cfop']),
      unidadeComercial: serializer.fromJson<String?>(json['unidadeComercial']),
      quantidadeComercial: serializer.fromJson<double?>(
        json['quantidadeComercial'],
      ),
      numeroPedidoCompra: serializer.fromJson<String?>(
        json['numeroPedidoCompra'],
      ),
      itemPedidoCompra: serializer.fromJson<int?>(json['itemPedidoCompra']),
      numeroFci: serializer.fromJson<String?>(json['numeroFci']),
      numeroRecopi: serializer.fromJson<String?>(json['numeroRecopi']),
      valorUnitarioComercial: serializer.fromJson<double?>(
        json['valorUnitarioComercial'],
      ),
      valorBrutoProduto: serializer.fromJson<double?>(
        json['valorBrutoProduto'],
      ),
      gtinUnidadeTributavel: serializer.fromJson<String?>(
        json['gtinUnidadeTributavel'],
      ),
      unidadeTributavel: serializer.fromJson<String?>(
        json['unidadeTributavel'],
      ),
      quantidadeTributavel: serializer.fromJson<double?>(
        json['quantidadeTributavel'],
      ),
      valorUnitarioTributavel: serializer.fromJson<double?>(
        json['valorUnitarioTributavel'],
      ),
      valorFrete: serializer.fromJson<double?>(json['valorFrete']),
      valorSeguro: serializer.fromJson<double?>(json['valorSeguro']),
      valorDesconto: serializer.fromJson<double?>(json['valorDesconto']),
      valorOutrasDespesas: serializer.fromJson<double?>(
        json['valorOutrasDespesas'],
      ),
      entraTotal: serializer.fromJson<String?>(json['entraTotal']),
      valorTotalTributos: serializer.fromJson<double?>(
        json['valorTotalTributos'],
      ),
      percentualDevolvido: serializer.fromJson<double?>(
        json['percentualDevolvido'],
      ),
      valorIpiDevolvido: serializer.fromJson<double?>(
        json['valorIpiDevolvido'],
      ),
      informacoesAdicionais: serializer.fromJson<String?>(
        json['informacoesAdicionais'],
      ),
      valorSubtotal: serializer.fromJson<double?>(json['valorSubtotal']),
      valorTotal: serializer.fromJson<double?>(json['valorTotal']),
      indicadorBemMovelUsado: serializer.fromJson<String?>(
        json['indicadorBemMovelUsado'],
      ),
      codigoBarraDifGtin: serializer.fromJson<String?>(
        json['codigoBarraDifGtin'],
      ),
      codigoBarraTribDifGtin: serializer.fromJson<String?>(
        json['codigoBarraTribDifGtin'],
      ),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeCabecalho': serializer.toJson<int?>(idNfeCabecalho),
      'idProduto': serializer.toJson<int?>(idProduto),
      'numeroItem': serializer.toJson<int?>(numeroItem),
      'codigoProduto': serializer.toJson<String?>(codigoProduto),
      'gtin': serializer.toJson<String?>(gtin),
      'nomeProduto': serializer.toJson<String?>(nomeProduto),
      'ncm': serializer.toJson<String?>(ncm),
      'nve': serializer.toJson<String?>(nve),
      'cest': serializer.toJson<String?>(cest),
      'indicadorEscalaRelevante': serializer.toJson<String?>(
        indicadorEscalaRelevante,
      ),
      'cnpjFabricante': serializer.toJson<String?>(cnpjFabricante),
      'codigoBeneficioFiscal': serializer.toJson<String?>(
        codigoBeneficioFiscal,
      ),
      'exTipi': serializer.toJson<int?>(exTipi),
      'cfop': serializer.toJson<int?>(cfop),
      'unidadeComercial': serializer.toJson<String?>(unidadeComercial),
      'quantidadeComercial': serializer.toJson<double?>(quantidadeComercial),
      'numeroPedidoCompra': serializer.toJson<String?>(numeroPedidoCompra),
      'itemPedidoCompra': serializer.toJson<int?>(itemPedidoCompra),
      'numeroFci': serializer.toJson<String?>(numeroFci),
      'numeroRecopi': serializer.toJson<String?>(numeroRecopi),
      'valorUnitarioComercial': serializer.toJson<double?>(
        valorUnitarioComercial,
      ),
      'valorBrutoProduto': serializer.toJson<double?>(valorBrutoProduto),
      'gtinUnidadeTributavel': serializer.toJson<String?>(
        gtinUnidadeTributavel,
      ),
      'unidadeTributavel': serializer.toJson<String?>(unidadeTributavel),
      'quantidadeTributavel': serializer.toJson<double?>(quantidadeTributavel),
      'valorUnitarioTributavel': serializer.toJson<double?>(
        valorUnitarioTributavel,
      ),
      'valorFrete': serializer.toJson<double?>(valorFrete),
      'valorSeguro': serializer.toJson<double?>(valorSeguro),
      'valorDesconto': serializer.toJson<double?>(valorDesconto),
      'valorOutrasDespesas': serializer.toJson<double?>(valorOutrasDespesas),
      'entraTotal': serializer.toJson<String?>(entraTotal),
      'valorTotalTributos': serializer.toJson<double?>(valorTotalTributos),
      'percentualDevolvido': serializer.toJson<double?>(percentualDevolvido),
      'valorIpiDevolvido': serializer.toJson<double?>(valorIpiDevolvido),
      'informacoesAdicionais': serializer.toJson<String?>(
        informacoesAdicionais,
      ),
      'valorSubtotal': serializer.toJson<double?>(valorSubtotal),
      'valorTotal': serializer.toJson<double?>(valorTotal),
      'indicadorBemMovelUsado': serializer.toJson<String?>(
        indicadorBemMovelUsado,
      ),
      'codigoBarraDifGtin': serializer.toJson<String?>(codigoBarraDifGtin),
      'codigoBarraTribDifGtin': serializer.toJson<String?>(
        codigoBarraTribDifGtin,
      ),
    };
  }

  NfeDetalhe copyWith({
    Value<int?> id = const Value.absent(),
    Value<int?> idNfeCabecalho = const Value.absent(),
    Value<int?> idProduto = const Value.absent(),
    Value<int?> numeroItem = const Value.absent(),
    Value<String?> codigoProduto = const Value.absent(),
    Value<String?> gtin = const Value.absent(),
    Value<String?> nomeProduto = const Value.absent(),
    Value<String?> ncm = const Value.absent(),
    Value<String?> nve = const Value.absent(),
    Value<String?> cest = const Value.absent(),
    Value<String?> indicadorEscalaRelevante = const Value.absent(),
    Value<String?> cnpjFabricante = const Value.absent(),
    Value<String?> codigoBeneficioFiscal = const Value.absent(),
    Value<int?> exTipi = const Value.absent(),
    Value<int?> cfop = const Value.absent(),
    Value<String?> unidadeComercial = const Value.absent(),
    Value<double?> quantidadeComercial = const Value.absent(),
    Value<String?> numeroPedidoCompra = const Value.absent(),
    Value<int?> itemPedidoCompra = const Value.absent(),
    Value<String?> numeroFci = const Value.absent(),
    Value<String?> numeroRecopi = const Value.absent(),
    Value<double?> valorUnitarioComercial = const Value.absent(),
    Value<double?> valorBrutoProduto = const Value.absent(),
    Value<String?> gtinUnidadeTributavel = const Value.absent(),
    Value<String?> unidadeTributavel = const Value.absent(),
    Value<double?> quantidadeTributavel = const Value.absent(),
    Value<double?> valorUnitarioTributavel = const Value.absent(),
    Value<double?> valorFrete = const Value.absent(),
    Value<double?> valorSeguro = const Value.absent(),
    Value<double?> valorDesconto = const Value.absent(),
    Value<double?> valorOutrasDespesas = const Value.absent(),
    Value<String?> entraTotal = const Value.absent(),
    Value<double?> valorTotalTributos = const Value.absent(),
    Value<double?> percentualDevolvido = const Value.absent(),
    Value<double?> valorIpiDevolvido = const Value.absent(),
    Value<String?> informacoesAdicionais = const Value.absent(),
    Value<double?> valorSubtotal = const Value.absent(),
    Value<double?> valorTotal = const Value.absent(),
    Value<String?> indicadorBemMovelUsado = const Value.absent(),
    Value<String?> codigoBarraDifGtin = const Value.absent(),
    Value<String?> codigoBarraTribDifGtin = const Value.absent(),
  }) => NfeDetalhe(
    id: id.present ? id.value : this.id,
    idNfeCabecalho:
        idNfeCabecalho.present ? idNfeCabecalho.value : this.idNfeCabecalho,
    idProduto: idProduto.present ? idProduto.value : this.idProduto,
    numeroItem: numeroItem.present ? numeroItem.value : this.numeroItem,
    codigoProduto:
        codigoProduto.present ? codigoProduto.value : this.codigoProduto,
    gtin: gtin.present ? gtin.value : this.gtin,
    nomeProduto: nomeProduto.present ? nomeProduto.value : this.nomeProduto,
    ncm: ncm.present ? ncm.value : this.ncm,
    nve: nve.present ? nve.value : this.nve,
    cest: cest.present ? cest.value : this.cest,
    indicadorEscalaRelevante:
        indicadorEscalaRelevante.present
            ? indicadorEscalaRelevante.value
            : this.indicadorEscalaRelevante,
    cnpjFabricante:
        cnpjFabricante.present ? cnpjFabricante.value : this.cnpjFabricante,
    codigoBeneficioFiscal:
        codigoBeneficioFiscal.present
            ? codigoBeneficioFiscal.value
            : this.codigoBeneficioFiscal,
    exTipi: exTipi.present ? exTipi.value : this.exTipi,
    cfop: cfop.present ? cfop.value : this.cfop,
    unidadeComercial:
        unidadeComercial.present
            ? unidadeComercial.value
            : this.unidadeComercial,
    quantidadeComercial:
        quantidadeComercial.present
            ? quantidadeComercial.value
            : this.quantidadeComercial,
    numeroPedidoCompra:
        numeroPedidoCompra.present
            ? numeroPedidoCompra.value
            : this.numeroPedidoCompra,
    itemPedidoCompra:
        itemPedidoCompra.present
            ? itemPedidoCompra.value
            : this.itemPedidoCompra,
    numeroFci: numeroFci.present ? numeroFci.value : this.numeroFci,
    numeroRecopi: numeroRecopi.present ? numeroRecopi.value : this.numeroRecopi,
    valorUnitarioComercial:
        valorUnitarioComercial.present
            ? valorUnitarioComercial.value
            : this.valorUnitarioComercial,
    valorBrutoProduto:
        valorBrutoProduto.present
            ? valorBrutoProduto.value
            : this.valorBrutoProduto,
    gtinUnidadeTributavel:
        gtinUnidadeTributavel.present
            ? gtinUnidadeTributavel.value
            : this.gtinUnidadeTributavel,
    unidadeTributavel:
        unidadeTributavel.present
            ? unidadeTributavel.value
            : this.unidadeTributavel,
    quantidadeTributavel:
        quantidadeTributavel.present
            ? quantidadeTributavel.value
            : this.quantidadeTributavel,
    valorUnitarioTributavel:
        valorUnitarioTributavel.present
            ? valorUnitarioTributavel.value
            : this.valorUnitarioTributavel,
    valorFrete: valorFrete.present ? valorFrete.value : this.valorFrete,
    valorSeguro: valorSeguro.present ? valorSeguro.value : this.valorSeguro,
    valorDesconto:
        valorDesconto.present ? valorDesconto.value : this.valorDesconto,
    valorOutrasDespesas:
        valorOutrasDespesas.present
            ? valorOutrasDespesas.value
            : this.valorOutrasDespesas,
    entraTotal: entraTotal.present ? entraTotal.value : this.entraTotal,
    valorTotalTributos:
        valorTotalTributos.present
            ? valorTotalTributos.value
            : this.valorTotalTributos,
    percentualDevolvido:
        percentualDevolvido.present
            ? percentualDevolvido.value
            : this.percentualDevolvido,
    valorIpiDevolvido:
        valorIpiDevolvido.present
            ? valorIpiDevolvido.value
            : this.valorIpiDevolvido,
    informacoesAdicionais:
        informacoesAdicionais.present
            ? informacoesAdicionais.value
            : this.informacoesAdicionais,
    valorSubtotal:
        valorSubtotal.present ? valorSubtotal.value : this.valorSubtotal,
    valorTotal: valorTotal.present ? valorTotal.value : this.valorTotal,
    indicadorBemMovelUsado:
        indicadorBemMovelUsado.present
            ? indicadorBemMovelUsado.value
            : this.indicadorBemMovelUsado,
    codigoBarraDifGtin:
        codigoBarraDifGtin.present
            ? codigoBarraDifGtin.value
            : this.codigoBarraDifGtin,
    codigoBarraTribDifGtin:
        codigoBarraTribDifGtin.present
            ? codigoBarraTribDifGtin.value
            : this.codigoBarraTribDifGtin,
  );
  NfeDetalhe copyWithCompanion(NfeDetalhesCompanion data) {
    return NfeDetalhe(
      id: data.id.present ? data.id.value : this.id,
      idNfeCabecalho:
          data.idNfeCabecalho.present
              ? data.idNfeCabecalho.value
              : this.idNfeCabecalho,
      idProduto: data.idProduto.present ? data.idProduto.value : this.idProduto,
      numeroItem:
          data.numeroItem.present ? data.numeroItem.value : this.numeroItem,
      codigoProduto:
          data.codigoProduto.present
              ? data.codigoProduto.value
              : this.codigoProduto,
      gtin: data.gtin.present ? data.gtin.value : this.gtin,
      nomeProduto:
          data.nomeProduto.present ? data.nomeProduto.value : this.nomeProduto,
      ncm: data.ncm.present ? data.ncm.value : this.ncm,
      nve: data.nve.present ? data.nve.value : this.nve,
      cest: data.cest.present ? data.cest.value : this.cest,
      indicadorEscalaRelevante:
          data.indicadorEscalaRelevante.present
              ? data.indicadorEscalaRelevante.value
              : this.indicadorEscalaRelevante,
      cnpjFabricante:
          data.cnpjFabricante.present
              ? data.cnpjFabricante.value
              : this.cnpjFabricante,
      codigoBeneficioFiscal:
          data.codigoBeneficioFiscal.present
              ? data.codigoBeneficioFiscal.value
              : this.codigoBeneficioFiscal,
      exTipi: data.exTipi.present ? data.exTipi.value : this.exTipi,
      cfop: data.cfop.present ? data.cfop.value : this.cfop,
      unidadeComercial:
          data.unidadeComercial.present
              ? data.unidadeComercial.value
              : this.unidadeComercial,
      quantidadeComercial:
          data.quantidadeComercial.present
              ? data.quantidadeComercial.value
              : this.quantidadeComercial,
      numeroPedidoCompra:
          data.numeroPedidoCompra.present
              ? data.numeroPedidoCompra.value
              : this.numeroPedidoCompra,
      itemPedidoCompra:
          data.itemPedidoCompra.present
              ? data.itemPedidoCompra.value
              : this.itemPedidoCompra,
      numeroFci: data.numeroFci.present ? data.numeroFci.value : this.numeroFci,
      numeroRecopi:
          data.numeroRecopi.present
              ? data.numeroRecopi.value
              : this.numeroRecopi,
      valorUnitarioComercial:
          data.valorUnitarioComercial.present
              ? data.valorUnitarioComercial.value
              : this.valorUnitarioComercial,
      valorBrutoProduto:
          data.valorBrutoProduto.present
              ? data.valorBrutoProduto.value
              : this.valorBrutoProduto,
      gtinUnidadeTributavel:
          data.gtinUnidadeTributavel.present
              ? data.gtinUnidadeTributavel.value
              : this.gtinUnidadeTributavel,
      unidadeTributavel:
          data.unidadeTributavel.present
              ? data.unidadeTributavel.value
              : this.unidadeTributavel,
      quantidadeTributavel:
          data.quantidadeTributavel.present
              ? data.quantidadeTributavel.value
              : this.quantidadeTributavel,
      valorUnitarioTributavel:
          data.valorUnitarioTributavel.present
              ? data.valorUnitarioTributavel.value
              : this.valorUnitarioTributavel,
      valorFrete:
          data.valorFrete.present ? data.valorFrete.value : this.valorFrete,
      valorSeguro:
          data.valorSeguro.present ? data.valorSeguro.value : this.valorSeguro,
      valorDesconto:
          data.valorDesconto.present
              ? data.valorDesconto.value
              : this.valorDesconto,
      valorOutrasDespesas:
          data.valorOutrasDespesas.present
              ? data.valorOutrasDespesas.value
              : this.valorOutrasDespesas,
      entraTotal:
          data.entraTotal.present ? data.entraTotal.value : this.entraTotal,
      valorTotalTributos:
          data.valorTotalTributos.present
              ? data.valorTotalTributos.value
              : this.valorTotalTributos,
      percentualDevolvido:
          data.percentualDevolvido.present
              ? data.percentualDevolvido.value
              : this.percentualDevolvido,
      valorIpiDevolvido:
          data.valorIpiDevolvido.present
              ? data.valorIpiDevolvido.value
              : this.valorIpiDevolvido,
      informacoesAdicionais:
          data.informacoesAdicionais.present
              ? data.informacoesAdicionais.value
              : this.informacoesAdicionais,
      valorSubtotal:
          data.valorSubtotal.present
              ? data.valorSubtotal.value
              : this.valorSubtotal,
      valorTotal:
          data.valorTotal.present ? data.valorTotal.value : this.valorTotal,
      indicadorBemMovelUsado:
          data.indicadorBemMovelUsado.present
              ? data.indicadorBemMovelUsado.value
              : this.indicadorBemMovelUsado,
      codigoBarraDifGtin:
          data.codigoBarraDifGtin.present
              ? data.codigoBarraDifGtin.value
              : this.codigoBarraDifGtin,
      codigoBarraTribDifGtin:
          data.codigoBarraTribDifGtin.present
              ? data.codigoBarraTribDifGtin.value
              : this.codigoBarraTribDifGtin,
    );
  }

  @override
  String toString() {
    return (StringBuffer('NfeDetalhe(')
          ..write('id: $id, ')
          ..write('idNfeCabecalho: $idNfeCabecalho, ')
          ..write('idProduto: $idProduto, ')
          ..write('numeroItem: $numeroItem, ')
          ..write('codigoProduto: $codigoProduto, ')
          ..write('gtin: $gtin, ')
          ..write('nomeProduto: $nomeProduto, ')
          ..write('ncm: $ncm, ')
          ..write('nve: $nve, ')
          ..write('cest: $cest, ')
          ..write('indicadorEscalaRelevante: $indicadorEscalaRelevante, ')
          ..write('cnpjFabricante: $cnpjFabricante, ')
          ..write('codigoBeneficioFiscal: $codigoBeneficioFiscal, ')
          ..write('exTipi: $exTipi, ')
          ..write('cfop: $cfop, ')
          ..write('unidadeComercial: $unidadeComercial, ')
          ..write('quantidadeComercial: $quantidadeComercial, ')
          ..write('numeroPedidoCompra: $numeroPedidoCompra, ')
          ..write('itemPedidoCompra: $itemPedidoCompra, ')
          ..write('numeroFci: $numeroFci, ')
          ..write('numeroRecopi: $numeroRecopi, ')
          ..write('valorUnitarioComercial: $valorUnitarioComercial, ')
          ..write('valorBrutoProduto: $valorBrutoProduto, ')
          ..write('gtinUnidadeTributavel: $gtinUnidadeTributavel, ')
          ..write('unidadeTributavel: $unidadeTributavel, ')
          ..write('quantidadeTributavel: $quantidadeTributavel, ')
          ..write('valorUnitarioTributavel: $valorUnitarioTributavel, ')
          ..write('valorFrete: $valorFrete, ')
          ..write('valorSeguro: $valorSeguro, ')
          ..write('valorDesconto: $valorDesconto, ')
          ..write('valorOutrasDespesas: $valorOutrasDespesas, ')
          ..write('entraTotal: $entraTotal, ')
          ..write('valorTotalTributos: $valorTotalTributos, ')
          ..write('percentualDevolvido: $percentualDevolvido, ')
          ..write('valorIpiDevolvido: $valorIpiDevolvido, ')
          ..write('informacoesAdicionais: $informacoesAdicionais, ')
          ..write('valorSubtotal: $valorSubtotal, ')
          ..write('valorTotal: $valorTotal, ')
          ..write('indicadorBemMovelUsado: $indicadorBemMovelUsado, ')
          ..write('codigoBarraDifGtin: $codigoBarraDifGtin, ')
          ..write('codigoBarraTribDifGtin: $codigoBarraTribDifGtin')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hashAll([
    id,
    idNfeCabecalho,
    idProduto,
    numeroItem,
    codigoProduto,
    gtin,
    nomeProduto,
    ncm,
    nve,
    cest,
    indicadorEscalaRelevante,
    cnpjFabricante,
    codigoBeneficioFiscal,
    exTipi,
    cfop,
    unidadeComercial,
    quantidadeComercial,
    numeroPedidoCompra,
    itemPedidoCompra,
    numeroFci,
    numeroRecopi,
    valorUnitarioComercial,
    valorBrutoProduto,
    gtinUnidadeTributavel,
    unidadeTributavel,
    quantidadeTributavel,
    valorUnitarioTributavel,
    valorFrete,
    valorSeguro,
    valorDesconto,
    valorOutrasDespesas,
    entraTotal,
    valorTotalTributos,
    percentualDevolvido,
    valorIpiDevolvido,
    informacoesAdicionais,
    valorSubtotal,
    valorTotal,
    indicadorBemMovelUsado,
    codigoBarraDifGtin,
    codigoBarraTribDifGtin,
  ]);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeDetalhe &&
          other.id == this.id &&
          other.idNfeCabecalho == this.idNfeCabecalho &&
          other.idProduto == this.idProduto &&
          other.numeroItem == this.numeroItem &&
          other.codigoProduto == this.codigoProduto &&
          other.gtin == this.gtin &&
          other.nomeProduto == this.nomeProduto &&
          other.ncm == this.ncm &&
          other.nve == this.nve &&
          other.cest == this.cest &&
          other.indicadorEscalaRelevante == this.indicadorEscalaRelevante &&
          other.cnpjFabricante == this.cnpjFabricante &&
          other.codigoBeneficioFiscal == this.codigoBeneficioFiscal &&
          other.exTipi == this.exTipi &&
          other.cfop == this.cfop &&
          other.unidadeComercial == this.unidadeComercial &&
          other.quantidadeComercial == this.quantidadeComercial &&
          other.numeroPedidoCompra == this.numeroPedidoCompra &&
          other.itemPedidoCompra == this.itemPedidoCompra &&
          other.numeroFci == this.numeroFci &&
          other.numeroRecopi == this.numeroRecopi &&
          other.valorUnitarioComercial == this.valorUnitarioComercial &&
          other.valorBrutoProduto == this.valorBrutoProduto &&
          other.gtinUnidadeTributavel == this.gtinUnidadeTributavel &&
          other.unidadeTributavel == this.unidadeTributavel &&
          other.quantidadeTributavel == this.quantidadeTributavel &&
          other.valorUnitarioTributavel == this.valorUnitarioTributavel &&
          other.valorFrete == this.valorFrete &&
          other.valorSeguro == this.valorSeguro &&
          other.valorDesconto == this.valorDesconto &&
          other.valorOutrasDespesas == this.valorOutrasDespesas &&
          other.entraTotal == this.entraTotal &&
          other.valorTotalTributos == this.valorTotalTributos &&
          other.percentualDevolvido == this.percentualDevolvido &&
          other.valorIpiDevolvido == this.valorIpiDevolvido &&
          other.informacoesAdicionais == this.informacoesAdicionais &&
          other.valorSubtotal == this.valorSubtotal &&
          other.valorTotal == this.valorTotal &&
          other.indicadorBemMovelUsado == this.indicadorBemMovelUsado &&
          other.codigoBarraDifGtin == this.codigoBarraDifGtin &&
          other.codigoBarraTribDifGtin == this.codigoBarraTribDifGtin);
}

class NfeDetalhesCompanion extends UpdateCompanion<NfeDetalhe> {
  final Value<int?> id;
  final Value<int?> idNfeCabecalho;
  final Value<int?> idProduto;
  final Value<int?> numeroItem;
  final Value<String?> codigoProduto;
  final Value<String?> gtin;
  final Value<String?> nomeProduto;
  final Value<String?> ncm;
  final Value<String?> nve;
  final Value<String?> cest;
  final Value<String?> indicadorEscalaRelevante;
  final Value<String?> cnpjFabricante;
  final Value<String?> codigoBeneficioFiscal;
  final Value<int?> exTipi;
  final Value<int?> cfop;
  final Value<String?> unidadeComercial;
  final Value<double?> quantidadeComercial;
  final Value<String?> numeroPedidoCompra;
  final Value<int?> itemPedidoCompra;
  final Value<String?> numeroFci;
  final Value<String?> numeroRecopi;
  final Value<double?> valorUnitarioComercial;
  final Value<double?> valorBrutoProduto;
  final Value<String?> gtinUnidadeTributavel;
  final Value<String?> unidadeTributavel;
  final Value<double?> quantidadeTributavel;
  final Value<double?> valorUnitarioTributavel;
  final Value<double?> valorFrete;
  final Value<double?> valorSeguro;
  final Value<double?> valorDesconto;
  final Value<double?> valorOutrasDespesas;
  final Value<String?> entraTotal;
  final Value<double?> valorTotalTributos;
  final Value<double?> percentualDevolvido;
  final Value<double?> valorIpiDevolvido;
  final Value<String?> informacoesAdicionais;
  final Value<double?> valorSubtotal;
  final Value<double?> valorTotal;
  final Value<String?> indicadorBemMovelUsado;
  final Value<String?> codigoBarraDifGtin;
  final Value<String?> codigoBarraTribDifGtin;
  const NfeDetalhesCompanion({
    this.id = const Value.absent(),
    this.idNfeCabecalho = const Value.absent(),
    this.idProduto = const Value.absent(),
    this.numeroItem = const Value.absent(),
    this.codigoProduto = const Value.absent(),
    this.gtin = const Value.absent(),
    this.nomeProduto = const Value.absent(),
    this.ncm = const Value.absent(),
    this.nve = const Value.absent(),
    this.cest = const Value.absent(),
    this.indicadorEscalaRelevante = const Value.absent(),
    this.cnpjFabricante = const Value.absent(),
    this.codigoBeneficioFiscal = const Value.absent(),
    this.exTipi = const Value.absent(),
    this.cfop = const Value.absent(),
    this.unidadeComercial = const Value.absent(),
    this.quantidadeComercial = const Value.absent(),
    this.numeroPedidoCompra = const Value.absent(),
    this.itemPedidoCompra = const Value.absent(),
    this.numeroFci = const Value.absent(),
    this.numeroRecopi = const Value.absent(),
    this.valorUnitarioComercial = const Value.absent(),
    this.valorBrutoProduto = const Value.absent(),
    this.gtinUnidadeTributavel = const Value.absent(),
    this.unidadeTributavel = const Value.absent(),
    this.quantidadeTributavel = const Value.absent(),
    this.valorUnitarioTributavel = const Value.absent(),
    this.valorFrete = const Value.absent(),
    this.valorSeguro = const Value.absent(),
    this.valorDesconto = const Value.absent(),
    this.valorOutrasDespesas = const Value.absent(),
    this.entraTotal = const Value.absent(),
    this.valorTotalTributos = const Value.absent(),
    this.percentualDevolvido = const Value.absent(),
    this.valorIpiDevolvido = const Value.absent(),
    this.informacoesAdicionais = const Value.absent(),
    this.valorSubtotal = const Value.absent(),
    this.valorTotal = const Value.absent(),
    this.indicadorBemMovelUsado = const Value.absent(),
    this.codigoBarraDifGtin = const Value.absent(),
    this.codigoBarraTribDifGtin = const Value.absent(),
  });
  NfeDetalhesCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeCabecalho = const Value.absent(),
    this.idProduto = const Value.absent(),
    this.numeroItem = const Value.absent(),
    this.codigoProduto = const Value.absent(),
    this.gtin = const Value.absent(),
    this.nomeProduto = const Value.absent(),
    this.ncm = const Value.absent(),
    this.nve = const Value.absent(),
    this.cest = const Value.absent(),
    this.indicadorEscalaRelevante = const Value.absent(),
    this.cnpjFabricante = const Value.absent(),
    this.codigoBeneficioFiscal = const Value.absent(),
    this.exTipi = const Value.absent(),
    this.cfop = const Value.absent(),
    this.unidadeComercial = const Value.absent(),
    this.quantidadeComercial = const Value.absent(),
    this.numeroPedidoCompra = const Value.absent(),
    this.itemPedidoCompra = const Value.absent(),
    this.numeroFci = const Value.absent(),
    this.numeroRecopi = const Value.absent(),
    this.valorUnitarioComercial = const Value.absent(),
    this.valorBrutoProduto = const Value.absent(),
    this.gtinUnidadeTributavel = const Value.absent(),
    this.unidadeTributavel = const Value.absent(),
    this.quantidadeTributavel = const Value.absent(),
    this.valorUnitarioTributavel = const Value.absent(),
    this.valorFrete = const Value.absent(),
    this.valorSeguro = const Value.absent(),
    this.valorDesconto = const Value.absent(),
    this.valorOutrasDespesas = const Value.absent(),
    this.entraTotal = const Value.absent(),
    this.valorTotalTributos = const Value.absent(),
    this.percentualDevolvido = const Value.absent(),
    this.valorIpiDevolvido = const Value.absent(),
    this.informacoesAdicionais = const Value.absent(),
    this.valorSubtotal = const Value.absent(),
    this.valorTotal = const Value.absent(),
    this.indicadorBemMovelUsado = const Value.absent(),
    this.codigoBarraDifGtin = const Value.absent(),
    this.codigoBarraTribDifGtin = const Value.absent(),
  });
  static Insertable<NfeDetalhe> custom({
    Expression<int>? id,
    Expression<int>? idNfeCabecalho,
    Expression<int>? idProduto,
    Expression<int>? numeroItem,
    Expression<String>? codigoProduto,
    Expression<String>? gtin,
    Expression<String>? nomeProduto,
    Expression<String>? ncm,
    Expression<String>? nve,
    Expression<String>? cest,
    Expression<String>? indicadorEscalaRelevante,
    Expression<String>? cnpjFabricante,
    Expression<String>? codigoBeneficioFiscal,
    Expression<int>? exTipi,
    Expression<int>? cfop,
    Expression<String>? unidadeComercial,
    Expression<double>? quantidadeComercial,
    Expression<String>? numeroPedidoCompra,
    Expression<int>? itemPedidoCompra,
    Expression<String>? numeroFci,
    Expression<String>? numeroRecopi,
    Expression<double>? valorUnitarioComercial,
    Expression<double>? valorBrutoProduto,
    Expression<String>? gtinUnidadeTributavel,
    Expression<String>? unidadeTributavel,
    Expression<double>? quantidadeTributavel,
    Expression<double>? valorUnitarioTributavel,
    Expression<double>? valorFrete,
    Expression<double>? valorSeguro,
    Expression<double>? valorDesconto,
    Expression<double>? valorOutrasDespesas,
    Expression<String>? entraTotal,
    Expression<double>? valorTotalTributos,
    Expression<double>? percentualDevolvido,
    Expression<double>? valorIpiDevolvido,
    Expression<String>? informacoesAdicionais,
    Expression<double>? valorSubtotal,
    Expression<double>? valorTotal,
    Expression<String>? indicadorBemMovelUsado,
    Expression<String>? codigoBarraDifGtin,
    Expression<String>? codigoBarraTribDifGtin,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (idNfeCabecalho != null) 'id_nfe_cabecalho': idNfeCabecalho,
      if (idProduto != null) 'id_produto': idProduto,
      if (numeroItem != null) 'numero_item': numeroItem,
      if (codigoProduto != null) 'codigo_produto': codigoProduto,
      if (gtin != null) 'gtin': gtin,
      if (nomeProduto != null) 'nome_produto': nomeProduto,
      if (ncm != null) 'ncm': ncm,
      if (nve != null) 'nve': nve,
      if (cest != null) 'cest': cest,
      if (indicadorEscalaRelevante != null)
        'indicador_escala_relevante': indicadorEscalaRelevante,
      if (cnpjFabricante != null) 'cnpj_fabricante': cnpjFabricante,
      if (codigoBeneficioFiscal != null)
        'codigo_beneficio_fiscal': codigoBeneficioFiscal,
      if (exTipi != null) 'ex_tipi': exTipi,
      if (cfop != null) 'cfop': cfop,
      if (unidadeComercial != null) 'unidade_comercial': unidadeComercial,
      if (quantidadeComercial != null)
        'quantidade_comercial': quantidadeComercial,
      if (numeroPedidoCompra != null)
        'numero_pedido_compra': numeroPedidoCompra,
      if (itemPedidoCompra != null) 'item_pedido_compra': itemPedidoCompra,
      if (numeroFci != null) 'numero_fci': numeroFci,
      if (numeroRecopi != null) 'numero_recopi': numeroRecopi,
      if (valorUnitarioComercial != null)
        'valor_unitario_comercial': valorUnitarioComercial,
      if (valorBrutoProduto != null) 'valor_bruto_produto': valorBrutoProduto,
      if (gtinUnidadeTributavel != null)
        'gtin_unidade_tributavel': gtinUnidadeTributavel,
      if (unidadeTributavel != null) 'unidade_tributavel': unidadeTributavel,
      if (quantidadeTributavel != null)
        'quantidade_tributavel': quantidadeTributavel,
      if (valorUnitarioTributavel != null)
        'valor_unitario_tributavel': valorUnitarioTributavel,
      if (valorFrete != null) 'valor_frete': valorFrete,
      if (valorSeguro != null) 'valor_seguro': valorSeguro,
      if (valorDesconto != null) 'valor_desconto': valorDesconto,
      if (valorOutrasDespesas != null)
        'valor_outras_despesas': valorOutrasDespesas,
      if (entraTotal != null) 'entra_total': entraTotal,
      if (valorTotalTributos != null)
        'valor_total_tributos': valorTotalTributos,
      if (percentualDevolvido != null)
        'percentual_devolvido': percentualDevolvido,
      if (valorIpiDevolvido != null) 'valor_ipi_devolvido': valorIpiDevolvido,
      if (informacoesAdicionais != null)
        'informacoes_adicionais': informacoesAdicionais,
      if (valorSubtotal != null) 'valor_subtotal': valorSubtotal,
      if (valorTotal != null) 'valor_total': valorTotal,
      if (indicadorBemMovelUsado != null)
        'indicador_bem_movel_usado': indicadorBemMovelUsado,
      if (codigoBarraDifGtin != null)
        'codigo_barra_dif_gtin': codigoBarraDifGtin,
      if (codigoBarraTribDifGtin != null)
        'codigo_barra_trib_dif_gtin': codigoBarraTribDifGtin,
    });
  }

  NfeDetalhesCompanion copyWith({
    Value<int?>? id,
    Value<int?>? idNfeCabecalho,
    Value<int?>? idProduto,
    Value<int?>? numeroItem,
    Value<String?>? codigoProduto,
    Value<String?>? gtin,
    Value<String?>? nomeProduto,
    Value<String?>? ncm,
    Value<String?>? nve,
    Value<String?>? cest,
    Value<String?>? indicadorEscalaRelevante,
    Value<String?>? cnpjFabricante,
    Value<String?>? codigoBeneficioFiscal,
    Value<int?>? exTipi,
    Value<int?>? cfop,
    Value<String?>? unidadeComercial,
    Value<double?>? quantidadeComercial,
    Value<String?>? numeroPedidoCompra,
    Value<int?>? itemPedidoCompra,
    Value<String?>? numeroFci,
    Value<String?>? numeroRecopi,
    Value<double?>? valorUnitarioComercial,
    Value<double?>? valorBrutoProduto,
    Value<String?>? gtinUnidadeTributavel,
    Value<String?>? unidadeTributavel,
    Value<double?>? quantidadeTributavel,
    Value<double?>? valorUnitarioTributavel,
    Value<double?>? valorFrete,
    Value<double?>? valorSeguro,
    Value<double?>? valorDesconto,
    Value<double?>? valorOutrasDespesas,
    Value<String?>? entraTotal,
    Value<double?>? valorTotalTributos,
    Value<double?>? percentualDevolvido,
    Value<double?>? valorIpiDevolvido,
    Value<String?>? informacoesAdicionais,
    Value<double?>? valorSubtotal,
    Value<double?>? valorTotal,
    Value<String?>? indicadorBemMovelUsado,
    Value<String?>? codigoBarraDifGtin,
    Value<String?>? codigoBarraTribDifGtin,
  }) {
    return NfeDetalhesCompanion(
      id: id ?? this.id,
      idNfeCabecalho: idNfeCabecalho ?? this.idNfeCabecalho,
      idProduto: idProduto ?? this.idProduto,
      numeroItem: numeroItem ?? this.numeroItem,
      codigoProduto: codigoProduto ?? this.codigoProduto,
      gtin: gtin ?? this.gtin,
      nomeProduto: nomeProduto ?? this.nomeProduto,
      ncm: ncm ?? this.ncm,
      nve: nve ?? this.nve,
      cest: cest ?? this.cest,
      indicadorEscalaRelevante:
          indicadorEscalaRelevante ?? this.indicadorEscalaRelevante,
      cnpjFabricante: cnpjFabricante ?? this.cnpjFabricante,
      codigoBeneficioFiscal:
          codigoBeneficioFiscal ?? this.codigoBeneficioFiscal,
      exTipi: exTipi ?? this.exTipi,
      cfop: cfop ?? this.cfop,
      unidadeComercial: unidadeComercial ?? this.unidadeComercial,
      quantidadeComercial: quantidadeComercial ?? this.quantidadeComercial,
      numeroPedidoCompra: numeroPedidoCompra ?? this.numeroPedidoCompra,
      itemPedidoCompra: itemPedidoCompra ?? this.itemPedidoCompra,
      numeroFci: numeroFci ?? this.numeroFci,
      numeroRecopi: numeroRecopi ?? this.numeroRecopi,
      valorUnitarioComercial:
          valorUnitarioComercial ?? this.valorUnitarioComercial,
      valorBrutoProduto: valorBrutoProduto ?? this.valorBrutoProduto,
      gtinUnidadeTributavel:
          gtinUnidadeTributavel ?? this.gtinUnidadeTributavel,
      unidadeTributavel: unidadeTributavel ?? this.unidadeTributavel,
      quantidadeTributavel: quantidadeTributavel ?? this.quantidadeTributavel,
      valorUnitarioTributavel:
          valorUnitarioTributavel ?? this.valorUnitarioTributavel,
      valorFrete: valorFrete ?? this.valorFrete,
      valorSeguro: valorSeguro ?? this.valorSeguro,
      valorDesconto: valorDesconto ?? this.valorDesconto,
      valorOutrasDespesas: valorOutrasDespesas ?? this.valorOutrasDespesas,
      entraTotal: entraTotal ?? this.entraTotal,
      valorTotalTributos: valorTotalTributos ?? this.valorTotalTributos,
      percentualDevolvido: percentualDevolvido ?? this.percentualDevolvido,
      valorIpiDevolvido: valorIpiDevolvido ?? this.valorIpiDevolvido,
      informacoesAdicionais:
          informacoesAdicionais ?? this.informacoesAdicionais,
      valorSubtotal: valorSubtotal ?? this.valorSubtotal,
      valorTotal: valorTotal ?? this.valorTotal,
      indicadorBemMovelUsado:
          indicadorBemMovelUsado ?? this.indicadorBemMovelUsado,
      codigoBarraDifGtin: codigoBarraDifGtin ?? this.codigoBarraDifGtin,
      codigoBarraTribDifGtin:
          codigoBarraTribDifGtin ?? this.codigoBarraTribDifGtin,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (idNfeCabecalho.present) {
      map['id_nfe_cabecalho'] = Variable<int>(idNfeCabecalho.value);
    }
    if (idProduto.present) {
      map['id_produto'] = Variable<int>(idProduto.value);
    }
    if (numeroItem.present) {
      map['numero_item'] = Variable<int>(numeroItem.value);
    }
    if (codigoProduto.present) {
      map['codigo_produto'] = Variable<String>(codigoProduto.value);
    }
    if (gtin.present) {
      map['gtin'] = Variable<String>(gtin.value);
    }
    if (nomeProduto.present) {
      map['nome_produto'] = Variable<String>(nomeProduto.value);
    }
    if (ncm.present) {
      map['ncm'] = Variable<String>(ncm.value);
    }
    if (nve.present) {
      map['nve'] = Variable<String>(nve.value);
    }
    if (cest.present) {
      map['cest'] = Variable<String>(cest.value);
    }
    if (indicadorEscalaRelevante.present) {
      map['indicador_escala_relevante'] = Variable<String>(
        indicadorEscalaRelevante.value,
      );
    }
    if (cnpjFabricante.present) {
      map['cnpj_fabricante'] = Variable<String>(cnpjFabricante.value);
    }
    if (codigoBeneficioFiscal.present) {
      map['codigo_beneficio_fiscal'] = Variable<String>(
        codigoBeneficioFiscal.value,
      );
    }
    if (exTipi.present) {
      map['ex_tipi'] = Variable<int>(exTipi.value);
    }
    if (cfop.present) {
      map['cfop'] = Variable<int>(cfop.value);
    }
    if (unidadeComercial.present) {
      map['unidade_comercial'] = Variable<String>(unidadeComercial.value);
    }
    if (quantidadeComercial.present) {
      map['quantidade_comercial'] = Variable<double>(quantidadeComercial.value);
    }
    if (numeroPedidoCompra.present) {
      map['numero_pedido_compra'] = Variable<String>(numeroPedidoCompra.value);
    }
    if (itemPedidoCompra.present) {
      map['item_pedido_compra'] = Variable<int>(itemPedidoCompra.value);
    }
    if (numeroFci.present) {
      map['numero_fci'] = Variable<String>(numeroFci.value);
    }
    if (numeroRecopi.present) {
      map['numero_recopi'] = Variable<String>(numeroRecopi.value);
    }
    if (valorUnitarioComercial.present) {
      map['valor_unitario_comercial'] = Variable<double>(
        valorUnitarioComercial.value,
      );
    }
    if (valorBrutoProduto.present) {
      map['valor_bruto_produto'] = Variable<double>(valorBrutoProduto.value);
    }
    if (gtinUnidadeTributavel.present) {
      map['gtin_unidade_tributavel'] = Variable<String>(
        gtinUnidadeTributavel.value,
      );
    }
    if (unidadeTributavel.present) {
      map['unidade_tributavel'] = Variable<String>(unidadeTributavel.value);
    }
    if (quantidadeTributavel.present) {
      map['quantidade_tributavel'] = Variable<double>(
        quantidadeTributavel.value,
      );
    }
    if (valorUnitarioTributavel.present) {
      map['valor_unitario_tributavel'] = Variable<double>(
        valorUnitarioTributavel.value,
      );
    }
    if (valorFrete.present) {
      map['valor_frete'] = Variable<double>(valorFrete.value);
    }
    if (valorSeguro.present) {
      map['valor_seguro'] = Variable<double>(valorSeguro.value);
    }
    if (valorDesconto.present) {
      map['valor_desconto'] = Variable<double>(valorDesconto.value);
    }
    if (valorOutrasDespesas.present) {
      map['valor_outras_despesas'] = Variable<double>(
        valorOutrasDespesas.value,
      );
    }
    if (entraTotal.present) {
      map['entra_total'] = Variable<String>(entraTotal.value);
    }
    if (valorTotalTributos.present) {
      map['valor_total_tributos'] = Variable<double>(valorTotalTributos.value);
    }
    if (percentualDevolvido.present) {
      map['percentual_devolvido'] = Variable<double>(percentualDevolvido.value);
    }
    if (valorIpiDevolvido.present) {
      map['valor_ipi_devolvido'] = Variable<double>(valorIpiDevolvido.value);
    }
    if (informacoesAdicionais.present) {
      map['informacoes_adicionais'] = Variable<String>(
        informacoesAdicionais.value,
      );
    }
    if (valorSubtotal.present) {
      map['valor_subtotal'] = Variable<double>(valorSubtotal.value);
    }
    if (valorTotal.present) {
      map['valor_total'] = Variable<double>(valorTotal.value);
    }
    if (indicadorBemMovelUsado.present) {
      map['indicador_bem_movel_usado'] = Variable<String>(
        indicadorBemMovelUsado.value,
      );
    }
    if (codigoBarraDifGtin.present) {
      map['codigo_barra_dif_gtin'] = Variable<String>(codigoBarraDifGtin.value);
    }
    if (codigoBarraTribDifGtin.present) {
      map['codigo_barra_trib_dif_gtin'] = Variable<String>(
        codigoBarraTribDifGtin.value,
      );
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeDetalhesCompanion(')
          ..write('id: $id, ')
          ..write('idNfeCabecalho: $idNfeCabecalho, ')
          ..write('idProduto: $idProduto, ')
          ..write('numeroItem: $numeroItem, ')
          ..write('codigoProduto: $codigoProduto, ')
          ..write('gtin: $gtin, ')
          ..write('nomeProduto: $nomeProduto, ')
          ..write('ncm: $ncm, ')
          ..write('nve: $nve, ')
          ..write('cest: $cest, ')
          ..write('indicadorEscalaRelevante: $indicadorEscalaRelevante, ')
          ..write('cnpjFabricante: $cnpjFabricante, ')
          ..write('codigoBeneficioFiscal: $codigoBeneficioFiscal, ')
          ..write('exTipi: $exTipi, ')
          ..write('cfop: $cfop, ')
          ..write('unidadeComercial: $unidadeComercial, ')
          ..write('quantidadeComercial: $quantidadeComercial, ')
          ..write('numeroPedidoCompra: $numeroPedidoCompra, ')
          ..write('itemPedidoCompra: $itemPedidoCompra, ')
          ..write('numeroFci: $numeroFci, ')
          ..write('numeroRecopi: $numeroRecopi, ')
          ..write('valorUnitarioComercial: $valorUnitarioComercial, ')
          ..write('valorBrutoProduto: $valorBrutoProduto, ')
          ..write('gtinUnidadeTributavel: $gtinUnidadeTributavel, ')
          ..write('unidadeTributavel: $unidadeTributavel, ')
          ..write('quantidadeTributavel: $quantidadeTributavel, ')
          ..write('valorUnitarioTributavel: $valorUnitarioTributavel, ')
          ..write('valorFrete: $valorFrete, ')
          ..write('valorSeguro: $valorSeguro, ')
          ..write('valorDesconto: $valorDesconto, ')
          ..write('valorOutrasDespesas: $valorOutrasDespesas, ')
          ..write('entraTotal: $entraTotal, ')
          ..write('valorTotalTributos: $valorTotalTributos, ')
          ..write('percentualDevolvido: $percentualDevolvido, ')
          ..write('valorIpiDevolvido: $valorIpiDevolvido, ')
          ..write('informacoesAdicionais: $informacoesAdicionais, ')
          ..write('valorSubtotal: $valorSubtotal, ')
          ..write('valorTotal: $valorTotal, ')
          ..write('indicadorBemMovelUsado: $indicadorBemMovelUsado, ')
          ..write('codigoBarraDifGtin: $codigoBarraDifGtin, ')
          ..write('codigoBarraTribDifGtin: $codigoBarraTribDifGtin')
          ..write(')'))
        .toString();
  }
}

class $NfeDetEspecificoCombustivelsTable extends NfeDetEspecificoCombustivels
    with
        TableInfo<
          $NfeDetEspecificoCombustivelsTable,
          NfeDetEspecificoCombustivel
        > {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeDetEspecificoCombustivelsTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
    'id',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idNfeDetalheMeta = const VerificationMeta(
    'idNfeDetalhe',
  );
  @override
  late final GeneratedColumn<int> idNfeDetalhe = GeneratedColumn<int>(
    'id_nfe_detalhe',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _codigoAnpMeta = const VerificationMeta(
    'codigoAnp',
  );
  @override
  late final GeneratedColumn<int> codigoAnp = GeneratedColumn<int>(
    'codigo_anp',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _descricaoAnpMeta = const VerificationMeta(
    'descricaoAnp',
  );
  @override
  late final GeneratedColumn<String> descricaoAnp = GeneratedColumn<String>(
    'descricao_anp',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 95,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _percentualGlpMeta = const VerificationMeta(
    'percentualGlp',
  );
  @override
  late final GeneratedColumn<double> percentualGlp = GeneratedColumn<double>(
    'percentual_glp',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _percentualGasNacionalMeta =
      const VerificationMeta('percentualGasNacional');
  @override
  late final GeneratedColumn<double> percentualGasNacional =
      GeneratedColumn<double>(
        'percentual_gas_nacional',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _percentualGasImportadoMeta =
      const VerificationMeta('percentualGasImportado');
  @override
  late final GeneratedColumn<double> percentualGasImportado =
      GeneratedColumn<double>(
        'percentual_gas_importado',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _valorPartidaMeta = const VerificationMeta(
    'valorPartida',
  );
  @override
  late final GeneratedColumn<double> valorPartida = GeneratedColumn<double>(
    'valor_partida',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _codifMeta = const VerificationMeta('codif');
  @override
  late final GeneratedColumn<String> codif = GeneratedColumn<String>(
    'codif',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 21,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _quantidadeTempAmbienteMeta =
      const VerificationMeta('quantidadeTempAmbiente');
  @override
  late final GeneratedColumn<double> quantidadeTempAmbiente =
      GeneratedColumn<double>(
        'quantidade_temp_ambiente',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _ufConsumoMeta = const VerificationMeta(
    'ufConsumo',
  );
  @override
  late final GeneratedColumn<String> ufConsumo = GeneratedColumn<String>(
    'uf_consumo',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 2,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _cideBaseCalculoMeta = const VerificationMeta(
    'cideBaseCalculo',
  );
  @override
  late final GeneratedColumn<double> cideBaseCalculo = GeneratedColumn<double>(
    'cide_base_calculo',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _cideAliquotaMeta = const VerificationMeta(
    'cideAliquota',
  );
  @override
  late final GeneratedColumn<double> cideAliquota = GeneratedColumn<double>(
    'cide_aliquota',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _cideValorMeta = const VerificationMeta(
    'cideValor',
  );
  @override
  late final GeneratedColumn<double> cideValor = GeneratedColumn<double>(
    'cide_valor',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _encerranteBicoMeta = const VerificationMeta(
    'encerranteBico',
  );
  @override
  late final GeneratedColumn<int> encerranteBico = GeneratedColumn<int>(
    'encerrante_bico',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _encerranteBombaMeta = const VerificationMeta(
    'encerranteBomba',
  );
  @override
  late final GeneratedColumn<int> encerranteBomba = GeneratedColumn<int>(
    'encerrante_bomba',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _encerranteTanqueMeta = const VerificationMeta(
    'encerranteTanque',
  );
  @override
  late final GeneratedColumn<int> encerranteTanque = GeneratedColumn<int>(
    'encerrante_tanque',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _encerranteValorInicioMeta =
      const VerificationMeta('encerranteValorInicio');
  @override
  late final GeneratedColumn<double> encerranteValorInicio =
      GeneratedColumn<double>(
        'encerrante_valor_inicio',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _encerranteValorFimMeta =
      const VerificationMeta('encerranteValorFim');
  @override
  late final GeneratedColumn<double> encerranteValorFim =
      GeneratedColumn<double>(
        'encerrante_valor_fim',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _percentualMisturaBiodieselMeta =
      const VerificationMeta('percentualMisturaBiodiesel');
  @override
  late final GeneratedColumn<double> percentualMisturaBiodiesel =
      GeneratedColumn<double>(
        'percentual_mistura_biodiesel',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    idNfeDetalhe,
    codigoAnp,
    descricaoAnp,
    percentualGlp,
    percentualGasNacional,
    percentualGasImportado,
    valorPartida,
    codif,
    quantidadeTempAmbiente,
    ufConsumo,
    cideBaseCalculo,
    cideAliquota,
    cideValor,
    encerranteBico,
    encerranteBomba,
    encerranteTanque,
    encerranteValorInicio,
    encerranteValorFim,
    percentualMisturaBiodiesel,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'nfe_det_especifico_combustivel';
  @override
  VerificationContext validateIntegrity(
    Insertable<NfeDetEspecificoCombustivel> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('id_nfe_detalhe')) {
      context.handle(
        _idNfeDetalheMeta,
        idNfeDetalhe.isAcceptableOrUnknown(
          data['id_nfe_detalhe']!,
          _idNfeDetalheMeta,
        ),
      );
    }
    if (data.containsKey('codigo_anp')) {
      context.handle(
        _codigoAnpMeta,
        codigoAnp.isAcceptableOrUnknown(data['codigo_anp']!, _codigoAnpMeta),
      );
    }
    if (data.containsKey('descricao_anp')) {
      context.handle(
        _descricaoAnpMeta,
        descricaoAnp.isAcceptableOrUnknown(
          data['descricao_anp']!,
          _descricaoAnpMeta,
        ),
      );
    }
    if (data.containsKey('percentual_glp')) {
      context.handle(
        _percentualGlpMeta,
        percentualGlp.isAcceptableOrUnknown(
          data['percentual_glp']!,
          _percentualGlpMeta,
        ),
      );
    }
    if (data.containsKey('percentual_gas_nacional')) {
      context.handle(
        _percentualGasNacionalMeta,
        percentualGasNacional.isAcceptableOrUnknown(
          data['percentual_gas_nacional']!,
          _percentualGasNacionalMeta,
        ),
      );
    }
    if (data.containsKey('percentual_gas_importado')) {
      context.handle(
        _percentualGasImportadoMeta,
        percentualGasImportado.isAcceptableOrUnknown(
          data['percentual_gas_importado']!,
          _percentualGasImportadoMeta,
        ),
      );
    }
    if (data.containsKey('valor_partida')) {
      context.handle(
        _valorPartidaMeta,
        valorPartida.isAcceptableOrUnknown(
          data['valor_partida']!,
          _valorPartidaMeta,
        ),
      );
    }
    if (data.containsKey('codif')) {
      context.handle(
        _codifMeta,
        codif.isAcceptableOrUnknown(data['codif']!, _codifMeta),
      );
    }
    if (data.containsKey('quantidade_temp_ambiente')) {
      context.handle(
        _quantidadeTempAmbienteMeta,
        quantidadeTempAmbiente.isAcceptableOrUnknown(
          data['quantidade_temp_ambiente']!,
          _quantidadeTempAmbienteMeta,
        ),
      );
    }
    if (data.containsKey('uf_consumo')) {
      context.handle(
        _ufConsumoMeta,
        ufConsumo.isAcceptableOrUnknown(data['uf_consumo']!, _ufConsumoMeta),
      );
    }
    if (data.containsKey('cide_base_calculo')) {
      context.handle(
        _cideBaseCalculoMeta,
        cideBaseCalculo.isAcceptableOrUnknown(
          data['cide_base_calculo']!,
          _cideBaseCalculoMeta,
        ),
      );
    }
    if (data.containsKey('cide_aliquota')) {
      context.handle(
        _cideAliquotaMeta,
        cideAliquota.isAcceptableOrUnknown(
          data['cide_aliquota']!,
          _cideAliquotaMeta,
        ),
      );
    }
    if (data.containsKey('cide_valor')) {
      context.handle(
        _cideValorMeta,
        cideValor.isAcceptableOrUnknown(data['cide_valor']!, _cideValorMeta),
      );
    }
    if (data.containsKey('encerrante_bico')) {
      context.handle(
        _encerranteBicoMeta,
        encerranteBico.isAcceptableOrUnknown(
          data['encerrante_bico']!,
          _encerranteBicoMeta,
        ),
      );
    }
    if (data.containsKey('encerrante_bomba')) {
      context.handle(
        _encerranteBombaMeta,
        encerranteBomba.isAcceptableOrUnknown(
          data['encerrante_bomba']!,
          _encerranteBombaMeta,
        ),
      );
    }
    if (data.containsKey('encerrante_tanque')) {
      context.handle(
        _encerranteTanqueMeta,
        encerranteTanque.isAcceptableOrUnknown(
          data['encerrante_tanque']!,
          _encerranteTanqueMeta,
        ),
      );
    }
    if (data.containsKey('encerrante_valor_inicio')) {
      context.handle(
        _encerranteValorInicioMeta,
        encerranteValorInicio.isAcceptableOrUnknown(
          data['encerrante_valor_inicio']!,
          _encerranteValorInicioMeta,
        ),
      );
    }
    if (data.containsKey('encerrante_valor_fim')) {
      context.handle(
        _encerranteValorFimMeta,
        encerranteValorFim.isAcceptableOrUnknown(
          data['encerrante_valor_fim']!,
          _encerranteValorFimMeta,
        ),
      );
    }
    if (data.containsKey('percentual_mistura_biodiesel')) {
      context.handle(
        _percentualMisturaBiodieselMeta,
        percentualMisturaBiodiesel.isAcceptableOrUnknown(
          data['percentual_mistura_biodiesel']!,
          _percentualMisturaBiodieselMeta,
        ),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeDetEspecificoCombustivel map(
    Map<String, dynamic> data, {
    String? tablePrefix,
  }) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return NfeDetEspecificoCombustivel(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id'],
      ),
      idNfeDetalhe: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_nfe_detalhe'],
      ),
      codigoAnp: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}codigo_anp'],
      ),
      descricaoAnp: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}descricao_anp'],
      ),
      percentualGlp: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}percentual_glp'],
      ),
      percentualGasNacional: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}percentual_gas_nacional'],
      ),
      percentualGasImportado: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}percentual_gas_importado'],
      ),
      valorPartida: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_partida'],
      ),
      codif: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}codif'],
      ),
      quantidadeTempAmbiente: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}quantidade_temp_ambiente'],
      ),
      ufConsumo: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}uf_consumo'],
      ),
      cideBaseCalculo: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}cide_base_calculo'],
      ),
      cideAliquota: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}cide_aliquota'],
      ),
      cideValor: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}cide_valor'],
      ),
      encerranteBico: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}encerrante_bico'],
      ),
      encerranteBomba: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}encerrante_bomba'],
      ),
      encerranteTanque: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}encerrante_tanque'],
      ),
      encerranteValorInicio: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}encerrante_valor_inicio'],
      ),
      encerranteValorFim: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}encerrante_valor_fim'],
      ),
      percentualMisturaBiodiesel: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}percentual_mistura_biodiesel'],
      ),
    );
  }

  @override
  $NfeDetEspecificoCombustivelsTable createAlias(String alias) {
    return $NfeDetEspecificoCombustivelsTable(attachedDatabase, alias);
  }
}

class NfeDetEspecificoCombustivel extends DataClass
    implements Insertable<NfeDetEspecificoCombustivel> {
  final int? id;
  final int? idNfeDetalhe;
  final int? codigoAnp;
  final String? descricaoAnp;
  final double? percentualGlp;
  final double? percentualGasNacional;
  final double? percentualGasImportado;
  final double? valorPartida;
  final String? codif;
  final double? quantidadeTempAmbiente;
  final String? ufConsumo;
  final double? cideBaseCalculo;
  final double? cideAliquota;
  final double? cideValor;
  final int? encerranteBico;
  final int? encerranteBomba;
  final int? encerranteTanque;
  final double? encerranteValorInicio;
  final double? encerranteValorFim;
  final double? percentualMisturaBiodiesel;
  const NfeDetEspecificoCombustivel({
    this.id,
    this.idNfeDetalhe,
    this.codigoAnp,
    this.descricaoAnp,
    this.percentualGlp,
    this.percentualGasNacional,
    this.percentualGasImportado,
    this.valorPartida,
    this.codif,
    this.quantidadeTempAmbiente,
    this.ufConsumo,
    this.cideBaseCalculo,
    this.cideAliquota,
    this.cideValor,
    this.encerranteBico,
    this.encerranteBomba,
    this.encerranteTanque,
    this.encerranteValorInicio,
    this.encerranteValorFim,
    this.percentualMisturaBiodiesel,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeDetalhe != null) {
      map['id_nfe_detalhe'] = Variable<int>(idNfeDetalhe);
    }
    if (!nullToAbsent || codigoAnp != null) {
      map['codigo_anp'] = Variable<int>(codigoAnp);
    }
    if (!nullToAbsent || descricaoAnp != null) {
      map['descricao_anp'] = Variable<String>(descricaoAnp);
    }
    if (!nullToAbsent || percentualGlp != null) {
      map['percentual_glp'] = Variable<double>(percentualGlp);
    }
    if (!nullToAbsent || percentualGasNacional != null) {
      map['percentual_gas_nacional'] = Variable<double>(percentualGasNacional);
    }
    if (!nullToAbsent || percentualGasImportado != null) {
      map['percentual_gas_importado'] = Variable<double>(
        percentualGasImportado,
      );
    }
    if (!nullToAbsent || valorPartida != null) {
      map['valor_partida'] = Variable<double>(valorPartida);
    }
    if (!nullToAbsent || codif != null) {
      map['codif'] = Variable<String>(codif);
    }
    if (!nullToAbsent || quantidadeTempAmbiente != null) {
      map['quantidade_temp_ambiente'] = Variable<double>(
        quantidadeTempAmbiente,
      );
    }
    if (!nullToAbsent || ufConsumo != null) {
      map['uf_consumo'] = Variable<String>(ufConsumo);
    }
    if (!nullToAbsent || cideBaseCalculo != null) {
      map['cide_base_calculo'] = Variable<double>(cideBaseCalculo);
    }
    if (!nullToAbsent || cideAliquota != null) {
      map['cide_aliquota'] = Variable<double>(cideAliquota);
    }
    if (!nullToAbsent || cideValor != null) {
      map['cide_valor'] = Variable<double>(cideValor);
    }
    if (!nullToAbsent || encerranteBico != null) {
      map['encerrante_bico'] = Variable<int>(encerranteBico);
    }
    if (!nullToAbsent || encerranteBomba != null) {
      map['encerrante_bomba'] = Variable<int>(encerranteBomba);
    }
    if (!nullToAbsent || encerranteTanque != null) {
      map['encerrante_tanque'] = Variable<int>(encerranteTanque);
    }
    if (!nullToAbsent || encerranteValorInicio != null) {
      map['encerrante_valor_inicio'] = Variable<double>(encerranteValorInicio);
    }
    if (!nullToAbsent || encerranteValorFim != null) {
      map['encerrante_valor_fim'] = Variable<double>(encerranteValorFim);
    }
    if (!nullToAbsent || percentualMisturaBiodiesel != null) {
      map['percentual_mistura_biodiesel'] = Variable<double>(
        percentualMisturaBiodiesel,
      );
    }
    return map;
  }

  factory NfeDetEspecificoCombustivel.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeDetEspecificoCombustivel(
      id: serializer.fromJson<int?>(json['id']),
      idNfeDetalhe: serializer.fromJson<int?>(json['idNfeDetalhe']),
      codigoAnp: serializer.fromJson<int?>(json['codigoAnp']),
      descricaoAnp: serializer.fromJson<String?>(json['descricaoAnp']),
      percentualGlp: serializer.fromJson<double?>(json['percentualGlp']),
      percentualGasNacional: serializer.fromJson<double?>(
        json['percentualGasNacional'],
      ),
      percentualGasImportado: serializer.fromJson<double?>(
        json['percentualGasImportado'],
      ),
      valorPartida: serializer.fromJson<double?>(json['valorPartida']),
      codif: serializer.fromJson<String?>(json['codif']),
      quantidadeTempAmbiente: serializer.fromJson<double?>(
        json['quantidadeTempAmbiente'],
      ),
      ufConsumo: serializer.fromJson<String?>(json['ufConsumo']),
      cideBaseCalculo: serializer.fromJson<double?>(json['cideBaseCalculo']),
      cideAliquota: serializer.fromJson<double?>(json['cideAliquota']),
      cideValor: serializer.fromJson<double?>(json['cideValor']),
      encerranteBico: serializer.fromJson<int?>(json['encerranteBico']),
      encerranteBomba: serializer.fromJson<int?>(json['encerranteBomba']),
      encerranteTanque: serializer.fromJson<int?>(json['encerranteTanque']),
      encerranteValorInicio: serializer.fromJson<double?>(
        json['encerranteValorInicio'],
      ),
      encerranteValorFim: serializer.fromJson<double?>(
        json['encerranteValorFim'],
      ),
      percentualMisturaBiodiesel: serializer.fromJson<double?>(
        json['percentualMisturaBiodiesel'],
      ),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeDetalhe': serializer.toJson<int?>(idNfeDetalhe),
      'codigoAnp': serializer.toJson<int?>(codigoAnp),
      'descricaoAnp': serializer.toJson<String?>(descricaoAnp),
      'percentualGlp': serializer.toJson<double?>(percentualGlp),
      'percentualGasNacional': serializer.toJson<double?>(
        percentualGasNacional,
      ),
      'percentualGasImportado': serializer.toJson<double?>(
        percentualGasImportado,
      ),
      'valorPartida': serializer.toJson<double?>(valorPartida),
      'codif': serializer.toJson<String?>(codif),
      'quantidadeTempAmbiente': serializer.toJson<double?>(
        quantidadeTempAmbiente,
      ),
      'ufConsumo': serializer.toJson<String?>(ufConsumo),
      'cideBaseCalculo': serializer.toJson<double?>(cideBaseCalculo),
      'cideAliquota': serializer.toJson<double?>(cideAliquota),
      'cideValor': serializer.toJson<double?>(cideValor),
      'encerranteBico': serializer.toJson<int?>(encerranteBico),
      'encerranteBomba': serializer.toJson<int?>(encerranteBomba),
      'encerranteTanque': serializer.toJson<int?>(encerranteTanque),
      'encerranteValorInicio': serializer.toJson<double?>(
        encerranteValorInicio,
      ),
      'encerranteValorFim': serializer.toJson<double?>(encerranteValorFim),
      'percentualMisturaBiodiesel': serializer.toJson<double?>(
        percentualMisturaBiodiesel,
      ),
    };
  }

  NfeDetEspecificoCombustivel copyWith({
    Value<int?> id = const Value.absent(),
    Value<int?> idNfeDetalhe = const Value.absent(),
    Value<int?> codigoAnp = const Value.absent(),
    Value<String?> descricaoAnp = const Value.absent(),
    Value<double?> percentualGlp = const Value.absent(),
    Value<double?> percentualGasNacional = const Value.absent(),
    Value<double?> percentualGasImportado = const Value.absent(),
    Value<double?> valorPartida = const Value.absent(),
    Value<String?> codif = const Value.absent(),
    Value<double?> quantidadeTempAmbiente = const Value.absent(),
    Value<String?> ufConsumo = const Value.absent(),
    Value<double?> cideBaseCalculo = const Value.absent(),
    Value<double?> cideAliquota = const Value.absent(),
    Value<double?> cideValor = const Value.absent(),
    Value<int?> encerranteBico = const Value.absent(),
    Value<int?> encerranteBomba = const Value.absent(),
    Value<int?> encerranteTanque = const Value.absent(),
    Value<double?> encerranteValorInicio = const Value.absent(),
    Value<double?> encerranteValorFim = const Value.absent(),
    Value<double?> percentualMisturaBiodiesel = const Value.absent(),
  }) => NfeDetEspecificoCombustivel(
    id: id.present ? id.value : this.id,
    idNfeDetalhe: idNfeDetalhe.present ? idNfeDetalhe.value : this.idNfeDetalhe,
    codigoAnp: codigoAnp.present ? codigoAnp.value : this.codigoAnp,
    descricaoAnp: descricaoAnp.present ? descricaoAnp.value : this.descricaoAnp,
    percentualGlp:
        percentualGlp.present ? percentualGlp.value : this.percentualGlp,
    percentualGasNacional:
        percentualGasNacional.present
            ? percentualGasNacional.value
            : this.percentualGasNacional,
    percentualGasImportado:
        percentualGasImportado.present
            ? percentualGasImportado.value
            : this.percentualGasImportado,
    valorPartida: valorPartida.present ? valorPartida.value : this.valorPartida,
    codif: codif.present ? codif.value : this.codif,
    quantidadeTempAmbiente:
        quantidadeTempAmbiente.present
            ? quantidadeTempAmbiente.value
            : this.quantidadeTempAmbiente,
    ufConsumo: ufConsumo.present ? ufConsumo.value : this.ufConsumo,
    cideBaseCalculo:
        cideBaseCalculo.present ? cideBaseCalculo.value : this.cideBaseCalculo,
    cideAliquota: cideAliquota.present ? cideAliquota.value : this.cideAliquota,
    cideValor: cideValor.present ? cideValor.value : this.cideValor,
    encerranteBico:
        encerranteBico.present ? encerranteBico.value : this.encerranteBico,
    encerranteBomba:
        encerranteBomba.present ? encerranteBomba.value : this.encerranteBomba,
    encerranteTanque:
        encerranteTanque.present
            ? encerranteTanque.value
            : this.encerranteTanque,
    encerranteValorInicio:
        encerranteValorInicio.present
            ? encerranteValorInicio.value
            : this.encerranteValorInicio,
    encerranteValorFim:
        encerranteValorFim.present
            ? encerranteValorFim.value
            : this.encerranteValorFim,
    percentualMisturaBiodiesel:
        percentualMisturaBiodiesel.present
            ? percentualMisturaBiodiesel.value
            : this.percentualMisturaBiodiesel,
  );
  NfeDetEspecificoCombustivel copyWithCompanion(
    NfeDetEspecificoCombustivelsCompanion data,
  ) {
    return NfeDetEspecificoCombustivel(
      id: data.id.present ? data.id.value : this.id,
      idNfeDetalhe:
          data.idNfeDetalhe.present
              ? data.idNfeDetalhe.value
              : this.idNfeDetalhe,
      codigoAnp: data.codigoAnp.present ? data.codigoAnp.value : this.codigoAnp,
      descricaoAnp:
          data.descricaoAnp.present
              ? data.descricaoAnp.value
              : this.descricaoAnp,
      percentualGlp:
          data.percentualGlp.present
              ? data.percentualGlp.value
              : this.percentualGlp,
      percentualGasNacional:
          data.percentualGasNacional.present
              ? data.percentualGasNacional.value
              : this.percentualGasNacional,
      percentualGasImportado:
          data.percentualGasImportado.present
              ? data.percentualGasImportado.value
              : this.percentualGasImportado,
      valorPartida:
          data.valorPartida.present
              ? data.valorPartida.value
              : this.valorPartida,
      codif: data.codif.present ? data.codif.value : this.codif,
      quantidadeTempAmbiente:
          data.quantidadeTempAmbiente.present
              ? data.quantidadeTempAmbiente.value
              : this.quantidadeTempAmbiente,
      ufConsumo: data.ufConsumo.present ? data.ufConsumo.value : this.ufConsumo,
      cideBaseCalculo:
          data.cideBaseCalculo.present
              ? data.cideBaseCalculo.value
              : this.cideBaseCalculo,
      cideAliquota:
          data.cideAliquota.present
              ? data.cideAliquota.value
              : this.cideAliquota,
      cideValor: data.cideValor.present ? data.cideValor.value : this.cideValor,
      encerranteBico:
          data.encerranteBico.present
              ? data.encerranteBico.value
              : this.encerranteBico,
      encerranteBomba:
          data.encerranteBomba.present
              ? data.encerranteBomba.value
              : this.encerranteBomba,
      encerranteTanque:
          data.encerranteTanque.present
              ? data.encerranteTanque.value
              : this.encerranteTanque,
      encerranteValorInicio:
          data.encerranteValorInicio.present
              ? data.encerranteValorInicio.value
              : this.encerranteValorInicio,
      encerranteValorFim:
          data.encerranteValorFim.present
              ? data.encerranteValorFim.value
              : this.encerranteValorFim,
      percentualMisturaBiodiesel:
          data.percentualMisturaBiodiesel.present
              ? data.percentualMisturaBiodiesel.value
              : this.percentualMisturaBiodiesel,
    );
  }

  @override
  String toString() {
    return (StringBuffer('NfeDetEspecificoCombustivel(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('codigoAnp: $codigoAnp, ')
          ..write('descricaoAnp: $descricaoAnp, ')
          ..write('percentualGlp: $percentualGlp, ')
          ..write('percentualGasNacional: $percentualGasNacional, ')
          ..write('percentualGasImportado: $percentualGasImportado, ')
          ..write('valorPartida: $valorPartida, ')
          ..write('codif: $codif, ')
          ..write('quantidadeTempAmbiente: $quantidadeTempAmbiente, ')
          ..write('ufConsumo: $ufConsumo, ')
          ..write('cideBaseCalculo: $cideBaseCalculo, ')
          ..write('cideAliquota: $cideAliquota, ')
          ..write('cideValor: $cideValor, ')
          ..write('encerranteBico: $encerranteBico, ')
          ..write('encerranteBomba: $encerranteBomba, ')
          ..write('encerranteTanque: $encerranteTanque, ')
          ..write('encerranteValorInicio: $encerranteValorInicio, ')
          ..write('encerranteValorFim: $encerranteValorFim, ')
          ..write('percentualMisturaBiodiesel: $percentualMisturaBiodiesel')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    idNfeDetalhe,
    codigoAnp,
    descricaoAnp,
    percentualGlp,
    percentualGasNacional,
    percentualGasImportado,
    valorPartida,
    codif,
    quantidadeTempAmbiente,
    ufConsumo,
    cideBaseCalculo,
    cideAliquota,
    cideValor,
    encerranteBico,
    encerranteBomba,
    encerranteTanque,
    encerranteValorInicio,
    encerranteValorFim,
    percentualMisturaBiodiesel,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeDetEspecificoCombustivel &&
          other.id == this.id &&
          other.idNfeDetalhe == this.idNfeDetalhe &&
          other.codigoAnp == this.codigoAnp &&
          other.descricaoAnp == this.descricaoAnp &&
          other.percentualGlp == this.percentualGlp &&
          other.percentualGasNacional == this.percentualGasNacional &&
          other.percentualGasImportado == this.percentualGasImportado &&
          other.valorPartida == this.valorPartida &&
          other.codif == this.codif &&
          other.quantidadeTempAmbiente == this.quantidadeTempAmbiente &&
          other.ufConsumo == this.ufConsumo &&
          other.cideBaseCalculo == this.cideBaseCalculo &&
          other.cideAliquota == this.cideAliquota &&
          other.cideValor == this.cideValor &&
          other.encerranteBico == this.encerranteBico &&
          other.encerranteBomba == this.encerranteBomba &&
          other.encerranteTanque == this.encerranteTanque &&
          other.encerranteValorInicio == this.encerranteValorInicio &&
          other.encerranteValorFim == this.encerranteValorFim &&
          other.percentualMisturaBiodiesel == this.percentualMisturaBiodiesel);
}

class NfeDetEspecificoCombustivelsCompanion
    extends UpdateCompanion<NfeDetEspecificoCombustivel> {
  final Value<int?> id;
  final Value<int?> idNfeDetalhe;
  final Value<int?> codigoAnp;
  final Value<String?> descricaoAnp;
  final Value<double?> percentualGlp;
  final Value<double?> percentualGasNacional;
  final Value<double?> percentualGasImportado;
  final Value<double?> valorPartida;
  final Value<String?> codif;
  final Value<double?> quantidadeTempAmbiente;
  final Value<String?> ufConsumo;
  final Value<double?> cideBaseCalculo;
  final Value<double?> cideAliquota;
  final Value<double?> cideValor;
  final Value<int?> encerranteBico;
  final Value<int?> encerranteBomba;
  final Value<int?> encerranteTanque;
  final Value<double?> encerranteValorInicio;
  final Value<double?> encerranteValorFim;
  final Value<double?> percentualMisturaBiodiesel;
  const NfeDetEspecificoCombustivelsCompanion({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.codigoAnp = const Value.absent(),
    this.descricaoAnp = const Value.absent(),
    this.percentualGlp = const Value.absent(),
    this.percentualGasNacional = const Value.absent(),
    this.percentualGasImportado = const Value.absent(),
    this.valorPartida = const Value.absent(),
    this.codif = const Value.absent(),
    this.quantidadeTempAmbiente = const Value.absent(),
    this.ufConsumo = const Value.absent(),
    this.cideBaseCalculo = const Value.absent(),
    this.cideAliquota = const Value.absent(),
    this.cideValor = const Value.absent(),
    this.encerranteBico = const Value.absent(),
    this.encerranteBomba = const Value.absent(),
    this.encerranteTanque = const Value.absent(),
    this.encerranteValorInicio = const Value.absent(),
    this.encerranteValorFim = const Value.absent(),
    this.percentualMisturaBiodiesel = const Value.absent(),
  });
  NfeDetEspecificoCombustivelsCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.codigoAnp = const Value.absent(),
    this.descricaoAnp = const Value.absent(),
    this.percentualGlp = const Value.absent(),
    this.percentualGasNacional = const Value.absent(),
    this.percentualGasImportado = const Value.absent(),
    this.valorPartida = const Value.absent(),
    this.codif = const Value.absent(),
    this.quantidadeTempAmbiente = const Value.absent(),
    this.ufConsumo = const Value.absent(),
    this.cideBaseCalculo = const Value.absent(),
    this.cideAliquota = const Value.absent(),
    this.cideValor = const Value.absent(),
    this.encerranteBico = const Value.absent(),
    this.encerranteBomba = const Value.absent(),
    this.encerranteTanque = const Value.absent(),
    this.encerranteValorInicio = const Value.absent(),
    this.encerranteValorFim = const Value.absent(),
    this.percentualMisturaBiodiesel = const Value.absent(),
  });
  static Insertable<NfeDetEspecificoCombustivel> custom({
    Expression<int>? id,
    Expression<int>? idNfeDetalhe,
    Expression<int>? codigoAnp,
    Expression<String>? descricaoAnp,
    Expression<double>? percentualGlp,
    Expression<double>? percentualGasNacional,
    Expression<double>? percentualGasImportado,
    Expression<double>? valorPartida,
    Expression<String>? codif,
    Expression<double>? quantidadeTempAmbiente,
    Expression<String>? ufConsumo,
    Expression<double>? cideBaseCalculo,
    Expression<double>? cideAliquota,
    Expression<double>? cideValor,
    Expression<int>? encerranteBico,
    Expression<int>? encerranteBomba,
    Expression<int>? encerranteTanque,
    Expression<double>? encerranteValorInicio,
    Expression<double>? encerranteValorFim,
    Expression<double>? percentualMisturaBiodiesel,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (idNfeDetalhe != null) 'id_nfe_detalhe': idNfeDetalhe,
      if (codigoAnp != null) 'codigo_anp': codigoAnp,
      if (descricaoAnp != null) 'descricao_anp': descricaoAnp,
      if (percentualGlp != null) 'percentual_glp': percentualGlp,
      if (percentualGasNacional != null)
        'percentual_gas_nacional': percentualGasNacional,
      if (percentualGasImportado != null)
        'percentual_gas_importado': percentualGasImportado,
      if (valorPartida != null) 'valor_partida': valorPartida,
      if (codif != null) 'codif': codif,
      if (quantidadeTempAmbiente != null)
        'quantidade_temp_ambiente': quantidadeTempAmbiente,
      if (ufConsumo != null) 'uf_consumo': ufConsumo,
      if (cideBaseCalculo != null) 'cide_base_calculo': cideBaseCalculo,
      if (cideAliquota != null) 'cide_aliquota': cideAliquota,
      if (cideValor != null) 'cide_valor': cideValor,
      if (encerranteBico != null) 'encerrante_bico': encerranteBico,
      if (encerranteBomba != null) 'encerrante_bomba': encerranteBomba,
      if (encerranteTanque != null) 'encerrante_tanque': encerranteTanque,
      if (encerranteValorInicio != null)
        'encerrante_valor_inicio': encerranteValorInicio,
      if (encerranteValorFim != null)
        'encerrante_valor_fim': encerranteValorFim,
      if (percentualMisturaBiodiesel != null)
        'percentual_mistura_biodiesel': percentualMisturaBiodiesel,
    });
  }

  NfeDetEspecificoCombustivelsCompanion copyWith({
    Value<int?>? id,
    Value<int?>? idNfeDetalhe,
    Value<int?>? codigoAnp,
    Value<String?>? descricaoAnp,
    Value<double?>? percentualGlp,
    Value<double?>? percentualGasNacional,
    Value<double?>? percentualGasImportado,
    Value<double?>? valorPartida,
    Value<String?>? codif,
    Value<double?>? quantidadeTempAmbiente,
    Value<String?>? ufConsumo,
    Value<double?>? cideBaseCalculo,
    Value<double?>? cideAliquota,
    Value<double?>? cideValor,
    Value<int?>? encerranteBico,
    Value<int?>? encerranteBomba,
    Value<int?>? encerranteTanque,
    Value<double?>? encerranteValorInicio,
    Value<double?>? encerranteValorFim,
    Value<double?>? percentualMisturaBiodiesel,
  }) {
    return NfeDetEspecificoCombustivelsCompanion(
      id: id ?? this.id,
      idNfeDetalhe: idNfeDetalhe ?? this.idNfeDetalhe,
      codigoAnp: codigoAnp ?? this.codigoAnp,
      descricaoAnp: descricaoAnp ?? this.descricaoAnp,
      percentualGlp: percentualGlp ?? this.percentualGlp,
      percentualGasNacional:
          percentualGasNacional ?? this.percentualGasNacional,
      percentualGasImportado:
          percentualGasImportado ?? this.percentualGasImportado,
      valorPartida: valorPartida ?? this.valorPartida,
      codif: codif ?? this.codif,
      quantidadeTempAmbiente:
          quantidadeTempAmbiente ?? this.quantidadeTempAmbiente,
      ufConsumo: ufConsumo ?? this.ufConsumo,
      cideBaseCalculo: cideBaseCalculo ?? this.cideBaseCalculo,
      cideAliquota: cideAliquota ?? this.cideAliquota,
      cideValor: cideValor ?? this.cideValor,
      encerranteBico: encerranteBico ?? this.encerranteBico,
      encerranteBomba: encerranteBomba ?? this.encerranteBomba,
      encerranteTanque: encerranteTanque ?? this.encerranteTanque,
      encerranteValorInicio:
          encerranteValorInicio ?? this.encerranteValorInicio,
      encerranteValorFim: encerranteValorFim ?? this.encerranteValorFim,
      percentualMisturaBiodiesel:
          percentualMisturaBiodiesel ?? this.percentualMisturaBiodiesel,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (idNfeDetalhe.present) {
      map['id_nfe_detalhe'] = Variable<int>(idNfeDetalhe.value);
    }
    if (codigoAnp.present) {
      map['codigo_anp'] = Variable<int>(codigoAnp.value);
    }
    if (descricaoAnp.present) {
      map['descricao_anp'] = Variable<String>(descricaoAnp.value);
    }
    if (percentualGlp.present) {
      map['percentual_glp'] = Variable<double>(percentualGlp.value);
    }
    if (percentualGasNacional.present) {
      map['percentual_gas_nacional'] = Variable<double>(
        percentualGasNacional.value,
      );
    }
    if (percentualGasImportado.present) {
      map['percentual_gas_importado'] = Variable<double>(
        percentualGasImportado.value,
      );
    }
    if (valorPartida.present) {
      map['valor_partida'] = Variable<double>(valorPartida.value);
    }
    if (codif.present) {
      map['codif'] = Variable<String>(codif.value);
    }
    if (quantidadeTempAmbiente.present) {
      map['quantidade_temp_ambiente'] = Variable<double>(
        quantidadeTempAmbiente.value,
      );
    }
    if (ufConsumo.present) {
      map['uf_consumo'] = Variable<String>(ufConsumo.value);
    }
    if (cideBaseCalculo.present) {
      map['cide_base_calculo'] = Variable<double>(cideBaseCalculo.value);
    }
    if (cideAliquota.present) {
      map['cide_aliquota'] = Variable<double>(cideAliquota.value);
    }
    if (cideValor.present) {
      map['cide_valor'] = Variable<double>(cideValor.value);
    }
    if (encerranteBico.present) {
      map['encerrante_bico'] = Variable<int>(encerranteBico.value);
    }
    if (encerranteBomba.present) {
      map['encerrante_bomba'] = Variable<int>(encerranteBomba.value);
    }
    if (encerranteTanque.present) {
      map['encerrante_tanque'] = Variable<int>(encerranteTanque.value);
    }
    if (encerranteValorInicio.present) {
      map['encerrante_valor_inicio'] = Variable<double>(
        encerranteValorInicio.value,
      );
    }
    if (encerranteValorFim.present) {
      map['encerrante_valor_fim'] = Variable<double>(encerranteValorFim.value);
    }
    if (percentualMisturaBiodiesel.present) {
      map['percentual_mistura_biodiesel'] = Variable<double>(
        percentualMisturaBiodiesel.value,
      );
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeDetEspecificoCombustivelsCompanion(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('codigoAnp: $codigoAnp, ')
          ..write('descricaoAnp: $descricaoAnp, ')
          ..write('percentualGlp: $percentualGlp, ')
          ..write('percentualGasNacional: $percentualGasNacional, ')
          ..write('percentualGasImportado: $percentualGasImportado, ')
          ..write('valorPartida: $valorPartida, ')
          ..write('codif: $codif, ')
          ..write('quantidadeTempAmbiente: $quantidadeTempAmbiente, ')
          ..write('ufConsumo: $ufConsumo, ')
          ..write('cideBaseCalculo: $cideBaseCalculo, ')
          ..write('cideAliquota: $cideAliquota, ')
          ..write('cideValor: $cideValor, ')
          ..write('encerranteBico: $encerranteBico, ')
          ..write('encerranteBomba: $encerranteBomba, ')
          ..write('encerranteTanque: $encerranteTanque, ')
          ..write('encerranteValorInicio: $encerranteValorInicio, ')
          ..write('encerranteValorFim: $encerranteValorFim, ')
          ..write('percentualMisturaBiodiesel: $percentualMisturaBiodiesel')
          ..write(')'))
        .toString();
  }
}

class $NfeTransportesTable extends NfeTransportes
    with TableInfo<$NfeTransportesTable, NfeTransporte> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeTransportesTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
    'id',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idNfeCabecalhoMeta = const VerificationMeta(
    'idNfeCabecalho',
  );
  @override
  late final GeneratedColumn<int> idNfeCabecalho = GeneratedColumn<int>(
    'id_nfe_cabecalho',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idTransportadoraMeta = const VerificationMeta(
    'idTransportadora',
  );
  @override
  late final GeneratedColumn<int> idTransportadora = GeneratedColumn<int>(
    'id_transportadora',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _modalidadeFreteMeta = const VerificationMeta(
    'modalidadeFrete',
  );
  @override
  late final GeneratedColumn<String> modalidadeFrete = GeneratedColumn<String>(
    'modalidade_frete',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 1,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _cnpjMeta = const VerificationMeta('cnpj');
  @override
  late final GeneratedColumn<String> cnpj = GeneratedColumn<String>(
    'cnpj',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 14,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _cpfMeta = const VerificationMeta('cpf');
  @override
  late final GeneratedColumn<String> cpf = GeneratedColumn<String>(
    'cpf',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 11,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _nomeMeta = const VerificationMeta('nome');
  @override
  late final GeneratedColumn<String> nome = GeneratedColumn<String>(
    'nome',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 60,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _inscricaoEstadualMeta = const VerificationMeta(
    'inscricaoEstadual',
  );
  @override
  late final GeneratedColumn<String> inscricaoEstadual =
      GeneratedColumn<String>(
        'inscricao_estadual',
        aliasedName,
        true,
        additionalChecks: GeneratedColumn.checkTextLength(
          minTextLength: 0,
          maxTextLength: 14,
        ),
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _enderecoMeta = const VerificationMeta(
    'endereco',
  );
  @override
  late final GeneratedColumn<String> endereco = GeneratedColumn<String>(
    'endereco',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 60,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _nomeMunicipioMeta = const VerificationMeta(
    'nomeMunicipio',
  );
  @override
  late final GeneratedColumn<String> nomeMunicipio = GeneratedColumn<String>(
    'nome_municipio',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 60,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _ufMeta = const VerificationMeta('uf');
  @override
  late final GeneratedColumn<String> uf = GeneratedColumn<String>(
    'uf',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 2,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _valorServicoMeta = const VerificationMeta(
    'valorServico',
  );
  @override
  late final GeneratedColumn<double> valorServico = GeneratedColumn<double>(
    'valor_servico',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _valorBcRetencaoIcmsMeta =
      const VerificationMeta('valorBcRetencaoIcms');
  @override
  late final GeneratedColumn<double> valorBcRetencaoIcms =
      GeneratedColumn<double>(
        'valor_bc_retencao_icms',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _aliquotaRetencaoIcmsMeta =
      const VerificationMeta('aliquotaRetencaoIcms');
  @override
  late final GeneratedColumn<double> aliquotaRetencaoIcms =
      GeneratedColumn<double>(
        'aliquota_retencao_icms',
        aliasedName,
        true,
        type: DriftSqlType.double,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _valorIcmsRetidoMeta = const VerificationMeta(
    'valorIcmsRetido',
  );
  @override
  late final GeneratedColumn<double> valorIcmsRetido = GeneratedColumn<double>(
    'valor_icms_retido',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _cfopMeta = const VerificationMeta('cfop');
  @override
  late final GeneratedColumn<int> cfop = GeneratedColumn<int>(
    'cfop',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _municipioMeta = const VerificationMeta(
    'municipio',
  );
  @override
  late final GeneratedColumn<int> municipio = GeneratedColumn<int>(
    'municipio',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _placaVeiculoMeta = const VerificationMeta(
    'placaVeiculo',
  );
  @override
  late final GeneratedColumn<String> placaVeiculo = GeneratedColumn<String>(
    'placa_veiculo',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 7,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _ufVeiculoMeta = const VerificationMeta(
    'ufVeiculo',
  );
  @override
  late final GeneratedColumn<String> ufVeiculo = GeneratedColumn<String>(
    'uf_veiculo',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 2,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _rntcVeiculoMeta = const VerificationMeta(
    'rntcVeiculo',
  );
  @override
  late final GeneratedColumn<String> rntcVeiculo = GeneratedColumn<String>(
    'rntc_veiculo',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 20,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    idNfeCabecalho,
    idTransportadora,
    modalidadeFrete,
    cnpj,
    cpf,
    nome,
    inscricaoEstadual,
    endereco,
    nomeMunicipio,
    uf,
    valorServico,
    valorBcRetencaoIcms,
    aliquotaRetencaoIcms,
    valorIcmsRetido,
    cfop,
    municipio,
    placaVeiculo,
    ufVeiculo,
    rntcVeiculo,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'nfe_transporte';
  @override
  VerificationContext validateIntegrity(
    Insertable<NfeTransporte> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('id_nfe_cabecalho')) {
      context.handle(
        _idNfeCabecalhoMeta,
        idNfeCabecalho.isAcceptableOrUnknown(
          data['id_nfe_cabecalho']!,
          _idNfeCabecalhoMeta,
        ),
      );
    }
    if (data.containsKey('id_transportadora')) {
      context.handle(
        _idTransportadoraMeta,
        idTransportadora.isAcceptableOrUnknown(
          data['id_transportadora']!,
          _idTransportadoraMeta,
        ),
      );
    }
    if (data.containsKey('modalidade_frete')) {
      context.handle(
        _modalidadeFreteMeta,
        modalidadeFrete.isAcceptableOrUnknown(
          data['modalidade_frete']!,
          _modalidadeFreteMeta,
        ),
      );
    }
    if (data.containsKey('cnpj')) {
      context.handle(
        _cnpjMeta,
        cnpj.isAcceptableOrUnknown(data['cnpj']!, _cnpjMeta),
      );
    }
    if (data.containsKey('cpf')) {
      context.handle(
        _cpfMeta,
        cpf.isAcceptableOrUnknown(data['cpf']!, _cpfMeta),
      );
    }
    if (data.containsKey('nome')) {
      context.handle(
        _nomeMeta,
        nome.isAcceptableOrUnknown(data['nome']!, _nomeMeta),
      );
    }
    if (data.containsKey('inscricao_estadual')) {
      context.handle(
        _inscricaoEstadualMeta,
        inscricaoEstadual.isAcceptableOrUnknown(
          data['inscricao_estadual']!,
          _inscricaoEstadualMeta,
        ),
      );
    }
    if (data.containsKey('endereco')) {
      context.handle(
        _enderecoMeta,
        endereco.isAcceptableOrUnknown(data['endereco']!, _enderecoMeta),
      );
    }
    if (data.containsKey('nome_municipio')) {
      context.handle(
        _nomeMunicipioMeta,
        nomeMunicipio.isAcceptableOrUnknown(
          data['nome_municipio']!,
          _nomeMunicipioMeta,
        ),
      );
    }
    if (data.containsKey('uf')) {
      context.handle(_ufMeta, uf.isAcceptableOrUnknown(data['uf']!, _ufMeta));
    }
    if (data.containsKey('valor_servico')) {
      context.handle(
        _valorServicoMeta,
        valorServico.isAcceptableOrUnknown(
          data['valor_servico']!,
          _valorServicoMeta,
        ),
      );
    }
    if (data.containsKey('valor_bc_retencao_icms')) {
      context.handle(
        _valorBcRetencaoIcmsMeta,
        valorBcRetencaoIcms.isAcceptableOrUnknown(
          data['valor_bc_retencao_icms']!,
          _valorBcRetencaoIcmsMeta,
        ),
      );
    }
    if (data.containsKey('aliquota_retencao_icms')) {
      context.handle(
        _aliquotaRetencaoIcmsMeta,
        aliquotaRetencaoIcms.isAcceptableOrUnknown(
          data['aliquota_retencao_icms']!,
          _aliquotaRetencaoIcmsMeta,
        ),
      );
    }
    if (data.containsKey('valor_icms_retido')) {
      context.handle(
        _valorIcmsRetidoMeta,
        valorIcmsRetido.isAcceptableOrUnknown(
          data['valor_icms_retido']!,
          _valorIcmsRetidoMeta,
        ),
      );
    }
    if (data.containsKey('cfop')) {
      context.handle(
        _cfopMeta,
        cfop.isAcceptableOrUnknown(data['cfop']!, _cfopMeta),
      );
    }
    if (data.containsKey('municipio')) {
      context.handle(
        _municipioMeta,
        municipio.isAcceptableOrUnknown(data['municipio']!, _municipioMeta),
      );
    }
    if (data.containsKey('placa_veiculo')) {
      context.handle(
        _placaVeiculoMeta,
        placaVeiculo.isAcceptableOrUnknown(
          data['placa_veiculo']!,
          _placaVeiculoMeta,
        ),
      );
    }
    if (data.containsKey('uf_veiculo')) {
      context.handle(
        _ufVeiculoMeta,
        ufVeiculo.isAcceptableOrUnknown(data['uf_veiculo']!, _ufVeiculoMeta),
      );
    }
    if (data.containsKey('rntc_veiculo')) {
      context.handle(
        _rntcVeiculoMeta,
        rntcVeiculo.isAcceptableOrUnknown(
          data['rntc_veiculo']!,
          _rntcVeiculoMeta,
        ),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeTransporte map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return NfeTransporte(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id'],
      ),
      idNfeCabecalho: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_nfe_cabecalho'],
      ),
      idTransportadora: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_transportadora'],
      ),
      modalidadeFrete: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}modalidade_frete'],
      ),
      cnpj: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}cnpj'],
      ),
      cpf: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}cpf'],
      ),
      nome: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}nome'],
      ),
      inscricaoEstadual: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}inscricao_estadual'],
      ),
      endereco: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}endereco'],
      ),
      nomeMunicipio: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}nome_municipio'],
      ),
      uf: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}uf'],
      ),
      valorServico: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_servico'],
      ),
      valorBcRetencaoIcms: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_bc_retencao_icms'],
      ),
      aliquotaRetencaoIcms: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}aliquota_retencao_icms'],
      ),
      valorIcmsRetido: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_icms_retido'],
      ),
      cfop: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}cfop'],
      ),
      municipio: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}municipio'],
      ),
      placaVeiculo: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}placa_veiculo'],
      ),
      ufVeiculo: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}uf_veiculo'],
      ),
      rntcVeiculo: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}rntc_veiculo'],
      ),
    );
  }

  @override
  $NfeTransportesTable createAlias(String alias) {
    return $NfeTransportesTable(attachedDatabase, alias);
  }
}

class NfeTransporte extends DataClass implements Insertable<NfeTransporte> {
  final int? id;
  final int? idNfeCabecalho;
  final int? idTransportadora;
  final String? modalidadeFrete;
  final String? cnpj;
  final String? cpf;
  final String? nome;
  final String? inscricaoEstadual;
  final String? endereco;
  final String? nomeMunicipio;
  final String? uf;
  final double? valorServico;
  final double? valorBcRetencaoIcms;
  final double? aliquotaRetencaoIcms;
  final double? valorIcmsRetido;
  final int? cfop;
  final int? municipio;
  final String? placaVeiculo;
  final String? ufVeiculo;
  final String? rntcVeiculo;
  const NfeTransporte({
    this.id,
    this.idNfeCabecalho,
    this.idTransportadora,
    this.modalidadeFrete,
    this.cnpj,
    this.cpf,
    this.nome,
    this.inscricaoEstadual,
    this.endereco,
    this.nomeMunicipio,
    this.uf,
    this.valorServico,
    this.valorBcRetencaoIcms,
    this.aliquotaRetencaoIcms,
    this.valorIcmsRetido,
    this.cfop,
    this.municipio,
    this.placaVeiculo,
    this.ufVeiculo,
    this.rntcVeiculo,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeCabecalho != null) {
      map['id_nfe_cabecalho'] = Variable<int>(idNfeCabecalho);
    }
    if (!nullToAbsent || idTransportadora != null) {
      map['id_transportadora'] = Variable<int>(idTransportadora);
    }
    if (!nullToAbsent || modalidadeFrete != null) {
      map['modalidade_frete'] = Variable<String>(modalidadeFrete);
    }
    if (!nullToAbsent || cnpj != null) {
      map['cnpj'] = Variable<String>(cnpj);
    }
    if (!nullToAbsent || cpf != null) {
      map['cpf'] = Variable<String>(cpf);
    }
    if (!nullToAbsent || nome != null) {
      map['nome'] = Variable<String>(nome);
    }
    if (!nullToAbsent || inscricaoEstadual != null) {
      map['inscricao_estadual'] = Variable<String>(inscricaoEstadual);
    }
    if (!nullToAbsent || endereco != null) {
      map['endereco'] = Variable<String>(endereco);
    }
    if (!nullToAbsent || nomeMunicipio != null) {
      map['nome_municipio'] = Variable<String>(nomeMunicipio);
    }
    if (!nullToAbsent || uf != null) {
      map['uf'] = Variable<String>(uf);
    }
    if (!nullToAbsent || valorServico != null) {
      map['valor_servico'] = Variable<double>(valorServico);
    }
    if (!nullToAbsent || valorBcRetencaoIcms != null) {
      map['valor_bc_retencao_icms'] = Variable<double>(valorBcRetencaoIcms);
    }
    if (!nullToAbsent || aliquotaRetencaoIcms != null) {
      map['aliquota_retencao_icms'] = Variable<double>(aliquotaRetencaoIcms);
    }
    if (!nullToAbsent || valorIcmsRetido != null) {
      map['valor_icms_retido'] = Variable<double>(valorIcmsRetido);
    }
    if (!nullToAbsent || cfop != null) {
      map['cfop'] = Variable<int>(cfop);
    }
    if (!nullToAbsent || municipio != null) {
      map['municipio'] = Variable<int>(municipio);
    }
    if (!nullToAbsent || placaVeiculo != null) {
      map['placa_veiculo'] = Variable<String>(placaVeiculo);
    }
    if (!nullToAbsent || ufVeiculo != null) {
      map['uf_veiculo'] = Variable<String>(ufVeiculo);
    }
    if (!nullToAbsent || rntcVeiculo != null) {
      map['rntc_veiculo'] = Variable<String>(rntcVeiculo);
    }
    return map;
  }

  factory NfeTransporte.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeTransporte(
      id: serializer.fromJson<int?>(json['id']),
      idNfeCabecalho: serializer.fromJson<int?>(json['idNfeCabecalho']),
      idTransportadora: serializer.fromJson<int?>(json['idTransportadora']),
      modalidadeFrete: serializer.fromJson<String?>(json['modalidadeFrete']),
      cnpj: serializer.fromJson<String?>(json['cnpj']),
      cpf: serializer.fromJson<String?>(json['cpf']),
      nome: serializer.fromJson<String?>(json['nome']),
      inscricaoEstadual: serializer.fromJson<String?>(
        json['inscricaoEstadual'],
      ),
      endereco: serializer.fromJson<String?>(json['endereco']),
      nomeMunicipio: serializer.fromJson<String?>(json['nomeMunicipio']),
      uf: serializer.fromJson<String?>(json['uf']),
      valorServico: serializer.fromJson<double?>(json['valorServico']),
      valorBcRetencaoIcms: serializer.fromJson<double?>(
        json['valorBcRetencaoIcms'],
      ),
      aliquotaRetencaoIcms: serializer.fromJson<double?>(
        json['aliquotaRetencaoIcms'],
      ),
      valorIcmsRetido: serializer.fromJson<double?>(json['valorIcmsRetido']),
      cfop: serializer.fromJson<int?>(json['cfop']),
      municipio: serializer.fromJson<int?>(json['municipio']),
      placaVeiculo: serializer.fromJson<String?>(json['placaVeiculo']),
      ufVeiculo: serializer.fromJson<String?>(json['ufVeiculo']),
      rntcVeiculo: serializer.fromJson<String?>(json['rntcVeiculo']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeCabecalho': serializer.toJson<int?>(idNfeCabecalho),
      'idTransportadora': serializer.toJson<int?>(idTransportadora),
      'modalidadeFrete': serializer.toJson<String?>(modalidadeFrete),
      'cnpj': serializer.toJson<String?>(cnpj),
      'cpf': serializer.toJson<String?>(cpf),
      'nome': serializer.toJson<String?>(nome),
      'inscricaoEstadual': serializer.toJson<String?>(inscricaoEstadual),
      'endereco': serializer.toJson<String?>(endereco),
      'nomeMunicipio': serializer.toJson<String?>(nomeMunicipio),
      'uf': serializer.toJson<String?>(uf),
      'valorServico': serializer.toJson<double?>(valorServico),
      'valorBcRetencaoIcms': serializer.toJson<double?>(valorBcRetencaoIcms),
      'aliquotaRetencaoIcms': serializer.toJson<double?>(aliquotaRetencaoIcms),
      'valorIcmsRetido': serializer.toJson<double?>(valorIcmsRetido),
      'cfop': serializer.toJson<int?>(cfop),
      'municipio': serializer.toJson<int?>(municipio),
      'placaVeiculo': serializer.toJson<String?>(placaVeiculo),
      'ufVeiculo': serializer.toJson<String?>(ufVeiculo),
      'rntcVeiculo': serializer.toJson<String?>(rntcVeiculo),
    };
  }

  NfeTransporte copyWith({
    Value<int?> id = const Value.absent(),
    Value<int?> idNfeCabecalho = const Value.absent(),
    Value<int?> idTransportadora = const Value.absent(),
    Value<String?> modalidadeFrete = const Value.absent(),
    Value<String?> cnpj = const Value.absent(),
    Value<String?> cpf = const Value.absent(),
    Value<String?> nome = const Value.absent(),
    Value<String?> inscricaoEstadual = const Value.absent(),
    Value<String?> endereco = const Value.absent(),
    Value<String?> nomeMunicipio = const Value.absent(),
    Value<String?> uf = const Value.absent(),
    Value<double?> valorServico = const Value.absent(),
    Value<double?> valorBcRetencaoIcms = const Value.absent(),
    Value<double?> aliquotaRetencaoIcms = const Value.absent(),
    Value<double?> valorIcmsRetido = const Value.absent(),
    Value<int?> cfop = const Value.absent(),
    Value<int?> municipio = const Value.absent(),
    Value<String?> placaVeiculo = const Value.absent(),
    Value<String?> ufVeiculo = const Value.absent(),
    Value<String?> rntcVeiculo = const Value.absent(),
  }) => NfeTransporte(
    id: id.present ? id.value : this.id,
    idNfeCabecalho:
        idNfeCabecalho.present ? idNfeCabecalho.value : this.idNfeCabecalho,
    idTransportadora:
        idTransportadora.present
            ? idTransportadora.value
            : this.idTransportadora,
    modalidadeFrete:
        modalidadeFrete.present ? modalidadeFrete.value : this.modalidadeFrete,
    cnpj: cnpj.present ? cnpj.value : this.cnpj,
    cpf: cpf.present ? cpf.value : this.cpf,
    nome: nome.present ? nome.value : this.nome,
    inscricaoEstadual:
        inscricaoEstadual.present
            ? inscricaoEstadual.value
            : this.inscricaoEstadual,
    endereco: endereco.present ? endereco.value : this.endereco,
    nomeMunicipio:
        nomeMunicipio.present ? nomeMunicipio.value : this.nomeMunicipio,
    uf: uf.present ? uf.value : this.uf,
    valorServico: valorServico.present ? valorServico.value : this.valorServico,
    valorBcRetencaoIcms:
        valorBcRetencaoIcms.present
            ? valorBcRetencaoIcms.value
            : this.valorBcRetencaoIcms,
    aliquotaRetencaoIcms:
        aliquotaRetencaoIcms.present
            ? aliquotaRetencaoIcms.value
            : this.aliquotaRetencaoIcms,
    valorIcmsRetido:
        valorIcmsRetido.present ? valorIcmsRetido.value : this.valorIcmsRetido,
    cfop: cfop.present ? cfop.value : this.cfop,
    municipio: municipio.present ? municipio.value : this.municipio,
    placaVeiculo: placaVeiculo.present ? placaVeiculo.value : this.placaVeiculo,
    ufVeiculo: ufVeiculo.present ? ufVeiculo.value : this.ufVeiculo,
    rntcVeiculo: rntcVeiculo.present ? rntcVeiculo.value : this.rntcVeiculo,
  );
  NfeTransporte copyWithCompanion(NfeTransportesCompanion data) {
    return NfeTransporte(
      id: data.id.present ? data.id.value : this.id,
      idNfeCabecalho:
          data.idNfeCabecalho.present
              ? data.idNfeCabecalho.value
              : this.idNfeCabecalho,
      idTransportadora:
          data.idTransportadora.present
              ? data.idTransportadora.value
              : this.idTransportadora,
      modalidadeFrete:
          data.modalidadeFrete.present
              ? data.modalidadeFrete.value
              : this.modalidadeFrete,
      cnpj: data.cnpj.present ? data.cnpj.value : this.cnpj,
      cpf: data.cpf.present ? data.cpf.value : this.cpf,
      nome: data.nome.present ? data.nome.value : this.nome,
      inscricaoEstadual:
          data.inscricaoEstadual.present
              ? data.inscricaoEstadual.value
              : this.inscricaoEstadual,
      endereco: data.endereco.present ? data.endereco.value : this.endereco,
      nomeMunicipio:
          data.nomeMunicipio.present
              ? data.nomeMunicipio.value
              : this.nomeMunicipio,
      uf: data.uf.present ? data.uf.value : this.uf,
      valorServico:
          data.valorServico.present
              ? data.valorServico.value
              : this.valorServico,
      valorBcRetencaoIcms:
          data.valorBcRetencaoIcms.present
              ? data.valorBcRetencaoIcms.value
              : this.valorBcRetencaoIcms,
      aliquotaRetencaoIcms:
          data.aliquotaRetencaoIcms.present
              ? data.aliquotaRetencaoIcms.value
              : this.aliquotaRetencaoIcms,
      valorIcmsRetido:
          data.valorIcmsRetido.present
              ? data.valorIcmsRetido.value
              : this.valorIcmsRetido,
      cfop: data.cfop.present ? data.cfop.value : this.cfop,
      municipio: data.municipio.present ? data.municipio.value : this.municipio,
      placaVeiculo:
          data.placaVeiculo.present
              ? data.placaVeiculo.value
              : this.placaVeiculo,
      ufVeiculo: data.ufVeiculo.present ? data.ufVeiculo.value : this.ufVeiculo,
      rntcVeiculo:
          data.rntcVeiculo.present ? data.rntcVeiculo.value : this.rntcVeiculo,
    );
  }

  @override
  String toString() {
    return (StringBuffer('NfeTransporte(')
          ..write('id: $id, ')
          ..write('idNfeCabecalho: $idNfeCabecalho, ')
          ..write('idTransportadora: $idTransportadora, ')
          ..write('modalidadeFrete: $modalidadeFrete, ')
          ..write('cnpj: $cnpj, ')
          ..write('cpf: $cpf, ')
          ..write('nome: $nome, ')
          ..write('inscricaoEstadual: $inscricaoEstadual, ')
          ..write('endereco: $endereco, ')
          ..write('nomeMunicipio: $nomeMunicipio, ')
          ..write('uf: $uf, ')
          ..write('valorServico: $valorServico, ')
          ..write('valorBcRetencaoIcms: $valorBcRetencaoIcms, ')
          ..write('aliquotaRetencaoIcms: $aliquotaRetencaoIcms, ')
          ..write('valorIcmsRetido: $valorIcmsRetido, ')
          ..write('cfop: $cfop, ')
          ..write('municipio: $municipio, ')
          ..write('placaVeiculo: $placaVeiculo, ')
          ..write('ufVeiculo: $ufVeiculo, ')
          ..write('rntcVeiculo: $rntcVeiculo')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    idNfeCabecalho,
    idTransportadora,
    modalidadeFrete,
    cnpj,
    cpf,
    nome,
    inscricaoEstadual,
    endereco,
    nomeMunicipio,
    uf,
    valorServico,
    valorBcRetencaoIcms,
    aliquotaRetencaoIcms,
    valorIcmsRetido,
    cfop,
    municipio,
    placaVeiculo,
    ufVeiculo,
    rntcVeiculo,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeTransporte &&
          other.id == this.id &&
          other.idNfeCabecalho == this.idNfeCabecalho &&
          other.idTransportadora == this.idTransportadora &&
          other.modalidadeFrete == this.modalidadeFrete &&
          other.cnpj == this.cnpj &&
          other.cpf == this.cpf &&
          other.nome == this.nome &&
          other.inscricaoEstadual == this.inscricaoEstadual &&
          other.endereco == this.endereco &&
          other.nomeMunicipio == this.nomeMunicipio &&
          other.uf == this.uf &&
          other.valorServico == this.valorServico &&
          other.valorBcRetencaoIcms == this.valorBcRetencaoIcms &&
          other.aliquotaRetencaoIcms == this.aliquotaRetencaoIcms &&
          other.valorIcmsRetido == this.valorIcmsRetido &&
          other.cfop == this.cfop &&
          other.municipio == this.municipio &&
          other.placaVeiculo == this.placaVeiculo &&
          other.ufVeiculo == this.ufVeiculo &&
          other.rntcVeiculo == this.rntcVeiculo);
}

class NfeTransportesCompanion extends UpdateCompanion<NfeTransporte> {
  final Value<int?> id;
  final Value<int?> idNfeCabecalho;
  final Value<int?> idTransportadora;
  final Value<String?> modalidadeFrete;
  final Value<String?> cnpj;
  final Value<String?> cpf;
  final Value<String?> nome;
  final Value<String?> inscricaoEstadual;
  final Value<String?> endereco;
  final Value<String?> nomeMunicipio;
  final Value<String?> uf;
  final Value<double?> valorServico;
  final Value<double?> valorBcRetencaoIcms;
  final Value<double?> aliquotaRetencaoIcms;
  final Value<double?> valorIcmsRetido;
  final Value<int?> cfop;
  final Value<int?> municipio;
  final Value<String?> placaVeiculo;
  final Value<String?> ufVeiculo;
  final Value<String?> rntcVeiculo;
  const NfeTransportesCompanion({
    this.id = const Value.absent(),
    this.idNfeCabecalho = const Value.absent(),
    this.idTransportadora = const Value.absent(),
    this.modalidadeFrete = const Value.absent(),
    this.cnpj = const Value.absent(),
    this.cpf = const Value.absent(),
    this.nome = const Value.absent(),
    this.inscricaoEstadual = const Value.absent(),
    this.endereco = const Value.absent(),
    this.nomeMunicipio = const Value.absent(),
    this.uf = const Value.absent(),
    this.valorServico = const Value.absent(),
    this.valorBcRetencaoIcms = const Value.absent(),
    this.aliquotaRetencaoIcms = const Value.absent(),
    this.valorIcmsRetido = const Value.absent(),
    this.cfop = const Value.absent(),
    this.municipio = const Value.absent(),
    this.placaVeiculo = const Value.absent(),
    this.ufVeiculo = const Value.absent(),
    this.rntcVeiculo = const Value.absent(),
  });
  NfeTransportesCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeCabecalho = const Value.absent(),
    this.idTransportadora = const Value.absent(),
    this.modalidadeFrete = const Value.absent(),
    this.cnpj = const Value.absent(),
    this.cpf = const Value.absent(),
    this.nome = const Value.absent(),
    this.inscricaoEstadual = const Value.absent(),
    this.endereco = const Value.absent(),
    this.nomeMunicipio = const Value.absent(),
    this.uf = const Value.absent(),
    this.valorServico = const Value.absent(),
    this.valorBcRetencaoIcms = const Value.absent(),
    this.aliquotaRetencaoIcms = const Value.absent(),
    this.valorIcmsRetido = const Value.absent(),
    this.cfop = const Value.absent(),
    this.municipio = const Value.absent(),
    this.placaVeiculo = const Value.absent(),
    this.ufVeiculo = const Value.absent(),
    this.rntcVeiculo = const Value.absent(),
  });
  static Insertable<NfeTransporte> custom({
    Expression<int>? id,
    Expression<int>? idNfeCabecalho,
    Expression<int>? idTransportadora,
    Expression<String>? modalidadeFrete,
    Expression<String>? cnpj,
    Expression<String>? cpf,
    Expression<String>? nome,
    Expression<String>? inscricaoEstadual,
    Expression<String>? endereco,
    Expression<String>? nomeMunicipio,
    Expression<String>? uf,
    Expression<double>? valorServico,
    Expression<double>? valorBcRetencaoIcms,
    Expression<double>? aliquotaRetencaoIcms,
    Expression<double>? valorIcmsRetido,
    Expression<int>? cfop,
    Expression<int>? municipio,
    Expression<String>? placaVeiculo,
    Expression<String>? ufVeiculo,
    Expression<String>? rntcVeiculo,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (idNfeCabecalho != null) 'id_nfe_cabecalho': idNfeCabecalho,
      if (idTransportadora != null) 'id_transportadora': idTransportadora,
      if (modalidadeFrete != null) 'modalidade_frete': modalidadeFrete,
      if (cnpj != null) 'cnpj': cnpj,
      if (cpf != null) 'cpf': cpf,
      if (nome != null) 'nome': nome,
      if (inscricaoEstadual != null) 'inscricao_estadual': inscricaoEstadual,
      if (endereco != null) 'endereco': endereco,
      if (nomeMunicipio != null) 'nome_municipio': nomeMunicipio,
      if (uf != null) 'uf': uf,
      if (valorServico != null) 'valor_servico': valorServico,
      if (valorBcRetencaoIcms != null)
        'valor_bc_retencao_icms': valorBcRetencaoIcms,
      if (aliquotaRetencaoIcms != null)
        'aliquota_retencao_icms': aliquotaRetencaoIcms,
      if (valorIcmsRetido != null) 'valor_icms_retido': valorIcmsRetido,
      if (cfop != null) 'cfop': cfop,
      if (municipio != null) 'municipio': municipio,
      if (placaVeiculo != null) 'placa_veiculo': placaVeiculo,
      if (ufVeiculo != null) 'uf_veiculo': ufVeiculo,
      if (rntcVeiculo != null) 'rntc_veiculo': rntcVeiculo,
    });
  }

  NfeTransportesCompanion copyWith({
    Value<int?>? id,
    Value<int?>? idNfeCabecalho,
    Value<int?>? idTransportadora,
    Value<String?>? modalidadeFrete,
    Value<String?>? cnpj,
    Value<String?>? cpf,
    Value<String?>? nome,
    Value<String?>? inscricaoEstadual,
    Value<String?>? endereco,
    Value<String?>? nomeMunicipio,
    Value<String?>? uf,
    Value<double?>? valorServico,
    Value<double?>? valorBcRetencaoIcms,
    Value<double?>? aliquotaRetencaoIcms,
    Value<double?>? valorIcmsRetido,
    Value<int?>? cfop,
    Value<int?>? municipio,
    Value<String?>? placaVeiculo,
    Value<String?>? ufVeiculo,
    Value<String?>? rntcVeiculo,
  }) {
    return NfeTransportesCompanion(
      id: id ?? this.id,
      idNfeCabecalho: idNfeCabecalho ?? this.idNfeCabecalho,
      idTransportadora: idTransportadora ?? this.idTransportadora,
      modalidadeFrete: modalidadeFrete ?? this.modalidadeFrete,
      cnpj: cnpj ?? this.cnpj,
      cpf: cpf ?? this.cpf,
      nome: nome ?? this.nome,
      inscricaoEstadual: inscricaoEstadual ?? this.inscricaoEstadual,
      endereco: endereco ?? this.endereco,
      nomeMunicipio: nomeMunicipio ?? this.nomeMunicipio,
      uf: uf ?? this.uf,
      valorServico: valorServico ?? this.valorServico,
      valorBcRetencaoIcms: valorBcRetencaoIcms ?? this.valorBcRetencaoIcms,
      aliquotaRetencaoIcms: aliquotaRetencaoIcms ?? this.aliquotaRetencaoIcms,
      valorIcmsRetido: valorIcmsRetido ?? this.valorIcmsRetido,
      cfop: cfop ?? this.cfop,
      municipio: municipio ?? this.municipio,
      placaVeiculo: placaVeiculo ?? this.placaVeiculo,
      ufVeiculo: ufVeiculo ?? this.ufVeiculo,
      rntcVeiculo: rntcVeiculo ?? this.rntcVeiculo,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (idNfeCabecalho.present) {
      map['id_nfe_cabecalho'] = Variable<int>(idNfeCabecalho.value);
    }
    if (idTransportadora.present) {
      map['id_transportadora'] = Variable<int>(idTransportadora.value);
    }
    if (modalidadeFrete.present) {
      map['modalidade_frete'] = Variable<String>(modalidadeFrete.value);
    }
    if (cnpj.present) {
      map['cnpj'] = Variable<String>(cnpj.value);
    }
    if (cpf.present) {
      map['cpf'] = Variable<String>(cpf.value);
    }
    if (nome.present) {
      map['nome'] = Variable<String>(nome.value);
    }
    if (inscricaoEstadual.present) {
      map['inscricao_estadual'] = Variable<String>(inscricaoEstadual.value);
    }
    if (endereco.present) {
      map['endereco'] = Variable<String>(endereco.value);
    }
    if (nomeMunicipio.present) {
      map['nome_municipio'] = Variable<String>(nomeMunicipio.value);
    }
    if (uf.present) {
      map['uf'] = Variable<String>(uf.value);
    }
    if (valorServico.present) {
      map['valor_servico'] = Variable<double>(valorServico.value);
    }
    if (valorBcRetencaoIcms.present) {
      map['valor_bc_retencao_icms'] = Variable<double>(
        valorBcRetencaoIcms.value,
      );
    }
    if (aliquotaRetencaoIcms.present) {
      map['aliquota_retencao_icms'] = Variable<double>(
        aliquotaRetencaoIcms.value,
      );
    }
    if (valorIcmsRetido.present) {
      map['valor_icms_retido'] = Variable<double>(valorIcmsRetido.value);
    }
    if (cfop.present) {
      map['cfop'] = Variable<int>(cfop.value);
    }
    if (municipio.present) {
      map['municipio'] = Variable<int>(municipio.value);
    }
    if (placaVeiculo.present) {
      map['placa_veiculo'] = Variable<String>(placaVeiculo.value);
    }
    if (ufVeiculo.present) {
      map['uf_veiculo'] = Variable<String>(ufVeiculo.value);
    }
    if (rntcVeiculo.present) {
      map['rntc_veiculo'] = Variable<String>(rntcVeiculo.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeTransportesCompanion(')
          ..write('id: $id, ')
          ..write('idNfeCabecalho: $idNfeCabecalho, ')
          ..write('idTransportadora: $idTransportadora, ')
          ..write('modalidadeFrete: $modalidadeFrete, ')
          ..write('cnpj: $cnpj, ')
          ..write('cpf: $cpf, ')
          ..write('nome: $nome, ')
          ..write('inscricaoEstadual: $inscricaoEstadual, ')
          ..write('endereco: $endereco, ')
          ..write('nomeMunicipio: $nomeMunicipio, ')
          ..write('uf: $uf, ')
          ..write('valorServico: $valorServico, ')
          ..write('valorBcRetencaoIcms: $valorBcRetencaoIcms, ')
          ..write('aliquotaRetencaoIcms: $aliquotaRetencaoIcms, ')
          ..write('valorIcmsRetido: $valorIcmsRetido, ')
          ..write('cfop: $cfop, ')
          ..write('municipio: $municipio, ')
          ..write('placaVeiculo: $placaVeiculo, ')
          ..write('ufVeiculo: $ufVeiculo, ')
          ..write('rntcVeiculo: $rntcVeiculo')
          ..write(')'))
        .toString();
  }
}

class $NfeFaturasTable extends NfeFaturas
    with TableInfo<$NfeFaturasTable, NfeFatura> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeFaturasTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
    'id',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idNfeCabecalhoMeta = const VerificationMeta(
    'idNfeCabecalho',
  );
  @override
  late final GeneratedColumn<int> idNfeCabecalho = GeneratedColumn<int>(
    'id_nfe_cabecalho',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _numeroMeta = const VerificationMeta('numero');
  @override
  late final GeneratedColumn<String> numero = GeneratedColumn<String>(
    'numero',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 60,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _valorOriginalMeta = const VerificationMeta(
    'valorOriginal',
  );
  @override
  late final GeneratedColumn<double> valorOriginal = GeneratedColumn<double>(
    'valor_original',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _valorDescontoMeta = const VerificationMeta(
    'valorDesconto',
  );
  @override
  late final GeneratedColumn<double> valorDesconto = GeneratedColumn<double>(
    'valor_desconto',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _valorLiquidoMeta = const VerificationMeta(
    'valorLiquido',
  );
  @override
  late final GeneratedColumn<double> valorLiquido = GeneratedColumn<double>(
    'valor_liquido',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    idNfeCabecalho,
    numero,
    valorOriginal,
    valorDesconto,
    valorLiquido,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'nfe_fatura';
  @override
  VerificationContext validateIntegrity(
    Insertable<NfeFatura> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('id_nfe_cabecalho')) {
      context.handle(
        _idNfeCabecalhoMeta,
        idNfeCabecalho.isAcceptableOrUnknown(
          data['id_nfe_cabecalho']!,
          _idNfeCabecalhoMeta,
        ),
      );
    }
    if (data.containsKey('numero')) {
      context.handle(
        _numeroMeta,
        numero.isAcceptableOrUnknown(data['numero']!, _numeroMeta),
      );
    }
    if (data.containsKey('valor_original')) {
      context.handle(
        _valorOriginalMeta,
        valorOriginal.isAcceptableOrUnknown(
          data['valor_original']!,
          _valorOriginalMeta,
        ),
      );
    }
    if (data.containsKey('valor_desconto')) {
      context.handle(
        _valorDescontoMeta,
        valorDesconto.isAcceptableOrUnknown(
          data['valor_desconto']!,
          _valorDescontoMeta,
        ),
      );
    }
    if (data.containsKey('valor_liquido')) {
      context.handle(
        _valorLiquidoMeta,
        valorLiquido.isAcceptableOrUnknown(
          data['valor_liquido']!,
          _valorLiquidoMeta,
        ),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeFatura map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return NfeFatura(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id'],
      ),
      idNfeCabecalho: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_nfe_cabecalho'],
      ),
      numero: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}numero'],
      ),
      valorOriginal: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_original'],
      ),
      valorDesconto: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_desconto'],
      ),
      valorLiquido: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_liquido'],
      ),
    );
  }

  @override
  $NfeFaturasTable createAlias(String alias) {
    return $NfeFaturasTable(attachedDatabase, alias);
  }
}

class NfeFatura extends DataClass implements Insertable<NfeFatura> {
  final int? id;
  final int? idNfeCabecalho;
  final String? numero;
  final double? valorOriginal;
  final double? valorDesconto;
  final double? valorLiquido;
  const NfeFatura({
    this.id,
    this.idNfeCabecalho,
    this.numero,
    this.valorOriginal,
    this.valorDesconto,
    this.valorLiquido,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeCabecalho != null) {
      map['id_nfe_cabecalho'] = Variable<int>(idNfeCabecalho);
    }
    if (!nullToAbsent || numero != null) {
      map['numero'] = Variable<String>(numero);
    }
    if (!nullToAbsent || valorOriginal != null) {
      map['valor_original'] = Variable<double>(valorOriginal);
    }
    if (!nullToAbsent || valorDesconto != null) {
      map['valor_desconto'] = Variable<double>(valorDesconto);
    }
    if (!nullToAbsent || valorLiquido != null) {
      map['valor_liquido'] = Variable<double>(valorLiquido);
    }
    return map;
  }

  factory NfeFatura.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeFatura(
      id: serializer.fromJson<int?>(json['id']),
      idNfeCabecalho: serializer.fromJson<int?>(json['idNfeCabecalho']),
      numero: serializer.fromJson<String?>(json['numero']),
      valorOriginal: serializer.fromJson<double?>(json['valorOriginal']),
      valorDesconto: serializer.fromJson<double?>(json['valorDesconto']),
      valorLiquido: serializer.fromJson<double?>(json['valorLiquido']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeCabecalho': serializer.toJson<int?>(idNfeCabecalho),
      'numero': serializer.toJson<String?>(numero),
      'valorOriginal': serializer.toJson<double?>(valorOriginal),
      'valorDesconto': serializer.toJson<double?>(valorDesconto),
      'valorLiquido': serializer.toJson<double?>(valorLiquido),
    };
  }

  NfeFatura copyWith({
    Value<int?> id = const Value.absent(),
    Value<int?> idNfeCabecalho = const Value.absent(),
    Value<String?> numero = const Value.absent(),
    Value<double?> valorOriginal = const Value.absent(),
    Value<double?> valorDesconto = const Value.absent(),
    Value<double?> valorLiquido = const Value.absent(),
  }) => NfeFatura(
    id: id.present ? id.value : this.id,
    idNfeCabecalho:
        idNfeCabecalho.present ? idNfeCabecalho.value : this.idNfeCabecalho,
    numero: numero.present ? numero.value : this.numero,
    valorOriginal:
        valorOriginal.present ? valorOriginal.value : this.valorOriginal,
    valorDesconto:
        valorDesconto.present ? valorDesconto.value : this.valorDesconto,
    valorLiquido: valorLiquido.present ? valorLiquido.value : this.valorLiquido,
  );
  NfeFatura copyWithCompanion(NfeFaturasCompanion data) {
    return NfeFatura(
      id: data.id.present ? data.id.value : this.id,
      idNfeCabecalho:
          data.idNfeCabecalho.present
              ? data.idNfeCabecalho.value
              : this.idNfeCabecalho,
      numero: data.numero.present ? data.numero.value : this.numero,
      valorOriginal:
          data.valorOriginal.present
              ? data.valorOriginal.value
              : this.valorOriginal,
      valorDesconto:
          data.valorDesconto.present
              ? data.valorDesconto.value
              : this.valorDesconto,
      valorLiquido:
          data.valorLiquido.present
              ? data.valorLiquido.value
              : this.valorLiquido,
    );
  }

  @override
  String toString() {
    return (StringBuffer('NfeFatura(')
          ..write('id: $id, ')
          ..write('idNfeCabecalho: $idNfeCabecalho, ')
          ..write('numero: $numero, ')
          ..write('valorOriginal: $valorOriginal, ')
          ..write('valorDesconto: $valorDesconto, ')
          ..write('valorLiquido: $valorLiquido')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    idNfeCabecalho,
    numero,
    valorOriginal,
    valorDesconto,
    valorLiquido,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeFatura &&
          other.id == this.id &&
          other.idNfeCabecalho == this.idNfeCabecalho &&
          other.numero == this.numero &&
          other.valorOriginal == this.valorOriginal &&
          other.valorDesconto == this.valorDesconto &&
          other.valorLiquido == this.valorLiquido);
}

class NfeFaturasCompanion extends UpdateCompanion<NfeFatura> {
  final Value<int?> id;
  final Value<int?> idNfeCabecalho;
  final Value<String?> numero;
  final Value<double?> valorOriginal;
  final Value<double?> valorDesconto;
  final Value<double?> valorLiquido;
  const NfeFaturasCompanion({
    this.id = const Value.absent(),
    this.idNfeCabecalho = const Value.absent(),
    this.numero = const Value.absent(),
    this.valorOriginal = const Value.absent(),
    this.valorDesconto = const Value.absent(),
    this.valorLiquido = const Value.absent(),
  });
  NfeFaturasCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeCabecalho = const Value.absent(),
    this.numero = const Value.absent(),
    this.valorOriginal = const Value.absent(),
    this.valorDesconto = const Value.absent(),
    this.valorLiquido = const Value.absent(),
  });
  static Insertable<NfeFatura> custom({
    Expression<int>? id,
    Expression<int>? idNfeCabecalho,
    Expression<String>? numero,
    Expression<double>? valorOriginal,
    Expression<double>? valorDesconto,
    Expression<double>? valorLiquido,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (idNfeCabecalho != null) 'id_nfe_cabecalho': idNfeCabecalho,
      if (numero != null) 'numero': numero,
      if (valorOriginal != null) 'valor_original': valorOriginal,
      if (valorDesconto != null) 'valor_desconto': valorDesconto,
      if (valorLiquido != null) 'valor_liquido': valorLiquido,
    });
  }

  NfeFaturasCompanion copyWith({
    Value<int?>? id,
    Value<int?>? idNfeCabecalho,
    Value<String?>? numero,
    Value<double?>? valorOriginal,
    Value<double?>? valorDesconto,
    Value<double?>? valorLiquido,
  }) {
    return NfeFaturasCompanion(
      id: id ?? this.id,
      idNfeCabecalho: idNfeCabecalho ?? this.idNfeCabecalho,
      numero: numero ?? this.numero,
      valorOriginal: valorOriginal ?? this.valorOriginal,
      valorDesconto: valorDesconto ?? this.valorDesconto,
      valorLiquido: valorLiquido ?? this.valorLiquido,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (idNfeCabecalho.present) {
      map['id_nfe_cabecalho'] = Variable<int>(idNfeCabecalho.value);
    }
    if (numero.present) {
      map['numero'] = Variable<String>(numero.value);
    }
    if (valorOriginal.present) {
      map['valor_original'] = Variable<double>(valorOriginal.value);
    }
    if (valorDesconto.present) {
      map['valor_desconto'] = Variable<double>(valorDesconto.value);
    }
    if (valorLiquido.present) {
      map['valor_liquido'] = Variable<double>(valorLiquido.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeFaturasCompanion(')
          ..write('id: $id, ')
          ..write('idNfeCabecalho: $idNfeCabecalho, ')
          ..write('numero: $numero, ')
          ..write('valorOriginal: $valorOriginal, ')
          ..write('valorDesconto: $valorDesconto, ')
          ..write('valorLiquido: $valorLiquido')
          ..write(')'))
        .toString();
  }
}

class $NfeCanasTable extends NfeCanas with TableInfo<$NfeCanasTable, NfeCana> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeCanasTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
    'id',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idNfeCabecalhoMeta = const VerificationMeta(
    'idNfeCabecalho',
  );
  @override
  late final GeneratedColumn<int> idNfeCabecalho = GeneratedColumn<int>(
    'id_nfe_cabecalho',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _safraMeta = const VerificationMeta('safra');
  @override
  late final GeneratedColumn<String> safra = GeneratedColumn<String>(
    'safra',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 9,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _mesAnoReferenciaMeta = const VerificationMeta(
    'mesAnoReferencia',
  );
  @override
  late final GeneratedColumn<String> mesAnoReferencia = GeneratedColumn<String>(
    'mes_ano_referencia',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 7,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    idNfeCabecalho,
    safra,
    mesAnoReferencia,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'nfe_cana';
  @override
  VerificationContext validateIntegrity(
    Insertable<NfeCana> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('id_nfe_cabecalho')) {
      context.handle(
        _idNfeCabecalhoMeta,
        idNfeCabecalho.isAcceptableOrUnknown(
          data['id_nfe_cabecalho']!,
          _idNfeCabecalhoMeta,
        ),
      );
    }
    if (data.containsKey('safra')) {
      context.handle(
        _safraMeta,
        safra.isAcceptableOrUnknown(data['safra']!, _safraMeta),
      );
    }
    if (data.containsKey('mes_ano_referencia')) {
      context.handle(
        _mesAnoReferenciaMeta,
        mesAnoReferencia.isAcceptableOrUnknown(
          data['mes_ano_referencia']!,
          _mesAnoReferenciaMeta,
        ),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeCana map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return NfeCana(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id'],
      ),
      idNfeCabecalho: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_nfe_cabecalho'],
      ),
      safra: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}safra'],
      ),
      mesAnoReferencia: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}mes_ano_referencia'],
      ),
    );
  }

  @override
  $NfeCanasTable createAlias(String alias) {
    return $NfeCanasTable(attachedDatabase, alias);
  }
}

class NfeCana extends DataClass implements Insertable<NfeCana> {
  final int? id;
  final int? idNfeCabecalho;
  final String? safra;
  final String? mesAnoReferencia;
  const NfeCana({
    this.id,
    this.idNfeCabecalho,
    this.safra,
    this.mesAnoReferencia,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeCabecalho != null) {
      map['id_nfe_cabecalho'] = Variable<int>(idNfeCabecalho);
    }
    if (!nullToAbsent || safra != null) {
      map['safra'] = Variable<String>(safra);
    }
    if (!nullToAbsent || mesAnoReferencia != null) {
      map['mes_ano_referencia'] = Variable<String>(mesAnoReferencia);
    }
    return map;
  }

  factory NfeCana.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeCana(
      id: serializer.fromJson<int?>(json['id']),
      idNfeCabecalho: serializer.fromJson<int?>(json['idNfeCabecalho']),
      safra: serializer.fromJson<String?>(json['safra']),
      mesAnoReferencia: serializer.fromJson<String?>(json['mesAnoReferencia']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeCabecalho': serializer.toJson<int?>(idNfeCabecalho),
      'safra': serializer.toJson<String?>(safra),
      'mesAnoReferencia': serializer.toJson<String?>(mesAnoReferencia),
    };
  }

  NfeCana copyWith({
    Value<int?> id = const Value.absent(),
    Value<int?> idNfeCabecalho = const Value.absent(),
    Value<String?> safra = const Value.absent(),
    Value<String?> mesAnoReferencia = const Value.absent(),
  }) => NfeCana(
    id: id.present ? id.value : this.id,
    idNfeCabecalho:
        idNfeCabecalho.present ? idNfeCabecalho.value : this.idNfeCabecalho,
    safra: safra.present ? safra.value : this.safra,
    mesAnoReferencia:
        mesAnoReferencia.present
            ? mesAnoReferencia.value
            : this.mesAnoReferencia,
  );
  NfeCana copyWithCompanion(NfeCanasCompanion data) {
    return NfeCana(
      id: data.id.present ? data.id.value : this.id,
      idNfeCabecalho:
          data.idNfeCabecalho.present
              ? data.idNfeCabecalho.value
              : this.idNfeCabecalho,
      safra: data.safra.present ? data.safra.value : this.safra,
      mesAnoReferencia:
          data.mesAnoReferencia.present
              ? data.mesAnoReferencia.value
              : this.mesAnoReferencia,
    );
  }

  @override
  String toString() {
    return (StringBuffer('NfeCana(')
          ..write('id: $id, ')
          ..write('idNfeCabecalho: $idNfeCabecalho, ')
          ..write('safra: $safra, ')
          ..write('mesAnoReferencia: $mesAnoReferencia')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(id, idNfeCabecalho, safra, mesAnoReferencia);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeCana &&
          other.id == this.id &&
          other.idNfeCabecalho == this.idNfeCabecalho &&
          other.safra == this.safra &&
          other.mesAnoReferencia == this.mesAnoReferencia);
}

class NfeCanasCompanion extends UpdateCompanion<NfeCana> {
  final Value<int?> id;
  final Value<int?> idNfeCabecalho;
  final Value<String?> safra;
  final Value<String?> mesAnoReferencia;
  const NfeCanasCompanion({
    this.id = const Value.absent(),
    this.idNfeCabecalho = const Value.absent(),
    this.safra = const Value.absent(),
    this.mesAnoReferencia = const Value.absent(),
  });
  NfeCanasCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeCabecalho = const Value.absent(),
    this.safra = const Value.absent(),
    this.mesAnoReferencia = const Value.absent(),
  });
  static Insertable<NfeCana> custom({
    Expression<int>? id,
    Expression<int>? idNfeCabecalho,
    Expression<String>? safra,
    Expression<String>? mesAnoReferencia,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (idNfeCabecalho != null) 'id_nfe_cabecalho': idNfeCabecalho,
      if (safra != null) 'safra': safra,
      if (mesAnoReferencia != null) 'mes_ano_referencia': mesAnoReferencia,
    });
  }

  NfeCanasCompanion copyWith({
    Value<int?>? id,
    Value<int?>? idNfeCabecalho,
    Value<String?>? safra,
    Value<String?>? mesAnoReferencia,
  }) {
    return NfeCanasCompanion(
      id: id ?? this.id,
      idNfeCabecalho: idNfeCabecalho ?? this.idNfeCabecalho,
      safra: safra ?? this.safra,
      mesAnoReferencia: mesAnoReferencia ?? this.mesAnoReferencia,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (idNfeCabecalho.present) {
      map['id_nfe_cabecalho'] = Variable<int>(idNfeCabecalho.value);
    }
    if (safra.present) {
      map['safra'] = Variable<String>(safra.value);
    }
    if (mesAnoReferencia.present) {
      map['mes_ano_referencia'] = Variable<String>(mesAnoReferencia.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeCanasCompanion(')
          ..write('id: $id, ')
          ..write('idNfeCabecalho: $idNfeCabecalho, ')
          ..write('safra: $safra, ')
          ..write('mesAnoReferencia: $mesAnoReferencia')
          ..write(')'))
        .toString();
  }
}

class $NfeTransporteVolumesTable extends NfeTransporteVolumes
    with TableInfo<$NfeTransporteVolumesTable, NfeTransporteVolume> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeTransporteVolumesTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
    'id',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idNfeTransporteMeta = const VerificationMeta(
    'idNfeTransporte',
  );
  @override
  late final GeneratedColumn<int> idNfeTransporte = GeneratedColumn<int>(
    'id_nfe_transporte',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _quantidadeMeta = const VerificationMeta(
    'quantidade',
  );
  @override
  late final GeneratedColumn<int> quantidade = GeneratedColumn<int>(
    'quantidade',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _especieMeta = const VerificationMeta(
    'especie',
  );
  @override
  late final GeneratedColumn<String> especie = GeneratedColumn<String>(
    'especie',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 60,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _marcaMeta = const VerificationMeta('marca');
  @override
  late final GeneratedColumn<String> marca = GeneratedColumn<String>(
    'marca',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 60,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _numeracaoMeta = const VerificationMeta(
    'numeracao',
  );
  @override
  late final GeneratedColumn<String> numeracao = GeneratedColumn<String>(
    'numeracao',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 60,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _pesoLiquidoMeta = const VerificationMeta(
    'pesoLiquido',
  );
  @override
  late final GeneratedColumn<double> pesoLiquido = GeneratedColumn<double>(
    'peso_liquido',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _pesoBrutoMeta = const VerificationMeta(
    'pesoBruto',
  );
  @override
  late final GeneratedColumn<double> pesoBruto = GeneratedColumn<double>(
    'peso_bruto',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    idNfeTransporte,
    quantidade,
    especie,
    marca,
    numeracao,
    pesoLiquido,
    pesoBruto,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'nfe_transporte_volume';
  @override
  VerificationContext validateIntegrity(
    Insertable<NfeTransporteVolume> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('id_nfe_transporte')) {
      context.handle(
        _idNfeTransporteMeta,
        idNfeTransporte.isAcceptableOrUnknown(
          data['id_nfe_transporte']!,
          _idNfeTransporteMeta,
        ),
      );
    }
    if (data.containsKey('quantidade')) {
      context.handle(
        _quantidadeMeta,
        quantidade.isAcceptableOrUnknown(data['quantidade']!, _quantidadeMeta),
      );
    }
    if (data.containsKey('especie')) {
      context.handle(
        _especieMeta,
        especie.isAcceptableOrUnknown(data['especie']!, _especieMeta),
      );
    }
    if (data.containsKey('marca')) {
      context.handle(
        _marcaMeta,
        marca.isAcceptableOrUnknown(data['marca']!, _marcaMeta),
      );
    }
    if (data.containsKey('numeracao')) {
      context.handle(
        _numeracaoMeta,
        numeracao.isAcceptableOrUnknown(data['numeracao']!, _numeracaoMeta),
      );
    }
    if (data.containsKey('peso_liquido')) {
      context.handle(
        _pesoLiquidoMeta,
        pesoLiquido.isAcceptableOrUnknown(
          data['peso_liquido']!,
          _pesoLiquidoMeta,
        ),
      );
    }
    if (data.containsKey('peso_bruto')) {
      context.handle(
        _pesoBrutoMeta,
        pesoBruto.isAcceptableOrUnknown(data['peso_bruto']!, _pesoBrutoMeta),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeTransporteVolume map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return NfeTransporteVolume(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id'],
      ),
      idNfeTransporte: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_nfe_transporte'],
      ),
      quantidade: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}quantidade'],
      ),
      especie: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}especie'],
      ),
      marca: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}marca'],
      ),
      numeracao: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}numeracao'],
      ),
      pesoLiquido: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}peso_liquido'],
      ),
      pesoBruto: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}peso_bruto'],
      ),
    );
  }

  @override
  $NfeTransporteVolumesTable createAlias(String alias) {
    return $NfeTransporteVolumesTable(attachedDatabase, alias);
  }
}

class NfeTransporteVolume extends DataClass
    implements Insertable<NfeTransporteVolume> {
  final int? id;
  final int? idNfeTransporte;
  final int? quantidade;
  final String? especie;
  final String? marca;
  final String? numeracao;
  final double? pesoLiquido;
  final double? pesoBruto;
  const NfeTransporteVolume({
    this.id,
    this.idNfeTransporte,
    this.quantidade,
    this.especie,
    this.marca,
    this.numeracao,
    this.pesoLiquido,
    this.pesoBruto,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeTransporte != null) {
      map['id_nfe_transporte'] = Variable<int>(idNfeTransporte);
    }
    if (!nullToAbsent || quantidade != null) {
      map['quantidade'] = Variable<int>(quantidade);
    }
    if (!nullToAbsent || especie != null) {
      map['especie'] = Variable<String>(especie);
    }
    if (!nullToAbsent || marca != null) {
      map['marca'] = Variable<String>(marca);
    }
    if (!nullToAbsent || numeracao != null) {
      map['numeracao'] = Variable<String>(numeracao);
    }
    if (!nullToAbsent || pesoLiquido != null) {
      map['peso_liquido'] = Variable<double>(pesoLiquido);
    }
    if (!nullToAbsent || pesoBruto != null) {
      map['peso_bruto'] = Variable<double>(pesoBruto);
    }
    return map;
  }

  factory NfeTransporteVolume.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeTransporteVolume(
      id: serializer.fromJson<int?>(json['id']),
      idNfeTransporte: serializer.fromJson<int?>(json['idNfeTransporte']),
      quantidade: serializer.fromJson<int?>(json['quantidade']),
      especie: serializer.fromJson<String?>(json['especie']),
      marca: serializer.fromJson<String?>(json['marca']),
      numeracao: serializer.fromJson<String?>(json['numeracao']),
      pesoLiquido: serializer.fromJson<double?>(json['pesoLiquido']),
      pesoBruto: serializer.fromJson<double?>(json['pesoBruto']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeTransporte': serializer.toJson<int?>(idNfeTransporte),
      'quantidade': serializer.toJson<int?>(quantidade),
      'especie': serializer.toJson<String?>(especie),
      'marca': serializer.toJson<String?>(marca),
      'numeracao': serializer.toJson<String?>(numeracao),
      'pesoLiquido': serializer.toJson<double?>(pesoLiquido),
      'pesoBruto': serializer.toJson<double?>(pesoBruto),
    };
  }

  NfeTransporteVolume copyWith({
    Value<int?> id = const Value.absent(),
    Value<int?> idNfeTransporte = const Value.absent(),
    Value<int?> quantidade = const Value.absent(),
    Value<String?> especie = const Value.absent(),
    Value<String?> marca = const Value.absent(),
    Value<String?> numeracao = const Value.absent(),
    Value<double?> pesoLiquido = const Value.absent(),
    Value<double?> pesoBruto = const Value.absent(),
  }) => NfeTransporteVolume(
    id: id.present ? id.value : this.id,
    idNfeTransporte:
        idNfeTransporte.present ? idNfeTransporte.value : this.idNfeTransporte,
    quantidade: quantidade.present ? quantidade.value : this.quantidade,
    especie: especie.present ? especie.value : this.especie,
    marca: marca.present ? marca.value : this.marca,
    numeracao: numeracao.present ? numeracao.value : this.numeracao,
    pesoLiquido: pesoLiquido.present ? pesoLiquido.value : this.pesoLiquido,
    pesoBruto: pesoBruto.present ? pesoBruto.value : this.pesoBruto,
  );
  NfeTransporteVolume copyWithCompanion(NfeTransporteVolumesCompanion data) {
    return NfeTransporteVolume(
      id: data.id.present ? data.id.value : this.id,
      idNfeTransporte:
          data.idNfeTransporte.present
              ? data.idNfeTransporte.value
              : this.idNfeTransporte,
      quantidade:
          data.quantidade.present ? data.quantidade.value : this.quantidade,
      especie: data.especie.present ? data.especie.value : this.especie,
      marca: data.marca.present ? data.marca.value : this.marca,
      numeracao: data.numeracao.present ? data.numeracao.value : this.numeracao,
      pesoLiquido:
          data.pesoLiquido.present ? data.pesoLiquido.value : this.pesoLiquido,
      pesoBruto: data.pesoBruto.present ? data.pesoBruto.value : this.pesoBruto,
    );
  }

  @override
  String toString() {
    return (StringBuffer('NfeTransporteVolume(')
          ..write('id: $id, ')
          ..write('idNfeTransporte: $idNfeTransporte, ')
          ..write('quantidade: $quantidade, ')
          ..write('especie: $especie, ')
          ..write('marca: $marca, ')
          ..write('numeracao: $numeracao, ')
          ..write('pesoLiquido: $pesoLiquido, ')
          ..write('pesoBruto: $pesoBruto')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    idNfeTransporte,
    quantidade,
    especie,
    marca,
    numeracao,
    pesoLiquido,
    pesoBruto,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeTransporteVolume &&
          other.id == this.id &&
          other.idNfeTransporte == this.idNfeTransporte &&
          other.quantidade == this.quantidade &&
          other.especie == this.especie &&
          other.marca == this.marca &&
          other.numeracao == this.numeracao &&
          other.pesoLiquido == this.pesoLiquido &&
          other.pesoBruto == this.pesoBruto);
}

class NfeTransporteVolumesCompanion
    extends UpdateCompanion<NfeTransporteVolume> {
  final Value<int?> id;
  final Value<int?> idNfeTransporte;
  final Value<int?> quantidade;
  final Value<String?> especie;
  final Value<String?> marca;
  final Value<String?> numeracao;
  final Value<double?> pesoLiquido;
  final Value<double?> pesoBruto;
  const NfeTransporteVolumesCompanion({
    this.id = const Value.absent(),
    this.idNfeTransporte = const Value.absent(),
    this.quantidade = const Value.absent(),
    this.especie = const Value.absent(),
    this.marca = const Value.absent(),
    this.numeracao = const Value.absent(),
    this.pesoLiquido = const Value.absent(),
    this.pesoBruto = const Value.absent(),
  });
  NfeTransporteVolumesCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeTransporte = const Value.absent(),
    this.quantidade = const Value.absent(),
    this.especie = const Value.absent(),
    this.marca = const Value.absent(),
    this.numeracao = const Value.absent(),
    this.pesoLiquido = const Value.absent(),
    this.pesoBruto = const Value.absent(),
  });
  static Insertable<NfeTransporteVolume> custom({
    Expression<int>? id,
    Expression<int>? idNfeTransporte,
    Expression<int>? quantidade,
    Expression<String>? especie,
    Expression<String>? marca,
    Expression<String>? numeracao,
    Expression<double>? pesoLiquido,
    Expression<double>? pesoBruto,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (idNfeTransporte != null) 'id_nfe_transporte': idNfeTransporte,
      if (quantidade != null) 'quantidade': quantidade,
      if (especie != null) 'especie': especie,
      if (marca != null) 'marca': marca,
      if (numeracao != null) 'numeracao': numeracao,
      if (pesoLiquido != null) 'peso_liquido': pesoLiquido,
      if (pesoBruto != null) 'peso_bruto': pesoBruto,
    });
  }

  NfeTransporteVolumesCompanion copyWith({
    Value<int?>? id,
    Value<int?>? idNfeTransporte,
    Value<int?>? quantidade,
    Value<String?>? especie,
    Value<String?>? marca,
    Value<String?>? numeracao,
    Value<double?>? pesoLiquido,
    Value<double?>? pesoBruto,
  }) {
    return NfeTransporteVolumesCompanion(
      id: id ?? this.id,
      idNfeTransporte: idNfeTransporte ?? this.idNfeTransporte,
      quantidade: quantidade ?? this.quantidade,
      especie: especie ?? this.especie,
      marca: marca ?? this.marca,
      numeracao: numeracao ?? this.numeracao,
      pesoLiquido: pesoLiquido ?? this.pesoLiquido,
      pesoBruto: pesoBruto ?? this.pesoBruto,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (idNfeTransporte.present) {
      map['id_nfe_transporte'] = Variable<int>(idNfeTransporte.value);
    }
    if (quantidade.present) {
      map['quantidade'] = Variable<int>(quantidade.value);
    }
    if (especie.present) {
      map['especie'] = Variable<String>(especie.value);
    }
    if (marca.present) {
      map['marca'] = Variable<String>(marca.value);
    }
    if (numeracao.present) {
      map['numeracao'] = Variable<String>(numeracao.value);
    }
    if (pesoLiquido.present) {
      map['peso_liquido'] = Variable<double>(pesoLiquido.value);
    }
    if (pesoBruto.present) {
      map['peso_bruto'] = Variable<double>(pesoBruto.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeTransporteVolumesCompanion(')
          ..write('id: $id, ')
          ..write('idNfeTransporte: $idNfeTransporte, ')
          ..write('quantidade: $quantidade, ')
          ..write('especie: $especie, ')
          ..write('marca: $marca, ')
          ..write('numeracao: $numeracao, ')
          ..write('pesoLiquido: $pesoLiquido, ')
          ..write('pesoBruto: $pesoBruto')
          ..write(')'))
        .toString();
  }
}

class $TributOperacaoFiscalsTable extends TributOperacaoFiscals
    with TableInfo<$TributOperacaoFiscalsTable, TributOperacaoFiscal> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $TributOperacaoFiscalsTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
    'id',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _descricaoMeta = const VerificationMeta(
    'descricao',
  );
  @override
  late final GeneratedColumn<String> descricao = GeneratedColumn<String>(
    'descricao',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 100,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _descricaoNaNfMeta = const VerificationMeta(
    'descricaoNaNf',
  );
  @override
  late final GeneratedColumn<String> descricaoNaNf = GeneratedColumn<String>(
    'descricao_na_nf',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 100,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _cfopMeta = const VerificationMeta('cfop');
  @override
  late final GeneratedColumn<int> cfop = GeneratedColumn<int>(
    'cfop',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _observacaoMeta = const VerificationMeta(
    'observacao',
  );
  @override
  late final GeneratedColumn<String> observacao = GeneratedColumn<String>(
    'observacao',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    descricao,
    descricaoNaNf,
    cfop,
    observacao,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'tribut_operacao_fiscal';
  @override
  VerificationContext validateIntegrity(
    Insertable<TributOperacaoFiscal> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('descricao')) {
      context.handle(
        _descricaoMeta,
        descricao.isAcceptableOrUnknown(data['descricao']!, _descricaoMeta),
      );
    }
    if (data.containsKey('descricao_na_nf')) {
      context.handle(
        _descricaoNaNfMeta,
        descricaoNaNf.isAcceptableOrUnknown(
          data['descricao_na_nf']!,
          _descricaoNaNfMeta,
        ),
      );
    }
    if (data.containsKey('cfop')) {
      context.handle(
        _cfopMeta,
        cfop.isAcceptableOrUnknown(data['cfop']!, _cfopMeta),
      );
    }
    if (data.containsKey('observacao')) {
      context.handle(
        _observacaoMeta,
        observacao.isAcceptableOrUnknown(data['observacao']!, _observacaoMeta),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  TributOperacaoFiscal map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return TributOperacaoFiscal(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id'],
      ),
      descricao: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}descricao'],
      ),
      descricaoNaNf: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}descricao_na_nf'],
      ),
      cfop: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}cfop'],
      ),
      observacao: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}observacao'],
      ),
    );
  }

  @override
  $TributOperacaoFiscalsTable createAlias(String alias) {
    return $TributOperacaoFiscalsTable(attachedDatabase, alias);
  }
}

class TributOperacaoFiscal extends DataClass
    implements Insertable<TributOperacaoFiscal> {
  final int? id;
  final String? descricao;
  final String? descricaoNaNf;
  final int? cfop;
  final String? observacao;
  const TributOperacaoFiscal({
    this.id,
    this.descricao,
    this.descricaoNaNf,
    this.cfop,
    this.observacao,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || descricao != null) {
      map['descricao'] = Variable<String>(descricao);
    }
    if (!nullToAbsent || descricaoNaNf != null) {
      map['descricao_na_nf'] = Variable<String>(descricaoNaNf);
    }
    if (!nullToAbsent || cfop != null) {
      map['cfop'] = Variable<int>(cfop);
    }
    if (!nullToAbsent || observacao != null) {
      map['observacao'] = Variable<String>(observacao);
    }
    return map;
  }

  factory TributOperacaoFiscal.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return TributOperacaoFiscal(
      id: serializer.fromJson<int?>(json['id']),
      descricao: serializer.fromJson<String?>(json['descricao']),
      descricaoNaNf: serializer.fromJson<String?>(json['descricaoNaNf']),
      cfop: serializer.fromJson<int?>(json['cfop']),
      observacao: serializer.fromJson<String?>(json['observacao']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'descricao': serializer.toJson<String?>(descricao),
      'descricaoNaNf': serializer.toJson<String?>(descricaoNaNf),
      'cfop': serializer.toJson<int?>(cfop),
      'observacao': serializer.toJson<String?>(observacao),
    };
  }

  TributOperacaoFiscal copyWith({
    Value<int?> id = const Value.absent(),
    Value<String?> descricao = const Value.absent(),
    Value<String?> descricaoNaNf = const Value.absent(),
    Value<int?> cfop = const Value.absent(),
    Value<String?> observacao = const Value.absent(),
  }) => TributOperacaoFiscal(
    id: id.present ? id.value : this.id,
    descricao: descricao.present ? descricao.value : this.descricao,
    descricaoNaNf:
        descricaoNaNf.present ? descricaoNaNf.value : this.descricaoNaNf,
    cfop: cfop.present ? cfop.value : this.cfop,
    observacao: observacao.present ? observacao.value : this.observacao,
  );
  TributOperacaoFiscal copyWithCompanion(TributOperacaoFiscalsCompanion data) {
    return TributOperacaoFiscal(
      id: data.id.present ? data.id.value : this.id,
      descricao: data.descricao.present ? data.descricao.value : this.descricao,
      descricaoNaNf:
          data.descricaoNaNf.present
              ? data.descricaoNaNf.value
              : this.descricaoNaNf,
      cfop: data.cfop.present ? data.cfop.value : this.cfop,
      observacao:
          data.observacao.present ? data.observacao.value : this.observacao,
    );
  }

  @override
  String toString() {
    return (StringBuffer('TributOperacaoFiscal(')
          ..write('id: $id, ')
          ..write('descricao: $descricao, ')
          ..write('descricaoNaNf: $descricaoNaNf, ')
          ..write('cfop: $cfop, ')
          ..write('observacao: $observacao')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode =>
      Object.hash(id, descricao, descricaoNaNf, cfop, observacao);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is TributOperacaoFiscal &&
          other.id == this.id &&
          other.descricao == this.descricao &&
          other.descricaoNaNf == this.descricaoNaNf &&
          other.cfop == this.cfop &&
          other.observacao == this.observacao);
}

class TributOperacaoFiscalsCompanion
    extends UpdateCompanion<TributOperacaoFiscal> {
  final Value<int?> id;
  final Value<String?> descricao;
  final Value<String?> descricaoNaNf;
  final Value<int?> cfop;
  final Value<String?> observacao;
  const TributOperacaoFiscalsCompanion({
    this.id = const Value.absent(),
    this.descricao = const Value.absent(),
    this.descricaoNaNf = const Value.absent(),
    this.cfop = const Value.absent(),
    this.observacao = const Value.absent(),
  });
  TributOperacaoFiscalsCompanion.insert({
    this.id = const Value.absent(),
    this.descricao = const Value.absent(),
    this.descricaoNaNf = const Value.absent(),
    this.cfop = const Value.absent(),
    this.observacao = const Value.absent(),
  });
  static Insertable<TributOperacaoFiscal> custom({
    Expression<int>? id,
    Expression<String>? descricao,
    Expression<String>? descricaoNaNf,
    Expression<int>? cfop,
    Expression<String>? observacao,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (descricao != null) 'descricao': descricao,
      if (descricaoNaNf != null) 'descricao_na_nf': descricaoNaNf,
      if (cfop != null) 'cfop': cfop,
      if (observacao != null) 'observacao': observacao,
    });
  }

  TributOperacaoFiscalsCompanion copyWith({
    Value<int?>? id,
    Value<String?>? descricao,
    Value<String?>? descricaoNaNf,
    Value<int?>? cfop,
    Value<String?>? observacao,
  }) {
    return TributOperacaoFiscalsCompanion(
      id: id ?? this.id,
      descricao: descricao ?? this.descricao,
      descricaoNaNf: descricaoNaNf ?? this.descricaoNaNf,
      cfop: cfop ?? this.cfop,
      observacao: observacao ?? this.observacao,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (descricao.present) {
      map['descricao'] = Variable<String>(descricao.value);
    }
    if (descricaoNaNf.present) {
      map['descricao_na_nf'] = Variable<String>(descricaoNaNf.value);
    }
    if (cfop.present) {
      map['cfop'] = Variable<int>(cfop.value);
    }
    if (observacao.present) {
      map['observacao'] = Variable<String>(observacao.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('TributOperacaoFiscalsCompanion(')
          ..write('id: $id, ')
          ..write('descricao: $descricao, ')
          ..write('descricaoNaNf: $descricaoNaNf, ')
          ..write('cfop: $cfop, ')
          ..write('observacao: $observacao')
          ..write(')'))
        .toString();
  }
}

class $VendaCabecalhosTable extends VendaCabecalhos
    with TableInfo<$VendaCabecalhosTable, VendaCabecalho> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $VendaCabecalhosTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
    'id',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idVendaOrcamentoCabecalhoMeta =
      const VerificationMeta('idVendaOrcamentoCabecalho');
  @override
  late final GeneratedColumn<int> idVendaOrcamentoCabecalho =
      GeneratedColumn<int>(
        'id_venda_orcamento_cabecalho',
        aliasedName,
        true,
        type: DriftSqlType.int,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _idVendaCondicoesPagamentoMeta =
      const VerificationMeta('idVendaCondicoesPagamento');
  @override
  late final GeneratedColumn<int> idVendaCondicoesPagamento =
      GeneratedColumn<int>(
        'id_venda_condicoes_pagamento',
        aliasedName,
        true,
        type: DriftSqlType.int,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _idNotaFiscalTipoMeta = const VerificationMeta(
    'idNotaFiscalTipo',
  );
  @override
  late final GeneratedColumn<int> idNotaFiscalTipo = GeneratedColumn<int>(
    'id_nota_fiscal_tipo',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idTransportadoraMeta = const VerificationMeta(
    'idTransportadora',
  );
  @override
  late final GeneratedColumn<int> idTransportadora = GeneratedColumn<int>(
    'id_transportadora',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _dataVendaMeta = const VerificationMeta(
    'dataVenda',
  );
  @override
  late final GeneratedColumn<DateTime> dataVenda = GeneratedColumn<DateTime>(
    'data_venda',
    aliasedName,
    true,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _dataSaidaMeta = const VerificationMeta(
    'dataSaida',
  );
  @override
  late final GeneratedColumn<DateTime> dataSaida = GeneratedColumn<DateTime>(
    'data_saida',
    aliasedName,
    true,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _horaSaidaMeta = const VerificationMeta(
    'horaSaida',
  );
  @override
  late final GeneratedColumn<String> horaSaida = GeneratedColumn<String>(
    'hora_saida',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 8,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _numeroFaturaMeta = const VerificationMeta(
    'numeroFatura',
  );
  @override
  late final GeneratedColumn<int> numeroFatura = GeneratedColumn<int>(
    'numero_fatura',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _localEntregaMeta = const VerificationMeta(
    'localEntrega',
  );
  @override
  late final GeneratedColumn<String> localEntrega = GeneratedColumn<String>(
    'local_entrega',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 100,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _localCobrancaMeta = const VerificationMeta(
    'localCobranca',
  );
  @override
  late final GeneratedColumn<String> localCobranca = GeneratedColumn<String>(
    'local_cobranca',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 100,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _valorSubtotalMeta = const VerificationMeta(
    'valorSubtotal',
  );
  @override
  late final GeneratedColumn<double> valorSubtotal = GeneratedColumn<double>(
    'valor_subtotal',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _taxaComissaoMeta = const VerificationMeta(
    'taxaComissao',
  );
  @override
  late final GeneratedColumn<double> taxaComissao = GeneratedColumn<double>(
    'taxa_comissao',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _valorComissaoMeta = const VerificationMeta(
    'valorComissao',
  );
  @override
  late final GeneratedColumn<double> valorComissao = GeneratedColumn<double>(
    'valor_comissao',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _taxaDescontoMeta = const VerificationMeta(
    'taxaDesconto',
  );
  @override
  late final GeneratedColumn<double> taxaDesconto = GeneratedColumn<double>(
    'taxa_desconto',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _valorDescontoMeta = const VerificationMeta(
    'valorDesconto',
  );
  @override
  late final GeneratedColumn<double> valorDesconto = GeneratedColumn<double>(
    'valor_desconto',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _valorTotalMeta = const VerificationMeta(
    'valorTotal',
  );
  @override
  late final GeneratedColumn<double> valorTotal = GeneratedColumn<double>(
    'valor_total',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _tipoFreteMeta = const VerificationMeta(
    'tipoFrete',
  );
  @override
  late final GeneratedColumn<String> tipoFrete = GeneratedColumn<String>(
    'tipo_frete',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 1,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _formaPagamentoMeta = const VerificationMeta(
    'formaPagamento',
  );
  @override
  late final GeneratedColumn<String> formaPagamento = GeneratedColumn<String>(
    'forma_pagamento',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 1,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _valorFreteMeta = const VerificationMeta(
    'valorFrete',
  );
  @override
  late final GeneratedColumn<double> valorFrete = GeneratedColumn<double>(
    'valor_frete',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _valorSeguroMeta = const VerificationMeta(
    'valorSeguro',
  );
  @override
  late final GeneratedColumn<double> valorSeguro = GeneratedColumn<double>(
    'valor_seguro',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _observacaoMeta = const VerificationMeta(
    'observacao',
  );
  @override
  late final GeneratedColumn<String> observacao = GeneratedColumn<String>(
    'observacao',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _situacaoMeta = const VerificationMeta(
    'situacao',
  );
  @override
  late final GeneratedColumn<String> situacao = GeneratedColumn<String>(
    'situacao',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 1,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _diaFixoParcelaMeta = const VerificationMeta(
    'diaFixoParcela',
  );
  @override
  late final GeneratedColumn<String> diaFixoParcela = GeneratedColumn<String>(
    'dia_fixo_parcela',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 2,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    idVendaOrcamentoCabecalho,
    idVendaCondicoesPagamento,
    idNotaFiscalTipo,
    idTransportadora,
    dataVenda,
    dataSaida,
    horaSaida,
    numeroFatura,
    localEntrega,
    localCobranca,
    valorSubtotal,
    taxaComissao,
    valorComissao,
    taxaDesconto,
    valorDesconto,
    valorTotal,
    tipoFrete,
    formaPagamento,
    valorFrete,
    valorSeguro,
    observacao,
    situacao,
    diaFixoParcela,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'venda_cabecalho';
  @override
  VerificationContext validateIntegrity(
    Insertable<VendaCabecalho> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('id_venda_orcamento_cabecalho')) {
      context.handle(
        _idVendaOrcamentoCabecalhoMeta,
        idVendaOrcamentoCabecalho.isAcceptableOrUnknown(
          data['id_venda_orcamento_cabecalho']!,
          _idVendaOrcamentoCabecalhoMeta,
        ),
      );
    }
    if (data.containsKey('id_venda_condicoes_pagamento')) {
      context.handle(
        _idVendaCondicoesPagamentoMeta,
        idVendaCondicoesPagamento.isAcceptableOrUnknown(
          data['id_venda_condicoes_pagamento']!,
          _idVendaCondicoesPagamentoMeta,
        ),
      );
    }
    if (data.containsKey('id_nota_fiscal_tipo')) {
      context.handle(
        _idNotaFiscalTipoMeta,
        idNotaFiscalTipo.isAcceptableOrUnknown(
          data['id_nota_fiscal_tipo']!,
          _idNotaFiscalTipoMeta,
        ),
      );
    }
    if (data.containsKey('id_transportadora')) {
      context.handle(
        _idTransportadoraMeta,
        idTransportadora.isAcceptableOrUnknown(
          data['id_transportadora']!,
          _idTransportadoraMeta,
        ),
      );
    }
    if (data.containsKey('data_venda')) {
      context.handle(
        _dataVendaMeta,
        dataVenda.isAcceptableOrUnknown(data['data_venda']!, _dataVendaMeta),
      );
    }
    if (data.containsKey('data_saida')) {
      context.handle(
        _dataSaidaMeta,
        dataSaida.isAcceptableOrUnknown(data['data_saida']!, _dataSaidaMeta),
      );
    }
    if (data.containsKey('hora_saida')) {
      context.handle(
        _horaSaidaMeta,
        horaSaida.isAcceptableOrUnknown(data['hora_saida']!, _horaSaidaMeta),
      );
    }
    if (data.containsKey('numero_fatura')) {
      context.handle(
        _numeroFaturaMeta,
        numeroFatura.isAcceptableOrUnknown(
          data['numero_fatura']!,
          _numeroFaturaMeta,
        ),
      );
    }
    if (data.containsKey('local_entrega')) {
      context.handle(
        _localEntregaMeta,
        localEntrega.isAcceptableOrUnknown(
          data['local_entrega']!,
          _localEntregaMeta,
        ),
      );
    }
    if (data.containsKey('local_cobranca')) {
      context.handle(
        _localCobrancaMeta,
        localCobranca.isAcceptableOrUnknown(
          data['local_cobranca']!,
          _localCobrancaMeta,
        ),
      );
    }
    if (data.containsKey('valor_subtotal')) {
      context.handle(
        _valorSubtotalMeta,
        valorSubtotal.isAcceptableOrUnknown(
          data['valor_subtotal']!,
          _valorSubtotalMeta,
        ),
      );
    }
    if (data.containsKey('taxa_comissao')) {
      context.handle(
        _taxaComissaoMeta,
        taxaComissao.isAcceptableOrUnknown(
          data['taxa_comissao']!,
          _taxaComissaoMeta,
        ),
      );
    }
    if (data.containsKey('valor_comissao')) {
      context.handle(
        _valorComissaoMeta,
        valorComissao.isAcceptableOrUnknown(
          data['valor_comissao']!,
          _valorComissaoMeta,
        ),
      );
    }
    if (data.containsKey('taxa_desconto')) {
      context.handle(
        _taxaDescontoMeta,
        taxaDesconto.isAcceptableOrUnknown(
          data['taxa_desconto']!,
          _taxaDescontoMeta,
        ),
      );
    }
    if (data.containsKey('valor_desconto')) {
      context.handle(
        _valorDescontoMeta,
        valorDesconto.isAcceptableOrUnknown(
          data['valor_desconto']!,
          _valorDescontoMeta,
        ),
      );
    }
    if (data.containsKey('valor_total')) {
      context.handle(
        _valorTotalMeta,
        valorTotal.isAcceptableOrUnknown(data['valor_total']!, _valorTotalMeta),
      );
    }
    if (data.containsKey('tipo_frete')) {
      context.handle(
        _tipoFreteMeta,
        tipoFrete.isAcceptableOrUnknown(data['tipo_frete']!, _tipoFreteMeta),
      );
    }
    if (data.containsKey('forma_pagamento')) {
      context.handle(
        _formaPagamentoMeta,
        formaPagamento.isAcceptableOrUnknown(
          data['forma_pagamento']!,
          _formaPagamentoMeta,
        ),
      );
    }
    if (data.containsKey('valor_frete')) {
      context.handle(
        _valorFreteMeta,
        valorFrete.isAcceptableOrUnknown(data['valor_frete']!, _valorFreteMeta),
      );
    }
    if (data.containsKey('valor_seguro')) {
      context.handle(
        _valorSeguroMeta,
        valorSeguro.isAcceptableOrUnknown(
          data['valor_seguro']!,
          _valorSeguroMeta,
        ),
      );
    }
    if (data.containsKey('observacao')) {
      context.handle(
        _observacaoMeta,
        observacao.isAcceptableOrUnknown(data['observacao']!, _observacaoMeta),
      );
    }
    if (data.containsKey('situacao')) {
      context.handle(
        _situacaoMeta,
        situacao.isAcceptableOrUnknown(data['situacao']!, _situacaoMeta),
      );
    }
    if (data.containsKey('dia_fixo_parcela')) {
      context.handle(
        _diaFixoParcelaMeta,
        diaFixoParcela.isAcceptableOrUnknown(
          data['dia_fixo_parcela']!,
          _diaFixoParcelaMeta,
        ),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  VendaCabecalho map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return VendaCabecalho(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id'],
      ),
      idVendaOrcamentoCabecalho: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_venda_orcamento_cabecalho'],
      ),
      idVendaCondicoesPagamento: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_venda_condicoes_pagamento'],
      ),
      idNotaFiscalTipo: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_nota_fiscal_tipo'],
      ),
      idTransportadora: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_transportadora'],
      ),
      dataVenda: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}data_venda'],
      ),
      dataSaida: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}data_saida'],
      ),
      horaSaida: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}hora_saida'],
      ),
      numeroFatura: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}numero_fatura'],
      ),
      localEntrega: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}local_entrega'],
      ),
      localCobranca: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}local_cobranca'],
      ),
      valorSubtotal: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_subtotal'],
      ),
      taxaComissao: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}taxa_comissao'],
      ),
      valorComissao: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_comissao'],
      ),
      taxaDesconto: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}taxa_desconto'],
      ),
      valorDesconto: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_desconto'],
      ),
      valorTotal: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_total'],
      ),
      tipoFrete: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}tipo_frete'],
      ),
      formaPagamento: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}forma_pagamento'],
      ),
      valorFrete: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_frete'],
      ),
      valorSeguro: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_seguro'],
      ),
      observacao: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}observacao'],
      ),
      situacao: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}situacao'],
      ),
      diaFixoParcela: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}dia_fixo_parcela'],
      ),
    );
  }

  @override
  $VendaCabecalhosTable createAlias(String alias) {
    return $VendaCabecalhosTable(attachedDatabase, alias);
  }
}

class VendaCabecalho extends DataClass implements Insertable<VendaCabecalho> {
  final int? id;
  final int? idVendaOrcamentoCabecalho;
  final int? idVendaCondicoesPagamento;
  final int? idNotaFiscalTipo;
  final int? idTransportadora;
  final DateTime? dataVenda;
  final DateTime? dataSaida;
  final String? horaSaida;
  final int? numeroFatura;
  final String? localEntrega;
  final String? localCobranca;
  final double? valorSubtotal;
  final double? taxaComissao;
  final double? valorComissao;
  final double? taxaDesconto;
  final double? valorDesconto;
  final double? valorTotal;
  final String? tipoFrete;
  final String? formaPagamento;
  final double? valorFrete;
  final double? valorSeguro;
  final String? observacao;
  final String? situacao;
  final String? diaFixoParcela;
  const VendaCabecalho({
    this.id,
    this.idVendaOrcamentoCabecalho,
    this.idVendaCondicoesPagamento,
    this.idNotaFiscalTipo,
    this.idTransportadora,
    this.dataVenda,
    this.dataSaida,
    this.horaSaida,
    this.numeroFatura,
    this.localEntrega,
    this.localCobranca,
    this.valorSubtotal,
    this.taxaComissao,
    this.valorComissao,
    this.taxaDesconto,
    this.valorDesconto,
    this.valorTotal,
    this.tipoFrete,
    this.formaPagamento,
    this.valorFrete,
    this.valorSeguro,
    this.observacao,
    this.situacao,
    this.diaFixoParcela,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || idVendaOrcamentoCabecalho != null) {
      map['id_venda_orcamento_cabecalho'] = Variable<int>(
        idVendaOrcamentoCabecalho,
      );
    }
    if (!nullToAbsent || idVendaCondicoesPagamento != null) {
      map['id_venda_condicoes_pagamento'] = Variable<int>(
        idVendaCondicoesPagamento,
      );
    }
    if (!nullToAbsent || idNotaFiscalTipo != null) {
      map['id_nota_fiscal_tipo'] = Variable<int>(idNotaFiscalTipo);
    }
    if (!nullToAbsent || idTransportadora != null) {
      map['id_transportadora'] = Variable<int>(idTransportadora);
    }
    if (!nullToAbsent || dataVenda != null) {
      map['data_venda'] = Variable<DateTime>(dataVenda);
    }
    if (!nullToAbsent || dataSaida != null) {
      map['data_saida'] = Variable<DateTime>(dataSaida);
    }
    if (!nullToAbsent || horaSaida != null) {
      map['hora_saida'] = Variable<String>(horaSaida);
    }
    if (!nullToAbsent || numeroFatura != null) {
      map['numero_fatura'] = Variable<int>(numeroFatura);
    }
    if (!nullToAbsent || localEntrega != null) {
      map['local_entrega'] = Variable<String>(localEntrega);
    }
    if (!nullToAbsent || localCobranca != null) {
      map['local_cobranca'] = Variable<String>(localCobranca);
    }
    if (!nullToAbsent || valorSubtotal != null) {
      map['valor_subtotal'] = Variable<double>(valorSubtotal);
    }
    if (!nullToAbsent || taxaComissao != null) {
      map['taxa_comissao'] = Variable<double>(taxaComissao);
    }
    if (!nullToAbsent || valorComissao != null) {
      map['valor_comissao'] = Variable<double>(valorComissao);
    }
    if (!nullToAbsent || taxaDesconto != null) {
      map['taxa_desconto'] = Variable<double>(taxaDesconto);
    }
    if (!nullToAbsent || valorDesconto != null) {
      map['valor_desconto'] = Variable<double>(valorDesconto);
    }
    if (!nullToAbsent || valorTotal != null) {
      map['valor_total'] = Variable<double>(valorTotal);
    }
    if (!nullToAbsent || tipoFrete != null) {
      map['tipo_frete'] = Variable<String>(tipoFrete);
    }
    if (!nullToAbsent || formaPagamento != null) {
      map['forma_pagamento'] = Variable<String>(formaPagamento);
    }
    if (!nullToAbsent || valorFrete != null) {
      map['valor_frete'] = Variable<double>(valorFrete);
    }
    if (!nullToAbsent || valorSeguro != null) {
      map['valor_seguro'] = Variable<double>(valorSeguro);
    }
    if (!nullToAbsent || observacao != null) {
      map['observacao'] = Variable<String>(observacao);
    }
    if (!nullToAbsent || situacao != null) {
      map['situacao'] = Variable<String>(situacao);
    }
    if (!nullToAbsent || diaFixoParcela != null) {
      map['dia_fixo_parcela'] = Variable<String>(diaFixoParcela);
    }
    return map;
  }

  factory VendaCabecalho.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return VendaCabecalho(
      id: serializer.fromJson<int?>(json['id']),
      idVendaOrcamentoCabecalho: serializer.fromJson<int?>(
        json['idVendaOrcamentoCabecalho'],
      ),
      idVendaCondicoesPagamento: serializer.fromJson<int?>(
        json['idVendaCondicoesPagamento'],
      ),
      idNotaFiscalTipo: serializer.fromJson<int?>(json['idNotaFiscalTipo']),
      idTransportadora: serializer.fromJson<int?>(json['idTransportadora']),
      dataVenda: serializer.fromJson<DateTime?>(json['dataVenda']),
      dataSaida: serializer.fromJson<DateTime?>(json['dataSaida']),
      horaSaida: serializer.fromJson<String?>(json['horaSaida']),
      numeroFatura: serializer.fromJson<int?>(json['numeroFatura']),
      localEntrega: serializer.fromJson<String?>(json['localEntrega']),
      localCobranca: serializer.fromJson<String?>(json['localCobranca']),
      valorSubtotal: serializer.fromJson<double?>(json['valorSubtotal']),
      taxaComissao: serializer.fromJson<double?>(json['taxaComissao']),
      valorComissao: serializer.fromJson<double?>(json['valorComissao']),
      taxaDesconto: serializer.fromJson<double?>(json['taxaDesconto']),
      valorDesconto: serializer.fromJson<double?>(json['valorDesconto']),
      valorTotal: serializer.fromJson<double?>(json['valorTotal']),
      tipoFrete: serializer.fromJson<String?>(json['tipoFrete']),
      formaPagamento: serializer.fromJson<String?>(json['formaPagamento']),
      valorFrete: serializer.fromJson<double?>(json['valorFrete']),
      valorSeguro: serializer.fromJson<double?>(json['valorSeguro']),
      observacao: serializer.fromJson<String?>(json['observacao']),
      situacao: serializer.fromJson<String?>(json['situacao']),
      diaFixoParcela: serializer.fromJson<String?>(json['diaFixoParcela']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idVendaOrcamentoCabecalho': serializer.toJson<int?>(
        idVendaOrcamentoCabecalho,
      ),
      'idVendaCondicoesPagamento': serializer.toJson<int?>(
        idVendaCondicoesPagamento,
      ),
      'idNotaFiscalTipo': serializer.toJson<int?>(idNotaFiscalTipo),
      'idTransportadora': serializer.toJson<int?>(idTransportadora),
      'dataVenda': serializer.toJson<DateTime?>(dataVenda),
      'dataSaida': serializer.toJson<DateTime?>(dataSaida),
      'horaSaida': serializer.toJson<String?>(horaSaida),
      'numeroFatura': serializer.toJson<int?>(numeroFatura),
      'localEntrega': serializer.toJson<String?>(localEntrega),
      'localCobranca': serializer.toJson<String?>(localCobranca),
      'valorSubtotal': serializer.toJson<double?>(valorSubtotal),
      'taxaComissao': serializer.toJson<double?>(taxaComissao),
      'valorComissao': serializer.toJson<double?>(valorComissao),
      'taxaDesconto': serializer.toJson<double?>(taxaDesconto),
      'valorDesconto': serializer.toJson<double?>(valorDesconto),
      'valorTotal': serializer.toJson<double?>(valorTotal),
      'tipoFrete': serializer.toJson<String?>(tipoFrete),
      'formaPagamento': serializer.toJson<String?>(formaPagamento),
      'valorFrete': serializer.toJson<double?>(valorFrete),
      'valorSeguro': serializer.toJson<double?>(valorSeguro),
      'observacao': serializer.toJson<String?>(observacao),
      'situacao': serializer.toJson<String?>(situacao),
      'diaFixoParcela': serializer.toJson<String?>(diaFixoParcela),
    };
  }

  VendaCabecalho copyWith({
    Value<int?> id = const Value.absent(),
    Value<int?> idVendaOrcamentoCabecalho = const Value.absent(),
    Value<int?> idVendaCondicoesPagamento = const Value.absent(),
    Value<int?> idNotaFiscalTipo = const Value.absent(),
    Value<int?> idTransportadora = const Value.absent(),
    Value<DateTime?> dataVenda = const Value.absent(),
    Value<DateTime?> dataSaida = const Value.absent(),
    Value<String?> horaSaida = const Value.absent(),
    Value<int?> numeroFatura = const Value.absent(),
    Value<String?> localEntrega = const Value.absent(),
    Value<String?> localCobranca = const Value.absent(),
    Value<double?> valorSubtotal = const Value.absent(),
    Value<double?> taxaComissao = const Value.absent(),
    Value<double?> valorComissao = const Value.absent(),
    Value<double?> taxaDesconto = const Value.absent(),
    Value<double?> valorDesconto = const Value.absent(),
    Value<double?> valorTotal = const Value.absent(),
    Value<String?> tipoFrete = const Value.absent(),
    Value<String?> formaPagamento = const Value.absent(),
    Value<double?> valorFrete = const Value.absent(),
    Value<double?> valorSeguro = const Value.absent(),
    Value<String?> observacao = const Value.absent(),
    Value<String?> situacao = const Value.absent(),
    Value<String?> diaFixoParcela = const Value.absent(),
  }) => VendaCabecalho(
    id: id.present ? id.value : this.id,
    idVendaOrcamentoCabecalho:
        idVendaOrcamentoCabecalho.present
            ? idVendaOrcamentoCabecalho.value
            : this.idVendaOrcamentoCabecalho,
    idVendaCondicoesPagamento:
        idVendaCondicoesPagamento.present
            ? idVendaCondicoesPagamento.value
            : this.idVendaCondicoesPagamento,
    idNotaFiscalTipo:
        idNotaFiscalTipo.present
            ? idNotaFiscalTipo.value
            : this.idNotaFiscalTipo,
    idTransportadora:
        idTransportadora.present
            ? idTransportadora.value
            : this.idTransportadora,
    dataVenda: dataVenda.present ? dataVenda.value : this.dataVenda,
    dataSaida: dataSaida.present ? dataSaida.value : this.dataSaida,
    horaSaida: horaSaida.present ? horaSaida.value : this.horaSaida,
    numeroFatura: numeroFatura.present ? numeroFatura.value : this.numeroFatura,
    localEntrega: localEntrega.present ? localEntrega.value : this.localEntrega,
    localCobranca:
        localCobranca.present ? localCobranca.value : this.localCobranca,
    valorSubtotal:
        valorSubtotal.present ? valorSubtotal.value : this.valorSubtotal,
    taxaComissao: taxaComissao.present ? taxaComissao.value : this.taxaComissao,
    valorComissao:
        valorComissao.present ? valorComissao.value : this.valorComissao,
    taxaDesconto: taxaDesconto.present ? taxaDesconto.value : this.taxaDesconto,
    valorDesconto:
        valorDesconto.present ? valorDesconto.value : this.valorDesconto,
    valorTotal: valorTotal.present ? valorTotal.value : this.valorTotal,
    tipoFrete: tipoFrete.present ? tipoFrete.value : this.tipoFrete,
    formaPagamento:
        formaPagamento.present ? formaPagamento.value : this.formaPagamento,
    valorFrete: valorFrete.present ? valorFrete.value : this.valorFrete,
    valorSeguro: valorSeguro.present ? valorSeguro.value : this.valorSeguro,
    observacao: observacao.present ? observacao.value : this.observacao,
    situacao: situacao.present ? situacao.value : this.situacao,
    diaFixoParcela:
        diaFixoParcela.present ? diaFixoParcela.value : this.diaFixoParcela,
  );
  VendaCabecalho copyWithCompanion(VendaCabecalhosCompanion data) {
    return VendaCabecalho(
      id: data.id.present ? data.id.value : this.id,
      idVendaOrcamentoCabecalho:
          data.idVendaOrcamentoCabecalho.present
              ? data.idVendaOrcamentoCabecalho.value
              : this.idVendaOrcamentoCabecalho,
      idVendaCondicoesPagamento:
          data.idVendaCondicoesPagamento.present
              ? data.idVendaCondicoesPagamento.value
              : this.idVendaCondicoesPagamento,
      idNotaFiscalTipo:
          data.idNotaFiscalTipo.present
              ? data.idNotaFiscalTipo.value
              : this.idNotaFiscalTipo,
      idTransportadora:
          data.idTransportadora.present
              ? data.idTransportadora.value
              : this.idTransportadora,
      dataVenda: data.dataVenda.present ? data.dataVenda.value : this.dataVenda,
      dataSaida: data.dataSaida.present ? data.dataSaida.value : this.dataSaida,
      horaSaida: data.horaSaida.present ? data.horaSaida.value : this.horaSaida,
      numeroFatura:
          data.numeroFatura.present
              ? data.numeroFatura.value
              : this.numeroFatura,
      localEntrega:
          data.localEntrega.present
              ? data.localEntrega.value
              : this.localEntrega,
      localCobranca:
          data.localCobranca.present
              ? data.localCobranca.value
              : this.localCobranca,
      valorSubtotal:
          data.valorSubtotal.present
              ? data.valorSubtotal.value
              : this.valorSubtotal,
      taxaComissao:
          data.taxaComissao.present
              ? data.taxaComissao.value
              : this.taxaComissao,
      valorComissao:
          data.valorComissao.present
              ? data.valorComissao.value
              : this.valorComissao,
      taxaDesconto:
          data.taxaDesconto.present
              ? data.taxaDesconto.value
              : this.taxaDesconto,
      valorDesconto:
          data.valorDesconto.present
              ? data.valorDesconto.value
              : this.valorDesconto,
      valorTotal:
          data.valorTotal.present ? data.valorTotal.value : this.valorTotal,
      tipoFrete: data.tipoFrete.present ? data.tipoFrete.value : this.tipoFrete,
      formaPagamento:
          data.formaPagamento.present
              ? data.formaPagamento.value
              : this.formaPagamento,
      valorFrete:
          data.valorFrete.present ? data.valorFrete.value : this.valorFrete,
      valorSeguro:
          data.valorSeguro.present ? data.valorSeguro.value : this.valorSeguro,
      observacao:
          data.observacao.present ? data.observacao.value : this.observacao,
      situacao: data.situacao.present ? data.situacao.value : this.situacao,
      diaFixoParcela:
          data.diaFixoParcela.present
              ? data.diaFixoParcela.value
              : this.diaFixoParcela,
    );
  }

  @override
  String toString() {
    return (StringBuffer('VendaCabecalho(')
          ..write('id: $id, ')
          ..write('idVendaOrcamentoCabecalho: $idVendaOrcamentoCabecalho, ')
          ..write('idVendaCondicoesPagamento: $idVendaCondicoesPagamento, ')
          ..write('idNotaFiscalTipo: $idNotaFiscalTipo, ')
          ..write('idTransportadora: $idTransportadora, ')
          ..write('dataVenda: $dataVenda, ')
          ..write('dataSaida: $dataSaida, ')
          ..write('horaSaida: $horaSaida, ')
          ..write('numeroFatura: $numeroFatura, ')
          ..write('localEntrega: $localEntrega, ')
          ..write('localCobranca: $localCobranca, ')
          ..write('valorSubtotal: $valorSubtotal, ')
          ..write('taxaComissao: $taxaComissao, ')
          ..write('valorComissao: $valorComissao, ')
          ..write('taxaDesconto: $taxaDesconto, ')
          ..write('valorDesconto: $valorDesconto, ')
          ..write('valorTotal: $valorTotal, ')
          ..write('tipoFrete: $tipoFrete, ')
          ..write('formaPagamento: $formaPagamento, ')
          ..write('valorFrete: $valorFrete, ')
          ..write('valorSeguro: $valorSeguro, ')
          ..write('observacao: $observacao, ')
          ..write('situacao: $situacao, ')
          ..write('diaFixoParcela: $diaFixoParcela')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hashAll([
    id,
    idVendaOrcamentoCabecalho,
    idVendaCondicoesPagamento,
    idNotaFiscalTipo,
    idTransportadora,
    dataVenda,
    dataSaida,
    horaSaida,
    numeroFatura,
    localEntrega,
    localCobranca,
    valorSubtotal,
    taxaComissao,
    valorComissao,
    taxaDesconto,
    valorDesconto,
    valorTotal,
    tipoFrete,
    formaPagamento,
    valorFrete,
    valorSeguro,
    observacao,
    situacao,
    diaFixoParcela,
  ]);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is VendaCabecalho &&
          other.id == this.id &&
          other.idVendaOrcamentoCabecalho == this.idVendaOrcamentoCabecalho &&
          other.idVendaCondicoesPagamento == this.idVendaCondicoesPagamento &&
          other.idNotaFiscalTipo == this.idNotaFiscalTipo &&
          other.idTransportadora == this.idTransportadora &&
          other.dataVenda == this.dataVenda &&
          other.dataSaida == this.dataSaida &&
          other.horaSaida == this.horaSaida &&
          other.numeroFatura == this.numeroFatura &&
          other.localEntrega == this.localEntrega &&
          other.localCobranca == this.localCobranca &&
          other.valorSubtotal == this.valorSubtotal &&
          other.taxaComissao == this.taxaComissao &&
          other.valorComissao == this.valorComissao &&
          other.taxaDesconto == this.taxaDesconto &&
          other.valorDesconto == this.valorDesconto &&
          other.valorTotal == this.valorTotal &&
          other.tipoFrete == this.tipoFrete &&
          other.formaPagamento == this.formaPagamento &&
          other.valorFrete == this.valorFrete &&
          other.valorSeguro == this.valorSeguro &&
          other.observacao == this.observacao &&
          other.situacao == this.situacao &&
          other.diaFixoParcela == this.diaFixoParcela);
}

class VendaCabecalhosCompanion extends UpdateCompanion<VendaCabecalho> {
  final Value<int?> id;
  final Value<int?> idVendaOrcamentoCabecalho;
  final Value<int?> idVendaCondicoesPagamento;
  final Value<int?> idNotaFiscalTipo;
  final Value<int?> idTransportadora;
  final Value<DateTime?> dataVenda;
  final Value<DateTime?> dataSaida;
  final Value<String?> horaSaida;
  final Value<int?> numeroFatura;
  final Value<String?> localEntrega;
  final Value<String?> localCobranca;
  final Value<double?> valorSubtotal;
  final Value<double?> taxaComissao;
  final Value<double?> valorComissao;
  final Value<double?> taxaDesconto;
  final Value<double?> valorDesconto;
  final Value<double?> valorTotal;
  final Value<String?> tipoFrete;
  final Value<String?> formaPagamento;
  final Value<double?> valorFrete;
  final Value<double?> valorSeguro;
  final Value<String?> observacao;
  final Value<String?> situacao;
  final Value<String?> diaFixoParcela;
  const VendaCabecalhosCompanion({
    this.id = const Value.absent(),
    this.idVendaOrcamentoCabecalho = const Value.absent(),
    this.idVendaCondicoesPagamento = const Value.absent(),
    this.idNotaFiscalTipo = const Value.absent(),
    this.idTransportadora = const Value.absent(),
    this.dataVenda = const Value.absent(),
    this.dataSaida = const Value.absent(),
    this.horaSaida = const Value.absent(),
    this.numeroFatura = const Value.absent(),
    this.localEntrega = const Value.absent(),
    this.localCobranca = const Value.absent(),
    this.valorSubtotal = const Value.absent(),
    this.taxaComissao = const Value.absent(),
    this.valorComissao = const Value.absent(),
    this.taxaDesconto = const Value.absent(),
    this.valorDesconto = const Value.absent(),
    this.valorTotal = const Value.absent(),
    this.tipoFrete = const Value.absent(),
    this.formaPagamento = const Value.absent(),
    this.valorFrete = const Value.absent(),
    this.valorSeguro = const Value.absent(),
    this.observacao = const Value.absent(),
    this.situacao = const Value.absent(),
    this.diaFixoParcela = const Value.absent(),
  });
  VendaCabecalhosCompanion.insert({
    this.id = const Value.absent(),
    this.idVendaOrcamentoCabecalho = const Value.absent(),
    this.idVendaCondicoesPagamento = const Value.absent(),
    this.idNotaFiscalTipo = const Value.absent(),
    this.idTransportadora = const Value.absent(),
    this.dataVenda = const Value.absent(),
    this.dataSaida = const Value.absent(),
    this.horaSaida = const Value.absent(),
    this.numeroFatura = const Value.absent(),
    this.localEntrega = const Value.absent(),
    this.localCobranca = const Value.absent(),
    this.valorSubtotal = const Value.absent(),
    this.taxaComissao = const Value.absent(),
    this.valorComissao = const Value.absent(),
    this.taxaDesconto = const Value.absent(),
    this.valorDesconto = const Value.absent(),
    this.valorTotal = const Value.absent(),
    this.tipoFrete = const Value.absent(),
    this.formaPagamento = const Value.absent(),
    this.valorFrete = const Value.absent(),
    this.valorSeguro = const Value.absent(),
    this.observacao = const Value.absent(),
    this.situacao = const Value.absent(),
    this.diaFixoParcela = const Value.absent(),
  });
  static Insertable<VendaCabecalho> custom({
    Expression<int>? id,
    Expression<int>? idVendaOrcamentoCabecalho,
    Expression<int>? idVendaCondicoesPagamento,
    Expression<int>? idNotaFiscalTipo,
    Expression<int>? idTransportadora,
    Expression<DateTime>? dataVenda,
    Expression<DateTime>? dataSaida,
    Expression<String>? horaSaida,
    Expression<int>? numeroFatura,
    Expression<String>? localEntrega,
    Expression<String>? localCobranca,
    Expression<double>? valorSubtotal,
    Expression<double>? taxaComissao,
    Expression<double>? valorComissao,
    Expression<double>? taxaDesconto,
    Expression<double>? valorDesconto,
    Expression<double>? valorTotal,
    Expression<String>? tipoFrete,
    Expression<String>? formaPagamento,
    Expression<double>? valorFrete,
    Expression<double>? valorSeguro,
    Expression<String>? observacao,
    Expression<String>? situacao,
    Expression<String>? diaFixoParcela,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (idVendaOrcamentoCabecalho != null)
        'id_venda_orcamento_cabecalho': idVendaOrcamentoCabecalho,
      if (idVendaCondicoesPagamento != null)
        'id_venda_condicoes_pagamento': idVendaCondicoesPagamento,
      if (idNotaFiscalTipo != null) 'id_nota_fiscal_tipo': idNotaFiscalTipo,
      if (idTransportadora != null) 'id_transportadora': idTransportadora,
      if (dataVenda != null) 'data_venda': dataVenda,
      if (dataSaida != null) 'data_saida': dataSaida,
      if (horaSaida != null) 'hora_saida': horaSaida,
      if (numeroFatura != null) 'numero_fatura': numeroFatura,
      if (localEntrega != null) 'local_entrega': localEntrega,
      if (localCobranca != null) 'local_cobranca': localCobranca,
      if (valorSubtotal != null) 'valor_subtotal': valorSubtotal,
      if (taxaComissao != null) 'taxa_comissao': taxaComissao,
      if (valorComissao != null) 'valor_comissao': valorComissao,
      if (taxaDesconto != null) 'taxa_desconto': taxaDesconto,
      if (valorDesconto != null) 'valor_desconto': valorDesconto,
      if (valorTotal != null) 'valor_total': valorTotal,
      if (tipoFrete != null) 'tipo_frete': tipoFrete,
      if (formaPagamento != null) 'forma_pagamento': formaPagamento,
      if (valorFrete != null) 'valor_frete': valorFrete,
      if (valorSeguro != null) 'valor_seguro': valorSeguro,
      if (observacao != null) 'observacao': observacao,
      if (situacao != null) 'situacao': situacao,
      if (diaFixoParcela != null) 'dia_fixo_parcela': diaFixoParcela,
    });
  }

  VendaCabecalhosCompanion copyWith({
    Value<int?>? id,
    Value<int?>? idVendaOrcamentoCabecalho,
    Value<int?>? idVendaCondicoesPagamento,
    Value<int?>? idNotaFiscalTipo,
    Value<int?>? idTransportadora,
    Value<DateTime?>? dataVenda,
    Value<DateTime?>? dataSaida,
    Value<String?>? horaSaida,
    Value<int?>? numeroFatura,
    Value<String?>? localEntrega,
    Value<String?>? localCobranca,
    Value<double?>? valorSubtotal,
    Value<double?>? taxaComissao,
    Value<double?>? valorComissao,
    Value<double?>? taxaDesconto,
    Value<double?>? valorDesconto,
    Value<double?>? valorTotal,
    Value<String?>? tipoFrete,
    Value<String?>? formaPagamento,
    Value<double?>? valorFrete,
    Value<double?>? valorSeguro,
    Value<String?>? observacao,
    Value<String?>? situacao,
    Value<String?>? diaFixoParcela,
  }) {
    return VendaCabecalhosCompanion(
      id: id ?? this.id,
      idVendaOrcamentoCabecalho:
          idVendaOrcamentoCabecalho ?? this.idVendaOrcamentoCabecalho,
      idVendaCondicoesPagamento:
          idVendaCondicoesPagamento ?? this.idVendaCondicoesPagamento,
      idNotaFiscalTipo: idNotaFiscalTipo ?? this.idNotaFiscalTipo,
      idTransportadora: idTransportadora ?? this.idTransportadora,
      dataVenda: dataVenda ?? this.dataVenda,
      dataSaida: dataSaida ?? this.dataSaida,
      horaSaida: horaSaida ?? this.horaSaida,
      numeroFatura: numeroFatura ?? this.numeroFatura,
      localEntrega: localEntrega ?? this.localEntrega,
      localCobranca: localCobranca ?? this.localCobranca,
      valorSubtotal: valorSubtotal ?? this.valorSubtotal,
      taxaComissao: taxaComissao ?? this.taxaComissao,
      valorComissao: valorComissao ?? this.valorComissao,
      taxaDesconto: taxaDesconto ?? this.taxaDesconto,
      valorDesconto: valorDesconto ?? this.valorDesconto,
      valorTotal: valorTotal ?? this.valorTotal,
      tipoFrete: tipoFrete ?? this.tipoFrete,
      formaPagamento: formaPagamento ?? this.formaPagamento,
      valorFrete: valorFrete ?? this.valorFrete,
      valorSeguro: valorSeguro ?? this.valorSeguro,
      observacao: observacao ?? this.observacao,
      situacao: situacao ?? this.situacao,
      diaFixoParcela: diaFixoParcela ?? this.diaFixoParcela,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (idVendaOrcamentoCabecalho.present) {
      map['id_venda_orcamento_cabecalho'] = Variable<int>(
        idVendaOrcamentoCabecalho.value,
      );
    }
    if (idVendaCondicoesPagamento.present) {
      map['id_venda_condicoes_pagamento'] = Variable<int>(
        idVendaCondicoesPagamento.value,
      );
    }
    if (idNotaFiscalTipo.present) {
      map['id_nota_fiscal_tipo'] = Variable<int>(idNotaFiscalTipo.value);
    }
    if (idTransportadora.present) {
      map['id_transportadora'] = Variable<int>(idTransportadora.value);
    }
    if (dataVenda.present) {
      map['data_venda'] = Variable<DateTime>(dataVenda.value);
    }
    if (dataSaida.present) {
      map['data_saida'] = Variable<DateTime>(dataSaida.value);
    }
    if (horaSaida.present) {
      map['hora_saida'] = Variable<String>(horaSaida.value);
    }
    if (numeroFatura.present) {
      map['numero_fatura'] = Variable<int>(numeroFatura.value);
    }
    if (localEntrega.present) {
      map['local_entrega'] = Variable<String>(localEntrega.value);
    }
    if (localCobranca.present) {
      map['local_cobranca'] = Variable<String>(localCobranca.value);
    }
    if (valorSubtotal.present) {
      map['valor_subtotal'] = Variable<double>(valorSubtotal.value);
    }
    if (taxaComissao.present) {
      map['taxa_comissao'] = Variable<double>(taxaComissao.value);
    }
    if (valorComissao.present) {
      map['valor_comissao'] = Variable<double>(valorComissao.value);
    }
    if (taxaDesconto.present) {
      map['taxa_desconto'] = Variable<double>(taxaDesconto.value);
    }
    if (valorDesconto.present) {
      map['valor_desconto'] = Variable<double>(valorDesconto.value);
    }
    if (valorTotal.present) {
      map['valor_total'] = Variable<double>(valorTotal.value);
    }
    if (tipoFrete.present) {
      map['tipo_frete'] = Variable<String>(tipoFrete.value);
    }
    if (formaPagamento.present) {
      map['forma_pagamento'] = Variable<String>(formaPagamento.value);
    }
    if (valorFrete.present) {
      map['valor_frete'] = Variable<double>(valorFrete.value);
    }
    if (valorSeguro.present) {
      map['valor_seguro'] = Variable<double>(valorSeguro.value);
    }
    if (observacao.present) {
      map['observacao'] = Variable<String>(observacao.value);
    }
    if (situacao.present) {
      map['situacao'] = Variable<String>(situacao.value);
    }
    if (diaFixoParcela.present) {
      map['dia_fixo_parcela'] = Variable<String>(diaFixoParcela.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('VendaCabecalhosCompanion(')
          ..write('id: $id, ')
          ..write('idVendaOrcamentoCabecalho: $idVendaOrcamentoCabecalho, ')
          ..write('idVendaCondicoesPagamento: $idVendaCondicoesPagamento, ')
          ..write('idNotaFiscalTipo: $idNotaFiscalTipo, ')
          ..write('idTransportadora: $idTransportadora, ')
          ..write('dataVenda: $dataVenda, ')
          ..write('dataSaida: $dataSaida, ')
          ..write('horaSaida: $horaSaida, ')
          ..write('numeroFatura: $numeroFatura, ')
          ..write('localEntrega: $localEntrega, ')
          ..write('localCobranca: $localCobranca, ')
          ..write('valorSubtotal: $valorSubtotal, ')
          ..write('taxaComissao: $taxaComissao, ')
          ..write('valorComissao: $valorComissao, ')
          ..write('taxaDesconto: $taxaDesconto, ')
          ..write('valorDesconto: $valorDesconto, ')
          ..write('valorTotal: $valorTotal, ')
          ..write('tipoFrete: $tipoFrete, ')
          ..write('formaPagamento: $formaPagamento, ')
          ..write('valorFrete: $valorFrete, ')
          ..write('valorSeguro: $valorSeguro, ')
          ..write('observacao: $observacao, ')
          ..write('situacao: $situacao, ')
          ..write('diaFixoParcela: $diaFixoParcela')
          ..write(')'))
        .toString();
  }
}

class $NfeImportacaoDetalhesTable extends NfeImportacaoDetalhes
    with TableInfo<$NfeImportacaoDetalhesTable, NfeImportacaoDetalhe> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeImportacaoDetalhesTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
    'id',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idNfeDeclaracaoImportacaoMeta =
      const VerificationMeta('idNfeDeclaracaoImportacao');
  @override
  late final GeneratedColumn<int> idNfeDeclaracaoImportacao =
      GeneratedColumn<int>(
        'id_nfe_declaracao_importacao',
        aliasedName,
        true,
        type: DriftSqlType.int,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _numeroAdicaoMeta = const VerificationMeta(
    'numeroAdicao',
  );
  @override
  late final GeneratedColumn<int> numeroAdicao = GeneratedColumn<int>(
    'numero_adicao',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _numeroSequencialMeta = const VerificationMeta(
    'numeroSequencial',
  );
  @override
  late final GeneratedColumn<int> numeroSequencial = GeneratedColumn<int>(
    'numero_sequencial',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _codigoFabricanteEstrangeiroMeta =
      const VerificationMeta('codigoFabricanteEstrangeiro');
  @override
  late final GeneratedColumn<String> codigoFabricanteEstrangeiro =
      GeneratedColumn<String>(
        'codigo_fabricante_estrangeiro',
        aliasedName,
        true,
        additionalChecks: GeneratedColumn.checkTextLength(
          minTextLength: 0,
          maxTextLength: 60,
        ),
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _valorDescontoMeta = const VerificationMeta(
    'valorDesconto',
  );
  @override
  late final GeneratedColumn<double> valorDesconto = GeneratedColumn<double>(
    'valor_desconto',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _drawbackMeta = const VerificationMeta(
    'drawback',
  );
  @override
  late final GeneratedColumn<String> drawback = GeneratedColumn<String>(
    'drawback',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 20,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    idNfeDeclaracaoImportacao,
    numeroAdicao,
    numeroSequencial,
    codigoFabricanteEstrangeiro,
    valorDesconto,
    drawback,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'nfe_importacao_detalhe';
  @override
  VerificationContext validateIntegrity(
    Insertable<NfeImportacaoDetalhe> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('id_nfe_declaracao_importacao')) {
      context.handle(
        _idNfeDeclaracaoImportacaoMeta,
        idNfeDeclaracaoImportacao.isAcceptableOrUnknown(
          data['id_nfe_declaracao_importacao']!,
          _idNfeDeclaracaoImportacaoMeta,
        ),
      );
    }
    if (data.containsKey('numero_adicao')) {
      context.handle(
        _numeroAdicaoMeta,
        numeroAdicao.isAcceptableOrUnknown(
          data['numero_adicao']!,
          _numeroAdicaoMeta,
        ),
      );
    }
    if (data.containsKey('numero_sequencial')) {
      context.handle(
        _numeroSequencialMeta,
        numeroSequencial.isAcceptableOrUnknown(
          data['numero_sequencial']!,
          _numeroSequencialMeta,
        ),
      );
    }
    if (data.containsKey('codigo_fabricante_estrangeiro')) {
      context.handle(
        _codigoFabricanteEstrangeiroMeta,
        codigoFabricanteEstrangeiro.isAcceptableOrUnknown(
          data['codigo_fabricante_estrangeiro']!,
          _codigoFabricanteEstrangeiroMeta,
        ),
      );
    }
    if (data.containsKey('valor_desconto')) {
      context.handle(
        _valorDescontoMeta,
        valorDesconto.isAcceptableOrUnknown(
          data['valor_desconto']!,
          _valorDescontoMeta,
        ),
      );
    }
    if (data.containsKey('drawback')) {
      context.handle(
        _drawbackMeta,
        drawback.isAcceptableOrUnknown(data['drawback']!, _drawbackMeta),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeImportacaoDetalhe map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return NfeImportacaoDetalhe(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id'],
      ),
      idNfeDeclaracaoImportacao: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_nfe_declaracao_importacao'],
      ),
      numeroAdicao: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}numero_adicao'],
      ),
      numeroSequencial: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}numero_sequencial'],
      ),
      codigoFabricanteEstrangeiro: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}codigo_fabricante_estrangeiro'],
      ),
      valorDesconto: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}valor_desconto'],
      ),
      drawback: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}drawback'],
      ),
    );
  }

  @override
  $NfeImportacaoDetalhesTable createAlias(String alias) {
    return $NfeImportacaoDetalhesTable(attachedDatabase, alias);
  }
}

class NfeImportacaoDetalhe extends DataClass
    implements Insertable<NfeImportacaoDetalhe> {
  final int? id;
  final int? idNfeDeclaracaoImportacao;
  final int? numeroAdicao;
  final int? numeroSequencial;
  final String? codigoFabricanteEstrangeiro;
  final double? valorDesconto;
  final String? drawback;
  const NfeImportacaoDetalhe({
    this.id,
    this.idNfeDeclaracaoImportacao,
    this.numeroAdicao,
    this.numeroSequencial,
    this.codigoFabricanteEstrangeiro,
    this.valorDesconto,
    this.drawback,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeDeclaracaoImportacao != null) {
      map['id_nfe_declaracao_importacao'] = Variable<int>(
        idNfeDeclaracaoImportacao,
      );
    }
    if (!nullToAbsent || numeroAdicao != null) {
      map['numero_adicao'] = Variable<int>(numeroAdicao);
    }
    if (!nullToAbsent || numeroSequencial != null) {
      map['numero_sequencial'] = Variable<int>(numeroSequencial);
    }
    if (!nullToAbsent || codigoFabricanteEstrangeiro != null) {
      map['codigo_fabricante_estrangeiro'] = Variable<String>(
        codigoFabricanteEstrangeiro,
      );
    }
    if (!nullToAbsent || valorDesconto != null) {
      map['valor_desconto'] = Variable<double>(valorDesconto);
    }
    if (!nullToAbsent || drawback != null) {
      map['drawback'] = Variable<String>(drawback);
    }
    return map;
  }

  factory NfeImportacaoDetalhe.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeImportacaoDetalhe(
      id: serializer.fromJson<int?>(json['id']),
      idNfeDeclaracaoImportacao: serializer.fromJson<int?>(
        json['idNfeDeclaracaoImportacao'],
      ),
      numeroAdicao: serializer.fromJson<int?>(json['numeroAdicao']),
      numeroSequencial: serializer.fromJson<int?>(json['numeroSequencial']),
      codigoFabricanteEstrangeiro: serializer.fromJson<String?>(
        json['codigoFabricanteEstrangeiro'],
      ),
      valorDesconto: serializer.fromJson<double?>(json['valorDesconto']),
      drawback: serializer.fromJson<String?>(json['drawback']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeDeclaracaoImportacao': serializer.toJson<int?>(
        idNfeDeclaracaoImportacao,
      ),
      'numeroAdicao': serializer.toJson<int?>(numeroAdicao),
      'numeroSequencial': serializer.toJson<int?>(numeroSequencial),
      'codigoFabricanteEstrangeiro': serializer.toJson<String?>(
        codigoFabricanteEstrangeiro,
      ),
      'valorDesconto': serializer.toJson<double?>(valorDesconto),
      'drawback': serializer.toJson<String?>(drawback),
    };
  }

  NfeImportacaoDetalhe copyWith({
    Value<int?> id = const Value.absent(),
    Value<int?> idNfeDeclaracaoImportacao = const Value.absent(),
    Value<int?> numeroAdicao = const Value.absent(),
    Value<int?> numeroSequencial = const Value.absent(),
    Value<String?> codigoFabricanteEstrangeiro = const Value.absent(),
    Value<double?> valorDesconto = const Value.absent(),
    Value<String?> drawback = const Value.absent(),
  }) => NfeImportacaoDetalhe(
    id: id.present ? id.value : this.id,
    idNfeDeclaracaoImportacao:
        idNfeDeclaracaoImportacao.present
            ? idNfeDeclaracaoImportacao.value
            : this.idNfeDeclaracaoImportacao,
    numeroAdicao: numeroAdicao.present ? numeroAdicao.value : this.numeroAdicao,
    numeroSequencial:
        numeroSequencial.present
            ? numeroSequencial.value
            : this.numeroSequencial,
    codigoFabricanteEstrangeiro:
        codigoFabricanteEstrangeiro.present
            ? codigoFabricanteEstrangeiro.value
            : this.codigoFabricanteEstrangeiro,
    valorDesconto:
        valorDesconto.present ? valorDesconto.value : this.valorDesconto,
    drawback: drawback.present ? drawback.value : this.drawback,
  );
  NfeImportacaoDetalhe copyWithCompanion(NfeImportacaoDetalhesCompanion data) {
    return NfeImportacaoDetalhe(
      id: data.id.present ? data.id.value : this.id,
      idNfeDeclaracaoImportacao:
          data.idNfeDeclaracaoImportacao.present
              ? data.idNfeDeclaracaoImportacao.value
              : this.idNfeDeclaracaoImportacao,
      numeroAdicao:
          data.numeroAdicao.present
              ? data.numeroAdicao.value
              : this.numeroAdicao,
      numeroSequencial:
          data.numeroSequencial.present
              ? data.numeroSequencial.value
              : this.numeroSequencial,
      codigoFabricanteEstrangeiro:
          data.codigoFabricanteEstrangeiro.present
              ? data.codigoFabricanteEstrangeiro.value
              : this.codigoFabricanteEstrangeiro,
      valorDesconto:
          data.valorDesconto.present
              ? data.valorDesconto.value
              : this.valorDesconto,
      drawback: data.drawback.present ? data.drawback.value : this.drawback,
    );
  }

  @override
  String toString() {
    return (StringBuffer('NfeImportacaoDetalhe(')
          ..write('id: $id, ')
          ..write('idNfeDeclaracaoImportacao: $idNfeDeclaracaoImportacao, ')
          ..write('numeroAdicao: $numeroAdicao, ')
          ..write('numeroSequencial: $numeroSequencial, ')
          ..write('codigoFabricanteEstrangeiro: $codigoFabricanteEstrangeiro, ')
          ..write('valorDesconto: $valorDesconto, ')
          ..write('drawback: $drawback')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    idNfeDeclaracaoImportacao,
    numeroAdicao,
    numeroSequencial,
    codigoFabricanteEstrangeiro,
    valorDesconto,
    drawback,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeImportacaoDetalhe &&
          other.id == this.id &&
          other.idNfeDeclaracaoImportacao == this.idNfeDeclaracaoImportacao &&
          other.numeroAdicao == this.numeroAdicao &&
          other.numeroSequencial == this.numeroSequencial &&
          other.codigoFabricanteEstrangeiro ==
              this.codigoFabricanteEstrangeiro &&
          other.valorDesconto == this.valorDesconto &&
          other.drawback == this.drawback);
}

class NfeImportacaoDetalhesCompanion
    extends UpdateCompanion<NfeImportacaoDetalhe> {
  final Value<int?> id;
  final Value<int?> idNfeDeclaracaoImportacao;
  final Value<int?> numeroAdicao;
  final Value<int?> numeroSequencial;
  final Value<String?> codigoFabricanteEstrangeiro;
  final Value<double?> valorDesconto;
  final Value<String?> drawback;
  const NfeImportacaoDetalhesCompanion({
    this.id = const Value.absent(),
    this.idNfeDeclaracaoImportacao = const Value.absent(),
    this.numeroAdicao = const Value.absent(),
    this.numeroSequencial = const Value.absent(),
    this.codigoFabricanteEstrangeiro = const Value.absent(),
    this.valorDesconto = const Value.absent(),
    this.drawback = const Value.absent(),
  });
  NfeImportacaoDetalhesCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeDeclaracaoImportacao = const Value.absent(),
    this.numeroAdicao = const Value.absent(),
    this.numeroSequencial = const Value.absent(),
    this.codigoFabricanteEstrangeiro = const Value.absent(),
    this.valorDesconto = const Value.absent(),
    this.drawback = const Value.absent(),
  });
  static Insertable<NfeImportacaoDetalhe> custom({
    Expression<int>? id,
    Expression<int>? idNfeDeclaracaoImportacao,
    Expression<int>? numeroAdicao,
    Expression<int>? numeroSequencial,
    Expression<String>? codigoFabricanteEstrangeiro,
    Expression<double>? valorDesconto,
    Expression<String>? drawback,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (idNfeDeclaracaoImportacao != null)
        'id_nfe_declaracao_importacao': idNfeDeclaracaoImportacao,
      if (numeroAdicao != null) 'numero_adicao': numeroAdicao,
      if (numeroSequencial != null) 'numero_sequencial': numeroSequencial,
      if (codigoFabricanteEstrangeiro != null)
        'codigo_fabricante_estrangeiro': codigoFabricanteEstrangeiro,
      if (valorDesconto != null) 'valor_desconto': valorDesconto,
      if (drawback != null) 'drawback': drawback,
    });
  }

  NfeImportacaoDetalhesCompanion copyWith({
    Value<int?>? id,
    Value<int?>? idNfeDeclaracaoImportacao,
    Value<int?>? numeroAdicao,
    Value<int?>? numeroSequencial,
    Value<String?>? codigoFabricanteEstrangeiro,
    Value<double?>? valorDesconto,
    Value<String?>? drawback,
  }) {
    return NfeImportacaoDetalhesCompanion(
      id: id ?? this.id,
      idNfeDeclaracaoImportacao:
          idNfeDeclaracaoImportacao ?? this.idNfeDeclaracaoImportacao,
      numeroAdicao: numeroAdicao ?? this.numeroAdicao,
      numeroSequencial: numeroSequencial ?? this.numeroSequencial,
      codigoFabricanteEstrangeiro:
          codigoFabricanteEstrangeiro ?? this.codigoFabricanteEstrangeiro,
      valorDesconto: valorDesconto ?? this.valorDesconto,
      drawback: drawback ?? this.drawback,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (idNfeDeclaracaoImportacao.present) {
      map['id_nfe_declaracao_importacao'] = Variable<int>(
        idNfeDeclaracaoImportacao.value,
      );
    }
    if (numeroAdicao.present) {
      map['numero_adicao'] = Variable<int>(numeroAdicao.value);
    }
    if (numeroSequencial.present) {
      map['numero_sequencial'] = Variable<int>(numeroSequencial.value);
    }
    if (codigoFabricanteEstrangeiro.present) {
      map['codigo_fabricante_estrangeiro'] = Variable<String>(
        codigoFabricanteEstrangeiro.value,
      );
    }
    if (valorDesconto.present) {
      map['valor_desconto'] = Variable<double>(valorDesconto.value);
    }
    if (drawback.present) {
      map['drawback'] = Variable<String>(drawback.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeImportacaoDetalhesCompanion(')
          ..write('id: $id, ')
          ..write('idNfeDeclaracaoImportacao: $idNfeDeclaracaoImportacao, ')
          ..write('numeroAdicao: $numeroAdicao, ')
          ..write('numeroSequencial: $numeroSequencial, ')
          ..write('codigoFabricanteEstrangeiro: $codigoFabricanteEstrangeiro, ')
          ..write('valorDesconto: $valorDesconto, ')
          ..write('drawback: $drawback')
          ..write(')'))
        .toString();
  }
}

class $NfeNumerosTable extends NfeNumeros
    with TableInfo<$NfeNumerosTable, NfeNumero> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeNumerosTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
    'id',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _serieMeta = const VerificationMeta('serie');
  @override
  late final GeneratedColumn<String> serie = GeneratedColumn<String>(
    'serie',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 3,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _numeroMeta = const VerificationMeta('numero');
  @override
  late final GeneratedColumn<int> numero = GeneratedColumn<int>(
    'numero',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  @override
  List<GeneratedColumn> get $columns => [id, serie, numero];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'nfe_numero';
  @override
  VerificationContext validateIntegrity(
    Insertable<NfeNumero> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('serie')) {
      context.handle(
        _serieMeta,
        serie.isAcceptableOrUnknown(data['serie']!, _serieMeta),
      );
    }
    if (data.containsKey('numero')) {
      context.handle(
        _numeroMeta,
        numero.isAcceptableOrUnknown(data['numero']!, _numeroMeta),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeNumero map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return NfeNumero(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id'],
      ),
      serie: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}serie'],
      ),
      numero: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}numero'],
      ),
    );
  }

  @override
  $NfeNumerosTable createAlias(String alias) {
    return $NfeNumerosTable(attachedDatabase, alias);
  }
}

class NfeNumero extends DataClass implements Insertable<NfeNumero> {
  final int? id;
  final String? serie;
  final int? numero;
  const NfeNumero({this.id, this.serie, this.numero});
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || serie != null) {
      map['serie'] = Variable<String>(serie);
    }
    if (!nullToAbsent || numero != null) {
      map['numero'] = Variable<int>(numero);
    }
    return map;
  }

  factory NfeNumero.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeNumero(
      id: serializer.fromJson<int?>(json['id']),
      serie: serializer.fromJson<String?>(json['serie']),
      numero: serializer.fromJson<int?>(json['numero']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'serie': serializer.toJson<String?>(serie),
      'numero': serializer.toJson<int?>(numero),
    };
  }

  NfeNumero copyWith({
    Value<int?> id = const Value.absent(),
    Value<String?> serie = const Value.absent(),
    Value<int?> numero = const Value.absent(),
  }) => NfeNumero(
    id: id.present ? id.value : this.id,
    serie: serie.present ? serie.value : this.serie,
    numero: numero.present ? numero.value : this.numero,
  );
  NfeNumero copyWithCompanion(NfeNumerosCompanion data) {
    return NfeNumero(
      id: data.id.present ? data.id.value : this.id,
      serie: data.serie.present ? data.serie.value : this.serie,
      numero: data.numero.present ? data.numero.value : this.numero,
    );
  }

  @override
  String toString() {
    return (StringBuffer('NfeNumero(')
          ..write('id: $id, ')
          ..write('serie: $serie, ')
          ..write('numero: $numero')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(id, serie, numero);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeNumero &&
          other.id == this.id &&
          other.serie == this.serie &&
          other.numero == this.numero);
}

class NfeNumerosCompanion extends UpdateCompanion<NfeNumero> {
  final Value<int?> id;
  final Value<String?> serie;
  final Value<int?> numero;
  const NfeNumerosCompanion({
    this.id = const Value.absent(),
    this.serie = const Value.absent(),
    this.numero = const Value.absent(),
  });
  NfeNumerosCompanion.insert({
    this.id = const Value.absent(),
    this.serie = const Value.absent(),
    this.numero = const Value.absent(),
  });
  static Insertable<NfeNumero> custom({
    Expression<int>? id,
    Expression<String>? serie,
    Expression<int>? numero,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (serie != null) 'serie': serie,
      if (numero != null) 'numero': numero,
    });
  }

  NfeNumerosCompanion copyWith({
    Value<int?>? id,
    Value<String?>? serie,
    Value<int?>? numero,
  }) {
    return NfeNumerosCompanion(
      id: id ?? this.id,
      serie: serie ?? this.serie,
      numero: numero ?? this.numero,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (serie.present) {
      map['serie'] = Variable<String>(serie.value);
    }
    if (numero.present) {
      map['numero'] = Variable<int>(numero.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeNumerosCompanion(')
          ..write('id: $id, ')
          ..write('serie: $serie, ')
          ..write('numero: $numero')
          ..write(')'))
        .toString();
  }
}

class $NfeConfiguracaosTable extends NfeConfiguracaos
    with TableInfo<$NfeConfiguracaosTable, NfeConfiguracao> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeConfiguracaosTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
    'id',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _certificadoDigitalSerieMeta =
      const VerificationMeta('certificadoDigitalSerie');
  @override
  late final GeneratedColumn<String> certificadoDigitalSerie =
      GeneratedColumn<String>(
        'certificado_digital_serie',
        aliasedName,
        true,
        additionalChecks: GeneratedColumn.checkTextLength(
          minTextLength: 0,
          maxTextLength: 100,
        ),
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _certificadoDigitalCaminhoMeta =
      const VerificationMeta('certificadoDigitalCaminho');
  @override
  late final GeneratedColumn<String> certificadoDigitalCaminho =
      GeneratedColumn<String>(
        'certificado_digital_caminho',
        aliasedName,
        true,
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _certificadoDigitalSenhaMeta =
      const VerificationMeta('certificadoDigitalSenha');
  @override
  late final GeneratedColumn<String> certificadoDigitalSenha =
      GeneratedColumn<String>(
        'certificado_digital_senha',
        aliasedName,
        true,
        additionalChecks: GeneratedColumn.checkTextLength(
          minTextLength: 0,
          maxTextLength: 100,
        ),
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _tipoEmissaoMeta = const VerificationMeta(
    'tipoEmissao',
  );
  @override
  late final GeneratedColumn<int> tipoEmissao = GeneratedColumn<int>(
    'tipo_emissao',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _formatoImpressaoDanfeMeta =
      const VerificationMeta('formatoImpressaoDanfe');
  @override
  late final GeneratedColumn<int> formatoImpressaoDanfe = GeneratedColumn<int>(
    'formato_impressao_danfe',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _processoEmissaoMeta = const VerificationMeta(
    'processoEmissao',
  );
  @override
  late final GeneratedColumn<int> processoEmissao = GeneratedColumn<int>(
    'processo_emissao',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _versaoProcessoEmissaoMeta =
      const VerificationMeta('versaoProcessoEmissao');
  @override
  late final GeneratedColumn<String> versaoProcessoEmissao =
      GeneratedColumn<String>(
        'versao_processo_emissao',
        aliasedName,
        true,
        additionalChecks: GeneratedColumn.checkTextLength(
          minTextLength: 0,
          maxTextLength: 20,
        ),
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _caminhoLogomarcaMeta = const VerificationMeta(
    'caminhoLogomarca',
  );
  @override
  late final GeneratedColumn<String> caminhoLogomarca = GeneratedColumn<String>(
    'caminho_logomarca',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _salvarXmlMeta = const VerificationMeta(
    'salvarXml',
  );
  @override
  late final GeneratedColumn<String> salvarXml = GeneratedColumn<String>(
    'salvar_xml',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 1,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _caminhoSalvarXmlMeta = const VerificationMeta(
    'caminhoSalvarXml',
  );
  @override
  late final GeneratedColumn<String> caminhoSalvarXml = GeneratedColumn<String>(
    'caminho_salvar_xml',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _caminhoSchemasMeta = const VerificationMeta(
    'caminhoSchemas',
  );
  @override
  late final GeneratedColumn<String> caminhoSchemas = GeneratedColumn<String>(
    'caminho_schemas',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _caminhoArquivoDanfeMeta =
      const VerificationMeta('caminhoArquivoDanfe');
  @override
  late final GeneratedColumn<String> caminhoArquivoDanfe =
      GeneratedColumn<String>(
        'caminho_arquivo_danfe',
        aliasedName,
        true,
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _caminhoSalvarPdfMeta = const VerificationMeta(
    'caminhoSalvarPdf',
  );
  @override
  late final GeneratedColumn<String> caminhoSalvarPdf = GeneratedColumn<String>(
    'caminho_salvar_pdf',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _webserviceUfMeta = const VerificationMeta(
    'webserviceUf',
  );
  @override
  late final GeneratedColumn<String> webserviceUf = GeneratedColumn<String>(
    'webservice_uf',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 2,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _webserviceAmbienteMeta =
      const VerificationMeta('webserviceAmbiente');
  @override
  late final GeneratedColumn<int> webserviceAmbiente = GeneratedColumn<int>(
    'webservice_ambiente',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _webserviceProxyHostMeta =
      const VerificationMeta('webserviceProxyHost');
  @override
  late final GeneratedColumn<String> webserviceProxyHost =
      GeneratedColumn<String>(
        'webservice_proxy_host',
        aliasedName,
        true,
        additionalChecks: GeneratedColumn.checkTextLength(
          minTextLength: 0,
          maxTextLength: 100,
        ),
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _webserviceProxyPortaMeta =
      const VerificationMeta('webserviceProxyPorta');
  @override
  late final GeneratedColumn<int> webserviceProxyPorta = GeneratedColumn<int>(
    'webservice_proxy_porta',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _webserviceProxyUsuarioMeta =
      const VerificationMeta('webserviceProxyUsuario');
  @override
  late final GeneratedColumn<String> webserviceProxyUsuario =
      GeneratedColumn<String>(
        'webservice_proxy_usuario',
        aliasedName,
        true,
        additionalChecks: GeneratedColumn.checkTextLength(
          minTextLength: 0,
          maxTextLength: 100,
        ),
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _webserviceProxySenhaMeta =
      const VerificationMeta('webserviceProxySenha');
  @override
  late final GeneratedColumn<String> webserviceProxySenha =
      GeneratedColumn<String>(
        'webservice_proxy_senha',
        aliasedName,
        true,
        additionalChecks: GeneratedColumn.checkTextLength(
          minTextLength: 0,
          maxTextLength: 100,
        ),
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _webserviceVisualizarMeta =
      const VerificationMeta('webserviceVisualizar');
  @override
  late final GeneratedColumn<String> webserviceVisualizar =
      GeneratedColumn<String>(
        'webservice_visualizar',
        aliasedName,
        true,
        additionalChecks: GeneratedColumn.checkTextLength(
          minTextLength: 0,
          maxTextLength: 1,
        ),
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _emailServidorSmtpMeta = const VerificationMeta(
    'emailServidorSmtp',
  );
  @override
  late final GeneratedColumn<String> emailServidorSmtp =
      GeneratedColumn<String>(
        'email_servidor_smtp',
        aliasedName,
        true,
        additionalChecks: GeneratedColumn.checkTextLength(
          minTextLength: 0,
          maxTextLength: 100,
        ),
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _emailPortaMeta = const VerificationMeta(
    'emailPorta',
  );
  @override
  late final GeneratedColumn<int> emailPorta = GeneratedColumn<int>(
    'email_porta',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _emailUsuarioMeta = const VerificationMeta(
    'emailUsuario',
  );
  @override
  late final GeneratedColumn<String> emailUsuario = GeneratedColumn<String>(
    'email_usuario',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 100,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _emailSenhaMeta = const VerificationMeta(
    'emailSenha',
  );
  @override
  late final GeneratedColumn<String> emailSenha = GeneratedColumn<String>(
    'email_senha',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 100,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _emailAssuntoMeta = const VerificationMeta(
    'emailAssunto',
  );
  @override
  late final GeneratedColumn<String> emailAssunto = GeneratedColumn<String>(
    'email_assunto',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 100,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _emailAutenticaSslMeta = const VerificationMeta(
    'emailAutenticaSsl',
  );
  @override
  late final GeneratedColumn<String> emailAutenticaSsl =
      GeneratedColumn<String>(
        'email_autentica_ssl',
        aliasedName,
        true,
        additionalChecks: GeneratedColumn.checkTextLength(
          minTextLength: 0,
          maxTextLength: 1,
        ),
        type: DriftSqlType.string,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _emailTextoMeta = const VerificationMeta(
    'emailTexto',
  );
  @override
  late final GeneratedColumn<String> emailTexto = GeneratedColumn<String>(
    'email_texto',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    certificadoDigitalSerie,
    certificadoDigitalCaminho,
    certificadoDigitalSenha,
    tipoEmissao,
    formatoImpressaoDanfe,
    processoEmissao,
    versaoProcessoEmissao,
    caminhoLogomarca,
    salvarXml,
    caminhoSalvarXml,
    caminhoSchemas,
    caminhoArquivoDanfe,
    caminhoSalvarPdf,
    webserviceUf,
    webserviceAmbiente,
    webserviceProxyHost,
    webserviceProxyPorta,
    webserviceProxyUsuario,
    webserviceProxySenha,
    webserviceVisualizar,
    emailServidorSmtp,
    emailPorta,
    emailUsuario,
    emailSenha,
    emailAssunto,
    emailAutenticaSsl,
    emailTexto,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'nfe_configuracao';
  @override
  VerificationContext validateIntegrity(
    Insertable<NfeConfiguracao> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('certificado_digital_serie')) {
      context.handle(
        _certificadoDigitalSerieMeta,
        certificadoDigitalSerie.isAcceptableOrUnknown(
          data['certificado_digital_serie']!,
          _certificadoDigitalSerieMeta,
        ),
      );
    }
    if (data.containsKey('certificado_digital_caminho')) {
      context.handle(
        _certificadoDigitalCaminhoMeta,
        certificadoDigitalCaminho.isAcceptableOrUnknown(
          data['certificado_digital_caminho']!,
          _certificadoDigitalCaminhoMeta,
        ),
      );
    }
    if (data.containsKey('certificado_digital_senha')) {
      context.handle(
        _certificadoDigitalSenhaMeta,
        certificadoDigitalSenha.isAcceptableOrUnknown(
          data['certificado_digital_senha']!,
          _certificadoDigitalSenhaMeta,
        ),
      );
    }
    if (data.containsKey('tipo_emissao')) {
      context.handle(
        _tipoEmissaoMeta,
        tipoEmissao.isAcceptableOrUnknown(
          data['tipo_emissao']!,
          _tipoEmissaoMeta,
        ),
      );
    }
    if (data.containsKey('formato_impressao_danfe')) {
      context.handle(
        _formatoImpressaoDanfeMeta,
        formatoImpressaoDanfe.isAcceptableOrUnknown(
          data['formato_impressao_danfe']!,
          _formatoImpressaoDanfeMeta,
        ),
      );
    }
    if (data.containsKey('processo_emissao')) {
      context.handle(
        _processoEmissaoMeta,
        processoEmissao.isAcceptableOrUnknown(
          data['processo_emissao']!,
          _processoEmissaoMeta,
        ),
      );
    }
    if (data.containsKey('versao_processo_emissao')) {
      context.handle(
        _versaoProcessoEmissaoMeta,
        versaoProcessoEmissao.isAcceptableOrUnknown(
          data['versao_processo_emissao']!,
          _versaoProcessoEmissaoMeta,
        ),
      );
    }
    if (data.containsKey('caminho_logomarca')) {
      context.handle(
        _caminhoLogomarcaMeta,
        caminhoLogomarca.isAcceptableOrUnknown(
          data['caminho_logomarca']!,
          _caminhoLogomarcaMeta,
        ),
      );
    }
    if (data.containsKey('salvar_xml')) {
      context.handle(
        _salvarXmlMeta,
        salvarXml.isAcceptableOrUnknown(data['salvar_xml']!, _salvarXmlMeta),
      );
    }
    if (data.containsKey('caminho_salvar_xml')) {
      context.handle(
        _caminhoSalvarXmlMeta,
        caminhoSalvarXml.isAcceptableOrUnknown(
          data['caminho_salvar_xml']!,
          _caminhoSalvarXmlMeta,
        ),
      );
    }
    if (data.containsKey('caminho_schemas')) {
      context.handle(
        _caminhoSchemasMeta,
        caminhoSchemas.isAcceptableOrUnknown(
          data['caminho_schemas']!,
          _caminhoSchemasMeta,
        ),
      );
    }
    if (data.containsKey('caminho_arquivo_danfe')) {
      context.handle(
        _caminhoArquivoDanfeMeta,
        caminhoArquivoDanfe.isAcceptableOrUnknown(
          data['caminho_arquivo_danfe']!,
          _caminhoArquivoDanfeMeta,
        ),
      );
    }
    if (data.containsKey('caminho_salvar_pdf')) {
      context.handle(
        _caminhoSalvarPdfMeta,
        caminhoSalvarPdf.isAcceptableOrUnknown(
          data['caminho_salvar_pdf']!,
          _caminhoSalvarPdfMeta,
        ),
      );
    }
    if (data.containsKey('webservice_uf')) {
      context.handle(
        _webserviceUfMeta,
        webserviceUf.isAcceptableOrUnknown(
          data['webservice_uf']!,
          _webserviceUfMeta,
        ),
      );
    }
    if (data.containsKey('webservice_ambiente')) {
      context.handle(
        _webserviceAmbienteMeta,
        webserviceAmbiente.isAcceptableOrUnknown(
          data['webservice_ambiente']!,
          _webserviceAmbienteMeta,
        ),
      );
    }
    if (data.containsKey('webservice_proxy_host')) {
      context.handle(
        _webserviceProxyHostMeta,
        webserviceProxyHost.isAcceptableOrUnknown(
          data['webservice_proxy_host']!,
          _webserviceProxyHostMeta,
        ),
      );
    }
    if (data.containsKey('webservice_proxy_porta')) {
      context.handle(
        _webserviceProxyPortaMeta,
        webserviceProxyPorta.isAcceptableOrUnknown(
          data['webservice_proxy_porta']!,
          _webserviceProxyPortaMeta,
        ),
      );
    }
    if (data.containsKey('webservice_proxy_usuario')) {
      context.handle(
        _webserviceProxyUsuarioMeta,
        webserviceProxyUsuario.isAcceptableOrUnknown(
          data['webservice_proxy_usuario']!,
          _webserviceProxyUsuarioMeta,
        ),
      );
    }
    if (data.containsKey('webservice_proxy_senha')) {
      context.handle(
        _webserviceProxySenhaMeta,
        webserviceProxySenha.isAcceptableOrUnknown(
          data['webservice_proxy_senha']!,
          _webserviceProxySenhaMeta,
        ),
      );
    }
    if (data.containsKey('webservice_visualizar')) {
      context.handle(
        _webserviceVisualizarMeta,
        webserviceVisualizar.isAcceptableOrUnknown(
          data['webservice_visualizar']!,
          _webserviceVisualizarMeta,
        ),
      );
    }
    if (data.containsKey('email_servidor_smtp')) {
      context.handle(
        _emailServidorSmtpMeta,
        emailServidorSmtp.isAcceptableOrUnknown(
          data['email_servidor_smtp']!,
          _emailServidorSmtpMeta,
        ),
      );
    }
    if (data.containsKey('email_porta')) {
      context.handle(
        _emailPortaMeta,
        emailPorta.isAcceptableOrUnknown(data['email_porta']!, _emailPortaMeta),
      );
    }
    if (data.containsKey('email_usuario')) {
      context.handle(
        _emailUsuarioMeta,
        emailUsuario.isAcceptableOrUnknown(
          data['email_usuario']!,
          _emailUsuarioMeta,
        ),
      );
    }
    if (data.containsKey('email_senha')) {
      context.handle(
        _emailSenhaMeta,
        emailSenha.isAcceptableOrUnknown(data['email_senha']!, _emailSenhaMeta),
      );
    }
    if (data.containsKey('email_assunto')) {
      context.handle(
        _emailAssuntoMeta,
        emailAssunto.isAcceptableOrUnknown(
          data['email_assunto']!,
          _emailAssuntoMeta,
        ),
      );
    }
    if (data.containsKey('email_autentica_ssl')) {
      context.handle(
        _emailAutenticaSslMeta,
        emailAutenticaSsl.isAcceptableOrUnknown(
          data['email_autentica_ssl']!,
          _emailAutenticaSslMeta,
        ),
      );
    }
    if (data.containsKey('email_texto')) {
      context.handle(
        _emailTextoMeta,
        emailTexto.isAcceptableOrUnknown(data['email_texto']!, _emailTextoMeta),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeConfiguracao map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return NfeConfiguracao(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id'],
      ),
      certificadoDigitalSerie: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}certificado_digital_serie'],
      ),
      certificadoDigitalCaminho: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}certificado_digital_caminho'],
      ),
      certificadoDigitalSenha: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}certificado_digital_senha'],
      ),
      tipoEmissao: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}tipo_emissao'],
      ),
      formatoImpressaoDanfe: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}formato_impressao_danfe'],
      ),
      processoEmissao: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}processo_emissao'],
      ),
      versaoProcessoEmissao: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}versao_processo_emissao'],
      ),
      caminhoLogomarca: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}caminho_logomarca'],
      ),
      salvarXml: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}salvar_xml'],
      ),
      caminhoSalvarXml: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}caminho_salvar_xml'],
      ),
      caminhoSchemas: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}caminho_schemas'],
      ),
      caminhoArquivoDanfe: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}caminho_arquivo_danfe'],
      ),
      caminhoSalvarPdf: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}caminho_salvar_pdf'],
      ),
      webserviceUf: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}webservice_uf'],
      ),
      webserviceAmbiente: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}webservice_ambiente'],
      ),
      webserviceProxyHost: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}webservice_proxy_host'],
      ),
      webserviceProxyPorta: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}webservice_proxy_porta'],
      ),
      webserviceProxyUsuario: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}webservice_proxy_usuario'],
      ),
      webserviceProxySenha: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}webservice_proxy_senha'],
      ),
      webserviceVisualizar: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}webservice_visualizar'],
      ),
      emailServidorSmtp: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}email_servidor_smtp'],
      ),
      emailPorta: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}email_porta'],
      ),
      emailUsuario: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}email_usuario'],
      ),
      emailSenha: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}email_senha'],
      ),
      emailAssunto: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}email_assunto'],
      ),
      emailAutenticaSsl: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}email_autentica_ssl'],
      ),
      emailTexto: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}email_texto'],
      ),
    );
  }

  @override
  $NfeConfiguracaosTable createAlias(String alias) {
    return $NfeConfiguracaosTable(attachedDatabase, alias);
  }
}

class NfeConfiguracao extends DataClass implements Insertable<NfeConfiguracao> {
  final int? id;
  final String? certificadoDigitalSerie;
  final String? certificadoDigitalCaminho;
  final String? certificadoDigitalSenha;
  final int? tipoEmissao;
  final int? formatoImpressaoDanfe;
  final int? processoEmissao;
  final String? versaoProcessoEmissao;
  final String? caminhoLogomarca;
  final String? salvarXml;
  final String? caminhoSalvarXml;
  final String? caminhoSchemas;
  final String? caminhoArquivoDanfe;
  final String? caminhoSalvarPdf;
  final String? webserviceUf;
  final int? webserviceAmbiente;
  final String? webserviceProxyHost;
  final int? webserviceProxyPorta;
  final String? webserviceProxyUsuario;
  final String? webserviceProxySenha;
  final String? webserviceVisualizar;
  final String? emailServidorSmtp;
  final int? emailPorta;
  final String? emailUsuario;
  final String? emailSenha;
  final String? emailAssunto;
  final String? emailAutenticaSsl;
  final String? emailTexto;
  const NfeConfiguracao({
    this.id,
    this.certificadoDigitalSerie,
    this.certificadoDigitalCaminho,
    this.certificadoDigitalSenha,
    this.tipoEmissao,
    this.formatoImpressaoDanfe,
    this.processoEmissao,
    this.versaoProcessoEmissao,
    this.caminhoLogomarca,
    this.salvarXml,
    this.caminhoSalvarXml,
    this.caminhoSchemas,
    this.caminhoArquivoDanfe,
    this.caminhoSalvarPdf,
    this.webserviceUf,
    this.webserviceAmbiente,
    this.webserviceProxyHost,
    this.webserviceProxyPorta,
    this.webserviceProxyUsuario,
    this.webserviceProxySenha,
    this.webserviceVisualizar,
    this.emailServidorSmtp,
    this.emailPorta,
    this.emailUsuario,
    this.emailSenha,
    this.emailAssunto,
    this.emailAutenticaSsl,
    this.emailTexto,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || certificadoDigitalSerie != null) {
      map['certificado_digital_serie'] = Variable<String>(
        certificadoDigitalSerie,
      );
    }
    if (!nullToAbsent || certificadoDigitalCaminho != null) {
      map['certificado_digital_caminho'] = Variable<String>(
        certificadoDigitalCaminho,
      );
    }
    if (!nullToAbsent || certificadoDigitalSenha != null) {
      map['certificado_digital_senha'] = Variable<String>(
        certificadoDigitalSenha,
      );
    }
    if (!nullToAbsent || tipoEmissao != null) {
      map['tipo_emissao'] = Variable<int>(tipoEmissao);
    }
    if (!nullToAbsent || formatoImpressaoDanfe != null) {
      map['formato_impressao_danfe'] = Variable<int>(formatoImpressaoDanfe);
    }
    if (!nullToAbsent || processoEmissao != null) {
      map['processo_emissao'] = Variable<int>(processoEmissao);
    }
    if (!nullToAbsent || versaoProcessoEmissao != null) {
      map['versao_processo_emissao'] = Variable<String>(versaoProcessoEmissao);
    }
    if (!nullToAbsent || caminhoLogomarca != null) {
      map['caminho_logomarca'] = Variable<String>(caminhoLogomarca);
    }
    if (!nullToAbsent || salvarXml != null) {
      map['salvar_xml'] = Variable<String>(salvarXml);
    }
    if (!nullToAbsent || caminhoSalvarXml != null) {
      map['caminho_salvar_xml'] = Variable<String>(caminhoSalvarXml);
    }
    if (!nullToAbsent || caminhoSchemas != null) {
      map['caminho_schemas'] = Variable<String>(caminhoSchemas);
    }
    if (!nullToAbsent || caminhoArquivoDanfe != null) {
      map['caminho_arquivo_danfe'] = Variable<String>(caminhoArquivoDanfe);
    }
    if (!nullToAbsent || caminhoSalvarPdf != null) {
      map['caminho_salvar_pdf'] = Variable<String>(caminhoSalvarPdf);
    }
    if (!nullToAbsent || webserviceUf != null) {
      map['webservice_uf'] = Variable<String>(webserviceUf);
    }
    if (!nullToAbsent || webserviceAmbiente != null) {
      map['webservice_ambiente'] = Variable<int>(webserviceAmbiente);
    }
    if (!nullToAbsent || webserviceProxyHost != null) {
      map['webservice_proxy_host'] = Variable<String>(webserviceProxyHost);
    }
    if (!nullToAbsent || webserviceProxyPorta != null) {
      map['webservice_proxy_porta'] = Variable<int>(webserviceProxyPorta);
    }
    if (!nullToAbsent || webserviceProxyUsuario != null) {
      map['webservice_proxy_usuario'] = Variable<String>(
        webserviceProxyUsuario,
      );
    }
    if (!nullToAbsent || webserviceProxySenha != null) {
      map['webservice_proxy_senha'] = Variable<String>(webserviceProxySenha);
    }
    if (!nullToAbsent || webserviceVisualizar != null) {
      map['webservice_visualizar'] = Variable<String>(webserviceVisualizar);
    }
    if (!nullToAbsent || emailServidorSmtp != null) {
      map['email_servidor_smtp'] = Variable<String>(emailServidorSmtp);
    }
    if (!nullToAbsent || emailPorta != null) {
      map['email_porta'] = Variable<int>(emailPorta);
    }
    if (!nullToAbsent || emailUsuario != null) {
      map['email_usuario'] = Variable<String>(emailUsuario);
    }
    if (!nullToAbsent || emailSenha != null) {
      map['email_senha'] = Variable<String>(emailSenha);
    }
    if (!nullToAbsent || emailAssunto != null) {
      map['email_assunto'] = Variable<String>(emailAssunto);
    }
    if (!nullToAbsent || emailAutenticaSsl != null) {
      map['email_autentica_ssl'] = Variable<String>(emailAutenticaSsl);
    }
    if (!nullToAbsent || emailTexto != null) {
      map['email_texto'] = Variable<String>(emailTexto);
    }
    return map;
  }

  factory NfeConfiguracao.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeConfiguracao(
      id: serializer.fromJson<int?>(json['id']),
      certificadoDigitalSerie: serializer.fromJson<String?>(
        json['certificadoDigitalSerie'],
      ),
      certificadoDigitalCaminho: serializer.fromJson<String?>(
        json['certificadoDigitalCaminho'],
      ),
      certificadoDigitalSenha: serializer.fromJson<String?>(
        json['certificadoDigitalSenha'],
      ),
      tipoEmissao: serializer.fromJson<int?>(json['tipoEmissao']),
      formatoImpressaoDanfe: serializer.fromJson<int?>(
        json['formatoImpressaoDanfe'],
      ),
      processoEmissao: serializer.fromJson<int?>(json['processoEmissao']),
      versaoProcessoEmissao: serializer.fromJson<String?>(
        json['versaoProcessoEmissao'],
      ),
      caminhoLogomarca: serializer.fromJson<String?>(json['caminhoLogomarca']),
      salvarXml: serializer.fromJson<String?>(json['salvarXml']),
      caminhoSalvarXml: serializer.fromJson<String?>(json['caminhoSalvarXml']),
      caminhoSchemas: serializer.fromJson<String?>(json['caminhoSchemas']),
      caminhoArquivoDanfe: serializer.fromJson<String?>(
        json['caminhoArquivoDanfe'],
      ),
      caminhoSalvarPdf: serializer.fromJson<String?>(json['caminhoSalvarPdf']),
      webserviceUf: serializer.fromJson<String?>(json['webserviceUf']),
      webserviceAmbiente: serializer.fromJson<int?>(json['webserviceAmbiente']),
      webserviceProxyHost: serializer.fromJson<String?>(
        json['webserviceProxyHost'],
      ),
      webserviceProxyPorta: serializer.fromJson<int?>(
        json['webserviceProxyPorta'],
      ),
      webserviceProxyUsuario: serializer.fromJson<String?>(
        json['webserviceProxyUsuario'],
      ),
      webserviceProxySenha: serializer.fromJson<String?>(
        json['webserviceProxySenha'],
      ),
      webserviceVisualizar: serializer.fromJson<String?>(
        json['webserviceVisualizar'],
      ),
      emailServidorSmtp: serializer.fromJson<String?>(
        json['emailServidorSmtp'],
      ),
      emailPorta: serializer.fromJson<int?>(json['emailPorta']),
      emailUsuario: serializer.fromJson<String?>(json['emailUsuario']),
      emailSenha: serializer.fromJson<String?>(json['emailSenha']),
      emailAssunto: serializer.fromJson<String?>(json['emailAssunto']),
      emailAutenticaSsl: serializer.fromJson<String?>(
        json['emailAutenticaSsl'],
      ),
      emailTexto: serializer.fromJson<String?>(json['emailTexto']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'certificadoDigitalSerie': serializer.toJson<String?>(
        certificadoDigitalSerie,
      ),
      'certificadoDigitalCaminho': serializer.toJson<String?>(
        certificadoDigitalCaminho,
      ),
      'certificadoDigitalSenha': serializer.toJson<String?>(
        certificadoDigitalSenha,
      ),
      'tipoEmissao': serializer.toJson<int?>(tipoEmissao),
      'formatoImpressaoDanfe': serializer.toJson<int?>(formatoImpressaoDanfe),
      'processoEmissao': serializer.toJson<int?>(processoEmissao),
      'versaoProcessoEmissao': serializer.toJson<String?>(
        versaoProcessoEmissao,
      ),
      'caminhoLogomarca': serializer.toJson<String?>(caminhoLogomarca),
      'salvarXml': serializer.toJson<String?>(salvarXml),
      'caminhoSalvarXml': serializer.toJson<String?>(caminhoSalvarXml),
      'caminhoSchemas': serializer.toJson<String?>(caminhoSchemas),
      'caminhoArquivoDanfe': serializer.toJson<String?>(caminhoArquivoDanfe),
      'caminhoSalvarPdf': serializer.toJson<String?>(caminhoSalvarPdf),
      'webserviceUf': serializer.toJson<String?>(webserviceUf),
      'webserviceAmbiente': serializer.toJson<int?>(webserviceAmbiente),
      'webserviceProxyHost': serializer.toJson<String?>(webserviceProxyHost),
      'webserviceProxyPorta': serializer.toJson<int?>(webserviceProxyPorta),
      'webserviceProxyUsuario': serializer.toJson<String?>(
        webserviceProxyUsuario,
      ),
      'webserviceProxySenha': serializer.toJson<String?>(webserviceProxySenha),
      'webserviceVisualizar': serializer.toJson<String?>(webserviceVisualizar),
      'emailServidorSmtp': serializer.toJson<String?>(emailServidorSmtp),
      'emailPorta': serializer.toJson<int?>(emailPorta),
      'emailUsuario': serializer.toJson<String?>(emailUsuario),
      'emailSenha': serializer.toJson<String?>(emailSenha),
      'emailAssunto': serializer.toJson<String?>(emailAssunto),
      'emailAutenticaSsl': serializer.toJson<String?>(emailAutenticaSsl),
      'emailTexto': serializer.toJson<String?>(emailTexto),
    };
  }

  NfeConfiguracao copyWith({
    Value<int?> id = const Value.absent(),
    Value<String?> certificadoDigitalSerie = const Value.absent(),
    Value<String?> certificadoDigitalCaminho = const Value.absent(),
    Value<String?> certificadoDigitalSenha = const Value.absent(),
    Value<int?> tipoEmissao = const Value.absent(),
    Value<int?> formatoImpressaoDanfe = const Value.absent(),
    Value<int?> processoEmissao = const Value.absent(),
    Value<String?> versaoProcessoEmissao = const Value.absent(),
    Value<String?> caminhoLogomarca = const Value.absent(),
    Value<String?> salvarXml = const Value.absent(),
    Value<String?> caminhoSalvarXml = const Value.absent(),
    Value<String?> caminhoSchemas = const Value.absent(),
    Value<String?> caminhoArquivoDanfe = const Value.absent(),
    Value<String?> caminhoSalvarPdf = const Value.absent(),
    Value<String?> webserviceUf = const Value.absent(),
    Value<int?> webserviceAmbiente = const Value.absent(),
    Value<String?> webserviceProxyHost = const Value.absent(),
    Value<int?> webserviceProxyPorta = const Value.absent(),
    Value<String?> webserviceProxyUsuario = const Value.absent(),
    Value<String?> webserviceProxySenha = const Value.absent(),
    Value<String?> webserviceVisualizar = const Value.absent(),
    Value<String?> emailServidorSmtp = const Value.absent(),
    Value<int?> emailPorta = const Value.absent(),
    Value<String?> emailUsuario = const Value.absent(),
    Value<String?> emailSenha = const Value.absent(),
    Value<String?> emailAssunto = const Value.absent(),
    Value<String?> emailAutenticaSsl = const Value.absent(),
    Value<String?> emailTexto = const Value.absent(),
  }) => NfeConfiguracao(
    id: id.present ? id.value : this.id,
    certificadoDigitalSerie:
        certificadoDigitalSerie.present
            ? certificadoDigitalSerie.value
            : this.certificadoDigitalSerie,
    certificadoDigitalCaminho:
        certificadoDigitalCaminho.present
            ? certificadoDigitalCaminho.value
            : this.certificadoDigitalCaminho,
    certificadoDigitalSenha:
        certificadoDigitalSenha.present
            ? certificadoDigitalSenha.value
            : this.certificadoDigitalSenha,
    tipoEmissao: tipoEmissao.present ? tipoEmissao.value : this.tipoEmissao,
    formatoImpressaoDanfe:
        formatoImpressaoDanfe.present
            ? formatoImpressaoDanfe.value
            : this.formatoImpressaoDanfe,
    processoEmissao:
        processoEmissao.present ? processoEmissao.value : this.processoEmissao,
    versaoProcessoEmissao:
        versaoProcessoEmissao.present
            ? versaoProcessoEmissao.value
            : this.versaoProcessoEmissao,
    caminhoLogomarca:
        caminhoLogomarca.present
            ? caminhoLogomarca.value
            : this.caminhoLogomarca,
    salvarXml: salvarXml.present ? salvarXml.value : this.salvarXml,
    caminhoSalvarXml:
        caminhoSalvarXml.present
            ? caminhoSalvarXml.value
            : this.caminhoSalvarXml,
    caminhoSchemas:
        caminhoSchemas.present ? caminhoSchemas.value : this.caminhoSchemas,
    caminhoArquivoDanfe:
        caminhoArquivoDanfe.present
            ? caminhoArquivoDanfe.value
            : this.caminhoArquivoDanfe,
    caminhoSalvarPdf:
        caminhoSalvarPdf.present
            ? caminhoSalvarPdf.value
            : this.caminhoSalvarPdf,
    webserviceUf: webserviceUf.present ? webserviceUf.value : this.webserviceUf,
    webserviceAmbiente:
        webserviceAmbiente.present
            ? webserviceAmbiente.value
            : this.webserviceAmbiente,
    webserviceProxyHost:
        webserviceProxyHost.present
            ? webserviceProxyHost.value
            : this.webserviceProxyHost,
    webserviceProxyPorta:
        webserviceProxyPorta.present
            ? webserviceProxyPorta.value
            : this.webserviceProxyPorta,
    webserviceProxyUsuario:
        webserviceProxyUsuario.present
            ? webserviceProxyUsuario.value
            : this.webserviceProxyUsuario,
    webserviceProxySenha:
        webserviceProxySenha.present
            ? webserviceProxySenha.value
            : this.webserviceProxySenha,
    webserviceVisualizar:
        webserviceVisualizar.present
            ? webserviceVisualizar.value
            : this.webserviceVisualizar,
    emailServidorSmtp:
        emailServidorSmtp.present
            ? emailServidorSmtp.value
            : this.emailServidorSmtp,
    emailPorta: emailPorta.present ? emailPorta.value : this.emailPorta,
    emailUsuario: emailUsuario.present ? emailUsuario.value : this.emailUsuario,
    emailSenha: emailSenha.present ? emailSenha.value : this.emailSenha,
    emailAssunto: emailAssunto.present ? emailAssunto.value : this.emailAssunto,
    emailAutenticaSsl:
        emailAutenticaSsl.present
            ? emailAutenticaSsl.value
            : this.emailAutenticaSsl,
    emailTexto: emailTexto.present ? emailTexto.value : this.emailTexto,
  );
  NfeConfiguracao copyWithCompanion(NfeConfiguracaosCompanion data) {
    return NfeConfiguracao(
      id: data.id.present ? data.id.value : this.id,
      certificadoDigitalSerie:
          data.certificadoDigitalSerie.present
              ? data.certificadoDigitalSerie.value
              : this.certificadoDigitalSerie,
      certificadoDigitalCaminho:
          data.certificadoDigitalCaminho.present
              ? data.certificadoDigitalCaminho.value
              : this.certificadoDigitalCaminho,
      certificadoDigitalSenha:
          data.certificadoDigitalSenha.present
              ? data.certificadoDigitalSenha.value
              : this.certificadoDigitalSenha,
      tipoEmissao:
          data.tipoEmissao.present ? data.tipoEmissao.value : this.tipoEmissao,
      formatoImpressaoDanfe:
          data.formatoImpressaoDanfe.present
              ? data.formatoImpressaoDanfe.value
              : this.formatoImpressaoDanfe,
      processoEmissao:
          data.processoEmissao.present
              ? data.processoEmissao.value
              : this.processoEmissao,
      versaoProcessoEmissao:
          data.versaoProcessoEmissao.present
              ? data.versaoProcessoEmissao.value
              : this.versaoProcessoEmissao,
      caminhoLogomarca:
          data.caminhoLogomarca.present
              ? data.caminhoLogomarca.value
              : this.caminhoLogomarca,
      salvarXml: data.salvarXml.present ? data.salvarXml.value : this.salvarXml,
      caminhoSalvarXml:
          data.caminhoSalvarXml.present
              ? data.caminhoSalvarXml.value
              : this.caminhoSalvarXml,
      caminhoSchemas:
          data.caminhoSchemas.present
              ? data.caminhoSchemas.value
              : this.caminhoSchemas,
      caminhoArquivoDanfe:
          data.caminhoArquivoDanfe.present
              ? data.caminhoArquivoDanfe.value
              : this.caminhoArquivoDanfe,
      caminhoSalvarPdf:
          data.caminhoSalvarPdf.present
              ? data.caminhoSalvarPdf.value
              : this.caminhoSalvarPdf,
      webserviceUf:
          data.webserviceUf.present
              ? data.webserviceUf.value
              : this.webserviceUf,
      webserviceAmbiente:
          data.webserviceAmbiente.present
              ? data.webserviceAmbiente.value
              : this.webserviceAmbiente,
      webserviceProxyHost:
          data.webserviceProxyHost.present
              ? data.webserviceProxyHost.value
              : this.webserviceProxyHost,
      webserviceProxyPorta:
          data.webserviceProxyPorta.present
              ? data.webserviceProxyPorta.value
              : this.webserviceProxyPorta,
      webserviceProxyUsuario:
          data.webserviceProxyUsuario.present
              ? data.webserviceProxyUsuario.value
              : this.webserviceProxyUsuario,
      webserviceProxySenha:
          data.webserviceProxySenha.present
              ? data.webserviceProxySenha.value
              : this.webserviceProxySenha,
      webserviceVisualizar:
          data.webserviceVisualizar.present
              ? data.webserviceVisualizar.value
              : this.webserviceVisualizar,
      emailServidorSmtp:
          data.emailServidorSmtp.present
              ? data.emailServidorSmtp.value
              : this.emailServidorSmtp,
      emailPorta:
          data.emailPorta.present ? data.emailPorta.value : this.emailPorta,
      emailUsuario:
          data.emailUsuario.present
              ? data.emailUsuario.value
              : this.emailUsuario,
      emailSenha:
          data.emailSenha.present ? data.emailSenha.value : this.emailSenha,
      emailAssunto:
          data.emailAssunto.present
              ? data.emailAssunto.value
              : this.emailAssunto,
      emailAutenticaSsl:
          data.emailAutenticaSsl.present
              ? data.emailAutenticaSsl.value
              : this.emailAutenticaSsl,
      emailTexto:
          data.emailTexto.present ? data.emailTexto.value : this.emailTexto,
    );
  }

  @override
  String toString() {
    return (StringBuffer('NfeConfiguracao(')
          ..write('id: $id, ')
          ..write('certificadoDigitalSerie: $certificadoDigitalSerie, ')
          ..write('certificadoDigitalCaminho: $certificadoDigitalCaminho, ')
          ..write('certificadoDigitalSenha: $certificadoDigitalSenha, ')
          ..write('tipoEmissao: $tipoEmissao, ')
          ..write('formatoImpressaoDanfe: $formatoImpressaoDanfe, ')
          ..write('processoEmissao: $processoEmissao, ')
          ..write('versaoProcessoEmissao: $versaoProcessoEmissao, ')
          ..write('caminhoLogomarca: $caminhoLogomarca, ')
          ..write('salvarXml: $salvarXml, ')
          ..write('caminhoSalvarXml: $caminhoSalvarXml, ')
          ..write('caminhoSchemas: $caminhoSchemas, ')
          ..write('caminhoArquivoDanfe: $caminhoArquivoDanfe, ')
          ..write('caminhoSalvarPdf: $caminhoSalvarPdf, ')
          ..write('webserviceUf: $webserviceUf, ')
          ..write('webserviceAmbiente: $webserviceAmbiente, ')
          ..write('webserviceProxyHost: $webserviceProxyHost, ')
          ..write('webserviceProxyPorta: $webserviceProxyPorta, ')
          ..write('webserviceProxyUsuario: $webserviceProxyUsuario, ')
          ..write('webserviceProxySenha: $webserviceProxySenha, ')
          ..write('webserviceVisualizar: $webserviceVisualizar, ')
          ..write('emailServidorSmtp: $emailServidorSmtp, ')
          ..write('emailPorta: $emailPorta, ')
          ..write('emailUsuario: $emailUsuario, ')
          ..write('emailSenha: $emailSenha, ')
          ..write('emailAssunto: $emailAssunto, ')
          ..write('emailAutenticaSsl: $emailAutenticaSsl, ')
          ..write('emailTexto: $emailTexto')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hashAll([
    id,
    certificadoDigitalSerie,
    certificadoDigitalCaminho,
    certificadoDigitalSenha,
    tipoEmissao,
    formatoImpressaoDanfe,
    processoEmissao,
    versaoProcessoEmissao,
    caminhoLogomarca,
    salvarXml,
    caminhoSalvarXml,
    caminhoSchemas,
    caminhoArquivoDanfe,
    caminhoSalvarPdf,
    webserviceUf,
    webserviceAmbiente,
    webserviceProxyHost,
    webserviceProxyPorta,
    webserviceProxyUsuario,
    webserviceProxySenha,
    webserviceVisualizar,
    emailServidorSmtp,
    emailPorta,
    emailUsuario,
    emailSenha,
    emailAssunto,
    emailAutenticaSsl,
    emailTexto,
  ]);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeConfiguracao &&
          other.id == this.id &&
          other.certificadoDigitalSerie == this.certificadoDigitalSerie &&
          other.certificadoDigitalCaminho == this.certificadoDigitalCaminho &&
          other.certificadoDigitalSenha == this.certificadoDigitalSenha &&
          other.tipoEmissao == this.tipoEmissao &&
          other.formatoImpressaoDanfe == this.formatoImpressaoDanfe &&
          other.processoEmissao == this.processoEmissao &&
          other.versaoProcessoEmissao == this.versaoProcessoEmissao &&
          other.caminhoLogomarca == this.caminhoLogomarca &&
          other.salvarXml == this.salvarXml &&
          other.caminhoSalvarXml == this.caminhoSalvarXml &&
          other.caminhoSchemas == this.caminhoSchemas &&
          other.caminhoArquivoDanfe == this.caminhoArquivoDanfe &&
          other.caminhoSalvarPdf == this.caminhoSalvarPdf &&
          other.webserviceUf == this.webserviceUf &&
          other.webserviceAmbiente == this.webserviceAmbiente &&
          other.webserviceProxyHost == this.webserviceProxyHost &&
          other.webserviceProxyPorta == this.webserviceProxyPorta &&
          other.webserviceProxyUsuario == this.webserviceProxyUsuario &&
          other.webserviceProxySenha == this.webserviceProxySenha &&
          other.webserviceVisualizar == this.webserviceVisualizar &&
          other.emailServidorSmtp == this.emailServidorSmtp &&
          other.emailPorta == this.emailPorta &&
          other.emailUsuario == this.emailUsuario &&
          other.emailSenha == this.emailSenha &&
          other.emailAssunto == this.emailAssunto &&
          other.emailAutenticaSsl == this.emailAutenticaSsl &&
          other.emailTexto == this.emailTexto);
}

class NfeConfiguracaosCompanion extends UpdateCompanion<NfeConfiguracao> {
  final Value<int?> id;
  final Value<String?> certificadoDigitalSerie;
  final Value<String?> certificadoDigitalCaminho;
  final Value<String?> certificadoDigitalSenha;
  final Value<int?> tipoEmissao;
  final Value<int?> formatoImpressaoDanfe;
  final Value<int?> processoEmissao;
  final Value<String?> versaoProcessoEmissao;
  final Value<String?> caminhoLogomarca;
  final Value<String?> salvarXml;
  final Value<String?> caminhoSalvarXml;
  final Value<String?> caminhoSchemas;
  final Value<String?> caminhoArquivoDanfe;
  final Value<String?> caminhoSalvarPdf;
  final Value<String?> webserviceUf;
  final Value<int?> webserviceAmbiente;
  final Value<String?> webserviceProxyHost;
  final Value<int?> webserviceProxyPorta;
  final Value<String?> webserviceProxyUsuario;
  final Value<String?> webserviceProxySenha;
  final Value<String?> webserviceVisualizar;
  final Value<String?> emailServidorSmtp;
  final Value<int?> emailPorta;
  final Value<String?> emailUsuario;
  final Value<String?> emailSenha;
  final Value<String?> emailAssunto;
  final Value<String?> emailAutenticaSsl;
  final Value<String?> emailTexto;
  const NfeConfiguracaosCompanion({
    this.id = const Value.absent(),
    this.certificadoDigitalSerie = const Value.absent(),
    this.certificadoDigitalCaminho = const Value.absent(),
    this.certificadoDigitalSenha = const Value.absent(),
    this.tipoEmissao = const Value.absent(),
    this.formatoImpressaoDanfe = const Value.absent(),
    this.processoEmissao = const Value.absent(),
    this.versaoProcessoEmissao = const Value.absent(),
    this.caminhoLogomarca = const Value.absent(),
    this.salvarXml = const Value.absent(),
    this.caminhoSalvarXml = const Value.absent(),
    this.caminhoSchemas = const Value.absent(),
    this.caminhoArquivoDanfe = const Value.absent(),
    this.caminhoSalvarPdf = const Value.absent(),
    this.webserviceUf = const Value.absent(),
    this.webserviceAmbiente = const Value.absent(),
    this.webserviceProxyHost = const Value.absent(),
    this.webserviceProxyPorta = const Value.absent(),
    this.webserviceProxyUsuario = const Value.absent(),
    this.webserviceProxySenha = const Value.absent(),
    this.webserviceVisualizar = const Value.absent(),
    this.emailServidorSmtp = const Value.absent(),
    this.emailPorta = const Value.absent(),
    this.emailUsuario = const Value.absent(),
    this.emailSenha = const Value.absent(),
    this.emailAssunto = const Value.absent(),
    this.emailAutenticaSsl = const Value.absent(),
    this.emailTexto = const Value.absent(),
  });
  NfeConfiguracaosCompanion.insert({
    this.id = const Value.absent(),
    this.certificadoDigitalSerie = const Value.absent(),
    this.certificadoDigitalCaminho = const Value.absent(),
    this.certificadoDigitalSenha = const Value.absent(),
    this.tipoEmissao = const Value.absent(),
    this.formatoImpressaoDanfe = const Value.absent(),
    this.processoEmissao = const Value.absent(),
    this.versaoProcessoEmissao = const Value.absent(),
    this.caminhoLogomarca = const Value.absent(),
    this.salvarXml = const Value.absent(),
    this.caminhoSalvarXml = const Value.absent(),
    this.caminhoSchemas = const Value.absent(),
    this.caminhoArquivoDanfe = const Value.absent(),
    this.caminhoSalvarPdf = const Value.absent(),
    this.webserviceUf = const Value.absent(),
    this.webserviceAmbiente = const Value.absent(),
    this.webserviceProxyHost = const Value.absent(),
    this.webserviceProxyPorta = const Value.absent(),
    this.webserviceProxyUsuario = const Value.absent(),
    this.webserviceProxySenha = const Value.absent(),
    this.webserviceVisualizar = const Value.absent(),
    this.emailServidorSmtp = const Value.absent(),
    this.emailPorta = const Value.absent(),
    this.emailUsuario = const Value.absent(),
    this.emailSenha = const Value.absent(),
    this.emailAssunto = const Value.absent(),
    this.emailAutenticaSsl = const Value.absent(),
    this.emailTexto = const Value.absent(),
  });
  static Insertable<NfeConfiguracao> custom({
    Expression<int>? id,
    Expression<String>? certificadoDigitalSerie,
    Expression<String>? certificadoDigitalCaminho,
    Expression<String>? certificadoDigitalSenha,
    Expression<int>? tipoEmissao,
    Expression<int>? formatoImpressaoDanfe,
    Expression<int>? processoEmissao,
    Expression<String>? versaoProcessoEmissao,
    Expression<String>? caminhoLogomarca,
    Expression<String>? salvarXml,
    Expression<String>? caminhoSalvarXml,
    Expression<String>? caminhoSchemas,
    Expression<String>? caminhoArquivoDanfe,
    Expression<String>? caminhoSalvarPdf,
    Expression<String>? webserviceUf,
    Expression<int>? webserviceAmbiente,
    Expression<String>? webserviceProxyHost,
    Expression<int>? webserviceProxyPorta,
    Expression<String>? webserviceProxyUsuario,
    Expression<String>? webserviceProxySenha,
    Expression<String>? webserviceVisualizar,
    Expression<String>? emailServidorSmtp,
    Expression<int>? emailPorta,
    Expression<String>? emailUsuario,
    Expression<String>? emailSenha,
    Expression<String>? emailAssunto,
    Expression<String>? emailAutenticaSsl,
    Expression<String>? emailTexto,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (certificadoDigitalSerie != null)
        'certificado_digital_serie': certificadoDigitalSerie,
      if (certificadoDigitalCaminho != null)
        'certificado_digital_caminho': certificadoDigitalCaminho,
      if (certificadoDigitalSenha != null)
        'certificado_digital_senha': certificadoDigitalSenha,
      if (tipoEmissao != null) 'tipo_emissao': tipoEmissao,
      if (formatoImpressaoDanfe != null)
        'formato_impressao_danfe': formatoImpressaoDanfe,
      if (processoEmissao != null) 'processo_emissao': processoEmissao,
      if (versaoProcessoEmissao != null)
        'versao_processo_emissao': versaoProcessoEmissao,
      if (caminhoLogomarca != null) 'caminho_logomarca': caminhoLogomarca,
      if (salvarXml != null) 'salvar_xml': salvarXml,
      if (caminhoSalvarXml != null) 'caminho_salvar_xml': caminhoSalvarXml,
      if (caminhoSchemas != null) 'caminho_schemas': caminhoSchemas,
      if (caminhoArquivoDanfe != null)
        'caminho_arquivo_danfe': caminhoArquivoDanfe,
      if (caminhoSalvarPdf != null) 'caminho_salvar_pdf': caminhoSalvarPdf,
      if (webserviceUf != null) 'webservice_uf': webserviceUf,
      if (webserviceAmbiente != null) 'webservice_ambiente': webserviceAmbiente,
      if (webserviceProxyHost != null)
        'webservice_proxy_host': webserviceProxyHost,
      if (webserviceProxyPorta != null)
        'webservice_proxy_porta': webserviceProxyPorta,
      if (webserviceProxyUsuario != null)
        'webservice_proxy_usuario': webserviceProxyUsuario,
      if (webserviceProxySenha != null)
        'webservice_proxy_senha': webserviceProxySenha,
      if (webserviceVisualizar != null)
        'webservice_visualizar': webserviceVisualizar,
      if (emailServidorSmtp != null) 'email_servidor_smtp': emailServidorSmtp,
      if (emailPorta != null) 'email_porta': emailPorta,
      if (emailUsuario != null) 'email_usuario': emailUsuario,
      if (emailSenha != null) 'email_senha': emailSenha,
      if (emailAssunto != null) 'email_assunto': emailAssunto,
      if (emailAutenticaSsl != null) 'email_autentica_ssl': emailAutenticaSsl,
      if (emailTexto != null) 'email_texto': emailTexto,
    });
  }

  NfeConfiguracaosCompanion copyWith({
    Value<int?>? id,
    Value<String?>? certificadoDigitalSerie,
    Value<String?>? certificadoDigitalCaminho,
    Value<String?>? certificadoDigitalSenha,
    Value<int?>? tipoEmissao,
    Value<int?>? formatoImpressaoDanfe,
    Value<int?>? processoEmissao,
    Value<String?>? versaoProcessoEmissao,
    Value<String?>? caminhoLogomarca,
    Value<String?>? salvarXml,
    Value<String?>? caminhoSalvarXml,
    Value<String?>? caminhoSchemas,
    Value<String?>? caminhoArquivoDanfe,
    Value<String?>? caminhoSalvarPdf,
    Value<String?>? webserviceUf,
    Value<int?>? webserviceAmbiente,
    Value<String?>? webserviceProxyHost,
    Value<int?>? webserviceProxyPorta,
    Value<String?>? webserviceProxyUsuario,
    Value<String?>? webserviceProxySenha,
    Value<String?>? webserviceVisualizar,
    Value<String?>? emailServidorSmtp,
    Value<int?>? emailPorta,
    Value<String?>? emailUsuario,
    Value<String?>? emailSenha,
    Value<String?>? emailAssunto,
    Value<String?>? emailAutenticaSsl,
    Value<String?>? emailTexto,
  }) {
    return NfeConfiguracaosCompanion(
      id: id ?? this.id,
      certificadoDigitalSerie:
          certificadoDigitalSerie ?? this.certificadoDigitalSerie,
      certificadoDigitalCaminho:
          certificadoDigitalCaminho ?? this.certificadoDigitalCaminho,
      certificadoDigitalSenha:
          certificadoDigitalSenha ?? this.certificadoDigitalSenha,
      tipoEmissao: tipoEmissao ?? this.tipoEmissao,
      formatoImpressaoDanfe:
          formatoImpressaoDanfe ?? this.formatoImpressaoDanfe,
      processoEmissao: processoEmissao ?? this.processoEmissao,
      versaoProcessoEmissao:
          versaoProcessoEmissao ?? this.versaoProcessoEmissao,
      caminhoLogomarca: caminhoLogomarca ?? this.caminhoLogomarca,
      salvarXml: salvarXml ?? this.salvarXml,
      caminhoSalvarXml: caminhoSalvarXml ?? this.caminhoSalvarXml,
      caminhoSchemas: caminhoSchemas ?? this.caminhoSchemas,
      caminhoArquivoDanfe: caminhoArquivoDanfe ?? this.caminhoArquivoDanfe,
      caminhoSalvarPdf: caminhoSalvarPdf ?? this.caminhoSalvarPdf,
      webserviceUf: webserviceUf ?? this.webserviceUf,
      webserviceAmbiente: webserviceAmbiente ?? this.webserviceAmbiente,
      webserviceProxyHost: webserviceProxyHost ?? this.webserviceProxyHost,
      webserviceProxyPorta: webserviceProxyPorta ?? this.webserviceProxyPorta,
      webserviceProxyUsuario:
          webserviceProxyUsuario ?? this.webserviceProxyUsuario,
      webserviceProxySenha: webserviceProxySenha ?? this.webserviceProxySenha,
      webserviceVisualizar: webserviceVisualizar ?? this.webserviceVisualizar,
      emailServidorSmtp: emailServidorSmtp ?? this.emailServidorSmtp,
      emailPorta: emailPorta ?? this.emailPorta,
      emailUsuario: emailUsuario ?? this.emailUsuario,
      emailSenha: emailSenha ?? this.emailSenha,
      emailAssunto: emailAssunto ?? this.emailAssunto,
      emailAutenticaSsl: emailAutenticaSsl ?? this.emailAutenticaSsl,
      emailTexto: emailTexto ?? this.emailTexto,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (certificadoDigitalSerie.present) {
      map['certificado_digital_serie'] = Variable<String>(
        certificadoDigitalSerie.value,
      );
    }
    if (certificadoDigitalCaminho.present) {
      map['certificado_digital_caminho'] = Variable<String>(
        certificadoDigitalCaminho.value,
      );
    }
    if (certificadoDigitalSenha.present) {
      map['certificado_digital_senha'] = Variable<String>(
        certificadoDigitalSenha.value,
      );
    }
    if (tipoEmissao.present) {
      map['tipo_emissao'] = Variable<int>(tipoEmissao.value);
    }
    if (formatoImpressaoDanfe.present) {
      map['formato_impressao_danfe'] = Variable<int>(
        formatoImpressaoDanfe.value,
      );
    }
    if (processoEmissao.present) {
      map['processo_emissao'] = Variable<int>(processoEmissao.value);
    }
    if (versaoProcessoEmissao.present) {
      map['versao_processo_emissao'] = Variable<String>(
        versaoProcessoEmissao.value,
      );
    }
    if (caminhoLogomarca.present) {
      map['caminho_logomarca'] = Variable<String>(caminhoLogomarca.value);
    }
    if (salvarXml.present) {
      map['salvar_xml'] = Variable<String>(salvarXml.value);
    }
    if (caminhoSalvarXml.present) {
      map['caminho_salvar_xml'] = Variable<String>(caminhoSalvarXml.value);
    }
    if (caminhoSchemas.present) {
      map['caminho_schemas'] = Variable<String>(caminhoSchemas.value);
    }
    if (caminhoArquivoDanfe.present) {
      map['caminho_arquivo_danfe'] = Variable<String>(
        caminhoArquivoDanfe.value,
      );
    }
    if (caminhoSalvarPdf.present) {
      map['caminho_salvar_pdf'] = Variable<String>(caminhoSalvarPdf.value);
    }
    if (webserviceUf.present) {
      map['webservice_uf'] = Variable<String>(webserviceUf.value);
    }
    if (webserviceAmbiente.present) {
      map['webservice_ambiente'] = Variable<int>(webserviceAmbiente.value);
    }
    if (webserviceProxyHost.present) {
      map['webservice_proxy_host'] = Variable<String>(
        webserviceProxyHost.value,
      );
    }
    if (webserviceProxyPorta.present) {
      map['webservice_proxy_porta'] = Variable<int>(webserviceProxyPorta.value);
    }
    if (webserviceProxyUsuario.present) {
      map['webservice_proxy_usuario'] = Variable<String>(
        webserviceProxyUsuario.value,
      );
    }
    if (webserviceProxySenha.present) {
      map['webservice_proxy_senha'] = Variable<String>(
        webserviceProxySenha.value,
      );
    }
    if (webserviceVisualizar.present) {
      map['webservice_visualizar'] = Variable<String>(
        webserviceVisualizar.value,
      );
    }
    if (emailServidorSmtp.present) {
      map['email_servidor_smtp'] = Variable<String>(emailServidorSmtp.value);
    }
    if (emailPorta.present) {
      map['email_porta'] = Variable<int>(emailPorta.value);
    }
    if (emailUsuario.present) {
      map['email_usuario'] = Variable<String>(emailUsuario.value);
    }
    if (emailSenha.present) {
      map['email_senha'] = Variable<String>(emailSenha.value);
    }
    if (emailAssunto.present) {
      map['email_assunto'] = Variable<String>(emailAssunto.value);
    }
    if (emailAutenticaSsl.present) {
      map['email_autentica_ssl'] = Variable<String>(emailAutenticaSsl.value);
    }
    if (emailTexto.present) {
      map['email_texto'] = Variable<String>(emailTexto.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeConfiguracaosCompanion(')
          ..write('id: $id, ')
          ..write('certificadoDigitalSerie: $certificadoDigitalSerie, ')
          ..write('certificadoDigitalCaminho: $certificadoDigitalCaminho, ')
          ..write('certificadoDigitalSenha: $certificadoDigitalSenha, ')
          ..write('tipoEmissao: $tipoEmissao, ')
          ..write('formatoImpressaoDanfe: $formatoImpressaoDanfe, ')
          ..write('processoEmissao: $processoEmissao, ')
          ..write('versaoProcessoEmissao: $versaoProcessoEmissao, ')
          ..write('caminhoLogomarca: $caminhoLogomarca, ')
          ..write('salvarXml: $salvarXml, ')
          ..write('caminhoSalvarXml: $caminhoSalvarXml, ')
          ..write('caminhoSchemas: $caminhoSchemas, ')
          ..write('caminhoArquivoDanfe: $caminhoArquivoDanfe, ')
          ..write('caminhoSalvarPdf: $caminhoSalvarPdf, ')
          ..write('webserviceUf: $webserviceUf, ')
          ..write('webserviceAmbiente: $webserviceAmbiente, ')
          ..write('webserviceProxyHost: $webserviceProxyHost, ')
          ..write('webserviceProxyPorta: $webserviceProxyPorta, ')
          ..write('webserviceProxyUsuario: $webserviceProxyUsuario, ')
          ..write('webserviceProxySenha: $webserviceProxySenha, ')
          ..write('webserviceVisualizar: $webserviceVisualizar, ')
          ..write('emailServidorSmtp: $emailServidorSmtp, ')
          ..write('emailPorta: $emailPorta, ')
          ..write('emailUsuario: $emailUsuario, ')
          ..write('emailSenha: $emailSenha, ')
          ..write('emailAssunto: $emailAssunto, ')
          ..write('emailAutenticaSsl: $emailAutenticaSsl, ')
          ..write('emailTexto: $emailTexto')
          ..write(')'))
        .toString();
  }
}

class $NfeNumeroInutilizadosTable extends NfeNumeroInutilizados
    with TableInfo<$NfeNumeroInutilizadosTable, NfeNumeroInutilizado> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeNumeroInutilizadosTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
    'id',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _serieMeta = const VerificationMeta('serie');
  @override
  late final GeneratedColumn<String> serie = GeneratedColumn<String>(
    'serie',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 3,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _numeroMeta = const VerificationMeta('numero');
  @override
  late final GeneratedColumn<int> numero = GeneratedColumn<int>(
    'numero',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _dataInutilizacaoMeta = const VerificationMeta(
    'dataInutilizacao',
  );
  @override
  late final GeneratedColumn<DateTime> dataInutilizacao =
      GeneratedColumn<DateTime>(
        'data_inutilizacao',
        aliasedName,
        true,
        type: DriftSqlType.dateTime,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _observacaoMeta = const VerificationMeta(
    'observacao',
  );
  @override
  late final GeneratedColumn<String> observacao = GeneratedColumn<String>(
    'observacao',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    serie,
    numero,
    dataInutilizacao,
    observacao,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'nfe_numero_inutilizado';
  @override
  VerificationContext validateIntegrity(
    Insertable<NfeNumeroInutilizado> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('serie')) {
      context.handle(
        _serieMeta,
        serie.isAcceptableOrUnknown(data['serie']!, _serieMeta),
      );
    }
    if (data.containsKey('numero')) {
      context.handle(
        _numeroMeta,
        numero.isAcceptableOrUnknown(data['numero']!, _numeroMeta),
      );
    }
    if (data.containsKey('data_inutilizacao')) {
      context.handle(
        _dataInutilizacaoMeta,
        dataInutilizacao.isAcceptableOrUnknown(
          data['data_inutilizacao']!,
          _dataInutilizacaoMeta,
        ),
      );
    }
    if (data.containsKey('observacao')) {
      context.handle(
        _observacaoMeta,
        observacao.isAcceptableOrUnknown(data['observacao']!, _observacaoMeta),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeNumeroInutilizado map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return NfeNumeroInutilizado(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id'],
      ),
      serie: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}serie'],
      ),
      numero: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}numero'],
      ),
      dataInutilizacao: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}data_inutilizacao'],
      ),
      observacao: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}observacao'],
      ),
    );
  }

  @override
  $NfeNumeroInutilizadosTable createAlias(String alias) {
    return $NfeNumeroInutilizadosTable(attachedDatabase, alias);
  }
}

class NfeNumeroInutilizado extends DataClass
    implements Insertable<NfeNumeroInutilizado> {
  final int? id;
  final String? serie;
  final int? numero;
  final DateTime? dataInutilizacao;
  final String? observacao;
  const NfeNumeroInutilizado({
    this.id,
    this.serie,
    this.numero,
    this.dataInutilizacao,
    this.observacao,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || serie != null) {
      map['serie'] = Variable<String>(serie);
    }
    if (!nullToAbsent || numero != null) {
      map['numero'] = Variable<int>(numero);
    }
    if (!nullToAbsent || dataInutilizacao != null) {
      map['data_inutilizacao'] = Variable<DateTime>(dataInutilizacao);
    }
    if (!nullToAbsent || observacao != null) {
      map['observacao'] = Variable<String>(observacao);
    }
    return map;
  }

  factory NfeNumeroInutilizado.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeNumeroInutilizado(
      id: serializer.fromJson<int?>(json['id']),
      serie: serializer.fromJson<String?>(json['serie']),
      numero: serializer.fromJson<int?>(json['numero']),
      dataInutilizacao: serializer.fromJson<DateTime?>(
        json['dataInutilizacao'],
      ),
      observacao: serializer.fromJson<String?>(json['observacao']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'serie': serializer.toJson<String?>(serie),
      'numero': serializer.toJson<int?>(numero),
      'dataInutilizacao': serializer.toJson<DateTime?>(dataInutilizacao),
      'observacao': serializer.toJson<String?>(observacao),
    };
  }

  NfeNumeroInutilizado copyWith({
    Value<int?> id = const Value.absent(),
    Value<String?> serie = const Value.absent(),
    Value<int?> numero = const Value.absent(),
    Value<DateTime?> dataInutilizacao = const Value.absent(),
    Value<String?> observacao = const Value.absent(),
  }) => NfeNumeroInutilizado(
    id: id.present ? id.value : this.id,
    serie: serie.present ? serie.value : this.serie,
    numero: numero.present ? numero.value : this.numero,
    dataInutilizacao:
        dataInutilizacao.present
            ? dataInutilizacao.value
            : this.dataInutilizacao,
    observacao: observacao.present ? observacao.value : this.observacao,
  );
  NfeNumeroInutilizado copyWithCompanion(NfeNumeroInutilizadosCompanion data) {
    return NfeNumeroInutilizado(
      id: data.id.present ? data.id.value : this.id,
      serie: data.serie.present ? data.serie.value : this.serie,
      numero: data.numero.present ? data.numero.value : this.numero,
      dataInutilizacao:
          data.dataInutilizacao.present
              ? data.dataInutilizacao.value
              : this.dataInutilizacao,
      observacao:
          data.observacao.present ? data.observacao.value : this.observacao,
    );
  }

  @override
  String toString() {
    return (StringBuffer('NfeNumeroInutilizado(')
          ..write('id: $id, ')
          ..write('serie: $serie, ')
          ..write('numero: $numero, ')
          ..write('dataInutilizacao: $dataInutilizacao, ')
          ..write('observacao: $observacao')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode =>
      Object.hash(id, serie, numero, dataInutilizacao, observacao);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeNumeroInutilizado &&
          other.id == this.id &&
          other.serie == this.serie &&
          other.numero == this.numero &&
          other.dataInutilizacao == this.dataInutilizacao &&
          other.observacao == this.observacao);
}

class NfeNumeroInutilizadosCompanion
    extends UpdateCompanion<NfeNumeroInutilizado> {
  final Value<int?> id;
  final Value<String?> serie;
  final Value<int?> numero;
  final Value<DateTime?> dataInutilizacao;
  final Value<String?> observacao;
  const NfeNumeroInutilizadosCompanion({
    this.id = const Value.absent(),
    this.serie = const Value.absent(),
    this.numero = const Value.absent(),
    this.dataInutilizacao = const Value.absent(),
    this.observacao = const Value.absent(),
  });
  NfeNumeroInutilizadosCompanion.insert({
    this.id = const Value.absent(),
    this.serie = const Value.absent(),
    this.numero = const Value.absent(),
    this.dataInutilizacao = const Value.absent(),
    this.observacao = const Value.absent(),
  });
  static Insertable<NfeNumeroInutilizado> custom({
    Expression<int>? id,
    Expression<String>? serie,
    Expression<int>? numero,
    Expression<DateTime>? dataInutilizacao,
    Expression<String>? observacao,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (serie != null) 'serie': serie,
      if (numero != null) 'numero': numero,
      if (dataInutilizacao != null) 'data_inutilizacao': dataInutilizacao,
      if (observacao != null) 'observacao': observacao,
    });
  }

  NfeNumeroInutilizadosCompanion copyWith({
    Value<int?>? id,
    Value<String?>? serie,
    Value<int?>? numero,
    Value<DateTime?>? dataInutilizacao,
    Value<String?>? observacao,
  }) {
    return NfeNumeroInutilizadosCompanion(
      id: id ?? this.id,
      serie: serie ?? this.serie,
      numero: numero ?? this.numero,
      dataInutilizacao: dataInutilizacao ?? this.dataInutilizacao,
      observacao: observacao ?? this.observacao,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (serie.present) {
      map['serie'] = Variable<String>(serie.value);
    }
    if (numero.present) {
      map['numero'] = Variable<int>(numero.value);
    }
    if (dataInutilizacao.present) {
      map['data_inutilizacao'] = Variable<DateTime>(dataInutilizacao.value);
    }
    if (observacao.present) {
      map['observacao'] = Variable<String>(observacao.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeNumeroInutilizadosCompanion(')
          ..write('id: $id, ')
          ..write('serie: $serie, ')
          ..write('numero: $numero, ')
          ..write('dataInutilizacao: $dataInutilizacao, ')
          ..write('observacao: $observacao')
          ..write(')'))
        .toString();
  }
}

class $ViewControleAcessosTable extends ViewControleAcessos
    with TableInfo<$ViewControleAcessosTable, ViewControleAcesso> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $ViewControleAcessosTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
    'id',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idPessoaMeta = const VerificationMeta(
    'idPessoa',
  );
  @override
  late final GeneratedColumn<int> idPessoa = GeneratedColumn<int>(
    'id_pessoa',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _pessoaNomeMeta = const VerificationMeta(
    'pessoaNome',
  );
  @override
  late final GeneratedColumn<String> pessoaNome = GeneratedColumn<String>(
    'pessoa_nome',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 450,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idColaboradorMeta = const VerificationMeta(
    'idColaborador',
  );
  @override
  late final GeneratedColumn<int> idColaborador = GeneratedColumn<int>(
    'id_colaborador',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idUsuarioMeta = const VerificationMeta(
    'idUsuario',
  );
  @override
  late final GeneratedColumn<int> idUsuario = GeneratedColumn<int>(
    'id_usuario',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _administradorMeta = const VerificationMeta(
    'administrador',
  );
  @override
  late final GeneratedColumn<String> administrador = GeneratedColumn<String>(
    'administrador',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 3,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idPapelMeta = const VerificationMeta(
    'idPapel',
  );
  @override
  late final GeneratedColumn<int> idPapel = GeneratedColumn<int>(
    'id_papel',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _papelNomeMeta = const VerificationMeta(
    'papelNome',
  );
  @override
  late final GeneratedColumn<String> papelNome = GeneratedColumn<String>(
    'papel_nome',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 300,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _papelDescricaoMeta = const VerificationMeta(
    'papelDescricao',
  );
  @override
  late final GeneratedColumn<String> papelDescricao = GeneratedColumn<String>(
    'papel_descricao',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 750,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idFuncaoMeta = const VerificationMeta(
    'idFuncao',
  );
  @override
  late final GeneratedColumn<int> idFuncao = GeneratedColumn<int>(
    'id_funcao',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _funcaoNomeMeta = const VerificationMeta(
    'funcaoNome',
  );
  @override
  late final GeneratedColumn<String> funcaoNome = GeneratedColumn<String>(
    'funcao_nome',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 300,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _funcaoDescricaoMeta = const VerificationMeta(
    'funcaoDescricao',
  );
  @override
  late final GeneratedColumn<String> funcaoDescricao = GeneratedColumn<String>(
    'funcao_descricao',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 750,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idPapelFuncaoMeta = const VerificationMeta(
    'idPapelFuncao',
  );
  @override
  late final GeneratedColumn<int> idPapelFuncao = GeneratedColumn<int>(
    'id_papel_funcao',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _habilitadoMeta = const VerificationMeta(
    'habilitado',
  );
  @override
  late final GeneratedColumn<String> habilitado = GeneratedColumn<String>(
    'habilitado',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 3,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _podeInserirMeta = const VerificationMeta(
    'podeInserir',
  );
  @override
  late final GeneratedColumn<String> podeInserir = GeneratedColumn<String>(
    'pode_inserir',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 3,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _podeAlterarMeta = const VerificationMeta(
    'podeAlterar',
  );
  @override
  late final GeneratedColumn<String> podeAlterar = GeneratedColumn<String>(
    'pode_alterar',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 3,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _podeExcluirMeta = const VerificationMeta(
    'podeExcluir',
  );
  @override
  late final GeneratedColumn<String> podeExcluir = GeneratedColumn<String>(
    'pode_excluir',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 3,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    idPessoa,
    pessoaNome,
    idColaborador,
    idUsuario,
    administrador,
    idPapel,
    papelNome,
    papelDescricao,
    idFuncao,
    funcaoNome,
    funcaoDescricao,
    idPapelFuncao,
    habilitado,
    podeInserir,
    podeAlterar,
    podeExcluir,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'view_controle_acesso';
  @override
  VerificationContext validateIntegrity(
    Insertable<ViewControleAcesso> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('id_pessoa')) {
      context.handle(
        _idPessoaMeta,
        idPessoa.isAcceptableOrUnknown(data['id_pessoa']!, _idPessoaMeta),
      );
    }
    if (data.containsKey('pessoa_nome')) {
      context.handle(
        _pessoaNomeMeta,
        pessoaNome.isAcceptableOrUnknown(data['pessoa_nome']!, _pessoaNomeMeta),
      );
    }
    if (data.containsKey('id_colaborador')) {
      context.handle(
        _idColaboradorMeta,
        idColaborador.isAcceptableOrUnknown(
          data['id_colaborador']!,
          _idColaboradorMeta,
        ),
      );
    }
    if (data.containsKey('id_usuario')) {
      context.handle(
        _idUsuarioMeta,
        idUsuario.isAcceptableOrUnknown(data['id_usuario']!, _idUsuarioMeta),
      );
    }
    if (data.containsKey('administrador')) {
      context.handle(
        _administradorMeta,
        administrador.isAcceptableOrUnknown(
          data['administrador']!,
          _administradorMeta,
        ),
      );
    }
    if (data.containsKey('id_papel')) {
      context.handle(
        _idPapelMeta,
        idPapel.isAcceptableOrUnknown(data['id_papel']!, _idPapelMeta),
      );
    }
    if (data.containsKey('papel_nome')) {
      context.handle(
        _papelNomeMeta,
        papelNome.isAcceptableOrUnknown(data['papel_nome']!, _papelNomeMeta),
      );
    }
    if (data.containsKey('papel_descricao')) {
      context.handle(
        _papelDescricaoMeta,
        papelDescricao.isAcceptableOrUnknown(
          data['papel_descricao']!,
          _papelDescricaoMeta,
        ),
      );
    }
    if (data.containsKey('id_funcao')) {
      context.handle(
        _idFuncaoMeta,
        idFuncao.isAcceptableOrUnknown(data['id_funcao']!, _idFuncaoMeta),
      );
    }
    if (data.containsKey('funcao_nome')) {
      context.handle(
        _funcaoNomeMeta,
        funcaoNome.isAcceptableOrUnknown(data['funcao_nome']!, _funcaoNomeMeta),
      );
    }
    if (data.containsKey('funcao_descricao')) {
      context.handle(
        _funcaoDescricaoMeta,
        funcaoDescricao.isAcceptableOrUnknown(
          data['funcao_descricao']!,
          _funcaoDescricaoMeta,
        ),
      );
    }
    if (data.containsKey('id_papel_funcao')) {
      context.handle(
        _idPapelFuncaoMeta,
        idPapelFuncao.isAcceptableOrUnknown(
          data['id_papel_funcao']!,
          _idPapelFuncaoMeta,
        ),
      );
    }
    if (data.containsKey('habilitado')) {
      context.handle(
        _habilitadoMeta,
        habilitado.isAcceptableOrUnknown(data['habilitado']!, _habilitadoMeta),
      );
    }
    if (data.containsKey('pode_inserir')) {
      context.handle(
        _podeInserirMeta,
        podeInserir.isAcceptableOrUnknown(
          data['pode_inserir']!,
          _podeInserirMeta,
        ),
      );
    }
    if (data.containsKey('pode_alterar')) {
      context.handle(
        _podeAlterarMeta,
        podeAlterar.isAcceptableOrUnknown(
          data['pode_alterar']!,
          _podeAlterarMeta,
        ),
      );
    }
    if (data.containsKey('pode_excluir')) {
      context.handle(
        _podeExcluirMeta,
        podeExcluir.isAcceptableOrUnknown(
          data['pode_excluir']!,
          _podeExcluirMeta,
        ),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  ViewControleAcesso map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return ViewControleAcesso(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id'],
      ),
      idPessoa: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_pessoa'],
      ),
      pessoaNome: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}pessoa_nome'],
      ),
      idColaborador: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_colaborador'],
      ),
      idUsuario: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_usuario'],
      ),
      administrador: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}administrador'],
      ),
      idPapel: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_papel'],
      ),
      papelNome: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}papel_nome'],
      ),
      papelDescricao: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}papel_descricao'],
      ),
      idFuncao: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_funcao'],
      ),
      funcaoNome: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}funcao_nome'],
      ),
      funcaoDescricao: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}funcao_descricao'],
      ),
      idPapelFuncao: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_papel_funcao'],
      ),
      habilitado: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}habilitado'],
      ),
      podeInserir: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}pode_inserir'],
      ),
      podeAlterar: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}pode_alterar'],
      ),
      podeExcluir: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}pode_excluir'],
      ),
    );
  }

  @override
  $ViewControleAcessosTable createAlias(String alias) {
    return $ViewControleAcessosTable(attachedDatabase, alias);
  }
}

class ViewControleAcesso extends DataClass
    implements Insertable<ViewControleAcesso> {
  final int? id;
  final int? idPessoa;
  final String? pessoaNome;
  final int? idColaborador;
  final int? idUsuario;
  final String? administrador;
  final int? idPapel;
  final String? papelNome;
  final String? papelDescricao;
  final int? idFuncao;
  final String? funcaoNome;
  final String? funcaoDescricao;
  final int? idPapelFuncao;
  final String? habilitado;
  final String? podeInserir;
  final String? podeAlterar;
  final String? podeExcluir;
  const ViewControleAcesso({
    this.id,
    this.idPessoa,
    this.pessoaNome,
    this.idColaborador,
    this.idUsuario,
    this.administrador,
    this.idPapel,
    this.papelNome,
    this.papelDescricao,
    this.idFuncao,
    this.funcaoNome,
    this.funcaoDescricao,
    this.idPapelFuncao,
    this.habilitado,
    this.podeInserir,
    this.podeAlterar,
    this.podeExcluir,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || idPessoa != null) {
      map['id_pessoa'] = Variable<int>(idPessoa);
    }
    if (!nullToAbsent || pessoaNome != null) {
      map['pessoa_nome'] = Variable<String>(pessoaNome);
    }
    if (!nullToAbsent || idColaborador != null) {
      map['id_colaborador'] = Variable<int>(idColaborador);
    }
    if (!nullToAbsent || idUsuario != null) {
      map['id_usuario'] = Variable<int>(idUsuario);
    }
    if (!nullToAbsent || administrador != null) {
      map['administrador'] = Variable<String>(administrador);
    }
    if (!nullToAbsent || idPapel != null) {
      map['id_papel'] = Variable<int>(idPapel);
    }
    if (!nullToAbsent || papelNome != null) {
      map['papel_nome'] = Variable<String>(papelNome);
    }
    if (!nullToAbsent || papelDescricao != null) {
      map['papel_descricao'] = Variable<String>(papelDescricao);
    }
    if (!nullToAbsent || idFuncao != null) {
      map['id_funcao'] = Variable<int>(idFuncao);
    }
    if (!nullToAbsent || funcaoNome != null) {
      map['funcao_nome'] = Variable<String>(funcaoNome);
    }
    if (!nullToAbsent || funcaoDescricao != null) {
      map['funcao_descricao'] = Variable<String>(funcaoDescricao);
    }
    if (!nullToAbsent || idPapelFuncao != null) {
      map['id_papel_funcao'] = Variable<int>(idPapelFuncao);
    }
    if (!nullToAbsent || habilitado != null) {
      map['habilitado'] = Variable<String>(habilitado);
    }
    if (!nullToAbsent || podeInserir != null) {
      map['pode_inserir'] = Variable<String>(podeInserir);
    }
    if (!nullToAbsent || podeAlterar != null) {
      map['pode_alterar'] = Variable<String>(podeAlterar);
    }
    if (!nullToAbsent || podeExcluir != null) {
      map['pode_excluir'] = Variable<String>(podeExcluir);
    }
    return map;
  }

  factory ViewControleAcesso.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return ViewControleAcesso(
      id: serializer.fromJson<int?>(json['id']),
      idPessoa: serializer.fromJson<int?>(json['idPessoa']),
      pessoaNome: serializer.fromJson<String?>(json['pessoaNome']),
      idColaborador: serializer.fromJson<int?>(json['idColaborador']),
      idUsuario: serializer.fromJson<int?>(json['idUsuario']),
      administrador: serializer.fromJson<String?>(json['administrador']),
      idPapel: serializer.fromJson<int?>(json['idPapel']),
      papelNome: serializer.fromJson<String?>(json['papelNome']),
      papelDescricao: serializer.fromJson<String?>(json['papelDescricao']),
      idFuncao: serializer.fromJson<int?>(json['idFuncao']),
      funcaoNome: serializer.fromJson<String?>(json['funcaoNome']),
      funcaoDescricao: serializer.fromJson<String?>(json['funcaoDescricao']),
      idPapelFuncao: serializer.fromJson<int?>(json['idPapelFuncao']),
      habilitado: serializer.fromJson<String?>(json['habilitado']),
      podeInserir: serializer.fromJson<String?>(json['podeInserir']),
      podeAlterar: serializer.fromJson<String?>(json['podeAlterar']),
      podeExcluir: serializer.fromJson<String?>(json['podeExcluir']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idPessoa': serializer.toJson<int?>(idPessoa),
      'pessoaNome': serializer.toJson<String?>(pessoaNome),
      'idColaborador': serializer.toJson<int?>(idColaborador),
      'idUsuario': serializer.toJson<int?>(idUsuario),
      'administrador': serializer.toJson<String?>(administrador),
      'idPapel': serializer.toJson<int?>(idPapel),
      'papelNome': serializer.toJson<String?>(papelNome),
      'papelDescricao': serializer.toJson<String?>(papelDescricao),
      'idFuncao': serializer.toJson<int?>(idFuncao),
      'funcaoNome': serializer.toJson<String?>(funcaoNome),
      'funcaoDescricao': serializer.toJson<String?>(funcaoDescricao),
      'idPapelFuncao': serializer.toJson<int?>(idPapelFuncao),
      'habilitado': serializer.toJson<String?>(habilitado),
      'podeInserir': serializer.toJson<String?>(podeInserir),
      'podeAlterar': serializer.toJson<String?>(podeAlterar),
      'podeExcluir': serializer.toJson<String?>(podeExcluir),
    };
  }

  ViewControleAcesso copyWith({
    Value<int?> id = const Value.absent(),
    Value<int?> idPessoa = const Value.absent(),
    Value<String?> pessoaNome = const Value.absent(),
    Value<int?> idColaborador = const Value.absent(),
    Value<int?> idUsuario = const Value.absent(),
    Value<String?> administrador = const Value.absent(),
    Value<int?> idPapel = const Value.absent(),
    Value<String?> papelNome = const Value.absent(),
    Value<String?> papelDescricao = const Value.absent(),
    Value<int?> idFuncao = const Value.absent(),
    Value<String?> funcaoNome = const Value.absent(),
    Value<String?> funcaoDescricao = const Value.absent(),
    Value<int?> idPapelFuncao = const Value.absent(),
    Value<String?> habilitado = const Value.absent(),
    Value<String?> podeInserir = const Value.absent(),
    Value<String?> podeAlterar = const Value.absent(),
    Value<String?> podeExcluir = const Value.absent(),
  }) => ViewControleAcesso(
    id: id.present ? id.value : this.id,
    idPessoa: idPessoa.present ? idPessoa.value : this.idPessoa,
    pessoaNome: pessoaNome.present ? pessoaNome.value : this.pessoaNome,
    idColaborador:
        idColaborador.present ? idColaborador.value : this.idColaborador,
    idUsuario: idUsuario.present ? idUsuario.value : this.idUsuario,
    administrador:
        administrador.present ? administrador.value : this.administrador,
    idPapel: idPapel.present ? idPapel.value : this.idPapel,
    papelNome: papelNome.present ? papelNome.value : this.papelNome,
    papelDescricao:
        papelDescricao.present ? papelDescricao.value : this.papelDescricao,
    idFuncao: idFuncao.present ? idFuncao.value : this.idFuncao,
    funcaoNome: funcaoNome.present ? funcaoNome.value : this.funcaoNome,
    funcaoDescricao:
        funcaoDescricao.present ? funcaoDescricao.value : this.funcaoDescricao,
    idPapelFuncao:
        idPapelFuncao.present ? idPapelFuncao.value : this.idPapelFuncao,
    habilitado: habilitado.present ? habilitado.value : this.habilitado,
    podeInserir: podeInserir.present ? podeInserir.value : this.podeInserir,
    podeAlterar: podeAlterar.present ? podeAlterar.value : this.podeAlterar,
    podeExcluir: podeExcluir.present ? podeExcluir.value : this.podeExcluir,
  );
  ViewControleAcesso copyWithCompanion(ViewControleAcessosCompanion data) {
    return ViewControleAcesso(
      id: data.id.present ? data.id.value : this.id,
      idPessoa: data.idPessoa.present ? data.idPessoa.value : this.idPessoa,
      pessoaNome:
          data.pessoaNome.present ? data.pessoaNome.value : this.pessoaNome,
      idColaborador:
          data.idColaborador.present
              ? data.idColaborador.value
              : this.idColaborador,
      idUsuario: data.idUsuario.present ? data.idUsuario.value : this.idUsuario,
      administrador:
          data.administrador.present
              ? data.administrador.value
              : this.administrador,
      idPapel: data.idPapel.present ? data.idPapel.value : this.idPapel,
      papelNome: data.papelNome.present ? data.papelNome.value : this.papelNome,
      papelDescricao:
          data.papelDescricao.present
              ? data.papelDescricao.value
              : this.papelDescricao,
      idFuncao: data.idFuncao.present ? data.idFuncao.value : this.idFuncao,
      funcaoNome:
          data.funcaoNome.present ? data.funcaoNome.value : this.funcaoNome,
      funcaoDescricao:
          data.funcaoDescricao.present
              ? data.funcaoDescricao.value
              : this.funcaoDescricao,
      idPapelFuncao:
          data.idPapelFuncao.present
              ? data.idPapelFuncao.value
              : this.idPapelFuncao,
      habilitado:
          data.habilitado.present ? data.habilitado.value : this.habilitado,
      podeInserir:
          data.podeInserir.present ? data.podeInserir.value : this.podeInserir,
      podeAlterar:
          data.podeAlterar.present ? data.podeAlterar.value : this.podeAlterar,
      podeExcluir:
          data.podeExcluir.present ? data.podeExcluir.value : this.podeExcluir,
    );
  }

  @override
  String toString() {
    return (StringBuffer('ViewControleAcesso(')
          ..write('id: $id, ')
          ..write('idPessoa: $idPessoa, ')
          ..write('pessoaNome: $pessoaNome, ')
          ..write('idColaborador: $idColaborador, ')
          ..write('idUsuario: $idUsuario, ')
          ..write('administrador: $administrador, ')
          ..write('idPapel: $idPapel, ')
          ..write('papelNome: $papelNome, ')
          ..write('papelDescricao: $papelDescricao, ')
          ..write('idFuncao: $idFuncao, ')
          ..write('funcaoNome: $funcaoNome, ')
          ..write('funcaoDescricao: $funcaoDescricao, ')
          ..write('idPapelFuncao: $idPapelFuncao, ')
          ..write('habilitado: $habilitado, ')
          ..write('podeInserir: $podeInserir, ')
          ..write('podeAlterar: $podeAlterar, ')
          ..write('podeExcluir: $podeExcluir')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    idPessoa,
    pessoaNome,
    idColaborador,
    idUsuario,
    administrador,
    idPapel,
    papelNome,
    papelDescricao,
    idFuncao,
    funcaoNome,
    funcaoDescricao,
    idPapelFuncao,
    habilitado,
    podeInserir,
    podeAlterar,
    podeExcluir,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is ViewControleAcesso &&
          other.id == this.id &&
          other.idPessoa == this.idPessoa &&
          other.pessoaNome == this.pessoaNome &&
          other.idColaborador == this.idColaborador &&
          other.idUsuario == this.idUsuario &&
          other.administrador == this.administrador &&
          other.idPapel == this.idPapel &&
          other.papelNome == this.papelNome &&
          other.papelDescricao == this.papelDescricao &&
          other.idFuncao == this.idFuncao &&
          other.funcaoNome == this.funcaoNome &&
          other.funcaoDescricao == this.funcaoDescricao &&
          other.idPapelFuncao == this.idPapelFuncao &&
          other.habilitado == this.habilitado &&
          other.podeInserir == this.podeInserir &&
          other.podeAlterar == this.podeAlterar &&
          other.podeExcluir == this.podeExcluir);
}

class ViewControleAcessosCompanion extends UpdateCompanion<ViewControleAcesso> {
  final Value<int?> id;
  final Value<int?> idPessoa;
  final Value<String?> pessoaNome;
  final Value<int?> idColaborador;
  final Value<int?> idUsuario;
  final Value<String?> administrador;
  final Value<int?> idPapel;
  final Value<String?> papelNome;
  final Value<String?> papelDescricao;
  final Value<int?> idFuncao;
  final Value<String?> funcaoNome;
  final Value<String?> funcaoDescricao;
  final Value<int?> idPapelFuncao;
  final Value<String?> habilitado;
  final Value<String?> podeInserir;
  final Value<String?> podeAlterar;
  final Value<String?> podeExcluir;
  const ViewControleAcessosCompanion({
    this.id = const Value.absent(),
    this.idPessoa = const Value.absent(),
    this.pessoaNome = const Value.absent(),
    this.idColaborador = const Value.absent(),
    this.idUsuario = const Value.absent(),
    this.administrador = const Value.absent(),
    this.idPapel = const Value.absent(),
    this.papelNome = const Value.absent(),
    this.papelDescricao = const Value.absent(),
    this.idFuncao = const Value.absent(),
    this.funcaoNome = const Value.absent(),
    this.funcaoDescricao = const Value.absent(),
    this.idPapelFuncao = const Value.absent(),
    this.habilitado = const Value.absent(),
    this.podeInserir = const Value.absent(),
    this.podeAlterar = const Value.absent(),
    this.podeExcluir = const Value.absent(),
  });
  ViewControleAcessosCompanion.insert({
    this.id = const Value.absent(),
    this.idPessoa = const Value.absent(),
    this.pessoaNome = const Value.absent(),
    this.idColaborador = const Value.absent(),
    this.idUsuario = const Value.absent(),
    this.administrador = const Value.absent(),
    this.idPapel = const Value.absent(),
    this.papelNome = const Value.absent(),
    this.papelDescricao = const Value.absent(),
    this.idFuncao = const Value.absent(),
    this.funcaoNome = const Value.absent(),
    this.funcaoDescricao = const Value.absent(),
    this.idPapelFuncao = const Value.absent(),
    this.habilitado = const Value.absent(),
    this.podeInserir = const Value.absent(),
    this.podeAlterar = const Value.absent(),
    this.podeExcluir = const Value.absent(),
  });
  static Insertable<ViewControleAcesso> custom({
    Expression<int>? id,
    Expression<int>? idPessoa,
    Expression<String>? pessoaNome,
    Expression<int>? idColaborador,
    Expression<int>? idUsuario,
    Expression<String>? administrador,
    Expression<int>? idPapel,
    Expression<String>? papelNome,
    Expression<String>? papelDescricao,
    Expression<int>? idFuncao,
    Expression<String>? funcaoNome,
    Expression<String>? funcaoDescricao,
    Expression<int>? idPapelFuncao,
    Expression<String>? habilitado,
    Expression<String>? podeInserir,
    Expression<String>? podeAlterar,
    Expression<String>? podeExcluir,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (idPessoa != null) 'id_pessoa': idPessoa,
      if (pessoaNome != null) 'pessoa_nome': pessoaNome,
      if (idColaborador != null) 'id_colaborador': idColaborador,
      if (idUsuario != null) 'id_usuario': idUsuario,
      if (administrador != null) 'administrador': administrador,
      if (idPapel != null) 'id_papel': idPapel,
      if (papelNome != null) 'papel_nome': papelNome,
      if (papelDescricao != null) 'papel_descricao': papelDescricao,
      if (idFuncao != null) 'id_funcao': idFuncao,
      if (funcaoNome != null) 'funcao_nome': funcaoNome,
      if (funcaoDescricao != null) 'funcao_descricao': funcaoDescricao,
      if (idPapelFuncao != null) 'id_papel_funcao': idPapelFuncao,
      if (habilitado != null) 'habilitado': habilitado,
      if (podeInserir != null) 'pode_inserir': podeInserir,
      if (podeAlterar != null) 'pode_alterar': podeAlterar,
      if (podeExcluir != null) 'pode_excluir': podeExcluir,
    });
  }

  ViewControleAcessosCompanion copyWith({
    Value<int?>? id,
    Value<int?>? idPessoa,
    Value<String?>? pessoaNome,
    Value<int?>? idColaborador,
    Value<int?>? idUsuario,
    Value<String?>? administrador,
    Value<int?>? idPapel,
    Value<String?>? papelNome,
    Value<String?>? papelDescricao,
    Value<int?>? idFuncao,
    Value<String?>? funcaoNome,
    Value<String?>? funcaoDescricao,
    Value<int?>? idPapelFuncao,
    Value<String?>? habilitado,
    Value<String?>? podeInserir,
    Value<String?>? podeAlterar,
    Value<String?>? podeExcluir,
  }) {
    return ViewControleAcessosCompanion(
      id: id ?? this.id,
      idPessoa: idPessoa ?? this.idPessoa,
      pessoaNome: pessoaNome ?? this.pessoaNome,
      idColaborador: idColaborador ?? this.idColaborador,
      idUsuario: idUsuario ?? this.idUsuario,
      administrador: administrador ?? this.administrador,
      idPapel: idPapel ?? this.idPapel,
      papelNome: papelNome ?? this.papelNome,
      papelDescricao: papelDescricao ?? this.papelDescricao,
      idFuncao: idFuncao ?? this.idFuncao,
      funcaoNome: funcaoNome ?? this.funcaoNome,
      funcaoDescricao: funcaoDescricao ?? this.funcaoDescricao,
      idPapelFuncao: idPapelFuncao ?? this.idPapelFuncao,
      habilitado: habilitado ?? this.habilitado,
      podeInserir: podeInserir ?? this.podeInserir,
      podeAlterar: podeAlterar ?? this.podeAlterar,
      podeExcluir: podeExcluir ?? this.podeExcluir,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (idPessoa.present) {
      map['id_pessoa'] = Variable<int>(idPessoa.value);
    }
    if (pessoaNome.present) {
      map['pessoa_nome'] = Variable<String>(pessoaNome.value);
    }
    if (idColaborador.present) {
      map['id_colaborador'] = Variable<int>(idColaborador.value);
    }
    if (idUsuario.present) {
      map['id_usuario'] = Variable<int>(idUsuario.value);
    }
    if (administrador.present) {
      map['administrador'] = Variable<String>(administrador.value);
    }
    if (idPapel.present) {
      map['id_papel'] = Variable<int>(idPapel.value);
    }
    if (papelNome.present) {
      map['papel_nome'] = Variable<String>(papelNome.value);
    }
    if (papelDescricao.present) {
      map['papel_descricao'] = Variable<String>(papelDescricao.value);
    }
    if (idFuncao.present) {
      map['id_funcao'] = Variable<int>(idFuncao.value);
    }
    if (funcaoNome.present) {
      map['funcao_nome'] = Variable<String>(funcaoNome.value);
    }
    if (funcaoDescricao.present) {
      map['funcao_descricao'] = Variable<String>(funcaoDescricao.value);
    }
    if (idPapelFuncao.present) {
      map['id_papel_funcao'] = Variable<int>(idPapelFuncao.value);
    }
    if (habilitado.present) {
      map['habilitado'] = Variable<String>(habilitado.value);
    }
    if (podeInserir.present) {
      map['pode_inserir'] = Variable<String>(podeInserir.value);
    }
    if (podeAlterar.present) {
      map['pode_alterar'] = Variable<String>(podeAlterar.value);
    }
    if (podeExcluir.present) {
      map['pode_excluir'] = Variable<String>(podeExcluir.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('ViewControleAcessosCompanion(')
          ..write('id: $id, ')
          ..write('idPessoa: $idPessoa, ')
          ..write('pessoaNome: $pessoaNome, ')
          ..write('idColaborador: $idColaborador, ')
          ..write('idUsuario: $idUsuario, ')
          ..write('administrador: $administrador, ')
          ..write('idPapel: $idPapel, ')
          ..write('papelNome: $papelNome, ')
          ..write('papelDescricao: $papelDescricao, ')
          ..write('idFuncao: $idFuncao, ')
          ..write('funcaoNome: $funcaoNome, ')
          ..write('funcaoDescricao: $funcaoDescricao, ')
          ..write('idPapelFuncao: $idPapelFuncao, ')
          ..write('habilitado: $habilitado, ')
          ..write('podeInserir: $podeInserir, ')
          ..write('podeAlterar: $podeAlterar, ')
          ..write('podeExcluir: $podeExcluir')
          ..write(')'))
        .toString();
  }
}

class $ViewPessoaUsuariosTable extends ViewPessoaUsuarios
    with TableInfo<$ViewPessoaUsuariosTable, ViewPessoaUsuario> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $ViewPessoaUsuariosTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
    'id',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idPessoaMeta = const VerificationMeta(
    'idPessoa',
  );
  @override
  late final GeneratedColumn<int> idPessoa = GeneratedColumn<int>(
    'id_pessoa',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _pessoaNomeMeta = const VerificationMeta(
    'pessoaNome',
  );
  @override
  late final GeneratedColumn<String> pessoaNome = GeneratedColumn<String>(
    'pessoa_nome',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 450,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _tipoMeta = const VerificationMeta('tipo');
  @override
  late final GeneratedColumn<String> tipo = GeneratedColumn<String>(
    'tipo',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 3,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _emailMeta = const VerificationMeta('email');
  @override
  late final GeneratedColumn<String> email = GeneratedColumn<String>(
    'email',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 750,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idColaboradorMeta = const VerificationMeta(
    'idColaborador',
  );
  @override
  late final GeneratedColumn<int> idColaborador = GeneratedColumn<int>(
    'id_colaborador',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idUsuarioMeta = const VerificationMeta(
    'idUsuario',
  );
  @override
  late final GeneratedColumn<int> idUsuario = GeneratedColumn<int>(
    'id_usuario',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _loginMeta = const VerificationMeta('login');
  @override
  late final GeneratedColumn<String> login = GeneratedColumn<String>(
    'login',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 150,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _senhaMeta = const VerificationMeta('senha');
  @override
  late final GeneratedColumn<String> senha = GeneratedColumn<String>(
    'senha',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 150,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _dataCadastroMeta = const VerificationMeta(
    'dataCadastro',
  );
  @override
  late final GeneratedColumn<DateTime> dataCadastro = GeneratedColumn<DateTime>(
    'data_cadastro',
    aliasedName,
    true,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _administradorMeta = const VerificationMeta(
    'administrador',
  );
  @override
  late final GeneratedColumn<String> administrador = GeneratedColumn<String>(
    'administrador',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 3,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    idPessoa,
    pessoaNome,
    tipo,
    email,
    idColaborador,
    idUsuario,
    login,
    senha,
    dataCadastro,
    administrador,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'view_pessoa_usuario';
  @override
  VerificationContext validateIntegrity(
    Insertable<ViewPessoaUsuario> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('id_pessoa')) {
      context.handle(
        _idPessoaMeta,
        idPessoa.isAcceptableOrUnknown(data['id_pessoa']!, _idPessoaMeta),
      );
    }
    if (data.containsKey('pessoa_nome')) {
      context.handle(
        _pessoaNomeMeta,
        pessoaNome.isAcceptableOrUnknown(data['pessoa_nome']!, _pessoaNomeMeta),
      );
    }
    if (data.containsKey('tipo')) {
      context.handle(
        _tipoMeta,
        tipo.isAcceptableOrUnknown(data['tipo']!, _tipoMeta),
      );
    }
    if (data.containsKey('email')) {
      context.handle(
        _emailMeta,
        email.isAcceptableOrUnknown(data['email']!, _emailMeta),
      );
    }
    if (data.containsKey('id_colaborador')) {
      context.handle(
        _idColaboradorMeta,
        idColaborador.isAcceptableOrUnknown(
          data['id_colaborador']!,
          _idColaboradorMeta,
        ),
      );
    }
    if (data.containsKey('id_usuario')) {
      context.handle(
        _idUsuarioMeta,
        idUsuario.isAcceptableOrUnknown(data['id_usuario']!, _idUsuarioMeta),
      );
    }
    if (data.containsKey('login')) {
      context.handle(
        _loginMeta,
        login.isAcceptableOrUnknown(data['login']!, _loginMeta),
      );
    }
    if (data.containsKey('senha')) {
      context.handle(
        _senhaMeta,
        senha.isAcceptableOrUnknown(data['senha']!, _senhaMeta),
      );
    }
    if (data.containsKey('data_cadastro')) {
      context.handle(
        _dataCadastroMeta,
        dataCadastro.isAcceptableOrUnknown(
          data['data_cadastro']!,
          _dataCadastroMeta,
        ),
      );
    }
    if (data.containsKey('administrador')) {
      context.handle(
        _administradorMeta,
        administrador.isAcceptableOrUnknown(
          data['administrador']!,
          _administradorMeta,
        ),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  ViewPessoaUsuario map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return ViewPessoaUsuario(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id'],
      ),
      idPessoa: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_pessoa'],
      ),
      pessoaNome: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}pessoa_nome'],
      ),
      tipo: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}tipo'],
      ),
      email: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}email'],
      ),
      idColaborador: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_colaborador'],
      ),
      idUsuario: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_usuario'],
      ),
      login: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}login'],
      ),
      senha: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}senha'],
      ),
      dataCadastro: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}data_cadastro'],
      ),
      administrador: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}administrador'],
      ),
    );
  }

  @override
  $ViewPessoaUsuariosTable createAlias(String alias) {
    return $ViewPessoaUsuariosTable(attachedDatabase, alias);
  }
}

class ViewPessoaUsuario extends DataClass
    implements Insertable<ViewPessoaUsuario> {
  final int? id;
  final int? idPessoa;
  final String? pessoaNome;
  final String? tipo;
  final String? email;
  final int? idColaborador;
  final int? idUsuario;
  final String? login;
  final String? senha;
  final DateTime? dataCadastro;
  final String? administrador;
  const ViewPessoaUsuario({
    this.id,
    this.idPessoa,
    this.pessoaNome,
    this.tipo,
    this.email,
    this.idColaborador,
    this.idUsuario,
    this.login,
    this.senha,
    this.dataCadastro,
    this.administrador,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || idPessoa != null) {
      map['id_pessoa'] = Variable<int>(idPessoa);
    }
    if (!nullToAbsent || pessoaNome != null) {
      map['pessoa_nome'] = Variable<String>(pessoaNome);
    }
    if (!nullToAbsent || tipo != null) {
      map['tipo'] = Variable<String>(tipo);
    }
    if (!nullToAbsent || email != null) {
      map['email'] = Variable<String>(email);
    }
    if (!nullToAbsent || idColaborador != null) {
      map['id_colaborador'] = Variable<int>(idColaborador);
    }
    if (!nullToAbsent || idUsuario != null) {
      map['id_usuario'] = Variable<int>(idUsuario);
    }
    if (!nullToAbsent || login != null) {
      map['login'] = Variable<String>(login);
    }
    if (!nullToAbsent || senha != null) {
      map['senha'] = Variable<String>(senha);
    }
    if (!nullToAbsent || dataCadastro != null) {
      map['data_cadastro'] = Variable<DateTime>(dataCadastro);
    }
    if (!nullToAbsent || administrador != null) {
      map['administrador'] = Variable<String>(administrador);
    }
    return map;
  }

  factory ViewPessoaUsuario.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return ViewPessoaUsuario(
      id: serializer.fromJson<int?>(json['id']),
      idPessoa: serializer.fromJson<int?>(json['idPessoa']),
      pessoaNome: serializer.fromJson<String?>(json['pessoaNome']),
      tipo: serializer.fromJson<String?>(json['tipo']),
      email: serializer.fromJson<String?>(json['email']),
      idColaborador: serializer.fromJson<int?>(json['idColaborador']),
      idUsuario: serializer.fromJson<int?>(json['idUsuario']),
      login: serializer.fromJson<String?>(json['login']),
      senha: serializer.fromJson<String?>(json['senha']),
      dataCadastro: serializer.fromJson<DateTime?>(json['dataCadastro']),
      administrador: serializer.fromJson<String?>(json['administrador']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idPessoa': serializer.toJson<int?>(idPessoa),
      'pessoaNome': serializer.toJson<String?>(pessoaNome),
      'tipo': serializer.toJson<String?>(tipo),
      'email': serializer.toJson<String?>(email),
      'idColaborador': serializer.toJson<int?>(idColaborador),
      'idUsuario': serializer.toJson<int?>(idUsuario),
      'login': serializer.toJson<String?>(login),
      'senha': serializer.toJson<String?>(senha),
      'dataCadastro': serializer.toJson<DateTime?>(dataCadastro),
      'administrador': serializer.toJson<String?>(administrador),
    };
  }

  ViewPessoaUsuario copyWith({
    Value<int?> id = const Value.absent(),
    Value<int?> idPessoa = const Value.absent(),
    Value<String?> pessoaNome = const Value.absent(),
    Value<String?> tipo = const Value.absent(),
    Value<String?> email = const Value.absent(),
    Value<int?> idColaborador = const Value.absent(),
    Value<int?> idUsuario = const Value.absent(),
    Value<String?> login = const Value.absent(),
    Value<String?> senha = const Value.absent(),
    Value<DateTime?> dataCadastro = const Value.absent(),
    Value<String?> administrador = const Value.absent(),
  }) => ViewPessoaUsuario(
    id: id.present ? id.value : this.id,
    idPessoa: idPessoa.present ? idPessoa.value : this.idPessoa,
    pessoaNome: pessoaNome.present ? pessoaNome.value : this.pessoaNome,
    tipo: tipo.present ? tipo.value : this.tipo,
    email: email.present ? email.value : this.email,
    idColaborador:
        idColaborador.present ? idColaborador.value : this.idColaborador,
    idUsuario: idUsuario.present ? idUsuario.value : this.idUsuario,
    login: login.present ? login.value : this.login,
    senha: senha.present ? senha.value : this.senha,
    dataCadastro: dataCadastro.present ? dataCadastro.value : this.dataCadastro,
    administrador:
        administrador.present ? administrador.value : this.administrador,
  );
  ViewPessoaUsuario copyWithCompanion(ViewPessoaUsuariosCompanion data) {
    return ViewPessoaUsuario(
      id: data.id.present ? data.id.value : this.id,
      idPessoa: data.idPessoa.present ? data.idPessoa.value : this.idPessoa,
      pessoaNome:
          data.pessoaNome.present ? data.pessoaNome.value : this.pessoaNome,
      tipo: data.tipo.present ? data.tipo.value : this.tipo,
      email: data.email.present ? data.email.value : this.email,
      idColaborador:
          data.idColaborador.present
              ? data.idColaborador.value
              : this.idColaborador,
      idUsuario: data.idUsuario.present ? data.idUsuario.value : this.idUsuario,
      login: data.login.present ? data.login.value : this.login,
      senha: data.senha.present ? data.senha.value : this.senha,
      dataCadastro:
          data.dataCadastro.present
              ? data.dataCadastro.value
              : this.dataCadastro,
      administrador:
          data.administrador.present
              ? data.administrador.value
              : this.administrador,
    );
  }

  @override
  String toString() {
    return (StringBuffer('ViewPessoaUsuario(')
          ..write('id: $id, ')
          ..write('idPessoa: $idPessoa, ')
          ..write('pessoaNome: $pessoaNome, ')
          ..write('tipo: $tipo, ')
          ..write('email: $email, ')
          ..write('idColaborador: $idColaborador, ')
          ..write('idUsuario: $idUsuario, ')
          ..write('login: $login, ')
          ..write('senha: $senha, ')
          ..write('dataCadastro: $dataCadastro, ')
          ..write('administrador: $administrador')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    idPessoa,
    pessoaNome,
    tipo,
    email,
    idColaborador,
    idUsuario,
    login,
    senha,
    dataCadastro,
    administrador,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is ViewPessoaUsuario &&
          other.id == this.id &&
          other.idPessoa == this.idPessoa &&
          other.pessoaNome == this.pessoaNome &&
          other.tipo == this.tipo &&
          other.email == this.email &&
          other.idColaborador == this.idColaborador &&
          other.idUsuario == this.idUsuario &&
          other.login == this.login &&
          other.senha == this.senha &&
          other.dataCadastro == this.dataCadastro &&
          other.administrador == this.administrador);
}

class ViewPessoaUsuariosCompanion extends UpdateCompanion<ViewPessoaUsuario> {
  final Value<int?> id;
  final Value<int?> idPessoa;
  final Value<String?> pessoaNome;
  final Value<String?> tipo;
  final Value<String?> email;
  final Value<int?> idColaborador;
  final Value<int?> idUsuario;
  final Value<String?> login;
  final Value<String?> senha;
  final Value<DateTime?> dataCadastro;
  final Value<String?> administrador;
  const ViewPessoaUsuariosCompanion({
    this.id = const Value.absent(),
    this.idPessoa = const Value.absent(),
    this.pessoaNome = const Value.absent(),
    this.tipo = const Value.absent(),
    this.email = const Value.absent(),
    this.idColaborador = const Value.absent(),
    this.idUsuario = const Value.absent(),
    this.login = const Value.absent(),
    this.senha = const Value.absent(),
    this.dataCadastro = const Value.absent(),
    this.administrador = const Value.absent(),
  });
  ViewPessoaUsuariosCompanion.insert({
    this.id = const Value.absent(),
    this.idPessoa = const Value.absent(),
    this.pessoaNome = const Value.absent(),
    this.tipo = const Value.absent(),
    this.email = const Value.absent(),
    this.idColaborador = const Value.absent(),
    this.idUsuario = const Value.absent(),
    this.login = const Value.absent(),
    this.senha = const Value.absent(),
    this.dataCadastro = const Value.absent(),
    this.administrador = const Value.absent(),
  });
  static Insertable<ViewPessoaUsuario> custom({
    Expression<int>? id,
    Expression<int>? idPessoa,
    Expression<String>? pessoaNome,
    Expression<String>? tipo,
    Expression<String>? email,
    Expression<int>? idColaborador,
    Expression<int>? idUsuario,
    Expression<String>? login,
    Expression<String>? senha,
    Expression<DateTime>? dataCadastro,
    Expression<String>? administrador,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (idPessoa != null) 'id_pessoa': idPessoa,
      if (pessoaNome != null) 'pessoa_nome': pessoaNome,
      if (tipo != null) 'tipo': tipo,
      if (email != null) 'email': email,
      if (idColaborador != null) 'id_colaborador': idColaborador,
      if (idUsuario != null) 'id_usuario': idUsuario,
      if (login != null) 'login': login,
      if (senha != null) 'senha': senha,
      if (dataCadastro != null) 'data_cadastro': dataCadastro,
      if (administrador != null) 'administrador': administrador,
    });
  }

  ViewPessoaUsuariosCompanion copyWith({
    Value<int?>? id,
    Value<int?>? idPessoa,
    Value<String?>? pessoaNome,
    Value<String?>? tipo,
    Value<String?>? email,
    Value<int?>? idColaborador,
    Value<int?>? idUsuario,
    Value<String?>? login,
    Value<String?>? senha,
    Value<DateTime?>? dataCadastro,
    Value<String?>? administrador,
  }) {
    return ViewPessoaUsuariosCompanion(
      id: id ?? this.id,
      idPessoa: idPessoa ?? this.idPessoa,
      pessoaNome: pessoaNome ?? this.pessoaNome,
      tipo: tipo ?? this.tipo,
      email: email ?? this.email,
      idColaborador: idColaborador ?? this.idColaborador,
      idUsuario: idUsuario ?? this.idUsuario,
      login: login ?? this.login,
      senha: senha ?? this.senha,
      dataCadastro: dataCadastro ?? this.dataCadastro,
      administrador: administrador ?? this.administrador,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (idPessoa.present) {
      map['id_pessoa'] = Variable<int>(idPessoa.value);
    }
    if (pessoaNome.present) {
      map['pessoa_nome'] = Variable<String>(pessoaNome.value);
    }
    if (tipo.present) {
      map['tipo'] = Variable<String>(tipo.value);
    }
    if (email.present) {
      map['email'] = Variable<String>(email.value);
    }
    if (idColaborador.present) {
      map['id_colaborador'] = Variable<int>(idColaborador.value);
    }
    if (idUsuario.present) {
      map['id_usuario'] = Variable<int>(idUsuario.value);
    }
    if (login.present) {
      map['login'] = Variable<String>(login.value);
    }
    if (senha.present) {
      map['senha'] = Variable<String>(senha.value);
    }
    if (dataCadastro.present) {
      map['data_cadastro'] = Variable<DateTime>(dataCadastro.value);
    }
    if (administrador.present) {
      map['administrador'] = Variable<String>(administrador.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('ViewPessoaUsuariosCompanion(')
          ..write('id: $id, ')
          ..write('idPessoa: $idPessoa, ')
          ..write('pessoaNome: $pessoaNome, ')
          ..write('tipo: $tipo, ')
          ..write('email: $email, ')
          ..write('idColaborador: $idColaborador, ')
          ..write('idUsuario: $idUsuario, ')
          ..write('login: $login, ')
          ..write('senha: $senha, ')
          ..write('dataCadastro: $dataCadastro, ')
          ..write('administrador: $administrador')
          ..write(')'))
        .toString();
  }
}

class $ViewPessoaClientesTable extends ViewPessoaClientes
    with TableInfo<$ViewPessoaClientesTable, ViewPessoaCliente> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $ViewPessoaClientesTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
    'id',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _nomeMeta = const VerificationMeta('nome');
  @override
  late final GeneratedColumn<String> nome = GeneratedColumn<String>(
    'nome',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 450,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _tipoMeta = const VerificationMeta('tipo');
  @override
  late final GeneratedColumn<String> tipo = GeneratedColumn<String>(
    'tipo',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 3,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _emailMeta = const VerificationMeta('email');
  @override
  late final GeneratedColumn<String> email = GeneratedColumn<String>(
    'email',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 750,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _siteMeta = const VerificationMeta('site');
  @override
  late final GeneratedColumn<String> site = GeneratedColumn<String>(
    'site',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 450,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _cpfCnpjMeta = const VerificationMeta(
    'cpfCnpj',
  );
  @override
  late final GeneratedColumn<String> cpfCnpj = GeneratedColumn<String>(
    'cpf_cnpj',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 20,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _rgIeMeta = const VerificationMeta('rgIe');
  @override
  late final GeneratedColumn<String> rgIe = GeneratedColumn<String>(
    'rg_ie',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 20,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _desdeMeta = const VerificationMeta('desde');
  @override
  late final GeneratedColumn<DateTime> desde = GeneratedColumn<DateTime>(
    'desde',
    aliasedName,
    true,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _taxaDescontoMeta = const VerificationMeta(
    'taxaDesconto',
  );
  @override
  late final GeneratedColumn<double> taxaDesconto = GeneratedColumn<double>(
    'taxa_desconto',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _limiteCreditoMeta = const VerificationMeta(
    'limiteCredito',
  );
  @override
  late final GeneratedColumn<double> limiteCredito = GeneratedColumn<double>(
    'limite_credito',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _dataCadastroMeta = const VerificationMeta(
    'dataCadastro',
  );
  @override
  late final GeneratedColumn<DateTime> dataCadastro = GeneratedColumn<DateTime>(
    'data_cadastro',
    aliasedName,
    true,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _observacaoMeta = const VerificationMeta(
    'observacao',
  );
  @override
  late final GeneratedColumn<String> observacao = GeneratedColumn<String>(
    'observacao',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idPessoaMeta = const VerificationMeta(
    'idPessoa',
  );
  @override
  late final GeneratedColumn<int> idPessoa = GeneratedColumn<int>(
    'id_pessoa',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    nome,
    tipo,
    email,
    site,
    cpfCnpj,
    rgIe,
    desde,
    taxaDesconto,
    limiteCredito,
    dataCadastro,
    observacao,
    idPessoa,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'view_pessoa_cliente';
  @override
  VerificationContext validateIntegrity(
    Insertable<ViewPessoaCliente> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('nome')) {
      context.handle(
        _nomeMeta,
        nome.isAcceptableOrUnknown(data['nome']!, _nomeMeta),
      );
    }
    if (data.containsKey('tipo')) {
      context.handle(
        _tipoMeta,
        tipo.isAcceptableOrUnknown(data['tipo']!, _tipoMeta),
      );
    }
    if (data.containsKey('email')) {
      context.handle(
        _emailMeta,
        email.isAcceptableOrUnknown(data['email']!, _emailMeta),
      );
    }
    if (data.containsKey('site')) {
      context.handle(
        _siteMeta,
        site.isAcceptableOrUnknown(data['site']!, _siteMeta),
      );
    }
    if (data.containsKey('cpf_cnpj')) {
      context.handle(
        _cpfCnpjMeta,
        cpfCnpj.isAcceptableOrUnknown(data['cpf_cnpj']!, _cpfCnpjMeta),
      );
    }
    if (data.containsKey('rg_ie')) {
      context.handle(
        _rgIeMeta,
        rgIe.isAcceptableOrUnknown(data['rg_ie']!, _rgIeMeta),
      );
    }
    if (data.containsKey('desde')) {
      context.handle(
        _desdeMeta,
        desde.isAcceptableOrUnknown(data['desde']!, _desdeMeta),
      );
    }
    if (data.containsKey('taxa_desconto')) {
      context.handle(
        _taxaDescontoMeta,
        taxaDesconto.isAcceptableOrUnknown(
          data['taxa_desconto']!,
          _taxaDescontoMeta,
        ),
      );
    }
    if (data.containsKey('limite_credito')) {
      context.handle(
        _limiteCreditoMeta,
        limiteCredito.isAcceptableOrUnknown(
          data['limite_credito']!,
          _limiteCreditoMeta,
        ),
      );
    }
    if (data.containsKey('data_cadastro')) {
      context.handle(
        _dataCadastroMeta,
        dataCadastro.isAcceptableOrUnknown(
          data['data_cadastro']!,
          _dataCadastroMeta,
        ),
      );
    }
    if (data.containsKey('observacao')) {
      context.handle(
        _observacaoMeta,
        observacao.isAcceptableOrUnknown(data['observacao']!, _observacaoMeta),
      );
    }
    if (data.containsKey('id_pessoa')) {
      context.handle(
        _idPessoaMeta,
        idPessoa.isAcceptableOrUnknown(data['id_pessoa']!, _idPessoaMeta),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  ViewPessoaCliente map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return ViewPessoaCliente(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id'],
      ),
      nome: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}nome'],
      ),
      tipo: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}tipo'],
      ),
      email: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}email'],
      ),
      site: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}site'],
      ),
      cpfCnpj: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}cpf_cnpj'],
      ),
      rgIe: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}rg_ie'],
      ),
      desde: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}desde'],
      ),
      taxaDesconto: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}taxa_desconto'],
      ),
      limiteCredito: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}limite_credito'],
      ),
      dataCadastro: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}data_cadastro'],
      ),
      observacao: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}observacao'],
      ),
      idPessoa: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_pessoa'],
      ),
    );
  }

  @override
  $ViewPessoaClientesTable createAlias(String alias) {
    return $ViewPessoaClientesTable(attachedDatabase, alias);
  }
}

class ViewPessoaCliente extends DataClass
    implements Insertable<ViewPessoaCliente> {
  final int? id;
  final String? nome;
  final String? tipo;
  final String? email;
  final String? site;
  final String? cpfCnpj;
  final String? rgIe;
  final DateTime? desde;
  final double? taxaDesconto;
  final double? limiteCredito;
  final DateTime? dataCadastro;
  final String? observacao;
  final int? idPessoa;
  const ViewPessoaCliente({
    this.id,
    this.nome,
    this.tipo,
    this.email,
    this.site,
    this.cpfCnpj,
    this.rgIe,
    this.desde,
    this.taxaDesconto,
    this.limiteCredito,
    this.dataCadastro,
    this.observacao,
    this.idPessoa,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || nome != null) {
      map['nome'] = Variable<String>(nome);
    }
    if (!nullToAbsent || tipo != null) {
      map['tipo'] = Variable<String>(tipo);
    }
    if (!nullToAbsent || email != null) {
      map['email'] = Variable<String>(email);
    }
    if (!nullToAbsent || site != null) {
      map['site'] = Variable<String>(site);
    }
    if (!nullToAbsent || cpfCnpj != null) {
      map['cpf_cnpj'] = Variable<String>(cpfCnpj);
    }
    if (!nullToAbsent || rgIe != null) {
      map['rg_ie'] = Variable<String>(rgIe);
    }
    if (!nullToAbsent || desde != null) {
      map['desde'] = Variable<DateTime>(desde);
    }
    if (!nullToAbsent || taxaDesconto != null) {
      map['taxa_desconto'] = Variable<double>(taxaDesconto);
    }
    if (!nullToAbsent || limiteCredito != null) {
      map['limite_credito'] = Variable<double>(limiteCredito);
    }
    if (!nullToAbsent || dataCadastro != null) {
      map['data_cadastro'] = Variable<DateTime>(dataCadastro);
    }
    if (!nullToAbsent || observacao != null) {
      map['observacao'] = Variable<String>(observacao);
    }
    if (!nullToAbsent || idPessoa != null) {
      map['id_pessoa'] = Variable<int>(idPessoa);
    }
    return map;
  }

  factory ViewPessoaCliente.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return ViewPessoaCliente(
      id: serializer.fromJson<int?>(json['id']),
      nome: serializer.fromJson<String?>(json['nome']),
      tipo: serializer.fromJson<String?>(json['tipo']),
      email: serializer.fromJson<String?>(json['email']),
      site: serializer.fromJson<String?>(json['site']),
      cpfCnpj: serializer.fromJson<String?>(json['cpfCnpj']),
      rgIe: serializer.fromJson<String?>(json['rgIe']),
      desde: serializer.fromJson<DateTime?>(json['desde']),
      taxaDesconto: serializer.fromJson<double?>(json['taxaDesconto']),
      limiteCredito: serializer.fromJson<double?>(json['limiteCredito']),
      dataCadastro: serializer.fromJson<DateTime?>(json['dataCadastro']),
      observacao: serializer.fromJson<String?>(json['observacao']),
      idPessoa: serializer.fromJson<int?>(json['idPessoa']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'nome': serializer.toJson<String?>(nome),
      'tipo': serializer.toJson<String?>(tipo),
      'email': serializer.toJson<String?>(email),
      'site': serializer.toJson<String?>(site),
      'cpfCnpj': serializer.toJson<String?>(cpfCnpj),
      'rgIe': serializer.toJson<String?>(rgIe),
      'desde': serializer.toJson<DateTime?>(desde),
      'taxaDesconto': serializer.toJson<double?>(taxaDesconto),
      'limiteCredito': serializer.toJson<double?>(limiteCredito),
      'dataCadastro': serializer.toJson<DateTime?>(dataCadastro),
      'observacao': serializer.toJson<String?>(observacao),
      'idPessoa': serializer.toJson<int?>(idPessoa),
    };
  }

  ViewPessoaCliente copyWith({
    Value<int?> id = const Value.absent(),
    Value<String?> nome = const Value.absent(),
    Value<String?> tipo = const Value.absent(),
    Value<String?> email = const Value.absent(),
    Value<String?> site = const Value.absent(),
    Value<String?> cpfCnpj = const Value.absent(),
    Value<String?> rgIe = const Value.absent(),
    Value<DateTime?> desde = const Value.absent(),
    Value<double?> taxaDesconto = const Value.absent(),
    Value<double?> limiteCredito = const Value.absent(),
    Value<DateTime?> dataCadastro = const Value.absent(),
    Value<String?> observacao = const Value.absent(),
    Value<int?> idPessoa = const Value.absent(),
  }) => ViewPessoaCliente(
    id: id.present ? id.value : this.id,
    nome: nome.present ? nome.value : this.nome,
    tipo: tipo.present ? tipo.value : this.tipo,
    email: email.present ? email.value : this.email,
    site: site.present ? site.value : this.site,
    cpfCnpj: cpfCnpj.present ? cpfCnpj.value : this.cpfCnpj,
    rgIe: rgIe.present ? rgIe.value : this.rgIe,
    desde: desde.present ? desde.value : this.desde,
    taxaDesconto: taxaDesconto.present ? taxaDesconto.value : this.taxaDesconto,
    limiteCredito:
        limiteCredito.present ? limiteCredito.value : this.limiteCredito,
    dataCadastro: dataCadastro.present ? dataCadastro.value : this.dataCadastro,
    observacao: observacao.present ? observacao.value : this.observacao,
    idPessoa: idPessoa.present ? idPessoa.value : this.idPessoa,
  );
  ViewPessoaCliente copyWithCompanion(ViewPessoaClientesCompanion data) {
    return ViewPessoaCliente(
      id: data.id.present ? data.id.value : this.id,
      nome: data.nome.present ? data.nome.value : this.nome,
      tipo: data.tipo.present ? data.tipo.value : this.tipo,
      email: data.email.present ? data.email.value : this.email,
      site: data.site.present ? data.site.value : this.site,
      cpfCnpj: data.cpfCnpj.present ? data.cpfCnpj.value : this.cpfCnpj,
      rgIe: data.rgIe.present ? data.rgIe.value : this.rgIe,
      desde: data.desde.present ? data.desde.value : this.desde,
      taxaDesconto:
          data.taxaDesconto.present
              ? data.taxaDesconto.value
              : this.taxaDesconto,
      limiteCredito:
          data.limiteCredito.present
              ? data.limiteCredito.value
              : this.limiteCredito,
      dataCadastro:
          data.dataCadastro.present
              ? data.dataCadastro.value
              : this.dataCadastro,
      observacao:
          data.observacao.present ? data.observacao.value : this.observacao,
      idPessoa: data.idPessoa.present ? data.idPessoa.value : this.idPessoa,
    );
  }

  @override
  String toString() {
    return (StringBuffer('ViewPessoaCliente(')
          ..write('id: $id, ')
          ..write('nome: $nome, ')
          ..write('tipo: $tipo, ')
          ..write('email: $email, ')
          ..write('site: $site, ')
          ..write('cpfCnpj: $cpfCnpj, ')
          ..write('rgIe: $rgIe, ')
          ..write('desde: $desde, ')
          ..write('taxaDesconto: $taxaDesconto, ')
          ..write('limiteCredito: $limiteCredito, ')
          ..write('dataCadastro: $dataCadastro, ')
          ..write('observacao: $observacao, ')
          ..write('idPessoa: $idPessoa')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    nome,
    tipo,
    email,
    site,
    cpfCnpj,
    rgIe,
    desde,
    taxaDesconto,
    limiteCredito,
    dataCadastro,
    observacao,
    idPessoa,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is ViewPessoaCliente &&
          other.id == this.id &&
          other.nome == this.nome &&
          other.tipo == this.tipo &&
          other.email == this.email &&
          other.site == this.site &&
          other.cpfCnpj == this.cpfCnpj &&
          other.rgIe == this.rgIe &&
          other.desde == this.desde &&
          other.taxaDesconto == this.taxaDesconto &&
          other.limiteCredito == this.limiteCredito &&
          other.dataCadastro == this.dataCadastro &&
          other.observacao == this.observacao &&
          other.idPessoa == this.idPessoa);
}

class ViewPessoaClientesCompanion extends UpdateCompanion<ViewPessoaCliente> {
  final Value<int?> id;
  final Value<String?> nome;
  final Value<String?> tipo;
  final Value<String?> email;
  final Value<String?> site;
  final Value<String?> cpfCnpj;
  final Value<String?> rgIe;
  final Value<DateTime?> desde;
  final Value<double?> taxaDesconto;
  final Value<double?> limiteCredito;
  final Value<DateTime?> dataCadastro;
  final Value<String?> observacao;
  final Value<int?> idPessoa;
  const ViewPessoaClientesCompanion({
    this.id = const Value.absent(),
    this.nome = const Value.absent(),
    this.tipo = const Value.absent(),
    this.email = const Value.absent(),
    this.site = const Value.absent(),
    this.cpfCnpj = const Value.absent(),
    this.rgIe = const Value.absent(),
    this.desde = const Value.absent(),
    this.taxaDesconto = const Value.absent(),
    this.limiteCredito = const Value.absent(),
    this.dataCadastro = const Value.absent(),
    this.observacao = const Value.absent(),
    this.idPessoa = const Value.absent(),
  });
  ViewPessoaClientesCompanion.insert({
    this.id = const Value.absent(),
    this.nome = const Value.absent(),
    this.tipo = const Value.absent(),
    this.email = const Value.absent(),
    this.site = const Value.absent(),
    this.cpfCnpj = const Value.absent(),
    this.rgIe = const Value.absent(),
    this.desde = const Value.absent(),
    this.taxaDesconto = const Value.absent(),
    this.limiteCredito = const Value.absent(),
    this.dataCadastro = const Value.absent(),
    this.observacao = const Value.absent(),
    this.idPessoa = const Value.absent(),
  });
  static Insertable<ViewPessoaCliente> custom({
    Expression<int>? id,
    Expression<String>? nome,
    Expression<String>? tipo,
    Expression<String>? email,
    Expression<String>? site,
    Expression<String>? cpfCnpj,
    Expression<String>? rgIe,
    Expression<DateTime>? desde,
    Expression<double>? taxaDesconto,
    Expression<double>? limiteCredito,
    Expression<DateTime>? dataCadastro,
    Expression<String>? observacao,
    Expression<int>? idPessoa,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (nome != null) 'nome': nome,
      if (tipo != null) 'tipo': tipo,
      if (email != null) 'email': email,
      if (site != null) 'site': site,
      if (cpfCnpj != null) 'cpf_cnpj': cpfCnpj,
      if (rgIe != null) 'rg_ie': rgIe,
      if (desde != null) 'desde': desde,
      if (taxaDesconto != null) 'taxa_desconto': taxaDesconto,
      if (limiteCredito != null) 'limite_credito': limiteCredito,
      if (dataCadastro != null) 'data_cadastro': dataCadastro,
      if (observacao != null) 'observacao': observacao,
      if (idPessoa != null) 'id_pessoa': idPessoa,
    });
  }

  ViewPessoaClientesCompanion copyWith({
    Value<int?>? id,
    Value<String?>? nome,
    Value<String?>? tipo,
    Value<String?>? email,
    Value<String?>? site,
    Value<String?>? cpfCnpj,
    Value<String?>? rgIe,
    Value<DateTime?>? desde,
    Value<double?>? taxaDesconto,
    Value<double?>? limiteCredito,
    Value<DateTime?>? dataCadastro,
    Value<String?>? observacao,
    Value<int?>? idPessoa,
  }) {
    return ViewPessoaClientesCompanion(
      id: id ?? this.id,
      nome: nome ?? this.nome,
      tipo: tipo ?? this.tipo,
      email: email ?? this.email,
      site: site ?? this.site,
      cpfCnpj: cpfCnpj ?? this.cpfCnpj,
      rgIe: rgIe ?? this.rgIe,
      desde: desde ?? this.desde,
      taxaDesconto: taxaDesconto ?? this.taxaDesconto,
      limiteCredito: limiteCredito ?? this.limiteCredito,
      dataCadastro: dataCadastro ?? this.dataCadastro,
      observacao: observacao ?? this.observacao,
      idPessoa: idPessoa ?? this.idPessoa,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (nome.present) {
      map['nome'] = Variable<String>(nome.value);
    }
    if (tipo.present) {
      map['tipo'] = Variable<String>(tipo.value);
    }
    if (email.present) {
      map['email'] = Variable<String>(email.value);
    }
    if (site.present) {
      map['site'] = Variable<String>(site.value);
    }
    if (cpfCnpj.present) {
      map['cpf_cnpj'] = Variable<String>(cpfCnpj.value);
    }
    if (rgIe.present) {
      map['rg_ie'] = Variable<String>(rgIe.value);
    }
    if (desde.present) {
      map['desde'] = Variable<DateTime>(desde.value);
    }
    if (taxaDesconto.present) {
      map['taxa_desconto'] = Variable<double>(taxaDesconto.value);
    }
    if (limiteCredito.present) {
      map['limite_credito'] = Variable<double>(limiteCredito.value);
    }
    if (dataCadastro.present) {
      map['data_cadastro'] = Variable<DateTime>(dataCadastro.value);
    }
    if (observacao.present) {
      map['observacao'] = Variable<String>(observacao.value);
    }
    if (idPessoa.present) {
      map['id_pessoa'] = Variable<int>(idPessoa.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('ViewPessoaClientesCompanion(')
          ..write('id: $id, ')
          ..write('nome: $nome, ')
          ..write('tipo: $tipo, ')
          ..write('email: $email, ')
          ..write('site: $site, ')
          ..write('cpfCnpj: $cpfCnpj, ')
          ..write('rgIe: $rgIe, ')
          ..write('desde: $desde, ')
          ..write('taxaDesconto: $taxaDesconto, ')
          ..write('limiteCredito: $limiteCredito, ')
          ..write('dataCadastro: $dataCadastro, ')
          ..write('observacao: $observacao, ')
          ..write('idPessoa: $idPessoa')
          ..write(')'))
        .toString();
  }
}

class $ViewPessoaFornecedorsTable extends ViewPessoaFornecedors
    with TableInfo<$ViewPessoaFornecedorsTable, ViewPessoaFornecedor> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $ViewPessoaFornecedorsTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
    'id',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _nomeMeta = const VerificationMeta('nome');
  @override
  late final GeneratedColumn<String> nome = GeneratedColumn<String>(
    'nome',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 450,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _tipoMeta = const VerificationMeta('tipo');
  @override
  late final GeneratedColumn<String> tipo = GeneratedColumn<String>(
    'tipo',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 3,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _emailMeta = const VerificationMeta('email');
  @override
  late final GeneratedColumn<String> email = GeneratedColumn<String>(
    'email',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 750,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _siteMeta = const VerificationMeta('site');
  @override
  late final GeneratedColumn<String> site = GeneratedColumn<String>(
    'site',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 450,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _cpfCnpjMeta = const VerificationMeta(
    'cpfCnpj',
  );
  @override
  late final GeneratedColumn<String> cpfCnpj = GeneratedColumn<String>(
    'cpf_cnpj',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 20,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _rgIeMeta = const VerificationMeta('rgIe');
  @override
  late final GeneratedColumn<String> rgIe = GeneratedColumn<String>(
    'rg_ie',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 20,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _desdeMeta = const VerificationMeta('desde');
  @override
  late final GeneratedColumn<DateTime> desde = GeneratedColumn<DateTime>(
    'desde',
    aliasedName,
    true,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _dataCadastroMeta = const VerificationMeta(
    'dataCadastro',
  );
  @override
  late final GeneratedColumn<DateTime> dataCadastro = GeneratedColumn<DateTime>(
    'data_cadastro',
    aliasedName,
    true,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _observacaoMeta = const VerificationMeta(
    'observacao',
  );
  @override
  late final GeneratedColumn<String> observacao = GeneratedColumn<String>(
    'observacao',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idPessoaMeta = const VerificationMeta(
    'idPessoa',
  );
  @override
  late final GeneratedColumn<int> idPessoa = GeneratedColumn<int>(
    'id_pessoa',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    nome,
    tipo,
    email,
    site,
    cpfCnpj,
    rgIe,
    desde,
    dataCadastro,
    observacao,
    idPessoa,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'view_pessoa_fornecedor';
  @override
  VerificationContext validateIntegrity(
    Insertable<ViewPessoaFornecedor> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('nome')) {
      context.handle(
        _nomeMeta,
        nome.isAcceptableOrUnknown(data['nome']!, _nomeMeta),
      );
    }
    if (data.containsKey('tipo')) {
      context.handle(
        _tipoMeta,
        tipo.isAcceptableOrUnknown(data['tipo']!, _tipoMeta),
      );
    }
    if (data.containsKey('email')) {
      context.handle(
        _emailMeta,
        email.isAcceptableOrUnknown(data['email']!, _emailMeta),
      );
    }
    if (data.containsKey('site')) {
      context.handle(
        _siteMeta,
        site.isAcceptableOrUnknown(data['site']!, _siteMeta),
      );
    }
    if (data.containsKey('cpf_cnpj')) {
      context.handle(
        _cpfCnpjMeta,
        cpfCnpj.isAcceptableOrUnknown(data['cpf_cnpj']!, _cpfCnpjMeta),
      );
    }
    if (data.containsKey('rg_ie')) {
      context.handle(
        _rgIeMeta,
        rgIe.isAcceptableOrUnknown(data['rg_ie']!, _rgIeMeta),
      );
    }
    if (data.containsKey('desde')) {
      context.handle(
        _desdeMeta,
        desde.isAcceptableOrUnknown(data['desde']!, _desdeMeta),
      );
    }
    if (data.containsKey('data_cadastro')) {
      context.handle(
        _dataCadastroMeta,
        dataCadastro.isAcceptableOrUnknown(
          data['data_cadastro']!,
          _dataCadastroMeta,
        ),
      );
    }
    if (data.containsKey('observacao')) {
      context.handle(
        _observacaoMeta,
        observacao.isAcceptableOrUnknown(data['observacao']!, _observacaoMeta),
      );
    }
    if (data.containsKey('id_pessoa')) {
      context.handle(
        _idPessoaMeta,
        idPessoa.isAcceptableOrUnknown(data['id_pessoa']!, _idPessoaMeta),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  ViewPessoaFornecedor map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return ViewPessoaFornecedor(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id'],
      ),
      nome: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}nome'],
      ),
      tipo: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}tipo'],
      ),
      email: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}email'],
      ),
      site: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}site'],
      ),
      cpfCnpj: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}cpf_cnpj'],
      ),
      rgIe: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}rg_ie'],
      ),
      desde: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}desde'],
      ),
      dataCadastro: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}data_cadastro'],
      ),
      observacao: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}observacao'],
      ),
      idPessoa: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_pessoa'],
      ),
    );
  }

  @override
  $ViewPessoaFornecedorsTable createAlias(String alias) {
    return $ViewPessoaFornecedorsTable(attachedDatabase, alias);
  }
}

class ViewPessoaFornecedor extends DataClass
    implements Insertable<ViewPessoaFornecedor> {
  final int? id;
  final String? nome;
  final String? tipo;
  final String? email;
  final String? site;
  final String? cpfCnpj;
  final String? rgIe;
  final DateTime? desde;
  final DateTime? dataCadastro;
  final String? observacao;
  final int? idPessoa;
  const ViewPessoaFornecedor({
    this.id,
    this.nome,
    this.tipo,
    this.email,
    this.site,
    this.cpfCnpj,
    this.rgIe,
    this.desde,
    this.dataCadastro,
    this.observacao,
    this.idPessoa,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || nome != null) {
      map['nome'] = Variable<String>(nome);
    }
    if (!nullToAbsent || tipo != null) {
      map['tipo'] = Variable<String>(tipo);
    }
    if (!nullToAbsent || email != null) {
      map['email'] = Variable<String>(email);
    }
    if (!nullToAbsent || site != null) {
      map['site'] = Variable<String>(site);
    }
    if (!nullToAbsent || cpfCnpj != null) {
      map['cpf_cnpj'] = Variable<String>(cpfCnpj);
    }
    if (!nullToAbsent || rgIe != null) {
      map['rg_ie'] = Variable<String>(rgIe);
    }
    if (!nullToAbsent || desde != null) {
      map['desde'] = Variable<DateTime>(desde);
    }
    if (!nullToAbsent || dataCadastro != null) {
      map['data_cadastro'] = Variable<DateTime>(dataCadastro);
    }
    if (!nullToAbsent || observacao != null) {
      map['observacao'] = Variable<String>(observacao);
    }
    if (!nullToAbsent || idPessoa != null) {
      map['id_pessoa'] = Variable<int>(idPessoa);
    }
    return map;
  }

  factory ViewPessoaFornecedor.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return ViewPessoaFornecedor(
      id: serializer.fromJson<int?>(json['id']),
      nome: serializer.fromJson<String?>(json['nome']),
      tipo: serializer.fromJson<String?>(json['tipo']),
      email: serializer.fromJson<String?>(json['email']),
      site: serializer.fromJson<String?>(json['site']),
      cpfCnpj: serializer.fromJson<String?>(json['cpfCnpj']),
      rgIe: serializer.fromJson<String?>(json['rgIe']),
      desde: serializer.fromJson<DateTime?>(json['desde']),
      dataCadastro: serializer.fromJson<DateTime?>(json['dataCadastro']),
      observacao: serializer.fromJson<String?>(json['observacao']),
      idPessoa: serializer.fromJson<int?>(json['idPessoa']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'nome': serializer.toJson<String?>(nome),
      'tipo': serializer.toJson<String?>(tipo),
      'email': serializer.toJson<String?>(email),
      'site': serializer.toJson<String?>(site),
      'cpfCnpj': serializer.toJson<String?>(cpfCnpj),
      'rgIe': serializer.toJson<String?>(rgIe),
      'desde': serializer.toJson<DateTime?>(desde),
      'dataCadastro': serializer.toJson<DateTime?>(dataCadastro),
      'observacao': serializer.toJson<String?>(observacao),
      'idPessoa': serializer.toJson<int?>(idPessoa),
    };
  }

  ViewPessoaFornecedor copyWith({
    Value<int?> id = const Value.absent(),
    Value<String?> nome = const Value.absent(),
    Value<String?> tipo = const Value.absent(),
    Value<String?> email = const Value.absent(),
    Value<String?> site = const Value.absent(),
    Value<String?> cpfCnpj = const Value.absent(),
    Value<String?> rgIe = const Value.absent(),
    Value<DateTime?> desde = const Value.absent(),
    Value<DateTime?> dataCadastro = const Value.absent(),
    Value<String?> observacao = const Value.absent(),
    Value<int?> idPessoa = const Value.absent(),
  }) => ViewPessoaFornecedor(
    id: id.present ? id.value : this.id,
    nome: nome.present ? nome.value : this.nome,
    tipo: tipo.present ? tipo.value : this.tipo,
    email: email.present ? email.value : this.email,
    site: site.present ? site.value : this.site,
    cpfCnpj: cpfCnpj.present ? cpfCnpj.value : this.cpfCnpj,
    rgIe: rgIe.present ? rgIe.value : this.rgIe,
    desde: desde.present ? desde.value : this.desde,
    dataCadastro: dataCadastro.present ? dataCadastro.value : this.dataCadastro,
    observacao: observacao.present ? observacao.value : this.observacao,
    idPessoa: idPessoa.present ? idPessoa.value : this.idPessoa,
  );
  ViewPessoaFornecedor copyWithCompanion(ViewPessoaFornecedorsCompanion data) {
    return ViewPessoaFornecedor(
      id: data.id.present ? data.id.value : this.id,
      nome: data.nome.present ? data.nome.value : this.nome,
      tipo: data.tipo.present ? data.tipo.value : this.tipo,
      email: data.email.present ? data.email.value : this.email,
      site: data.site.present ? data.site.value : this.site,
      cpfCnpj: data.cpfCnpj.present ? data.cpfCnpj.value : this.cpfCnpj,
      rgIe: data.rgIe.present ? data.rgIe.value : this.rgIe,
      desde: data.desde.present ? data.desde.value : this.desde,
      dataCadastro:
          data.dataCadastro.present
              ? data.dataCadastro.value
              : this.dataCadastro,
      observacao:
          data.observacao.present ? data.observacao.value : this.observacao,
      idPessoa: data.idPessoa.present ? data.idPessoa.value : this.idPessoa,
    );
  }

  @override
  String toString() {
    return (StringBuffer('ViewPessoaFornecedor(')
          ..write('id: $id, ')
          ..write('nome: $nome, ')
          ..write('tipo: $tipo, ')
          ..write('email: $email, ')
          ..write('site: $site, ')
          ..write('cpfCnpj: $cpfCnpj, ')
          ..write('rgIe: $rgIe, ')
          ..write('desde: $desde, ')
          ..write('dataCadastro: $dataCadastro, ')
          ..write('observacao: $observacao, ')
          ..write('idPessoa: $idPessoa')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    nome,
    tipo,
    email,
    site,
    cpfCnpj,
    rgIe,
    desde,
    dataCadastro,
    observacao,
    idPessoa,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is ViewPessoaFornecedor &&
          other.id == this.id &&
          other.nome == this.nome &&
          other.tipo == this.tipo &&
          other.email == this.email &&
          other.site == this.site &&
          other.cpfCnpj == this.cpfCnpj &&
          other.rgIe == this.rgIe &&
          other.desde == this.desde &&
          other.dataCadastro == this.dataCadastro &&
          other.observacao == this.observacao &&
          other.idPessoa == this.idPessoa);
}

class ViewPessoaFornecedorsCompanion
    extends UpdateCompanion<ViewPessoaFornecedor> {
  final Value<int?> id;
  final Value<String?> nome;
  final Value<String?> tipo;
  final Value<String?> email;
  final Value<String?> site;
  final Value<String?> cpfCnpj;
  final Value<String?> rgIe;
  final Value<DateTime?> desde;
  final Value<DateTime?> dataCadastro;
  final Value<String?> observacao;
  final Value<int?> idPessoa;
  const ViewPessoaFornecedorsCompanion({
    this.id = const Value.absent(),
    this.nome = const Value.absent(),
    this.tipo = const Value.absent(),
    this.email = const Value.absent(),
    this.site = const Value.absent(),
    this.cpfCnpj = const Value.absent(),
    this.rgIe = const Value.absent(),
    this.desde = const Value.absent(),
    this.dataCadastro = const Value.absent(),
    this.observacao = const Value.absent(),
    this.idPessoa = const Value.absent(),
  });
  ViewPessoaFornecedorsCompanion.insert({
    this.id = const Value.absent(),
    this.nome = const Value.absent(),
    this.tipo = const Value.absent(),
    this.email = const Value.absent(),
    this.site = const Value.absent(),
    this.cpfCnpj = const Value.absent(),
    this.rgIe = const Value.absent(),
    this.desde = const Value.absent(),
    this.dataCadastro = const Value.absent(),
    this.observacao = const Value.absent(),
    this.idPessoa = const Value.absent(),
  });
  static Insertable<ViewPessoaFornecedor> custom({
    Expression<int>? id,
    Expression<String>? nome,
    Expression<String>? tipo,
    Expression<String>? email,
    Expression<String>? site,
    Expression<String>? cpfCnpj,
    Expression<String>? rgIe,
    Expression<DateTime>? desde,
    Expression<DateTime>? dataCadastro,
    Expression<String>? observacao,
    Expression<int>? idPessoa,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (nome != null) 'nome': nome,
      if (tipo != null) 'tipo': tipo,
      if (email != null) 'email': email,
      if (site != null) 'site': site,
      if (cpfCnpj != null) 'cpf_cnpj': cpfCnpj,
      if (rgIe != null) 'rg_ie': rgIe,
      if (desde != null) 'desde': desde,
      if (dataCadastro != null) 'data_cadastro': dataCadastro,
      if (observacao != null) 'observacao': observacao,
      if (idPessoa != null) 'id_pessoa': idPessoa,
    });
  }

  ViewPessoaFornecedorsCompanion copyWith({
    Value<int?>? id,
    Value<String?>? nome,
    Value<String?>? tipo,
    Value<String?>? email,
    Value<String?>? site,
    Value<String?>? cpfCnpj,
    Value<String?>? rgIe,
    Value<DateTime?>? desde,
    Value<DateTime?>? dataCadastro,
    Value<String?>? observacao,
    Value<int?>? idPessoa,
  }) {
    return ViewPessoaFornecedorsCompanion(
      id: id ?? this.id,
      nome: nome ?? this.nome,
      tipo: tipo ?? this.tipo,
      email: email ?? this.email,
      site: site ?? this.site,
      cpfCnpj: cpfCnpj ?? this.cpfCnpj,
      rgIe: rgIe ?? this.rgIe,
      desde: desde ?? this.desde,
      dataCadastro: dataCadastro ?? this.dataCadastro,
      observacao: observacao ?? this.observacao,
      idPessoa: idPessoa ?? this.idPessoa,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (nome.present) {
      map['nome'] = Variable<String>(nome.value);
    }
    if (tipo.present) {
      map['tipo'] = Variable<String>(tipo.value);
    }
    if (email.present) {
      map['email'] = Variable<String>(email.value);
    }
    if (site.present) {
      map['site'] = Variable<String>(site.value);
    }
    if (cpfCnpj.present) {
      map['cpf_cnpj'] = Variable<String>(cpfCnpj.value);
    }
    if (rgIe.present) {
      map['rg_ie'] = Variable<String>(rgIe.value);
    }
    if (desde.present) {
      map['desde'] = Variable<DateTime>(desde.value);
    }
    if (dataCadastro.present) {
      map['data_cadastro'] = Variable<DateTime>(dataCadastro.value);
    }
    if (observacao.present) {
      map['observacao'] = Variable<String>(observacao.value);
    }
    if (idPessoa.present) {
      map['id_pessoa'] = Variable<int>(idPessoa.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('ViewPessoaFornecedorsCompanion(')
          ..write('id: $id, ')
          ..write('nome: $nome, ')
          ..write('tipo: $tipo, ')
          ..write('email: $email, ')
          ..write('site: $site, ')
          ..write('cpfCnpj: $cpfCnpj, ')
          ..write('rgIe: $rgIe, ')
          ..write('desde: $desde, ')
          ..write('dataCadastro: $dataCadastro, ')
          ..write('observacao: $observacao, ')
          ..write('idPessoa: $idPessoa')
          ..write(')'))
        .toString();
  }
}

class $ViewPessoaColaboradorsTable extends ViewPessoaColaboradors
    with TableInfo<$ViewPessoaColaboradorsTable, ViewPessoaColaborador> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $ViewPessoaColaboradorsTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
    'id',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _nomeMeta = const VerificationMeta('nome');
  @override
  late final GeneratedColumn<String> nome = GeneratedColumn<String>(
    'nome',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 450,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _tipoMeta = const VerificationMeta('tipo');
  @override
  late final GeneratedColumn<String> tipo = GeneratedColumn<String>(
    'tipo',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 3,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _emailMeta = const VerificationMeta('email');
  @override
  late final GeneratedColumn<String> email = GeneratedColumn<String>(
    'email',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 750,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _siteMeta = const VerificationMeta('site');
  @override
  late final GeneratedColumn<String> site = GeneratedColumn<String>(
    'site',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 450,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _cpfCnpjMeta = const VerificationMeta(
    'cpfCnpj',
  );
  @override
  late final GeneratedColumn<String> cpfCnpj = GeneratedColumn<String>(
    'cpf_cnpj',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 20,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _rgIeMeta = const VerificationMeta('rgIe');
  @override
  late final GeneratedColumn<String> rgIe = GeneratedColumn<String>(
    'rg_ie',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 20,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _matriculaMeta = const VerificationMeta(
    'matricula',
  );
  @override
  late final GeneratedColumn<String> matricula = GeneratedColumn<String>(
    'matricula',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 50,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _dataCadastroMeta = const VerificationMeta(
    'dataCadastro',
  );
  @override
  late final GeneratedColumn<DateTime> dataCadastro = GeneratedColumn<DateTime>(
    'data_cadastro',
    aliasedName,
    true,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _dataAdmissaoMeta = const VerificationMeta(
    'dataAdmissao',
  );
  @override
  late final GeneratedColumn<DateTime> dataAdmissao = GeneratedColumn<DateTime>(
    'data_admissao',
    aliasedName,
    true,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _dataDemissaoMeta = const VerificationMeta(
    'dataDemissao',
  );
  @override
  late final GeneratedColumn<DateTime> dataDemissao = GeneratedColumn<DateTime>(
    'data_demissao',
    aliasedName,
    true,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _ctpsNumeroMeta = const VerificationMeta(
    'ctpsNumero',
  );
  @override
  late final GeneratedColumn<String> ctpsNumero = GeneratedColumn<String>(
    'ctps_numero',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 20,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _ctpsSerieMeta = const VerificationMeta(
    'ctpsSerie',
  );
  @override
  late final GeneratedColumn<String> ctpsSerie = GeneratedColumn<String>(
    'ctps_serie',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 10,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _ctpsDataExpedicaoMeta = const VerificationMeta(
    'ctpsDataExpedicao',
  );
  @override
  late final GeneratedColumn<DateTime> ctpsDataExpedicao =
      GeneratedColumn<DateTime>(
        'ctps_data_expedicao',
        aliasedName,
        true,
        type: DriftSqlType.dateTime,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _ctpsUfMeta = const VerificationMeta('ctpsUf');
  @override
  late final GeneratedColumn<String> ctpsUf = GeneratedColumn<String>(
    'ctps_uf',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 2,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _observacaoMeta = const VerificationMeta(
    'observacao',
  );
  @override
  late final GeneratedColumn<String> observacao = GeneratedColumn<String>(
    'observacao',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _logradouroMeta = const VerificationMeta(
    'logradouro',
  );
  @override
  late final GeneratedColumn<String> logradouro = GeneratedColumn<String>(
    'logradouro',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 450,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _numeroMeta = const VerificationMeta('numero');
  @override
  late final GeneratedColumn<String> numero = GeneratedColumn<String>(
    'numero',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 20,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _complementoMeta = const VerificationMeta(
    'complemento',
  );
  @override
  late final GeneratedColumn<String> complemento = GeneratedColumn<String>(
    'complemento',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 450,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _bairroMeta = const VerificationMeta('bairro');
  @override
  late final GeneratedColumn<String> bairro = GeneratedColumn<String>(
    'bairro',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 150,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _cidadeMeta = const VerificationMeta('cidade');
  @override
  late final GeneratedColumn<String> cidade = GeneratedColumn<String>(
    'cidade',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 150,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _cepMeta = const VerificationMeta('cep');
  @override
  late final GeneratedColumn<String> cep = GeneratedColumn<String>(
    'cep',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 10,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _municipioIbgeMeta = const VerificationMeta(
    'municipioIbge',
  );
  @override
  late final GeneratedColumn<String> municipioIbge = GeneratedColumn<String>(
    'municipio_ibge',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 10,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _ufMeta = const VerificationMeta('uf');
  @override
  late final GeneratedColumn<String> uf = GeneratedColumn<String>(
    'uf',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 2,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idPessoaMeta = const VerificationMeta(
    'idPessoa',
  );
  @override
  late final GeneratedColumn<int> idPessoa = GeneratedColumn<int>(
    'id_pessoa',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idCargoMeta = const VerificationMeta(
    'idCargo',
  );
  @override
  late final GeneratedColumn<int> idCargo = GeneratedColumn<int>(
    'id_cargo',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idSetorMeta = const VerificationMeta(
    'idSetor',
  );
  @override
  late final GeneratedColumn<int> idSetor = GeneratedColumn<int>(
    'id_setor',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    nome,
    tipo,
    email,
    site,
    cpfCnpj,
    rgIe,
    matricula,
    dataCadastro,
    dataAdmissao,
    dataDemissao,
    ctpsNumero,
    ctpsSerie,
    ctpsDataExpedicao,
    ctpsUf,
    observacao,
    logradouro,
    numero,
    complemento,
    bairro,
    cidade,
    cep,
    municipioIbge,
    uf,
    idPessoa,
    idCargo,
    idSetor,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'view_pessoa_colaborador';
  @override
  VerificationContext validateIntegrity(
    Insertable<ViewPessoaColaborador> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('nome')) {
      context.handle(
        _nomeMeta,
        nome.isAcceptableOrUnknown(data['nome']!, _nomeMeta),
      );
    }
    if (data.containsKey('tipo')) {
      context.handle(
        _tipoMeta,
        tipo.isAcceptableOrUnknown(data['tipo']!, _tipoMeta),
      );
    }
    if (data.containsKey('email')) {
      context.handle(
        _emailMeta,
        email.isAcceptableOrUnknown(data['email']!, _emailMeta),
      );
    }
    if (data.containsKey('site')) {
      context.handle(
        _siteMeta,
        site.isAcceptableOrUnknown(data['site']!, _siteMeta),
      );
    }
    if (data.containsKey('cpf_cnpj')) {
      context.handle(
        _cpfCnpjMeta,
        cpfCnpj.isAcceptableOrUnknown(data['cpf_cnpj']!, _cpfCnpjMeta),
      );
    }
    if (data.containsKey('rg_ie')) {
      context.handle(
        _rgIeMeta,
        rgIe.isAcceptableOrUnknown(data['rg_ie']!, _rgIeMeta),
      );
    }
    if (data.containsKey('matricula')) {
      context.handle(
        _matriculaMeta,
        matricula.isAcceptableOrUnknown(data['matricula']!, _matriculaMeta),
      );
    }
    if (data.containsKey('data_cadastro')) {
      context.handle(
        _dataCadastroMeta,
        dataCadastro.isAcceptableOrUnknown(
          data['data_cadastro']!,
          _dataCadastroMeta,
        ),
      );
    }
    if (data.containsKey('data_admissao')) {
      context.handle(
        _dataAdmissaoMeta,
        dataAdmissao.isAcceptableOrUnknown(
          data['data_admissao']!,
          _dataAdmissaoMeta,
        ),
      );
    }
    if (data.containsKey('data_demissao')) {
      context.handle(
        _dataDemissaoMeta,
        dataDemissao.isAcceptableOrUnknown(
          data['data_demissao']!,
          _dataDemissaoMeta,
        ),
      );
    }
    if (data.containsKey('ctps_numero')) {
      context.handle(
        _ctpsNumeroMeta,
        ctpsNumero.isAcceptableOrUnknown(data['ctps_numero']!, _ctpsNumeroMeta),
      );
    }
    if (data.containsKey('ctps_serie')) {
      context.handle(
        _ctpsSerieMeta,
        ctpsSerie.isAcceptableOrUnknown(data['ctps_serie']!, _ctpsSerieMeta),
      );
    }
    if (data.containsKey('ctps_data_expedicao')) {
      context.handle(
        _ctpsDataExpedicaoMeta,
        ctpsDataExpedicao.isAcceptableOrUnknown(
          data['ctps_data_expedicao']!,
          _ctpsDataExpedicaoMeta,
        ),
      );
    }
    if (data.containsKey('ctps_uf')) {
      context.handle(
        _ctpsUfMeta,
        ctpsUf.isAcceptableOrUnknown(data['ctps_uf']!, _ctpsUfMeta),
      );
    }
    if (data.containsKey('observacao')) {
      context.handle(
        _observacaoMeta,
        observacao.isAcceptableOrUnknown(data['observacao']!, _observacaoMeta),
      );
    }
    if (data.containsKey('logradouro')) {
      context.handle(
        _logradouroMeta,
        logradouro.isAcceptableOrUnknown(data['logradouro']!, _logradouroMeta),
      );
    }
    if (data.containsKey('numero')) {
      context.handle(
        _numeroMeta,
        numero.isAcceptableOrUnknown(data['numero']!, _numeroMeta),
      );
    }
    if (data.containsKey('complemento')) {
      context.handle(
        _complementoMeta,
        complemento.isAcceptableOrUnknown(
          data['complemento']!,
          _complementoMeta,
        ),
      );
    }
    if (data.containsKey('bairro')) {
      context.handle(
        _bairroMeta,
        bairro.isAcceptableOrUnknown(data['bairro']!, _bairroMeta),
      );
    }
    if (data.containsKey('cidade')) {
      context.handle(
        _cidadeMeta,
        cidade.isAcceptableOrUnknown(data['cidade']!, _cidadeMeta),
      );
    }
    if (data.containsKey('cep')) {
      context.handle(
        _cepMeta,
        cep.isAcceptableOrUnknown(data['cep']!, _cepMeta),
      );
    }
    if (data.containsKey('municipio_ibge')) {
      context.handle(
        _municipioIbgeMeta,
        municipioIbge.isAcceptableOrUnknown(
          data['municipio_ibge']!,
          _municipioIbgeMeta,
        ),
      );
    }
    if (data.containsKey('uf')) {
      context.handle(_ufMeta, uf.isAcceptableOrUnknown(data['uf']!, _ufMeta));
    }
    if (data.containsKey('id_pessoa')) {
      context.handle(
        _idPessoaMeta,
        idPessoa.isAcceptableOrUnknown(data['id_pessoa']!, _idPessoaMeta),
      );
    }
    if (data.containsKey('id_cargo')) {
      context.handle(
        _idCargoMeta,
        idCargo.isAcceptableOrUnknown(data['id_cargo']!, _idCargoMeta),
      );
    }
    if (data.containsKey('id_setor')) {
      context.handle(
        _idSetorMeta,
        idSetor.isAcceptableOrUnknown(data['id_setor']!, _idSetorMeta),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  ViewPessoaColaborador map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return ViewPessoaColaborador(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id'],
      ),
      nome: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}nome'],
      ),
      tipo: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}tipo'],
      ),
      email: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}email'],
      ),
      site: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}site'],
      ),
      cpfCnpj: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}cpf_cnpj'],
      ),
      rgIe: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}rg_ie'],
      ),
      matricula: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}matricula'],
      ),
      dataCadastro: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}data_cadastro'],
      ),
      dataAdmissao: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}data_admissao'],
      ),
      dataDemissao: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}data_demissao'],
      ),
      ctpsNumero: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ctps_numero'],
      ),
      ctpsSerie: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ctps_serie'],
      ),
      ctpsDataExpedicao: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}ctps_data_expedicao'],
      ),
      ctpsUf: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ctps_uf'],
      ),
      observacao: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}observacao'],
      ),
      logradouro: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}logradouro'],
      ),
      numero: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}numero'],
      ),
      complemento: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}complemento'],
      ),
      bairro: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}bairro'],
      ),
      cidade: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}cidade'],
      ),
      cep: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}cep'],
      ),
      municipioIbge: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}municipio_ibge'],
      ),
      uf: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}uf'],
      ),
      idPessoa: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_pessoa'],
      ),
      idCargo: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_cargo'],
      ),
      idSetor: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_setor'],
      ),
    );
  }

  @override
  $ViewPessoaColaboradorsTable createAlias(String alias) {
    return $ViewPessoaColaboradorsTable(attachedDatabase, alias);
  }
}

class ViewPessoaColaborador extends DataClass
    implements Insertable<ViewPessoaColaborador> {
  final int? id;
  final String? nome;
  final String? tipo;
  final String? email;
  final String? site;
  final String? cpfCnpj;
  final String? rgIe;
  final String? matricula;
  final DateTime? dataCadastro;
  final DateTime? dataAdmissao;
  final DateTime? dataDemissao;
  final String? ctpsNumero;
  final String? ctpsSerie;
  final DateTime? ctpsDataExpedicao;
  final String? ctpsUf;
  final String? observacao;
  final String? logradouro;
  final String? numero;
  final String? complemento;
  final String? bairro;
  final String? cidade;
  final String? cep;
  final String? municipioIbge;
  final String? uf;
  final int? idPessoa;
  final int? idCargo;
  final int? idSetor;
  const ViewPessoaColaborador({
    this.id,
    this.nome,
    this.tipo,
    this.email,
    this.site,
    this.cpfCnpj,
    this.rgIe,
    this.matricula,
    this.dataCadastro,
    this.dataAdmissao,
    this.dataDemissao,
    this.ctpsNumero,
    this.ctpsSerie,
    this.ctpsDataExpedicao,
    this.ctpsUf,
    this.observacao,
    this.logradouro,
    this.numero,
    this.complemento,
    this.bairro,
    this.cidade,
    this.cep,
    this.municipioIbge,
    this.uf,
    this.idPessoa,
    this.idCargo,
    this.idSetor,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || nome != null) {
      map['nome'] = Variable<String>(nome);
    }
    if (!nullToAbsent || tipo != null) {
      map['tipo'] = Variable<String>(tipo);
    }
    if (!nullToAbsent || email != null) {
      map['email'] = Variable<String>(email);
    }
    if (!nullToAbsent || site != null) {
      map['site'] = Variable<String>(site);
    }
    if (!nullToAbsent || cpfCnpj != null) {
      map['cpf_cnpj'] = Variable<String>(cpfCnpj);
    }
    if (!nullToAbsent || rgIe != null) {
      map['rg_ie'] = Variable<String>(rgIe);
    }
    if (!nullToAbsent || matricula != null) {
      map['matricula'] = Variable<String>(matricula);
    }
    if (!nullToAbsent || dataCadastro != null) {
      map['data_cadastro'] = Variable<DateTime>(dataCadastro);
    }
    if (!nullToAbsent || dataAdmissao != null) {
      map['data_admissao'] = Variable<DateTime>(dataAdmissao);
    }
    if (!nullToAbsent || dataDemissao != null) {
      map['data_demissao'] = Variable<DateTime>(dataDemissao);
    }
    if (!nullToAbsent || ctpsNumero != null) {
      map['ctps_numero'] = Variable<String>(ctpsNumero);
    }
    if (!nullToAbsent || ctpsSerie != null) {
      map['ctps_serie'] = Variable<String>(ctpsSerie);
    }
    if (!nullToAbsent || ctpsDataExpedicao != null) {
      map['ctps_data_expedicao'] = Variable<DateTime>(ctpsDataExpedicao);
    }
    if (!nullToAbsent || ctpsUf != null) {
      map['ctps_uf'] = Variable<String>(ctpsUf);
    }
    if (!nullToAbsent || observacao != null) {
      map['observacao'] = Variable<String>(observacao);
    }
    if (!nullToAbsent || logradouro != null) {
      map['logradouro'] = Variable<String>(logradouro);
    }
    if (!nullToAbsent || numero != null) {
      map['numero'] = Variable<String>(numero);
    }
    if (!nullToAbsent || complemento != null) {
      map['complemento'] = Variable<String>(complemento);
    }
    if (!nullToAbsent || bairro != null) {
      map['bairro'] = Variable<String>(bairro);
    }
    if (!nullToAbsent || cidade != null) {
      map['cidade'] = Variable<String>(cidade);
    }
    if (!nullToAbsent || cep != null) {
      map['cep'] = Variable<String>(cep);
    }
    if (!nullToAbsent || municipioIbge != null) {
      map['municipio_ibge'] = Variable<String>(municipioIbge);
    }
    if (!nullToAbsent || uf != null) {
      map['uf'] = Variable<String>(uf);
    }
    if (!nullToAbsent || idPessoa != null) {
      map['id_pessoa'] = Variable<int>(idPessoa);
    }
    if (!nullToAbsent || idCargo != null) {
      map['id_cargo'] = Variable<int>(idCargo);
    }
    if (!nullToAbsent || idSetor != null) {
      map['id_setor'] = Variable<int>(idSetor);
    }
    return map;
  }

  factory ViewPessoaColaborador.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return ViewPessoaColaborador(
      id: serializer.fromJson<int?>(json['id']),
      nome: serializer.fromJson<String?>(json['nome']),
      tipo: serializer.fromJson<String?>(json['tipo']),
      email: serializer.fromJson<String?>(json['email']),
      site: serializer.fromJson<String?>(json['site']),
      cpfCnpj: serializer.fromJson<String?>(json['cpfCnpj']),
      rgIe: serializer.fromJson<String?>(json['rgIe']),
      matricula: serializer.fromJson<String?>(json['matricula']),
      dataCadastro: serializer.fromJson<DateTime?>(json['dataCadastro']),
      dataAdmissao: serializer.fromJson<DateTime?>(json['dataAdmissao']),
      dataDemissao: serializer.fromJson<DateTime?>(json['dataDemissao']),
      ctpsNumero: serializer.fromJson<String?>(json['ctpsNumero']),
      ctpsSerie: serializer.fromJson<String?>(json['ctpsSerie']),
      ctpsDataExpedicao: serializer.fromJson<DateTime?>(
        json['ctpsDataExpedicao'],
      ),
      ctpsUf: serializer.fromJson<String?>(json['ctpsUf']),
      observacao: serializer.fromJson<String?>(json['observacao']),
      logradouro: serializer.fromJson<String?>(json['logradouro']),
      numero: serializer.fromJson<String?>(json['numero']),
      complemento: serializer.fromJson<String?>(json['complemento']),
      bairro: serializer.fromJson<String?>(json['bairro']),
      cidade: serializer.fromJson<String?>(json['cidade']),
      cep: serializer.fromJson<String?>(json['cep']),
      municipioIbge: serializer.fromJson<String?>(json['municipioIbge']),
      uf: serializer.fromJson<String?>(json['uf']),
      idPessoa: serializer.fromJson<int?>(json['idPessoa']),
      idCargo: serializer.fromJson<int?>(json['idCargo']),
      idSetor: serializer.fromJson<int?>(json['idSetor']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'nome': serializer.toJson<String?>(nome),
      'tipo': serializer.toJson<String?>(tipo),
      'email': serializer.toJson<String?>(email),
      'site': serializer.toJson<String?>(site),
      'cpfCnpj': serializer.toJson<String?>(cpfCnpj),
      'rgIe': serializer.toJson<String?>(rgIe),
      'matricula': serializer.toJson<String?>(matricula),
      'dataCadastro': serializer.toJson<DateTime?>(dataCadastro),
      'dataAdmissao': serializer.toJson<DateTime?>(dataAdmissao),
      'dataDemissao': serializer.toJson<DateTime?>(dataDemissao),
      'ctpsNumero': serializer.toJson<String?>(ctpsNumero),
      'ctpsSerie': serializer.toJson<String?>(ctpsSerie),
      'ctpsDataExpedicao': serializer.toJson<DateTime?>(ctpsDataExpedicao),
      'ctpsUf': serializer.toJson<String?>(ctpsUf),
      'observacao': serializer.toJson<String?>(observacao),
      'logradouro': serializer.toJson<String?>(logradouro),
      'numero': serializer.toJson<String?>(numero),
      'complemento': serializer.toJson<String?>(complemento),
      'bairro': serializer.toJson<String?>(bairro),
      'cidade': serializer.toJson<String?>(cidade),
      'cep': serializer.toJson<String?>(cep),
      'municipioIbge': serializer.toJson<String?>(municipioIbge),
      'uf': serializer.toJson<String?>(uf),
      'idPessoa': serializer.toJson<int?>(idPessoa),
      'idCargo': serializer.toJson<int?>(idCargo),
      'idSetor': serializer.toJson<int?>(idSetor),
    };
  }

  ViewPessoaColaborador copyWith({
    Value<int?> id = const Value.absent(),
    Value<String?> nome = const Value.absent(),
    Value<String?> tipo = const Value.absent(),
    Value<String?> email = const Value.absent(),
    Value<String?> site = const Value.absent(),
    Value<String?> cpfCnpj = const Value.absent(),
    Value<String?> rgIe = const Value.absent(),
    Value<String?> matricula = const Value.absent(),
    Value<DateTime?> dataCadastro = const Value.absent(),
    Value<DateTime?> dataAdmissao = const Value.absent(),
    Value<DateTime?> dataDemissao = const Value.absent(),
    Value<String?> ctpsNumero = const Value.absent(),
    Value<String?> ctpsSerie = const Value.absent(),
    Value<DateTime?> ctpsDataExpedicao = const Value.absent(),
    Value<String?> ctpsUf = const Value.absent(),
    Value<String?> observacao = const Value.absent(),
    Value<String?> logradouro = const Value.absent(),
    Value<String?> numero = const Value.absent(),
    Value<String?> complemento = const Value.absent(),
    Value<String?> bairro = const Value.absent(),
    Value<String?> cidade = const Value.absent(),
    Value<String?> cep = const Value.absent(),
    Value<String?> municipioIbge = const Value.absent(),
    Value<String?> uf = const Value.absent(),
    Value<int?> idPessoa = const Value.absent(),
    Value<int?> idCargo = const Value.absent(),
    Value<int?> idSetor = const Value.absent(),
  }) => ViewPessoaColaborador(
    id: id.present ? id.value : this.id,
    nome: nome.present ? nome.value : this.nome,
    tipo: tipo.present ? tipo.value : this.tipo,
    email: email.present ? email.value : this.email,
    site: site.present ? site.value : this.site,
    cpfCnpj: cpfCnpj.present ? cpfCnpj.value : this.cpfCnpj,
    rgIe: rgIe.present ? rgIe.value : this.rgIe,
    matricula: matricula.present ? matricula.value : this.matricula,
    dataCadastro: dataCadastro.present ? dataCadastro.value : this.dataCadastro,
    dataAdmissao: dataAdmissao.present ? dataAdmissao.value : this.dataAdmissao,
    dataDemissao: dataDemissao.present ? dataDemissao.value : this.dataDemissao,
    ctpsNumero: ctpsNumero.present ? ctpsNumero.value : this.ctpsNumero,
    ctpsSerie: ctpsSerie.present ? ctpsSerie.value : this.ctpsSerie,
    ctpsDataExpedicao:
        ctpsDataExpedicao.present
            ? ctpsDataExpedicao.value
            : this.ctpsDataExpedicao,
    ctpsUf: ctpsUf.present ? ctpsUf.value : this.ctpsUf,
    observacao: observacao.present ? observacao.value : this.observacao,
    logradouro: logradouro.present ? logradouro.value : this.logradouro,
    numero: numero.present ? numero.value : this.numero,
    complemento: complemento.present ? complemento.value : this.complemento,
    bairro: bairro.present ? bairro.value : this.bairro,
    cidade: cidade.present ? cidade.value : this.cidade,
    cep: cep.present ? cep.value : this.cep,
    municipioIbge:
        municipioIbge.present ? municipioIbge.value : this.municipioIbge,
    uf: uf.present ? uf.value : this.uf,
    idPessoa: idPessoa.present ? idPessoa.value : this.idPessoa,
    idCargo: idCargo.present ? idCargo.value : this.idCargo,
    idSetor: idSetor.present ? idSetor.value : this.idSetor,
  );
  ViewPessoaColaborador copyWithCompanion(
    ViewPessoaColaboradorsCompanion data,
  ) {
    return ViewPessoaColaborador(
      id: data.id.present ? data.id.value : this.id,
      nome: data.nome.present ? data.nome.value : this.nome,
      tipo: data.tipo.present ? data.tipo.value : this.tipo,
      email: data.email.present ? data.email.value : this.email,
      site: data.site.present ? data.site.value : this.site,
      cpfCnpj: data.cpfCnpj.present ? data.cpfCnpj.value : this.cpfCnpj,
      rgIe: data.rgIe.present ? data.rgIe.value : this.rgIe,
      matricula: data.matricula.present ? data.matricula.value : this.matricula,
      dataCadastro:
          data.dataCadastro.present
              ? data.dataCadastro.value
              : this.dataCadastro,
      dataAdmissao:
          data.dataAdmissao.present
              ? data.dataAdmissao.value
              : this.dataAdmissao,
      dataDemissao:
          data.dataDemissao.present
              ? data.dataDemissao.value
              : this.dataDemissao,
      ctpsNumero:
          data.ctpsNumero.present ? data.ctpsNumero.value : this.ctpsNumero,
      ctpsSerie: data.ctpsSerie.present ? data.ctpsSerie.value : this.ctpsSerie,
      ctpsDataExpedicao:
          data.ctpsDataExpedicao.present
              ? data.ctpsDataExpedicao.value
              : this.ctpsDataExpedicao,
      ctpsUf: data.ctpsUf.present ? data.ctpsUf.value : this.ctpsUf,
      observacao:
          data.observacao.present ? data.observacao.value : this.observacao,
      logradouro:
          data.logradouro.present ? data.logradouro.value : this.logradouro,
      numero: data.numero.present ? data.numero.value : this.numero,
      complemento:
          data.complemento.present ? data.complemento.value : this.complemento,
      bairro: data.bairro.present ? data.bairro.value : this.bairro,
      cidade: data.cidade.present ? data.cidade.value : this.cidade,
      cep: data.cep.present ? data.cep.value : this.cep,
      municipioIbge:
          data.municipioIbge.present
              ? data.municipioIbge.value
              : this.municipioIbge,
      uf: data.uf.present ? data.uf.value : this.uf,
      idPessoa: data.idPessoa.present ? data.idPessoa.value : this.idPessoa,
      idCargo: data.idCargo.present ? data.idCargo.value : this.idCargo,
      idSetor: data.idSetor.present ? data.idSetor.value : this.idSetor,
    );
  }

  @override
  String toString() {
    return (StringBuffer('ViewPessoaColaborador(')
          ..write('id: $id, ')
          ..write('nome: $nome, ')
          ..write('tipo: $tipo, ')
          ..write('email: $email, ')
          ..write('site: $site, ')
          ..write('cpfCnpj: $cpfCnpj, ')
          ..write('rgIe: $rgIe, ')
          ..write('matricula: $matricula, ')
          ..write('dataCadastro: $dataCadastro, ')
          ..write('dataAdmissao: $dataAdmissao, ')
          ..write('dataDemissao: $dataDemissao, ')
          ..write('ctpsNumero: $ctpsNumero, ')
          ..write('ctpsSerie: $ctpsSerie, ')
          ..write('ctpsDataExpedicao: $ctpsDataExpedicao, ')
          ..write('ctpsUf: $ctpsUf, ')
          ..write('observacao: $observacao, ')
          ..write('logradouro: $logradouro, ')
          ..write('numero: $numero, ')
          ..write('complemento: $complemento, ')
          ..write('bairro: $bairro, ')
          ..write('cidade: $cidade, ')
          ..write('cep: $cep, ')
          ..write('municipioIbge: $municipioIbge, ')
          ..write('uf: $uf, ')
          ..write('idPessoa: $idPessoa, ')
          ..write('idCargo: $idCargo, ')
          ..write('idSetor: $idSetor')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hashAll([
    id,
    nome,
    tipo,
    email,
    site,
    cpfCnpj,
    rgIe,
    matricula,
    dataCadastro,
    dataAdmissao,
    dataDemissao,
    ctpsNumero,
    ctpsSerie,
    ctpsDataExpedicao,
    ctpsUf,
    observacao,
    logradouro,
    numero,
    complemento,
    bairro,
    cidade,
    cep,
    municipioIbge,
    uf,
    idPessoa,
    idCargo,
    idSetor,
  ]);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is ViewPessoaColaborador &&
          other.id == this.id &&
          other.nome == this.nome &&
          other.tipo == this.tipo &&
          other.email == this.email &&
          other.site == this.site &&
          other.cpfCnpj == this.cpfCnpj &&
          other.rgIe == this.rgIe &&
          other.matricula == this.matricula &&
          other.dataCadastro == this.dataCadastro &&
          other.dataAdmissao == this.dataAdmissao &&
          other.dataDemissao == this.dataDemissao &&
          other.ctpsNumero == this.ctpsNumero &&
          other.ctpsSerie == this.ctpsSerie &&
          other.ctpsDataExpedicao == this.ctpsDataExpedicao &&
          other.ctpsUf == this.ctpsUf &&
          other.observacao == this.observacao &&
          other.logradouro == this.logradouro &&
          other.numero == this.numero &&
          other.complemento == this.complemento &&
          other.bairro == this.bairro &&
          other.cidade == this.cidade &&
          other.cep == this.cep &&
          other.municipioIbge == this.municipioIbge &&
          other.uf == this.uf &&
          other.idPessoa == this.idPessoa &&
          other.idCargo == this.idCargo &&
          other.idSetor == this.idSetor);
}

class ViewPessoaColaboradorsCompanion
    extends UpdateCompanion<ViewPessoaColaborador> {
  final Value<int?> id;
  final Value<String?> nome;
  final Value<String?> tipo;
  final Value<String?> email;
  final Value<String?> site;
  final Value<String?> cpfCnpj;
  final Value<String?> rgIe;
  final Value<String?> matricula;
  final Value<DateTime?> dataCadastro;
  final Value<DateTime?> dataAdmissao;
  final Value<DateTime?> dataDemissao;
  final Value<String?> ctpsNumero;
  final Value<String?> ctpsSerie;
  final Value<DateTime?> ctpsDataExpedicao;
  final Value<String?> ctpsUf;
  final Value<String?> observacao;
  final Value<String?> logradouro;
  final Value<String?> numero;
  final Value<String?> complemento;
  final Value<String?> bairro;
  final Value<String?> cidade;
  final Value<String?> cep;
  final Value<String?> municipioIbge;
  final Value<String?> uf;
  final Value<int?> idPessoa;
  final Value<int?> idCargo;
  final Value<int?> idSetor;
  const ViewPessoaColaboradorsCompanion({
    this.id = const Value.absent(),
    this.nome = const Value.absent(),
    this.tipo = const Value.absent(),
    this.email = const Value.absent(),
    this.site = const Value.absent(),
    this.cpfCnpj = const Value.absent(),
    this.rgIe = const Value.absent(),
    this.matricula = const Value.absent(),
    this.dataCadastro = const Value.absent(),
    this.dataAdmissao = const Value.absent(),
    this.dataDemissao = const Value.absent(),
    this.ctpsNumero = const Value.absent(),
    this.ctpsSerie = const Value.absent(),
    this.ctpsDataExpedicao = const Value.absent(),
    this.ctpsUf = const Value.absent(),
    this.observacao = const Value.absent(),
    this.logradouro = const Value.absent(),
    this.numero = const Value.absent(),
    this.complemento = const Value.absent(),
    this.bairro = const Value.absent(),
    this.cidade = const Value.absent(),
    this.cep = const Value.absent(),
    this.municipioIbge = const Value.absent(),
    this.uf = const Value.absent(),
    this.idPessoa = const Value.absent(),
    this.idCargo = const Value.absent(),
    this.idSetor = const Value.absent(),
  });
  ViewPessoaColaboradorsCompanion.insert({
    this.id = const Value.absent(),
    this.nome = const Value.absent(),
    this.tipo = const Value.absent(),
    this.email = const Value.absent(),
    this.site = const Value.absent(),
    this.cpfCnpj = const Value.absent(),
    this.rgIe = const Value.absent(),
    this.matricula = const Value.absent(),
    this.dataCadastro = const Value.absent(),
    this.dataAdmissao = const Value.absent(),
    this.dataDemissao = const Value.absent(),
    this.ctpsNumero = const Value.absent(),
    this.ctpsSerie = const Value.absent(),
    this.ctpsDataExpedicao = const Value.absent(),
    this.ctpsUf = const Value.absent(),
    this.observacao = const Value.absent(),
    this.logradouro = const Value.absent(),
    this.numero = const Value.absent(),
    this.complemento = const Value.absent(),
    this.bairro = const Value.absent(),
    this.cidade = const Value.absent(),
    this.cep = const Value.absent(),
    this.municipioIbge = const Value.absent(),
    this.uf = const Value.absent(),
    this.idPessoa = const Value.absent(),
    this.idCargo = const Value.absent(),
    this.idSetor = const Value.absent(),
  });
  static Insertable<ViewPessoaColaborador> custom({
    Expression<int>? id,
    Expression<String>? nome,
    Expression<String>? tipo,
    Expression<String>? email,
    Expression<String>? site,
    Expression<String>? cpfCnpj,
    Expression<String>? rgIe,
    Expression<String>? matricula,
    Expression<DateTime>? dataCadastro,
    Expression<DateTime>? dataAdmissao,
    Expression<DateTime>? dataDemissao,
    Expression<String>? ctpsNumero,
    Expression<String>? ctpsSerie,
    Expression<DateTime>? ctpsDataExpedicao,
    Expression<String>? ctpsUf,
    Expression<String>? observacao,
    Expression<String>? logradouro,
    Expression<String>? numero,
    Expression<String>? complemento,
    Expression<String>? bairro,
    Expression<String>? cidade,
    Expression<String>? cep,
    Expression<String>? municipioIbge,
    Expression<String>? uf,
    Expression<int>? idPessoa,
    Expression<int>? idCargo,
    Expression<int>? idSetor,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (nome != null) 'nome': nome,
      if (tipo != null) 'tipo': tipo,
      if (email != null) 'email': email,
      if (site != null) 'site': site,
      if (cpfCnpj != null) 'cpf_cnpj': cpfCnpj,
      if (rgIe != null) 'rg_ie': rgIe,
      if (matricula != null) 'matricula': matricula,
      if (dataCadastro != null) 'data_cadastro': dataCadastro,
      if (dataAdmissao != null) 'data_admissao': dataAdmissao,
      if (dataDemissao != null) 'data_demissao': dataDemissao,
      if (ctpsNumero != null) 'ctps_numero': ctpsNumero,
      if (ctpsSerie != null) 'ctps_serie': ctpsSerie,
      if (ctpsDataExpedicao != null) 'ctps_data_expedicao': ctpsDataExpedicao,
      if (ctpsUf != null) 'ctps_uf': ctpsUf,
      if (observacao != null) 'observacao': observacao,
      if (logradouro != null) 'logradouro': logradouro,
      if (numero != null) 'numero': numero,
      if (complemento != null) 'complemento': complemento,
      if (bairro != null) 'bairro': bairro,
      if (cidade != null) 'cidade': cidade,
      if (cep != null) 'cep': cep,
      if (municipioIbge != null) 'municipio_ibge': municipioIbge,
      if (uf != null) 'uf': uf,
      if (idPessoa != null) 'id_pessoa': idPessoa,
      if (idCargo != null) 'id_cargo': idCargo,
      if (idSetor != null) 'id_setor': idSetor,
    });
  }

  ViewPessoaColaboradorsCompanion copyWith({
    Value<int?>? id,
    Value<String?>? nome,
    Value<String?>? tipo,
    Value<String?>? email,
    Value<String?>? site,
    Value<String?>? cpfCnpj,
    Value<String?>? rgIe,
    Value<String?>? matricula,
    Value<DateTime?>? dataCadastro,
    Value<DateTime?>? dataAdmissao,
    Value<DateTime?>? dataDemissao,
    Value<String?>? ctpsNumero,
    Value<String?>? ctpsSerie,
    Value<DateTime?>? ctpsDataExpedicao,
    Value<String?>? ctpsUf,
    Value<String?>? observacao,
    Value<String?>? logradouro,
    Value<String?>? numero,
    Value<String?>? complemento,
    Value<String?>? bairro,
    Value<String?>? cidade,
    Value<String?>? cep,
    Value<String?>? municipioIbge,
    Value<String?>? uf,
    Value<int?>? idPessoa,
    Value<int?>? idCargo,
    Value<int?>? idSetor,
  }) {
    return ViewPessoaColaboradorsCompanion(
      id: id ?? this.id,
      nome: nome ?? this.nome,
      tipo: tipo ?? this.tipo,
      email: email ?? this.email,
      site: site ?? this.site,
      cpfCnpj: cpfCnpj ?? this.cpfCnpj,
      rgIe: rgIe ?? this.rgIe,
      matricula: matricula ?? this.matricula,
      dataCadastro: dataCadastro ?? this.dataCadastro,
      dataAdmissao: dataAdmissao ?? this.dataAdmissao,
      dataDemissao: dataDemissao ?? this.dataDemissao,
      ctpsNumero: ctpsNumero ?? this.ctpsNumero,
      ctpsSerie: ctpsSerie ?? this.ctpsSerie,
      ctpsDataExpedicao: ctpsDataExpedicao ?? this.ctpsDataExpedicao,
      ctpsUf: ctpsUf ?? this.ctpsUf,
      observacao: observacao ?? this.observacao,
      logradouro: logradouro ?? this.logradouro,
      numero: numero ?? this.numero,
      complemento: complemento ?? this.complemento,
      bairro: bairro ?? this.bairro,
      cidade: cidade ?? this.cidade,
      cep: cep ?? this.cep,
      municipioIbge: municipioIbge ?? this.municipioIbge,
      uf: uf ?? this.uf,
      idPessoa: idPessoa ?? this.idPessoa,
      idCargo: idCargo ?? this.idCargo,
      idSetor: idSetor ?? this.idSetor,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (nome.present) {
      map['nome'] = Variable<String>(nome.value);
    }
    if (tipo.present) {
      map['tipo'] = Variable<String>(tipo.value);
    }
    if (email.present) {
      map['email'] = Variable<String>(email.value);
    }
    if (site.present) {
      map['site'] = Variable<String>(site.value);
    }
    if (cpfCnpj.present) {
      map['cpf_cnpj'] = Variable<String>(cpfCnpj.value);
    }
    if (rgIe.present) {
      map['rg_ie'] = Variable<String>(rgIe.value);
    }
    if (matricula.present) {
      map['matricula'] = Variable<String>(matricula.value);
    }
    if (dataCadastro.present) {
      map['data_cadastro'] = Variable<DateTime>(dataCadastro.value);
    }
    if (dataAdmissao.present) {
      map['data_admissao'] = Variable<DateTime>(dataAdmissao.value);
    }
    if (dataDemissao.present) {
      map['data_demissao'] = Variable<DateTime>(dataDemissao.value);
    }
    if (ctpsNumero.present) {
      map['ctps_numero'] = Variable<String>(ctpsNumero.value);
    }
    if (ctpsSerie.present) {
      map['ctps_serie'] = Variable<String>(ctpsSerie.value);
    }
    if (ctpsDataExpedicao.present) {
      map['ctps_data_expedicao'] = Variable<DateTime>(ctpsDataExpedicao.value);
    }
    if (ctpsUf.present) {
      map['ctps_uf'] = Variable<String>(ctpsUf.value);
    }
    if (observacao.present) {
      map['observacao'] = Variable<String>(observacao.value);
    }
    if (logradouro.present) {
      map['logradouro'] = Variable<String>(logradouro.value);
    }
    if (numero.present) {
      map['numero'] = Variable<String>(numero.value);
    }
    if (complemento.present) {
      map['complemento'] = Variable<String>(complemento.value);
    }
    if (bairro.present) {
      map['bairro'] = Variable<String>(bairro.value);
    }
    if (cidade.present) {
      map['cidade'] = Variable<String>(cidade.value);
    }
    if (cep.present) {
      map['cep'] = Variable<String>(cep.value);
    }
    if (municipioIbge.present) {
      map['municipio_ibge'] = Variable<String>(municipioIbge.value);
    }
    if (uf.present) {
      map['uf'] = Variable<String>(uf.value);
    }
    if (idPessoa.present) {
      map['id_pessoa'] = Variable<int>(idPessoa.value);
    }
    if (idCargo.present) {
      map['id_cargo'] = Variable<int>(idCargo.value);
    }
    if (idSetor.present) {
      map['id_setor'] = Variable<int>(idSetor.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('ViewPessoaColaboradorsCompanion(')
          ..write('id: $id, ')
          ..write('nome: $nome, ')
          ..write('tipo: $tipo, ')
          ..write('email: $email, ')
          ..write('site: $site, ')
          ..write('cpfCnpj: $cpfCnpj, ')
          ..write('rgIe: $rgIe, ')
          ..write('matricula: $matricula, ')
          ..write('dataCadastro: $dataCadastro, ')
          ..write('dataAdmissao: $dataAdmissao, ')
          ..write('dataDemissao: $dataDemissao, ')
          ..write('ctpsNumero: $ctpsNumero, ')
          ..write('ctpsSerie: $ctpsSerie, ')
          ..write('ctpsDataExpedicao: $ctpsDataExpedicao, ')
          ..write('ctpsUf: $ctpsUf, ')
          ..write('observacao: $observacao, ')
          ..write('logradouro: $logradouro, ')
          ..write('numero: $numero, ')
          ..write('complemento: $complemento, ')
          ..write('bairro: $bairro, ')
          ..write('cidade: $cidade, ')
          ..write('cep: $cep, ')
          ..write('municipioIbge: $municipioIbge, ')
          ..write('uf: $uf, ')
          ..write('idPessoa: $idPessoa, ')
          ..write('idCargo: $idCargo, ')
          ..write('idSetor: $idSetor')
          ..write(')'))
        .toString();
  }
}

class $ViewPessoaVendedorsTable extends ViewPessoaVendedors
    with TableInfo<$ViewPessoaVendedorsTable, ViewPessoaVendedor> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $ViewPessoaVendedorsTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
    'id',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _nomeMeta = const VerificationMeta('nome');
  @override
  late final GeneratedColumn<String> nome = GeneratedColumn<String>(
    'nome',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 450,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _tipoMeta = const VerificationMeta('tipo');
  @override
  late final GeneratedColumn<String> tipo = GeneratedColumn<String>(
    'tipo',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 3,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _emailMeta = const VerificationMeta('email');
  @override
  late final GeneratedColumn<String> email = GeneratedColumn<String>(
    'email',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 750,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _siteMeta = const VerificationMeta('site');
  @override
  late final GeneratedColumn<String> site = GeneratedColumn<String>(
    'site',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 450,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _cpfCnpjMeta = const VerificationMeta(
    'cpfCnpj',
  );
  @override
  late final GeneratedColumn<String> cpfCnpj = GeneratedColumn<String>(
    'cpf_cnpj',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 20,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _rgIeMeta = const VerificationMeta('rgIe');
  @override
  late final GeneratedColumn<String> rgIe = GeneratedColumn<String>(
    'rg_ie',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 20,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _matriculaMeta = const VerificationMeta(
    'matricula',
  );
  @override
  late final GeneratedColumn<String> matricula = GeneratedColumn<String>(
    'matricula',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 50,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _dataCadastroMeta = const VerificationMeta(
    'dataCadastro',
  );
  @override
  late final GeneratedColumn<DateTime> dataCadastro = GeneratedColumn<DateTime>(
    'data_cadastro',
    aliasedName,
    true,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _dataAdmissaoMeta = const VerificationMeta(
    'dataAdmissao',
  );
  @override
  late final GeneratedColumn<DateTime> dataAdmissao = GeneratedColumn<DateTime>(
    'data_admissao',
    aliasedName,
    true,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _dataDemissaoMeta = const VerificationMeta(
    'dataDemissao',
  );
  @override
  late final GeneratedColumn<DateTime> dataDemissao = GeneratedColumn<DateTime>(
    'data_demissao',
    aliasedName,
    true,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _ctpsNumeroMeta = const VerificationMeta(
    'ctpsNumero',
  );
  @override
  late final GeneratedColumn<String> ctpsNumero = GeneratedColumn<String>(
    'ctps_numero',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 20,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _ctpsSerieMeta = const VerificationMeta(
    'ctpsSerie',
  );
  @override
  late final GeneratedColumn<String> ctpsSerie = GeneratedColumn<String>(
    'ctps_serie',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 10,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _ctpsDataExpedicaoMeta = const VerificationMeta(
    'ctpsDataExpedicao',
  );
  @override
  late final GeneratedColumn<DateTime> ctpsDataExpedicao =
      GeneratedColumn<DateTime>(
        'ctps_data_expedicao',
        aliasedName,
        true,
        type: DriftSqlType.dateTime,
        requiredDuringInsert: false,
      );
  static const VerificationMeta _ctpsUfMeta = const VerificationMeta('ctpsUf');
  @override
  late final GeneratedColumn<String> ctpsUf = GeneratedColumn<String>(
    'ctps_uf',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 2,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _observacaoMeta = const VerificationMeta(
    'observacao',
  );
  @override
  late final GeneratedColumn<String> observacao = GeneratedColumn<String>(
    'observacao',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _logradouroMeta = const VerificationMeta(
    'logradouro',
  );
  @override
  late final GeneratedColumn<String> logradouro = GeneratedColumn<String>(
    'logradouro',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 450,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _numeroMeta = const VerificationMeta('numero');
  @override
  late final GeneratedColumn<String> numero = GeneratedColumn<String>(
    'numero',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 20,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _complementoMeta = const VerificationMeta(
    'complemento',
  );
  @override
  late final GeneratedColumn<String> complemento = GeneratedColumn<String>(
    'complemento',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 450,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _bairroMeta = const VerificationMeta('bairro');
  @override
  late final GeneratedColumn<String> bairro = GeneratedColumn<String>(
    'bairro',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 150,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _cidadeMeta = const VerificationMeta('cidade');
  @override
  late final GeneratedColumn<String> cidade = GeneratedColumn<String>(
    'cidade',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 150,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _cepMeta = const VerificationMeta('cep');
  @override
  late final GeneratedColumn<String> cep = GeneratedColumn<String>(
    'cep',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 10,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _municipioIbgeMeta = const VerificationMeta(
    'municipioIbge',
  );
  @override
  late final GeneratedColumn<String> municipioIbge = GeneratedColumn<String>(
    'municipio_ibge',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 10,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _ufMeta = const VerificationMeta('uf');
  @override
  late final GeneratedColumn<String> uf = GeneratedColumn<String>(
    'uf',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 2,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idPessoaMeta = const VerificationMeta(
    'idPessoa',
  );
  @override
  late final GeneratedColumn<int> idPessoa = GeneratedColumn<int>(
    'id_pessoa',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idCargoMeta = const VerificationMeta(
    'idCargo',
  );
  @override
  late final GeneratedColumn<int> idCargo = GeneratedColumn<int>(
    'id_cargo',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idSetorMeta = const VerificationMeta(
    'idSetor',
  );
  @override
  late final GeneratedColumn<int> idSetor = GeneratedColumn<int>(
    'id_setor',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _comissaoMeta = const VerificationMeta(
    'comissao',
  );
  @override
  late final GeneratedColumn<double> comissao = GeneratedColumn<double>(
    'comissao',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _metaVendaMeta = const VerificationMeta(
    'metaVenda',
  );
  @override
  late final GeneratedColumn<double> metaVenda = GeneratedColumn<double>(
    'meta_venda',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    nome,
    tipo,
    email,
    site,
    cpfCnpj,
    rgIe,
    matricula,
    dataCadastro,
    dataAdmissao,
    dataDemissao,
    ctpsNumero,
    ctpsSerie,
    ctpsDataExpedicao,
    ctpsUf,
    observacao,
    logradouro,
    numero,
    complemento,
    bairro,
    cidade,
    cep,
    municipioIbge,
    uf,
    idPessoa,
    idCargo,
    idSetor,
    comissao,
    metaVenda,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'view_pessoa_vendedor';
  @override
  VerificationContext validateIntegrity(
    Insertable<ViewPessoaVendedor> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('nome')) {
      context.handle(
        _nomeMeta,
        nome.isAcceptableOrUnknown(data['nome']!, _nomeMeta),
      );
    }
    if (data.containsKey('tipo')) {
      context.handle(
        _tipoMeta,
        tipo.isAcceptableOrUnknown(data['tipo']!, _tipoMeta),
      );
    }
    if (data.containsKey('email')) {
      context.handle(
        _emailMeta,
        email.isAcceptableOrUnknown(data['email']!, _emailMeta),
      );
    }
    if (data.containsKey('site')) {
      context.handle(
        _siteMeta,
        site.isAcceptableOrUnknown(data['site']!, _siteMeta),
      );
    }
    if (data.containsKey('cpf_cnpj')) {
      context.handle(
        _cpfCnpjMeta,
        cpfCnpj.isAcceptableOrUnknown(data['cpf_cnpj']!, _cpfCnpjMeta),
      );
    }
    if (data.containsKey('rg_ie')) {
      context.handle(
        _rgIeMeta,
        rgIe.isAcceptableOrUnknown(data['rg_ie']!, _rgIeMeta),
      );
    }
    if (data.containsKey('matricula')) {
      context.handle(
        _matriculaMeta,
        matricula.isAcceptableOrUnknown(data['matricula']!, _matriculaMeta),
      );
    }
    if (data.containsKey('data_cadastro')) {
      context.handle(
        _dataCadastroMeta,
        dataCadastro.isAcceptableOrUnknown(
          data['data_cadastro']!,
          _dataCadastroMeta,
        ),
      );
    }
    if (data.containsKey('data_admissao')) {
      context.handle(
        _dataAdmissaoMeta,
        dataAdmissao.isAcceptableOrUnknown(
          data['data_admissao']!,
          _dataAdmissaoMeta,
        ),
      );
    }
    if (data.containsKey('data_demissao')) {
      context.handle(
        _dataDemissaoMeta,
        dataDemissao.isAcceptableOrUnknown(
          data['data_demissao']!,
          _dataDemissaoMeta,
        ),
      );
    }
    if (data.containsKey('ctps_numero')) {
      context.handle(
        _ctpsNumeroMeta,
        ctpsNumero.isAcceptableOrUnknown(data['ctps_numero']!, _ctpsNumeroMeta),
      );
    }
    if (data.containsKey('ctps_serie')) {
      context.handle(
        _ctpsSerieMeta,
        ctpsSerie.isAcceptableOrUnknown(data['ctps_serie']!, _ctpsSerieMeta),
      );
    }
    if (data.containsKey('ctps_data_expedicao')) {
      context.handle(
        _ctpsDataExpedicaoMeta,
        ctpsDataExpedicao.isAcceptableOrUnknown(
          data['ctps_data_expedicao']!,
          _ctpsDataExpedicaoMeta,
        ),
      );
    }
    if (data.containsKey('ctps_uf')) {
      context.handle(
        _ctpsUfMeta,
        ctpsUf.isAcceptableOrUnknown(data['ctps_uf']!, _ctpsUfMeta),
      );
    }
    if (data.containsKey('observacao')) {
      context.handle(
        _observacaoMeta,
        observacao.isAcceptableOrUnknown(data['observacao']!, _observacaoMeta),
      );
    }
    if (data.containsKey('logradouro')) {
      context.handle(
        _logradouroMeta,
        logradouro.isAcceptableOrUnknown(data['logradouro']!, _logradouroMeta),
      );
    }
    if (data.containsKey('numero')) {
      context.handle(
        _numeroMeta,
        numero.isAcceptableOrUnknown(data['numero']!, _numeroMeta),
      );
    }
    if (data.containsKey('complemento')) {
      context.handle(
        _complementoMeta,
        complemento.isAcceptableOrUnknown(
          data['complemento']!,
          _complementoMeta,
        ),
      );
    }
    if (data.containsKey('bairro')) {
      context.handle(
        _bairroMeta,
        bairro.isAcceptableOrUnknown(data['bairro']!, _bairroMeta),
      );
    }
    if (data.containsKey('cidade')) {
      context.handle(
        _cidadeMeta,
        cidade.isAcceptableOrUnknown(data['cidade']!, _cidadeMeta),
      );
    }
    if (data.containsKey('cep')) {
      context.handle(
        _cepMeta,
        cep.isAcceptableOrUnknown(data['cep']!, _cepMeta),
      );
    }
    if (data.containsKey('municipio_ibge')) {
      context.handle(
        _municipioIbgeMeta,
        municipioIbge.isAcceptableOrUnknown(
          data['municipio_ibge']!,
          _municipioIbgeMeta,
        ),
      );
    }
    if (data.containsKey('uf')) {
      context.handle(_ufMeta, uf.isAcceptableOrUnknown(data['uf']!, _ufMeta));
    }
    if (data.containsKey('id_pessoa')) {
      context.handle(
        _idPessoaMeta,
        idPessoa.isAcceptableOrUnknown(data['id_pessoa']!, _idPessoaMeta),
      );
    }
    if (data.containsKey('id_cargo')) {
      context.handle(
        _idCargoMeta,
        idCargo.isAcceptableOrUnknown(data['id_cargo']!, _idCargoMeta),
      );
    }
    if (data.containsKey('id_setor')) {
      context.handle(
        _idSetorMeta,
        idSetor.isAcceptableOrUnknown(data['id_setor']!, _idSetorMeta),
      );
    }
    if (data.containsKey('comissao')) {
      context.handle(
        _comissaoMeta,
        comissao.isAcceptableOrUnknown(data['comissao']!, _comissaoMeta),
      );
    }
    if (data.containsKey('meta_venda')) {
      context.handle(
        _metaVendaMeta,
        metaVenda.isAcceptableOrUnknown(data['meta_venda']!, _metaVendaMeta),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  ViewPessoaVendedor map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return ViewPessoaVendedor(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id'],
      ),
      nome: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}nome'],
      ),
      tipo: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}tipo'],
      ),
      email: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}email'],
      ),
      site: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}site'],
      ),
      cpfCnpj: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}cpf_cnpj'],
      ),
      rgIe: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}rg_ie'],
      ),
      matricula: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}matricula'],
      ),
      dataCadastro: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}data_cadastro'],
      ),
      dataAdmissao: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}data_admissao'],
      ),
      dataDemissao: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}data_demissao'],
      ),
      ctpsNumero: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ctps_numero'],
      ),
      ctpsSerie: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ctps_serie'],
      ),
      ctpsDataExpedicao: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}ctps_data_expedicao'],
      ),
      ctpsUf: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ctps_uf'],
      ),
      observacao: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}observacao'],
      ),
      logradouro: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}logradouro'],
      ),
      numero: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}numero'],
      ),
      complemento: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}complemento'],
      ),
      bairro: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}bairro'],
      ),
      cidade: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}cidade'],
      ),
      cep: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}cep'],
      ),
      municipioIbge: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}municipio_ibge'],
      ),
      uf: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}uf'],
      ),
      idPessoa: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_pessoa'],
      ),
      idCargo: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_cargo'],
      ),
      idSetor: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_setor'],
      ),
      comissao: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}comissao'],
      ),
      metaVenda: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}meta_venda'],
      ),
    );
  }

  @override
  $ViewPessoaVendedorsTable createAlias(String alias) {
    return $ViewPessoaVendedorsTable(attachedDatabase, alias);
  }
}

class ViewPessoaVendedor extends DataClass
    implements Insertable<ViewPessoaVendedor> {
  final int? id;
  final String? nome;
  final String? tipo;
  final String? email;
  final String? site;
  final String? cpfCnpj;
  final String? rgIe;
  final String? matricula;
  final DateTime? dataCadastro;
  final DateTime? dataAdmissao;
  final DateTime? dataDemissao;
  final String? ctpsNumero;
  final String? ctpsSerie;
  final DateTime? ctpsDataExpedicao;
  final String? ctpsUf;
  final String? observacao;
  final String? logradouro;
  final String? numero;
  final String? complemento;
  final String? bairro;
  final String? cidade;
  final String? cep;
  final String? municipioIbge;
  final String? uf;
  final int? idPessoa;
  final int? idCargo;
  final int? idSetor;
  final double? comissao;
  final double? metaVenda;
  const ViewPessoaVendedor({
    this.id,
    this.nome,
    this.tipo,
    this.email,
    this.site,
    this.cpfCnpj,
    this.rgIe,
    this.matricula,
    this.dataCadastro,
    this.dataAdmissao,
    this.dataDemissao,
    this.ctpsNumero,
    this.ctpsSerie,
    this.ctpsDataExpedicao,
    this.ctpsUf,
    this.observacao,
    this.logradouro,
    this.numero,
    this.complemento,
    this.bairro,
    this.cidade,
    this.cep,
    this.municipioIbge,
    this.uf,
    this.idPessoa,
    this.idCargo,
    this.idSetor,
    this.comissao,
    this.metaVenda,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || nome != null) {
      map['nome'] = Variable<String>(nome);
    }
    if (!nullToAbsent || tipo != null) {
      map['tipo'] = Variable<String>(tipo);
    }
    if (!nullToAbsent || email != null) {
      map['email'] = Variable<String>(email);
    }
    if (!nullToAbsent || site != null) {
      map['site'] = Variable<String>(site);
    }
    if (!nullToAbsent || cpfCnpj != null) {
      map['cpf_cnpj'] = Variable<String>(cpfCnpj);
    }
    if (!nullToAbsent || rgIe != null) {
      map['rg_ie'] = Variable<String>(rgIe);
    }
    if (!nullToAbsent || matricula != null) {
      map['matricula'] = Variable<String>(matricula);
    }
    if (!nullToAbsent || dataCadastro != null) {
      map['data_cadastro'] = Variable<DateTime>(dataCadastro);
    }
    if (!nullToAbsent || dataAdmissao != null) {
      map['data_admissao'] = Variable<DateTime>(dataAdmissao);
    }
    if (!nullToAbsent || dataDemissao != null) {
      map['data_demissao'] = Variable<DateTime>(dataDemissao);
    }
    if (!nullToAbsent || ctpsNumero != null) {
      map['ctps_numero'] = Variable<String>(ctpsNumero);
    }
    if (!nullToAbsent || ctpsSerie != null) {
      map['ctps_serie'] = Variable<String>(ctpsSerie);
    }
    if (!nullToAbsent || ctpsDataExpedicao != null) {
      map['ctps_data_expedicao'] = Variable<DateTime>(ctpsDataExpedicao);
    }
    if (!nullToAbsent || ctpsUf != null) {
      map['ctps_uf'] = Variable<String>(ctpsUf);
    }
    if (!nullToAbsent || observacao != null) {
      map['observacao'] = Variable<String>(observacao);
    }
    if (!nullToAbsent || logradouro != null) {
      map['logradouro'] = Variable<String>(logradouro);
    }
    if (!nullToAbsent || numero != null) {
      map['numero'] = Variable<String>(numero);
    }
    if (!nullToAbsent || complemento != null) {
      map['complemento'] = Variable<String>(complemento);
    }
    if (!nullToAbsent || bairro != null) {
      map['bairro'] = Variable<String>(bairro);
    }
    if (!nullToAbsent || cidade != null) {
      map['cidade'] = Variable<String>(cidade);
    }
    if (!nullToAbsent || cep != null) {
      map['cep'] = Variable<String>(cep);
    }
    if (!nullToAbsent || municipioIbge != null) {
      map['municipio_ibge'] = Variable<String>(municipioIbge);
    }
    if (!nullToAbsent || uf != null) {
      map['uf'] = Variable<String>(uf);
    }
    if (!nullToAbsent || idPessoa != null) {
      map['id_pessoa'] = Variable<int>(idPessoa);
    }
    if (!nullToAbsent || idCargo != null) {
      map['id_cargo'] = Variable<int>(idCargo);
    }
    if (!nullToAbsent || idSetor != null) {
      map['id_setor'] = Variable<int>(idSetor);
    }
    if (!nullToAbsent || comissao != null) {
      map['comissao'] = Variable<double>(comissao);
    }
    if (!nullToAbsent || metaVenda != null) {
      map['meta_venda'] = Variable<double>(metaVenda);
    }
    return map;
  }

  factory ViewPessoaVendedor.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return ViewPessoaVendedor(
      id: serializer.fromJson<int?>(json['id']),
      nome: serializer.fromJson<String?>(json['nome']),
      tipo: serializer.fromJson<String?>(json['tipo']),
      email: serializer.fromJson<String?>(json['email']),
      site: serializer.fromJson<String?>(json['site']),
      cpfCnpj: serializer.fromJson<String?>(json['cpfCnpj']),
      rgIe: serializer.fromJson<String?>(json['rgIe']),
      matricula: serializer.fromJson<String?>(json['matricula']),
      dataCadastro: serializer.fromJson<DateTime?>(json['dataCadastro']),
      dataAdmissao: serializer.fromJson<DateTime?>(json['dataAdmissao']),
      dataDemissao: serializer.fromJson<DateTime?>(json['dataDemissao']),
      ctpsNumero: serializer.fromJson<String?>(json['ctpsNumero']),
      ctpsSerie: serializer.fromJson<String?>(json['ctpsSerie']),
      ctpsDataExpedicao: serializer.fromJson<DateTime?>(
        json['ctpsDataExpedicao'],
      ),
      ctpsUf: serializer.fromJson<String?>(json['ctpsUf']),
      observacao: serializer.fromJson<String?>(json['observacao']),
      logradouro: serializer.fromJson<String?>(json['logradouro']),
      numero: serializer.fromJson<String?>(json['numero']),
      complemento: serializer.fromJson<String?>(json['complemento']),
      bairro: serializer.fromJson<String?>(json['bairro']),
      cidade: serializer.fromJson<String?>(json['cidade']),
      cep: serializer.fromJson<String?>(json['cep']),
      municipioIbge: serializer.fromJson<String?>(json['municipioIbge']),
      uf: serializer.fromJson<String?>(json['uf']),
      idPessoa: serializer.fromJson<int?>(json['idPessoa']),
      idCargo: serializer.fromJson<int?>(json['idCargo']),
      idSetor: serializer.fromJson<int?>(json['idSetor']),
      comissao: serializer.fromJson<double?>(json['comissao']),
      metaVenda: serializer.fromJson<double?>(json['metaVenda']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'nome': serializer.toJson<String?>(nome),
      'tipo': serializer.toJson<String?>(tipo),
      'email': serializer.toJson<String?>(email),
      'site': serializer.toJson<String?>(site),
      'cpfCnpj': serializer.toJson<String?>(cpfCnpj),
      'rgIe': serializer.toJson<String?>(rgIe),
      'matricula': serializer.toJson<String?>(matricula),
      'dataCadastro': serializer.toJson<DateTime?>(dataCadastro),
      'dataAdmissao': serializer.toJson<DateTime?>(dataAdmissao),
      'dataDemissao': serializer.toJson<DateTime?>(dataDemissao),
      'ctpsNumero': serializer.toJson<String?>(ctpsNumero),
      'ctpsSerie': serializer.toJson<String?>(ctpsSerie),
      'ctpsDataExpedicao': serializer.toJson<DateTime?>(ctpsDataExpedicao),
      'ctpsUf': serializer.toJson<String?>(ctpsUf),
      'observacao': serializer.toJson<String?>(observacao),
      'logradouro': serializer.toJson<String?>(logradouro),
      'numero': serializer.toJson<String?>(numero),
      'complemento': serializer.toJson<String?>(complemento),
      'bairro': serializer.toJson<String?>(bairro),
      'cidade': serializer.toJson<String?>(cidade),
      'cep': serializer.toJson<String?>(cep),
      'municipioIbge': serializer.toJson<String?>(municipioIbge),
      'uf': serializer.toJson<String?>(uf),
      'idPessoa': serializer.toJson<int?>(idPessoa),
      'idCargo': serializer.toJson<int?>(idCargo),
      'idSetor': serializer.toJson<int?>(idSetor),
      'comissao': serializer.toJson<double?>(comissao),
      'metaVenda': serializer.toJson<double?>(metaVenda),
    };
  }

  ViewPessoaVendedor copyWith({
    Value<int?> id = const Value.absent(),
    Value<String?> nome = const Value.absent(),
    Value<String?> tipo = const Value.absent(),
    Value<String?> email = const Value.absent(),
    Value<String?> site = const Value.absent(),
    Value<String?> cpfCnpj = const Value.absent(),
    Value<String?> rgIe = const Value.absent(),
    Value<String?> matricula = const Value.absent(),
    Value<DateTime?> dataCadastro = const Value.absent(),
    Value<DateTime?> dataAdmissao = const Value.absent(),
    Value<DateTime?> dataDemissao = const Value.absent(),
    Value<String?> ctpsNumero = const Value.absent(),
    Value<String?> ctpsSerie = const Value.absent(),
    Value<DateTime?> ctpsDataExpedicao = const Value.absent(),
    Value<String?> ctpsUf = const Value.absent(),
    Value<String?> observacao = const Value.absent(),
    Value<String?> logradouro = const Value.absent(),
    Value<String?> numero = const Value.absent(),
    Value<String?> complemento = const Value.absent(),
    Value<String?> bairro = const Value.absent(),
    Value<String?> cidade = const Value.absent(),
    Value<String?> cep = const Value.absent(),
    Value<String?> municipioIbge = const Value.absent(),
    Value<String?> uf = const Value.absent(),
    Value<int?> idPessoa = const Value.absent(),
    Value<int?> idCargo = const Value.absent(),
    Value<int?> idSetor = const Value.absent(),
    Value<double?> comissao = const Value.absent(),
    Value<double?> metaVenda = const Value.absent(),
  }) => ViewPessoaVendedor(
    id: id.present ? id.value : this.id,
    nome: nome.present ? nome.value : this.nome,
    tipo: tipo.present ? tipo.value : this.tipo,
    email: email.present ? email.value : this.email,
    site: site.present ? site.value : this.site,
    cpfCnpj: cpfCnpj.present ? cpfCnpj.value : this.cpfCnpj,
    rgIe: rgIe.present ? rgIe.value : this.rgIe,
    matricula: matricula.present ? matricula.value : this.matricula,
    dataCadastro: dataCadastro.present ? dataCadastro.value : this.dataCadastro,
    dataAdmissao: dataAdmissao.present ? dataAdmissao.value : this.dataAdmissao,
    dataDemissao: dataDemissao.present ? dataDemissao.value : this.dataDemissao,
    ctpsNumero: ctpsNumero.present ? ctpsNumero.value : this.ctpsNumero,
    ctpsSerie: ctpsSerie.present ? ctpsSerie.value : this.ctpsSerie,
    ctpsDataExpedicao:
        ctpsDataExpedicao.present
            ? ctpsDataExpedicao.value
            : this.ctpsDataExpedicao,
    ctpsUf: ctpsUf.present ? ctpsUf.value : this.ctpsUf,
    observacao: observacao.present ? observacao.value : this.observacao,
    logradouro: logradouro.present ? logradouro.value : this.logradouro,
    numero: numero.present ? numero.value : this.numero,
    complemento: complemento.present ? complemento.value : this.complemento,
    bairro: bairro.present ? bairro.value : this.bairro,
    cidade: cidade.present ? cidade.value : this.cidade,
    cep: cep.present ? cep.value : this.cep,
    municipioIbge:
        municipioIbge.present ? municipioIbge.value : this.municipioIbge,
    uf: uf.present ? uf.value : this.uf,
    idPessoa: idPessoa.present ? idPessoa.value : this.idPessoa,
    idCargo: idCargo.present ? idCargo.value : this.idCargo,
    idSetor: idSetor.present ? idSetor.value : this.idSetor,
    comissao: comissao.present ? comissao.value : this.comissao,
    metaVenda: metaVenda.present ? metaVenda.value : this.metaVenda,
  );
  ViewPessoaVendedor copyWithCompanion(ViewPessoaVendedorsCompanion data) {
    return ViewPessoaVendedor(
      id: data.id.present ? data.id.value : this.id,
      nome: data.nome.present ? data.nome.value : this.nome,
      tipo: data.tipo.present ? data.tipo.value : this.tipo,
      email: data.email.present ? data.email.value : this.email,
      site: data.site.present ? data.site.value : this.site,
      cpfCnpj: data.cpfCnpj.present ? data.cpfCnpj.value : this.cpfCnpj,
      rgIe: data.rgIe.present ? data.rgIe.value : this.rgIe,
      matricula: data.matricula.present ? data.matricula.value : this.matricula,
      dataCadastro:
          data.dataCadastro.present
              ? data.dataCadastro.value
              : this.dataCadastro,
      dataAdmissao:
          data.dataAdmissao.present
              ? data.dataAdmissao.value
              : this.dataAdmissao,
      dataDemissao:
          data.dataDemissao.present
              ? data.dataDemissao.value
              : this.dataDemissao,
      ctpsNumero:
          data.ctpsNumero.present ? data.ctpsNumero.value : this.ctpsNumero,
      ctpsSerie: data.ctpsSerie.present ? data.ctpsSerie.value : this.ctpsSerie,
      ctpsDataExpedicao:
          data.ctpsDataExpedicao.present
              ? data.ctpsDataExpedicao.value
              : this.ctpsDataExpedicao,
      ctpsUf: data.ctpsUf.present ? data.ctpsUf.value : this.ctpsUf,
      observacao:
          data.observacao.present ? data.observacao.value : this.observacao,
      logradouro:
          data.logradouro.present ? data.logradouro.value : this.logradouro,
      numero: data.numero.present ? data.numero.value : this.numero,
      complemento:
          data.complemento.present ? data.complemento.value : this.complemento,
      bairro: data.bairro.present ? data.bairro.value : this.bairro,
      cidade: data.cidade.present ? data.cidade.value : this.cidade,
      cep: data.cep.present ? data.cep.value : this.cep,
      municipioIbge:
          data.municipioIbge.present
              ? data.municipioIbge.value
              : this.municipioIbge,
      uf: data.uf.present ? data.uf.value : this.uf,
      idPessoa: data.idPessoa.present ? data.idPessoa.value : this.idPessoa,
      idCargo: data.idCargo.present ? data.idCargo.value : this.idCargo,
      idSetor: data.idSetor.present ? data.idSetor.value : this.idSetor,
      comissao: data.comissao.present ? data.comissao.value : this.comissao,
      metaVenda: data.metaVenda.present ? data.metaVenda.value : this.metaVenda,
    );
  }

  @override
  String toString() {
    return (StringBuffer('ViewPessoaVendedor(')
          ..write('id: $id, ')
          ..write('nome: $nome, ')
          ..write('tipo: $tipo, ')
          ..write('email: $email, ')
          ..write('site: $site, ')
          ..write('cpfCnpj: $cpfCnpj, ')
          ..write('rgIe: $rgIe, ')
          ..write('matricula: $matricula, ')
          ..write('dataCadastro: $dataCadastro, ')
          ..write('dataAdmissao: $dataAdmissao, ')
          ..write('dataDemissao: $dataDemissao, ')
          ..write('ctpsNumero: $ctpsNumero, ')
          ..write('ctpsSerie: $ctpsSerie, ')
          ..write('ctpsDataExpedicao: $ctpsDataExpedicao, ')
          ..write('ctpsUf: $ctpsUf, ')
          ..write('observacao: $observacao, ')
          ..write('logradouro: $logradouro, ')
          ..write('numero: $numero, ')
          ..write('complemento: $complemento, ')
          ..write('bairro: $bairro, ')
          ..write('cidade: $cidade, ')
          ..write('cep: $cep, ')
          ..write('municipioIbge: $municipioIbge, ')
          ..write('uf: $uf, ')
          ..write('idPessoa: $idPessoa, ')
          ..write('idCargo: $idCargo, ')
          ..write('idSetor: $idSetor, ')
          ..write('comissao: $comissao, ')
          ..write('metaVenda: $metaVenda')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hashAll([
    id,
    nome,
    tipo,
    email,
    site,
    cpfCnpj,
    rgIe,
    matricula,
    dataCadastro,
    dataAdmissao,
    dataDemissao,
    ctpsNumero,
    ctpsSerie,
    ctpsDataExpedicao,
    ctpsUf,
    observacao,
    logradouro,
    numero,
    complemento,
    bairro,
    cidade,
    cep,
    municipioIbge,
    uf,
    idPessoa,
    idCargo,
    idSetor,
    comissao,
    metaVenda,
  ]);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is ViewPessoaVendedor &&
          other.id == this.id &&
          other.nome == this.nome &&
          other.tipo == this.tipo &&
          other.email == this.email &&
          other.site == this.site &&
          other.cpfCnpj == this.cpfCnpj &&
          other.rgIe == this.rgIe &&
          other.matricula == this.matricula &&
          other.dataCadastro == this.dataCadastro &&
          other.dataAdmissao == this.dataAdmissao &&
          other.dataDemissao == this.dataDemissao &&
          other.ctpsNumero == this.ctpsNumero &&
          other.ctpsSerie == this.ctpsSerie &&
          other.ctpsDataExpedicao == this.ctpsDataExpedicao &&
          other.ctpsUf == this.ctpsUf &&
          other.observacao == this.observacao &&
          other.logradouro == this.logradouro &&
          other.numero == this.numero &&
          other.complemento == this.complemento &&
          other.bairro == this.bairro &&
          other.cidade == this.cidade &&
          other.cep == this.cep &&
          other.municipioIbge == this.municipioIbge &&
          other.uf == this.uf &&
          other.idPessoa == this.idPessoa &&
          other.idCargo == this.idCargo &&
          other.idSetor == this.idSetor &&
          other.comissao == this.comissao &&
          other.metaVenda == this.metaVenda);
}

class ViewPessoaVendedorsCompanion extends UpdateCompanion<ViewPessoaVendedor> {
  final Value<int?> id;
  final Value<String?> nome;
  final Value<String?> tipo;
  final Value<String?> email;
  final Value<String?> site;
  final Value<String?> cpfCnpj;
  final Value<String?> rgIe;
  final Value<String?> matricula;
  final Value<DateTime?> dataCadastro;
  final Value<DateTime?> dataAdmissao;
  final Value<DateTime?> dataDemissao;
  final Value<String?> ctpsNumero;
  final Value<String?> ctpsSerie;
  final Value<DateTime?> ctpsDataExpedicao;
  final Value<String?> ctpsUf;
  final Value<String?> observacao;
  final Value<String?> logradouro;
  final Value<String?> numero;
  final Value<String?> complemento;
  final Value<String?> bairro;
  final Value<String?> cidade;
  final Value<String?> cep;
  final Value<String?> municipioIbge;
  final Value<String?> uf;
  final Value<int?> idPessoa;
  final Value<int?> idCargo;
  final Value<int?> idSetor;
  final Value<double?> comissao;
  final Value<double?> metaVenda;
  const ViewPessoaVendedorsCompanion({
    this.id = const Value.absent(),
    this.nome = const Value.absent(),
    this.tipo = const Value.absent(),
    this.email = const Value.absent(),
    this.site = const Value.absent(),
    this.cpfCnpj = const Value.absent(),
    this.rgIe = const Value.absent(),
    this.matricula = const Value.absent(),
    this.dataCadastro = const Value.absent(),
    this.dataAdmissao = const Value.absent(),
    this.dataDemissao = const Value.absent(),
    this.ctpsNumero = const Value.absent(),
    this.ctpsSerie = const Value.absent(),
    this.ctpsDataExpedicao = const Value.absent(),
    this.ctpsUf = const Value.absent(),
    this.observacao = const Value.absent(),
    this.logradouro = const Value.absent(),
    this.numero = const Value.absent(),
    this.complemento = const Value.absent(),
    this.bairro = const Value.absent(),
    this.cidade = const Value.absent(),
    this.cep = const Value.absent(),
    this.municipioIbge = const Value.absent(),
    this.uf = const Value.absent(),
    this.idPessoa = const Value.absent(),
    this.idCargo = const Value.absent(),
    this.idSetor = const Value.absent(),
    this.comissao = const Value.absent(),
    this.metaVenda = const Value.absent(),
  });
  ViewPessoaVendedorsCompanion.insert({
    this.id = const Value.absent(),
    this.nome = const Value.absent(),
    this.tipo = const Value.absent(),
    this.email = const Value.absent(),
    this.site = const Value.absent(),
    this.cpfCnpj = const Value.absent(),
    this.rgIe = const Value.absent(),
    this.matricula = const Value.absent(),
    this.dataCadastro = const Value.absent(),
    this.dataAdmissao = const Value.absent(),
    this.dataDemissao = const Value.absent(),
    this.ctpsNumero = const Value.absent(),
    this.ctpsSerie = const Value.absent(),
    this.ctpsDataExpedicao = const Value.absent(),
    this.ctpsUf = const Value.absent(),
    this.observacao = const Value.absent(),
    this.logradouro = const Value.absent(),
    this.numero = const Value.absent(),
    this.complemento = const Value.absent(),
    this.bairro = const Value.absent(),
    this.cidade = const Value.absent(),
    this.cep = const Value.absent(),
    this.municipioIbge = const Value.absent(),
    this.uf = const Value.absent(),
    this.idPessoa = const Value.absent(),
    this.idCargo = const Value.absent(),
    this.idSetor = const Value.absent(),
    this.comissao = const Value.absent(),
    this.metaVenda = const Value.absent(),
  });
  static Insertable<ViewPessoaVendedor> custom({
    Expression<int>? id,
    Expression<String>? nome,
    Expression<String>? tipo,
    Expression<String>? email,
    Expression<String>? site,
    Expression<String>? cpfCnpj,
    Expression<String>? rgIe,
    Expression<String>? matricula,
    Expression<DateTime>? dataCadastro,
    Expression<DateTime>? dataAdmissao,
    Expression<DateTime>? dataDemissao,
    Expression<String>? ctpsNumero,
    Expression<String>? ctpsSerie,
    Expression<DateTime>? ctpsDataExpedicao,
    Expression<String>? ctpsUf,
    Expression<String>? observacao,
    Expression<String>? logradouro,
    Expression<String>? numero,
    Expression<String>? complemento,
    Expression<String>? bairro,
    Expression<String>? cidade,
    Expression<String>? cep,
    Expression<String>? municipioIbge,
    Expression<String>? uf,
    Expression<int>? idPessoa,
    Expression<int>? idCargo,
    Expression<int>? idSetor,
    Expression<double>? comissao,
    Expression<double>? metaVenda,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (nome != null) 'nome': nome,
      if (tipo != null) 'tipo': tipo,
      if (email != null) 'email': email,
      if (site != null) 'site': site,
      if (cpfCnpj != null) 'cpf_cnpj': cpfCnpj,
      if (rgIe != null) 'rg_ie': rgIe,
      if (matricula != null) 'matricula': matricula,
      if (dataCadastro != null) 'data_cadastro': dataCadastro,
      if (dataAdmissao != null) 'data_admissao': dataAdmissao,
      if (dataDemissao != null) 'data_demissao': dataDemissao,
      if (ctpsNumero != null) 'ctps_numero': ctpsNumero,
      if (ctpsSerie != null) 'ctps_serie': ctpsSerie,
      if (ctpsDataExpedicao != null) 'ctps_data_expedicao': ctpsDataExpedicao,
      if (ctpsUf != null) 'ctps_uf': ctpsUf,
      if (observacao != null) 'observacao': observacao,
      if (logradouro != null) 'logradouro': logradouro,
      if (numero != null) 'numero': numero,
      if (complemento != null) 'complemento': complemento,
      if (bairro != null) 'bairro': bairro,
      if (cidade != null) 'cidade': cidade,
      if (cep != null) 'cep': cep,
      if (municipioIbge != null) 'municipio_ibge': municipioIbge,
      if (uf != null) 'uf': uf,
      if (idPessoa != null) 'id_pessoa': idPessoa,
      if (idCargo != null) 'id_cargo': idCargo,
      if (idSetor != null) 'id_setor': idSetor,
      if (comissao != null) 'comissao': comissao,
      if (metaVenda != null) 'meta_venda': metaVenda,
    });
  }

  ViewPessoaVendedorsCompanion copyWith({
    Value<int?>? id,
    Value<String?>? nome,
    Value<String?>? tipo,
    Value<String?>? email,
    Value<String?>? site,
    Value<String?>? cpfCnpj,
    Value<String?>? rgIe,
    Value<String?>? matricula,
    Value<DateTime?>? dataCadastro,
    Value<DateTime?>? dataAdmissao,
    Value<DateTime?>? dataDemissao,
    Value<String?>? ctpsNumero,
    Value<String?>? ctpsSerie,
    Value<DateTime?>? ctpsDataExpedicao,
    Value<String?>? ctpsUf,
    Value<String?>? observacao,
    Value<String?>? logradouro,
    Value<String?>? numero,
    Value<String?>? complemento,
    Value<String?>? bairro,
    Value<String?>? cidade,
    Value<String?>? cep,
    Value<String?>? municipioIbge,
    Value<String?>? uf,
    Value<int?>? idPessoa,
    Value<int?>? idCargo,
    Value<int?>? idSetor,
    Value<double?>? comissao,
    Value<double?>? metaVenda,
  }) {
    return ViewPessoaVendedorsCompanion(
      id: id ?? this.id,
      nome: nome ?? this.nome,
      tipo: tipo ?? this.tipo,
      email: email ?? this.email,
      site: site ?? this.site,
      cpfCnpj: cpfCnpj ?? this.cpfCnpj,
      rgIe: rgIe ?? this.rgIe,
      matricula: matricula ?? this.matricula,
      dataCadastro: dataCadastro ?? this.dataCadastro,
      dataAdmissao: dataAdmissao ?? this.dataAdmissao,
      dataDemissao: dataDemissao ?? this.dataDemissao,
      ctpsNumero: ctpsNumero ?? this.ctpsNumero,
      ctpsSerie: ctpsSerie ?? this.ctpsSerie,
      ctpsDataExpedicao: ctpsDataExpedicao ?? this.ctpsDataExpedicao,
      ctpsUf: ctpsUf ?? this.ctpsUf,
      observacao: observacao ?? this.observacao,
      logradouro: logradouro ?? this.logradouro,
      numero: numero ?? this.numero,
      complemento: complemento ?? this.complemento,
      bairro: bairro ?? this.bairro,
      cidade: cidade ?? this.cidade,
      cep: cep ?? this.cep,
      municipioIbge: municipioIbge ?? this.municipioIbge,
      uf: uf ?? this.uf,
      idPessoa: idPessoa ?? this.idPessoa,
      idCargo: idCargo ?? this.idCargo,
      idSetor: idSetor ?? this.idSetor,
      comissao: comissao ?? this.comissao,
      metaVenda: metaVenda ?? this.metaVenda,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (nome.present) {
      map['nome'] = Variable<String>(nome.value);
    }
    if (tipo.present) {
      map['tipo'] = Variable<String>(tipo.value);
    }
    if (email.present) {
      map['email'] = Variable<String>(email.value);
    }
    if (site.present) {
      map['site'] = Variable<String>(site.value);
    }
    if (cpfCnpj.present) {
      map['cpf_cnpj'] = Variable<String>(cpfCnpj.value);
    }
    if (rgIe.present) {
      map['rg_ie'] = Variable<String>(rgIe.value);
    }
    if (matricula.present) {
      map['matricula'] = Variable<String>(matricula.value);
    }
    if (dataCadastro.present) {
      map['data_cadastro'] = Variable<DateTime>(dataCadastro.value);
    }
    if (dataAdmissao.present) {
      map['data_admissao'] = Variable<DateTime>(dataAdmissao.value);
    }
    if (dataDemissao.present) {
      map['data_demissao'] = Variable<DateTime>(dataDemissao.value);
    }
    if (ctpsNumero.present) {
      map['ctps_numero'] = Variable<String>(ctpsNumero.value);
    }
    if (ctpsSerie.present) {
      map['ctps_serie'] = Variable<String>(ctpsSerie.value);
    }
    if (ctpsDataExpedicao.present) {
      map['ctps_data_expedicao'] = Variable<DateTime>(ctpsDataExpedicao.value);
    }
    if (ctpsUf.present) {
      map['ctps_uf'] = Variable<String>(ctpsUf.value);
    }
    if (observacao.present) {
      map['observacao'] = Variable<String>(observacao.value);
    }
    if (logradouro.present) {
      map['logradouro'] = Variable<String>(logradouro.value);
    }
    if (numero.present) {
      map['numero'] = Variable<String>(numero.value);
    }
    if (complemento.present) {
      map['complemento'] = Variable<String>(complemento.value);
    }
    if (bairro.present) {
      map['bairro'] = Variable<String>(bairro.value);
    }
    if (cidade.present) {
      map['cidade'] = Variable<String>(cidade.value);
    }
    if (cep.present) {
      map['cep'] = Variable<String>(cep.value);
    }
    if (municipioIbge.present) {
      map['municipio_ibge'] = Variable<String>(municipioIbge.value);
    }
    if (uf.present) {
      map['uf'] = Variable<String>(uf.value);
    }
    if (idPessoa.present) {
      map['id_pessoa'] = Variable<int>(idPessoa.value);
    }
    if (idCargo.present) {
      map['id_cargo'] = Variable<int>(idCargo.value);
    }
    if (idSetor.present) {
      map['id_setor'] = Variable<int>(idSetor.value);
    }
    if (comissao.present) {
      map['comissao'] = Variable<double>(comissao.value);
    }
    if (metaVenda.present) {
      map['meta_venda'] = Variable<double>(metaVenda.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('ViewPessoaVendedorsCompanion(')
          ..write('id: $id, ')
          ..write('nome: $nome, ')
          ..write('tipo: $tipo, ')
          ..write('email: $email, ')
          ..write('site: $site, ')
          ..write('cpfCnpj: $cpfCnpj, ')
          ..write('rgIe: $rgIe, ')
          ..write('matricula: $matricula, ')
          ..write('dataCadastro: $dataCadastro, ')
          ..write('dataAdmissao: $dataAdmissao, ')
          ..write('dataDemissao: $dataDemissao, ')
          ..write('ctpsNumero: $ctpsNumero, ')
          ..write('ctpsSerie: $ctpsSerie, ')
          ..write('ctpsDataExpedicao: $ctpsDataExpedicao, ')
          ..write('ctpsUf: $ctpsUf, ')
          ..write('observacao: $observacao, ')
          ..write('logradouro: $logradouro, ')
          ..write('numero: $numero, ')
          ..write('complemento: $complemento, ')
          ..write('bairro: $bairro, ')
          ..write('cidade: $cidade, ')
          ..write('cep: $cep, ')
          ..write('municipioIbge: $municipioIbge, ')
          ..write('uf: $uf, ')
          ..write('idPessoa: $idPessoa, ')
          ..write('idCargo: $idCargo, ')
          ..write('idSetor: $idSetor, ')
          ..write('comissao: $comissao, ')
          ..write('metaVenda: $metaVenda')
          ..write(')'))
        .toString();
  }
}

class $ViewPessoaTransportadorasTable extends ViewPessoaTransportadoras
    with TableInfo<$ViewPessoaTransportadorasTable, ViewPessoaTransportadora> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $ViewPessoaTransportadorasTable(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
    'id',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _nomeMeta = const VerificationMeta('nome');
  @override
  late final GeneratedColumn<String> nome = GeneratedColumn<String>(
    'nome',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 450,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _tipoMeta = const VerificationMeta('tipo');
  @override
  late final GeneratedColumn<String> tipo = GeneratedColumn<String>(
    'tipo',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 3,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _emailMeta = const VerificationMeta('email');
  @override
  late final GeneratedColumn<String> email = GeneratedColumn<String>(
    'email',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 750,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _siteMeta = const VerificationMeta('site');
  @override
  late final GeneratedColumn<String> site = GeneratedColumn<String>(
    'site',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 450,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _cpfCnpjMeta = const VerificationMeta(
    'cpfCnpj',
  );
  @override
  late final GeneratedColumn<String> cpfCnpj = GeneratedColumn<String>(
    'cpf_cnpj',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 20,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _rgIeMeta = const VerificationMeta('rgIe');
  @override
  late final GeneratedColumn<String> rgIe = GeneratedColumn<String>(
    'rg_ie',
    aliasedName,
    true,
    additionalChecks: GeneratedColumn.checkTextLength(
      minTextLength: 0,
      maxTextLength: 20,
    ),
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _dataCadastroMeta = const VerificationMeta(
    'dataCadastro',
  );
  @override
  late final GeneratedColumn<DateTime> dataCadastro = GeneratedColumn<DateTime>(
    'data_cadastro',
    aliasedName,
    true,
    type: DriftSqlType.dateTime,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _observacaoMeta = const VerificationMeta(
    'observacao',
  );
  @override
  late final GeneratedColumn<String> observacao = GeneratedColumn<String>(
    'observacao',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
  );
  static const VerificationMeta _idPessoaMeta = const VerificationMeta(
    'idPessoa',
  );
  @override
  late final GeneratedColumn<int> idPessoa = GeneratedColumn<int>(
    'id_pessoa',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    nome,
    tipo,
    email,
    site,
    cpfCnpj,
    rgIe,
    dataCadastro,
    observacao,
    idPessoa,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'view_pessoa_transportadora';
  @override
  VerificationContext validateIntegrity(
    Insertable<ViewPessoaTransportadora> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('id')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['id']!, _idMeta));
    }
    if (data.containsKey('nome')) {
      context.handle(
        _nomeMeta,
        nome.isAcceptableOrUnknown(data['nome']!, _nomeMeta),
      );
    }
    if (data.containsKey('tipo')) {
      context.handle(
        _tipoMeta,
        tipo.isAcceptableOrUnknown(data['tipo']!, _tipoMeta),
      );
    }
    if (data.containsKey('email')) {
      context.handle(
        _emailMeta,
        email.isAcceptableOrUnknown(data['email']!, _emailMeta),
      );
    }
    if (data.containsKey('site')) {
      context.handle(
        _siteMeta,
        site.isAcceptableOrUnknown(data['site']!, _siteMeta),
      );
    }
    if (data.containsKey('cpf_cnpj')) {
      context.handle(
        _cpfCnpjMeta,
        cpfCnpj.isAcceptableOrUnknown(data['cpf_cnpj']!, _cpfCnpjMeta),
      );
    }
    if (data.containsKey('rg_ie')) {
      context.handle(
        _rgIeMeta,
        rgIe.isAcceptableOrUnknown(data['rg_ie']!, _rgIeMeta),
      );
    }
    if (data.containsKey('data_cadastro')) {
      context.handle(
        _dataCadastroMeta,
        dataCadastro.isAcceptableOrUnknown(
          data['data_cadastro']!,
          _dataCadastroMeta,
        ),
      );
    }
    if (data.containsKey('observacao')) {
      context.handle(
        _observacaoMeta,
        observacao.isAcceptableOrUnknown(data['observacao']!, _observacaoMeta),
      );
    }
    if (data.containsKey('id_pessoa')) {
      context.handle(
        _idPessoaMeta,
        idPessoa.isAcceptableOrUnknown(data['id_pessoa']!, _idPessoaMeta),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  ViewPessoaTransportadora map(
    Map<String, dynamic> data, {
    String? tablePrefix,
  }) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return ViewPessoaTransportadora(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id'],
      ),
      nome: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}nome'],
      ),
      tipo: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}tipo'],
      ),
      email: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}email'],
      ),
      site: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}site'],
      ),
      cpfCnpj: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}cpf_cnpj'],
      ),
      rgIe: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}rg_ie'],
      ),
      dataCadastro: attachedDatabase.typeMapping.read(
        DriftSqlType.dateTime,
        data['${effectivePrefix}data_cadastro'],
      ),
      observacao: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}observacao'],
      ),
      idPessoa: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}id_pessoa'],
      ),
    );
  }

  @override
  $ViewPessoaTransportadorasTable createAlias(String alias) {
    return $ViewPessoaTransportadorasTable(attachedDatabase, alias);
  }
}

class ViewPessoaTransportadora extends DataClass
    implements Insertable<ViewPessoaTransportadora> {
  final int? id;
  final String? nome;
  final String? tipo;
  final String? email;
  final String? site;
  final String? cpfCnpj;
  final String? rgIe;
  final DateTime? dataCadastro;
  final String? observacao;
  final int? idPessoa;
  const ViewPessoaTransportadora({
    this.id,
    this.nome,
    this.tipo,
    this.email,
    this.site,
    this.cpfCnpj,
    this.rgIe,
    this.dataCadastro,
    this.observacao,
    this.idPessoa,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['id'] = Variable<int>(id);
    }
    if (!nullToAbsent || nome != null) {
      map['nome'] = Variable<String>(nome);
    }
    if (!nullToAbsent || tipo != null) {
      map['tipo'] = Variable<String>(tipo);
    }
    if (!nullToAbsent || email != null) {
      map['email'] = Variable<String>(email);
    }
    if (!nullToAbsent || site != null) {
      map['site'] = Variable<String>(site);
    }
    if (!nullToAbsent || cpfCnpj != null) {
      map['cpf_cnpj'] = Variable<String>(cpfCnpj);
    }
    if (!nullToAbsent || rgIe != null) {
      map['rg_ie'] = Variable<String>(rgIe);
    }
    if (!nullToAbsent || dataCadastro != null) {
      map['data_cadastro'] = Variable<DateTime>(dataCadastro);
    }
    if (!nullToAbsent || observacao != null) {
      map['observacao'] = Variable<String>(observacao);
    }
    if (!nullToAbsent || idPessoa != null) {
      map['id_pessoa'] = Variable<int>(idPessoa);
    }
    return map;
  }

  factory ViewPessoaTransportadora.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return ViewPessoaTransportadora(
      id: serializer.fromJson<int?>(json['id']),
      nome: serializer.fromJson<String?>(json['nome']),
      tipo: serializer.fromJson<String?>(json['tipo']),
      email: serializer.fromJson<String?>(json['email']),
      site: serializer.fromJson<String?>(json['site']),
      cpfCnpj: serializer.fromJson<String?>(json['cpfCnpj']),
      rgIe: serializer.fromJson<String?>(json['rgIe']),
      dataCadastro: serializer.fromJson<DateTime?>(json['dataCadastro']),
      observacao: serializer.fromJson<String?>(json['observacao']),
      idPessoa: serializer.fromJson<int?>(json['idPessoa']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'nome': serializer.toJson<String?>(nome),
      'tipo': serializer.toJson<String?>(tipo),
      'email': serializer.toJson<String?>(email),
      'site': serializer.toJson<String?>(site),
      'cpfCnpj': serializer.toJson<String?>(cpfCnpj),
      'rgIe': serializer.toJson<String?>(rgIe),
      'dataCadastro': serializer.toJson<DateTime?>(dataCadastro),
      'observacao': serializer.toJson<String?>(observacao),
      'idPessoa': serializer.toJson<int?>(idPessoa),
    };
  }

  ViewPessoaTransportadora copyWith({
    Value<int?> id = const Value.absent(),
    Value<String?> nome = const Value.absent(),
    Value<String?> tipo = const Value.absent(),
    Value<String?> email = const Value.absent(),
    Value<String?> site = const Value.absent(),
    Value<String?> cpfCnpj = const Value.absent(),
    Value<String?> rgIe = const Value.absent(),
    Value<DateTime?> dataCadastro = const Value.absent(),
    Value<String?> observacao = const Value.absent(),
    Value<int?> idPessoa = const Value.absent(),
  }) => ViewPessoaTransportadora(
    id: id.present ? id.value : this.id,
    nome: nome.present ? nome.value : this.nome,
    tipo: tipo.present ? tipo.value : this.tipo,
    email: email.present ? email.value : this.email,
    site: site.present ? site.value : this.site,
    cpfCnpj: cpfCnpj.present ? cpfCnpj.value : this.cpfCnpj,
    rgIe: rgIe.present ? rgIe.value : this.rgIe,
    dataCadastro: dataCadastro.present ? dataCadastro.value : this.dataCadastro,
    observacao: observacao.present ? observacao.value : this.observacao,
    idPessoa: idPessoa.present ? idPessoa.value : this.idPessoa,
  );
  ViewPessoaTransportadora copyWithCompanion(
    ViewPessoaTransportadorasCompanion data,
  ) {
    return ViewPessoaTransportadora(
      id: data.id.present ? data.id.value : this.id,
      nome: data.nome.present ? data.nome.value : this.nome,
      tipo: data.tipo.present ? data.tipo.value : this.tipo,
      email: data.email.present ? data.email.value : this.email,
      site: data.site.present ? data.site.value : this.site,
      cpfCnpj: data.cpfCnpj.present ? data.cpfCnpj.value : this.cpfCnpj,
      rgIe: data.rgIe.present ? data.rgIe.value : this.rgIe,
      dataCadastro:
          data.dataCadastro.present
              ? data.dataCadastro.value
              : this.dataCadastro,
      observacao:
          data.observacao.present ? data.observacao.value : this.observacao,
      idPessoa: data.idPessoa.present ? data.idPessoa.value : this.idPessoa,
    );
  }

  @override
  String toString() {
    return (StringBuffer('ViewPessoaTransportadora(')
          ..write('id: $id, ')
          ..write('nome: $nome, ')
          ..write('tipo: $tipo, ')
          ..write('email: $email, ')
          ..write('site: $site, ')
          ..write('cpfCnpj: $cpfCnpj, ')
          ..write('rgIe: $rgIe, ')
          ..write('dataCadastro: $dataCadastro, ')
          ..write('observacao: $observacao, ')
          ..write('idPessoa: $idPessoa')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    nome,
    tipo,
    email,
    site,
    cpfCnpj,
    rgIe,
    dataCadastro,
    observacao,
    idPessoa,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is ViewPessoaTransportadora &&
          other.id == this.id &&
          other.nome == this.nome &&
          other.tipo == this.tipo &&
          other.email == this.email &&
          other.site == this.site &&
          other.cpfCnpj == this.cpfCnpj &&
          other.rgIe == this.rgIe &&
          other.dataCadastro == this.dataCadastro &&
          other.observacao == this.observacao &&
          other.idPessoa == this.idPessoa);
}

class ViewPessoaTransportadorasCompanion
    extends UpdateCompanion<ViewPessoaTransportadora> {
  final Value<int?> id;
  final Value<String?> nome;
  final Value<String?> tipo;
  final Value<String?> email;
  final Value<String?> site;
  final Value<String?> cpfCnpj;
  final Value<String?> rgIe;
  final Value<DateTime?> dataCadastro;
  final Value<String?> observacao;
  final Value<int?> idPessoa;
  const ViewPessoaTransportadorasCompanion({
    this.id = const Value.absent(),
    this.nome = const Value.absent(),
    this.tipo = const Value.absent(),
    this.email = const Value.absent(),
    this.site = const Value.absent(),
    this.cpfCnpj = const Value.absent(),
    this.rgIe = const Value.absent(),
    this.dataCadastro = const Value.absent(),
    this.observacao = const Value.absent(),
    this.idPessoa = const Value.absent(),
  });
  ViewPessoaTransportadorasCompanion.insert({
    this.id = const Value.absent(),
    this.nome = const Value.absent(),
    this.tipo = const Value.absent(),
    this.email = const Value.absent(),
    this.site = const Value.absent(),
    this.cpfCnpj = const Value.absent(),
    this.rgIe = const Value.absent(),
    this.dataCadastro = const Value.absent(),
    this.observacao = const Value.absent(),
    this.idPessoa = const Value.absent(),
  });
  static Insertable<ViewPessoaTransportadora> custom({
    Expression<int>? id,
    Expression<String>? nome,
    Expression<String>? tipo,
    Expression<String>? email,
    Expression<String>? site,
    Expression<String>? cpfCnpj,
    Expression<String>? rgIe,
    Expression<DateTime>? dataCadastro,
    Expression<String>? observacao,
    Expression<int>? idPessoa,
  }) {
    return RawValuesInsertable({
      if (id != null) 'id': id,
      if (nome != null) 'nome': nome,
      if (tipo != null) 'tipo': tipo,
      if (email != null) 'email': email,
      if (site != null) 'site': site,
      if (cpfCnpj != null) 'cpf_cnpj': cpfCnpj,
      if (rgIe != null) 'rg_ie': rgIe,
      if (dataCadastro != null) 'data_cadastro': dataCadastro,
      if (observacao != null) 'observacao': observacao,
      if (idPessoa != null) 'id_pessoa': idPessoa,
    });
  }

  ViewPessoaTransportadorasCompanion copyWith({
    Value<int?>? id,
    Value<String?>? nome,
    Value<String?>? tipo,
    Value<String?>? email,
    Value<String?>? site,
    Value<String?>? cpfCnpj,
    Value<String?>? rgIe,
    Value<DateTime?>? dataCadastro,
    Value<String?>? observacao,
    Value<int?>? idPessoa,
  }) {
    return ViewPessoaTransportadorasCompanion(
      id: id ?? this.id,
      nome: nome ?? this.nome,
      tipo: tipo ?? this.tipo,
      email: email ?? this.email,
      site: site ?? this.site,
      cpfCnpj: cpfCnpj ?? this.cpfCnpj,
      rgIe: rgIe ?? this.rgIe,
      dataCadastro: dataCadastro ?? this.dataCadastro,
      observacao: observacao ?? this.observacao,
      idPessoa: idPessoa ?? this.idPessoa,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['id'] = Variable<int>(id.value);
    }
    if (nome.present) {
      map['nome'] = Variable<String>(nome.value);
    }
    if (tipo.present) {
      map['tipo'] = Variable<String>(tipo.value);
    }
    if (email.present) {
      map['email'] = Variable<String>(email.value);
    }
    if (site.present) {
      map['site'] = Variable<String>(site.value);
    }
    if (cpfCnpj.present) {
      map['cpf_cnpj'] = Variable<String>(cpfCnpj.value);
    }
    if (rgIe.present) {
      map['rg_ie'] = Variable<String>(rgIe.value);
    }
    if (dataCadastro.present) {
      map['data_cadastro'] = Variable<DateTime>(dataCadastro.value);
    }
    if (observacao.present) {
      map['observacao'] = Variable<String>(observacao.value);
    }
    if (idPessoa.present) {
      map['id_pessoa'] = Variable<int>(idPessoa.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('ViewPessoaTransportadorasCompanion(')
          ..write('id: $id, ')
          ..write('nome: $nome, ')
          ..write('tipo: $tipo, ')
          ..write('email: $email, ')
          ..write('site: $site, ')
          ..write('cpfCnpj: $cpfCnpj, ')
          ..write('rgIe: $rgIe, ')
          ..write('dataCadastro: $dataCadastro, ')
          ..write('observacao: $observacao, ')
          ..write('idPessoa: $idPessoa')
          ..write(')'))
        .toString();
  }
}

abstract class _$AppDatabase extends GeneratedDatabase {
  _$AppDatabase(QueryExecutor e) : super(e);
  $AppDatabaseManager get managers => $AppDatabaseManager(this);
  late final $ProdutosTable produtos = $ProdutosTable(this);
  late final $NfeReferenciadasTable nfeReferenciadas = $NfeReferenciadasTable(
    this,
  );
  late final $NfeEmitentesTable nfeEmitentes = $NfeEmitentesTable(this);
  late final $NfeDestinatariosTable nfeDestinatarios = $NfeDestinatariosTable(
    this,
  );
  late final $NfeLocalRetiradasTable nfeLocalRetiradas =
      $NfeLocalRetiradasTable(this);
  late final $NfeLocalEntregasTable nfeLocalEntregas = $NfeLocalEntregasTable(
    this,
  );
  late final $NfeDetEspecificoVeiculosTable nfeDetEspecificoVeiculos =
      $NfeDetEspecificoVeiculosTable(this);
  late final $NfeDetEspecificoMedicamentosTable nfeDetEspecificoMedicamentos =
      $NfeDetEspecificoMedicamentosTable(this);
  late final $NfeDetEspecificoArmamentosTable nfeDetEspecificoArmamentos =
      $NfeDetEspecificoArmamentosTable(this);
  late final $NfeDuplicatasTable nfeDuplicatas = $NfeDuplicatasTable(this);
  late final $NfeDeclaracaoImportacaosTable nfeDeclaracaoImportacaos =
      $NfeDeclaracaoImportacaosTable(this);
  late final $NfeCanaFornecimentoDiariosTable nfeCanaFornecimentoDiarios =
      $NfeCanaFornecimentoDiariosTable(this);
  late final $NfeCanaDeducoesSafrasTable nfeCanaDeducoesSafras =
      $NfeCanaDeducoesSafrasTable(this);
  late final $NfeCupomFiscalReferenciadosTable nfeCupomFiscalReferenciados =
      $NfeCupomFiscalReferenciadosTable(this);
  late final $NfeProdRuralReferenciadasTable nfeProdRuralReferenciadas =
      $NfeProdRuralReferenciadasTable(this);
  late final $NfeNfReferenciadasTable nfeNfReferenciadas =
      $NfeNfReferenciadasTable(this);
  late final $NfeDetalheImpostoIcmssTable nfeDetalheImpostoIcmss =
      $NfeDetalheImpostoIcmssTable(this);
  late final $NfeDetalheImpostoIpisTable nfeDetalheImpostoIpis =
      $NfeDetalheImpostoIpisTable(this);
  late final $NfeDetalheImpostoIisTable nfeDetalheImpostoIis =
      $NfeDetalheImpostoIisTable(this);
  late final $NfeDetalheImpostoPissTable nfeDetalheImpostoPiss =
      $NfeDetalheImpostoPissTable(this);
  late final $NfeDetalheImpostoCofinssTable nfeDetalheImpostoCofinss =
      $NfeDetalheImpostoCofinssTable(this);
  late final $NfeDetalheImpostoIssqnsTable nfeDetalheImpostoIssqns =
      $NfeDetalheImpostoIssqnsTable(this);
  late final $NfeTransporteReboquesTable nfeTransporteReboques =
      $NfeTransporteReboquesTable(this);
  late final $NfeTransporteVolumeLacresTable nfeTransporteVolumeLacres =
      $NfeTransporteVolumeLacresTable(this);
  late final $NfeProcessoReferenciadosTable nfeProcessoReferenciados =
      $NfeProcessoReferenciadosTable(this);
  late final $NfeCteReferenciadosTable nfeCteReferenciados =
      $NfeCteReferenciadosTable(this);
  late final $NfeAcessoXmlsTable nfeAcessoXmls = $NfeAcessoXmlsTable(this);
  late final $NfeExportacaosTable nfeExportacaos = $NfeExportacaosTable(this);
  late final $NfeInformacaoPagamentosTable nfeInformacaoPagamentos =
      $NfeInformacaoPagamentosTable(this);
  late final $NfeItemRastreadosTable nfeItemRastreados =
      $NfeItemRastreadosTable(this);
  late final $NfeDetalheImpostoPisStsTable nfeDetalheImpostoPisSts =
      $NfeDetalheImpostoPisStsTable(this);
  late final $NfeDetalheImpostoIcmsUfdestsTable nfeDetalheImpostoIcmsUfdests =
      $NfeDetalheImpostoIcmsUfdestsTable(this);
  late final $NfeDetalheImpostoCofinsStsTable nfeDetalheImpostoCofinsSts =
      $NfeDetalheImpostoCofinsStsTable(this);
  late final $NfeResponsavelTecnicosTable nfeResponsavelTecnicos =
      $NfeResponsavelTecnicosTable(this);
  late final $NfeCompraGovernamentalsTable nfeCompraGovernamentals =
      $NfeCompraGovernamentalsTable(this);
  late final $NfeAntecipacaoPagamentosTable nfeAntecipacaoPagamentos =
      $NfeAntecipacaoPagamentosTable(this);
  late final $NfeDetalheImpostoSeletivosTable nfeDetalheImpostoSeletivos =
      $NfeDetalheImpostoSeletivosTable(this);
  late final $NfeDetalheImpostoIbsUfsTable nfeDetalheImpostoIbsUfs =
      $NfeDetalheImpostoIbsUfsTable(this);
  late final $NfeDetalheImpostoIbsMunsTable nfeDetalheImpostoIbsMuns =
      $NfeDetalheImpostoIbsMunsTable(this);
  late final $NfeDetalheImpostoCbssTable nfeDetalheImpostoCbss =
      $NfeDetalheImpostoCbssTable(this);
  late final $NfeDetalheTributoRegularsTable nfeDetalheTributoRegulars =
      $NfeDetalheTributoRegularsTable(this);
  late final $NfeDetalheCreditoPresumidoIbssTable
  nfeDetalheCreditoPresumidoIbss = $NfeDetalheCreditoPresumidoIbssTable(this);
  late final $NfeDetalheCreditoPresumidoCbssTable
  nfeDetalheCreditoPresumidoCbss = $NfeDetalheCreditoPresumidoCbssTable(this);
  late final $NfeDetalheCompraGovernosTable nfeDetalheCompraGovernos =
      $NfeDetalheCompraGovernosTable(this);
  late final $NfeDetalheImpostoMonofasicosTable nfeDetalheImpostoMonofasicos =
      $NfeDetalheImpostoMonofasicosTable(this);
  late final $NfeDetalheTransfCreditosTable nfeDetalheTransfCreditos =
      $NfeDetalheTransfCreditosTable(this);
  late final $NfeDetalheIbsZfmsTable nfeDetalheIbsZfms =
      $NfeDetalheIbsZfmsTable(this);
  late final $NfeDetalheDfeReferenciadosTable nfeDetalheDfeReferenciados =
      $NfeDetalheDfeReferenciadosTable(this);
  late final $NfeDetCombustivelOrigemsTable nfeDetCombustivelOrigems =
      $NfeDetCombustivelOrigemsTable(this);
  late final $NfeInformacaoAgropecuariosTable nfeInformacaoAgropecuarios =
      $NfeInformacaoAgropecuariosTable(this);
  late final $ProdutoGruposTable produtoGrupos = $ProdutoGruposTable(this);
  late final $ProdutoSubgruposTable produtoSubgrupos = $ProdutoSubgruposTable(
    this,
  );
  late final $ProdutoMarcasTable produtoMarcas = $ProdutoMarcasTable(this);
  late final $ProdutoUnidadesTable produtoUnidades = $ProdutoUnidadesTable(
    this,
  );
  late final $NfeCabecalhosTable nfeCabecalhos = $NfeCabecalhosTable(this);
  late final $NfeDetalhesTable nfeDetalhes = $NfeDetalhesTable(this);
  late final $NfeDetEspecificoCombustivelsTable nfeDetEspecificoCombustivels =
      $NfeDetEspecificoCombustivelsTable(this);
  late final $NfeTransportesTable nfeTransportes = $NfeTransportesTable(this);
  late final $NfeFaturasTable nfeFaturas = $NfeFaturasTable(this);
  late final $NfeCanasTable nfeCanas = $NfeCanasTable(this);
  late final $NfeTransporteVolumesTable nfeTransporteVolumes =
      $NfeTransporteVolumesTable(this);
  late final $TributOperacaoFiscalsTable tributOperacaoFiscals =
      $TributOperacaoFiscalsTable(this);
  late final $VendaCabecalhosTable vendaCabecalhos = $VendaCabecalhosTable(
    this,
  );
  late final $NfeImportacaoDetalhesTable nfeImportacaoDetalhes =
      $NfeImportacaoDetalhesTable(this);
  late final $NfeNumerosTable nfeNumeros = $NfeNumerosTable(this);
  late final $NfeConfiguracaosTable nfeConfiguracaos = $NfeConfiguracaosTable(
    this,
  );
  late final $NfeNumeroInutilizadosTable nfeNumeroInutilizados =
      $NfeNumeroInutilizadosTable(this);
  late final $ViewControleAcessosTable viewControleAcessos =
      $ViewControleAcessosTable(this);
  late final $ViewPessoaUsuariosTable viewPessoaUsuarios =
      $ViewPessoaUsuariosTable(this);
  late final $ViewPessoaClientesTable viewPessoaClientes =
      $ViewPessoaClientesTable(this);
  late final $ViewPessoaFornecedorsTable viewPessoaFornecedors =
      $ViewPessoaFornecedorsTable(this);
  late final $ViewPessoaColaboradorsTable viewPessoaColaboradors =
      $ViewPessoaColaboradorsTable(this);
  late final $ViewPessoaVendedorsTable viewPessoaVendedors =
      $ViewPessoaVendedorsTable(this);
  late final $ViewPessoaTransportadorasTable viewPessoaTransportadoras =
      $ViewPessoaTransportadorasTable(this);
  late final ProdutoGrupoDao produtoGrupoDao = ProdutoGrupoDao(
    this as AppDatabase,
  );
  late final ProdutoSubgrupoDao produtoSubgrupoDao = ProdutoSubgrupoDao(
    this as AppDatabase,
  );
  late final ProdutoMarcaDao produtoMarcaDao = ProdutoMarcaDao(
    this as AppDatabase,
  );
  late final ProdutoUnidadeDao produtoUnidadeDao = ProdutoUnidadeDao(
    this as AppDatabase,
  );
  late final NfeCabecalhoDao nfeCabecalhoDao = NfeCabecalhoDao(
    this as AppDatabase,
  );
  late final NfeDetalheDao nfeDetalheDao = NfeDetalheDao(this as AppDatabase);
  late final NfeDetEspecificoCombustivelDao nfeDetEspecificoCombustivelDao =
      NfeDetEspecificoCombustivelDao(this as AppDatabase);
  late final NfeTransporteDao nfeTransporteDao = NfeTransporteDao(
    this as AppDatabase,
  );
  late final NfeFaturaDao nfeFaturaDao = NfeFaturaDao(this as AppDatabase);
  late final NfeCanaDao nfeCanaDao = NfeCanaDao(this as AppDatabase);
  late final NfeTransporteVolumeDao nfeTransporteVolumeDao =
      NfeTransporteVolumeDao(this as AppDatabase);
  late final TributOperacaoFiscalDao tributOperacaoFiscalDao =
      TributOperacaoFiscalDao(this as AppDatabase);
  late final VendaCabecalhoDao vendaCabecalhoDao = VendaCabecalhoDao(
    this as AppDatabase,
  );
  late final NfeImportacaoDetalheDao nfeImportacaoDetalheDao =
      NfeImportacaoDetalheDao(this as AppDatabase);
  late final NfeNumeroDao nfeNumeroDao = NfeNumeroDao(this as AppDatabase);
  late final NfeConfiguracaoDao nfeConfiguracaoDao = NfeConfiguracaoDao(
    this as AppDatabase,
  );
  late final NfeNumeroInutilizadoDao nfeNumeroInutilizadoDao =
      NfeNumeroInutilizadoDao(this as AppDatabase);
  late final ViewControleAcessoDao viewControleAcessoDao =
      ViewControleAcessoDao(this as AppDatabase);
  late final ViewPessoaUsuarioDao viewPessoaUsuarioDao = ViewPessoaUsuarioDao(
    this as AppDatabase,
  );
  late final ViewPessoaClienteDao viewPessoaClienteDao = ViewPessoaClienteDao(
    this as AppDatabase,
  );
  late final ViewPessoaFornecedorDao viewPessoaFornecedorDao =
      ViewPessoaFornecedorDao(this as AppDatabase);
  late final ViewPessoaColaboradorDao viewPessoaColaboradorDao =
      ViewPessoaColaboradorDao(this as AppDatabase);
  late final ViewPessoaVendedorDao viewPessoaVendedorDao =
      ViewPessoaVendedorDao(this as AppDatabase);
  late final ViewPessoaTransportadoraDao viewPessoaTransportadoraDao =
      ViewPessoaTransportadoraDao(this as AppDatabase);
  @override
  Iterable<TableInfo<Table, Object?>> get allTables =>
      allSchemaEntities.whereType<TableInfo<Table, Object?>>();
  @override
  List<DatabaseSchemaEntity> get allSchemaEntities => [
    produtos,
    nfeReferenciadas,
    nfeEmitentes,
    nfeDestinatarios,
    nfeLocalRetiradas,
    nfeLocalEntregas,
    nfeDetEspecificoVeiculos,
    nfeDetEspecificoMedicamentos,
    nfeDetEspecificoArmamentos,
    nfeDuplicatas,
    nfeDeclaracaoImportacaos,
    nfeCanaFornecimentoDiarios,
    nfeCanaDeducoesSafras,
    nfeCupomFiscalReferenciados,
    nfeProdRuralReferenciadas,
    nfeNfReferenciadas,
    nfeDetalheImpostoIcmss,
    nfeDetalheImpostoIpis,
    nfeDetalheImpostoIis,
    nfeDetalheImpostoPiss,
    nfeDetalheImpostoCofinss,
    nfeDetalheImpostoIssqns,
    nfeTransporteReboques,
    nfeTransporteVolumeLacres,
    nfeProcessoReferenciados,
    nfeCteReferenciados,
    nfeAcessoXmls,
    nfeExportacaos,
    nfeInformacaoPagamentos,
    nfeItemRastreados,
    nfeDetalheImpostoPisSts,
    nfeDetalheImpostoIcmsUfdests,
    nfeDetalheImpostoCofinsSts,
    nfeResponsavelTecnicos,
    nfeCompraGovernamentals,
    nfeAntecipacaoPagamentos,
    nfeDetalheImpostoSeletivos,
    nfeDetalheImpostoIbsUfs,
    nfeDetalheImpostoIbsMuns,
    nfeDetalheImpostoCbss,
    nfeDetalheTributoRegulars,
    nfeDetalheCreditoPresumidoIbss,
    nfeDetalheCreditoPresumidoCbss,
    nfeDetalheCompraGovernos,
    nfeDetalheImpostoMonofasicos,
    nfeDetalheTransfCreditos,
    nfeDetalheIbsZfms,
    nfeDetalheDfeReferenciados,
    nfeDetCombustivelOrigems,
    nfeInformacaoAgropecuarios,
    produtoGrupos,
    produtoSubgrupos,
    produtoMarcas,
    produtoUnidades,
    nfeCabecalhos,
    nfeDetalhes,
    nfeDetEspecificoCombustivels,
    nfeTransportes,
    nfeFaturas,
    nfeCanas,
    nfeTransporteVolumes,
    tributOperacaoFiscals,
    vendaCabecalhos,
    nfeImportacaoDetalhes,
    nfeNumeros,
    nfeConfiguracaos,
    nfeNumeroInutilizados,
    viewControleAcessos,
    viewPessoaUsuarios,
    viewPessoaClientes,
    viewPessoaFornecedors,
    viewPessoaColaboradors,
    viewPessoaVendedors,
    viewPessoaTransportadoras,
  ];
}

typedef $$ProdutosTableCreateCompanionBuilder =
    ProdutosCompanion Function({
      Value<int?> id,
      Value<int?> idProdutoSubgrupo,
      Value<int?> idProdutoMarca,
      Value<int?> idProdutoUnidade,
      Value<int?> idTributIcmsCustomCab,
      Value<int?> idTributGrupoTributario,
      Value<String?> nome,
      Value<String?> descricao,
      Value<String?> gtin,
      Value<String?> codigoInterno,
      Value<double?> valorCompra,
      Value<double?> valorVenda,
      Value<String?> codigoNcm,
      Value<double?> estoqueMinimo,
      Value<double?> estoqueMaximo,
      Value<double?> quantidadeEstoque,
      Value<DateTime?> dataCadastro,
    });
typedef $$ProdutosTableUpdateCompanionBuilder =
    ProdutosCompanion Function({
      Value<int?> id,
      Value<int?> idProdutoSubgrupo,
      Value<int?> idProdutoMarca,
      Value<int?> idProdutoUnidade,
      Value<int?> idTributIcmsCustomCab,
      Value<int?> idTributGrupoTributario,
      Value<String?> nome,
      Value<String?> descricao,
      Value<String?> gtin,
      Value<String?> codigoInterno,
      Value<double?> valorCompra,
      Value<double?> valorVenda,
      Value<String?> codigoNcm,
      Value<double?> estoqueMinimo,
      Value<double?> estoqueMaximo,
      Value<double?> quantidadeEstoque,
      Value<DateTime?> dataCadastro,
    });

class $$ProdutosTableFilterComposer
    extends Composer<_$AppDatabase, $ProdutosTable> {
  $$ProdutosTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idProdutoSubgrupo => $composableBuilder(
    column: $table.idProdutoSubgrupo,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idProdutoMarca => $composableBuilder(
    column: $table.idProdutoMarca,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idProdutoUnidade => $composableBuilder(
    column: $table.idProdutoUnidade,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idTributIcmsCustomCab => $composableBuilder(
    column: $table.idTributIcmsCustomCab,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idTributGrupoTributario => $composableBuilder(
    column: $table.idTributGrupoTributario,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get nome => $composableBuilder(
    column: $table.nome,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get descricao => $composableBuilder(
    column: $table.descricao,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get gtin => $composableBuilder(
    column: $table.gtin,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get codigoInterno => $composableBuilder(
    column: $table.codigoInterno,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorCompra => $composableBuilder(
    column: $table.valorCompra,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorVenda => $composableBuilder(
    column: $table.valorVenda,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get codigoNcm => $composableBuilder(
    column: $table.codigoNcm,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get estoqueMinimo => $composableBuilder(
    column: $table.estoqueMinimo,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get estoqueMaximo => $composableBuilder(
    column: $table.estoqueMaximo,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get quantidadeEstoque => $composableBuilder(
    column: $table.quantidadeEstoque,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get dataCadastro => $composableBuilder(
    column: $table.dataCadastro,
    builder: (column) => ColumnFilters(column),
  );
}

class $$ProdutosTableOrderingComposer
    extends Composer<_$AppDatabase, $ProdutosTable> {
  $$ProdutosTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idProdutoSubgrupo => $composableBuilder(
    column: $table.idProdutoSubgrupo,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idProdutoMarca => $composableBuilder(
    column: $table.idProdutoMarca,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idProdutoUnidade => $composableBuilder(
    column: $table.idProdutoUnidade,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idTributIcmsCustomCab => $composableBuilder(
    column: $table.idTributIcmsCustomCab,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idTributGrupoTributario => $composableBuilder(
    column: $table.idTributGrupoTributario,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get nome => $composableBuilder(
    column: $table.nome,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get descricao => $composableBuilder(
    column: $table.descricao,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get gtin => $composableBuilder(
    column: $table.gtin,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get codigoInterno => $composableBuilder(
    column: $table.codigoInterno,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorCompra => $composableBuilder(
    column: $table.valorCompra,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorVenda => $composableBuilder(
    column: $table.valorVenda,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get codigoNcm => $composableBuilder(
    column: $table.codigoNcm,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get estoqueMinimo => $composableBuilder(
    column: $table.estoqueMinimo,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get estoqueMaximo => $composableBuilder(
    column: $table.estoqueMaximo,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get quantidadeEstoque => $composableBuilder(
    column: $table.quantidadeEstoque,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get dataCadastro => $composableBuilder(
    column: $table.dataCadastro,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$ProdutosTableAnnotationComposer
    extends Composer<_$AppDatabase, $ProdutosTable> {
  $$ProdutosTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<int> get idProdutoSubgrupo => $composableBuilder(
    column: $table.idProdutoSubgrupo,
    builder: (column) => column,
  );

  GeneratedColumn<int> get idProdutoMarca => $composableBuilder(
    column: $table.idProdutoMarca,
    builder: (column) => column,
  );

  GeneratedColumn<int> get idProdutoUnidade => $composableBuilder(
    column: $table.idProdutoUnidade,
    builder: (column) => column,
  );

  GeneratedColumn<int> get idTributIcmsCustomCab => $composableBuilder(
    column: $table.idTributIcmsCustomCab,
    builder: (column) => column,
  );

  GeneratedColumn<int> get idTributGrupoTributario => $composableBuilder(
    column: $table.idTributGrupoTributario,
    builder: (column) => column,
  );

  GeneratedColumn<String> get nome =>
      $composableBuilder(column: $table.nome, builder: (column) => column);

  GeneratedColumn<String> get descricao =>
      $composableBuilder(column: $table.descricao, builder: (column) => column);

  GeneratedColumn<String> get gtin =>
      $composableBuilder(column: $table.gtin, builder: (column) => column);

  GeneratedColumn<String> get codigoInterno => $composableBuilder(
    column: $table.codigoInterno,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorCompra => $composableBuilder(
    column: $table.valorCompra,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorVenda => $composableBuilder(
    column: $table.valorVenda,
    builder: (column) => column,
  );

  GeneratedColumn<String> get codigoNcm =>
      $composableBuilder(column: $table.codigoNcm, builder: (column) => column);

  GeneratedColumn<double> get estoqueMinimo => $composableBuilder(
    column: $table.estoqueMinimo,
    builder: (column) => column,
  );

  GeneratedColumn<double> get estoqueMaximo => $composableBuilder(
    column: $table.estoqueMaximo,
    builder: (column) => column,
  );

  GeneratedColumn<double> get quantidadeEstoque => $composableBuilder(
    column: $table.quantidadeEstoque,
    builder: (column) => column,
  );

  GeneratedColumn<DateTime> get dataCadastro => $composableBuilder(
    column: $table.dataCadastro,
    builder: (column) => column,
  );
}

class $$ProdutosTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $ProdutosTable,
          Produto,
          $$ProdutosTableFilterComposer,
          $$ProdutosTableOrderingComposer,
          $$ProdutosTableAnnotationComposer,
          $$ProdutosTableCreateCompanionBuilder,
          $$ProdutosTableUpdateCompanionBuilder,
          (Produto, BaseReferences<_$AppDatabase, $ProdutosTable, Produto>),
          Produto,
          PrefetchHooks Function()
        > {
  $$ProdutosTableTableManager(_$AppDatabase db, $ProdutosTable table)
    : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer:
              () => $$ProdutosTableFilterComposer($db: db, $table: table),
          createOrderingComposer:
              () => $$ProdutosTableOrderingComposer($db: db, $table: table),
          createComputedFieldComposer:
              () => $$ProdutosTableAnnotationComposer($db: db, $table: table),
          updateCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idProdutoSubgrupo = const Value.absent(),
                Value<int?> idProdutoMarca = const Value.absent(),
                Value<int?> idProdutoUnidade = const Value.absent(),
                Value<int?> idTributIcmsCustomCab = const Value.absent(),
                Value<int?> idTributGrupoTributario = const Value.absent(),
                Value<String?> nome = const Value.absent(),
                Value<String?> descricao = const Value.absent(),
                Value<String?> gtin = const Value.absent(),
                Value<String?> codigoInterno = const Value.absent(),
                Value<double?> valorCompra = const Value.absent(),
                Value<double?> valorVenda = const Value.absent(),
                Value<String?> codigoNcm = const Value.absent(),
                Value<double?> estoqueMinimo = const Value.absent(),
                Value<double?> estoqueMaximo = const Value.absent(),
                Value<double?> quantidadeEstoque = const Value.absent(),
                Value<DateTime?> dataCadastro = const Value.absent(),
              }) => ProdutosCompanion(
                id: id,
                idProdutoSubgrupo: idProdutoSubgrupo,
                idProdutoMarca: idProdutoMarca,
                idProdutoUnidade: idProdutoUnidade,
                idTributIcmsCustomCab: idTributIcmsCustomCab,
                idTributGrupoTributario: idTributGrupoTributario,
                nome: nome,
                descricao: descricao,
                gtin: gtin,
                codigoInterno: codigoInterno,
                valorCompra: valorCompra,
                valorVenda: valorVenda,
                codigoNcm: codigoNcm,
                estoqueMinimo: estoqueMinimo,
                estoqueMaximo: estoqueMaximo,
                quantidadeEstoque: quantidadeEstoque,
                dataCadastro: dataCadastro,
              ),
          createCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idProdutoSubgrupo = const Value.absent(),
                Value<int?> idProdutoMarca = const Value.absent(),
                Value<int?> idProdutoUnidade = const Value.absent(),
                Value<int?> idTributIcmsCustomCab = const Value.absent(),
                Value<int?> idTributGrupoTributario = const Value.absent(),
                Value<String?> nome = const Value.absent(),
                Value<String?> descricao = const Value.absent(),
                Value<String?> gtin = const Value.absent(),
                Value<String?> codigoInterno = const Value.absent(),
                Value<double?> valorCompra = const Value.absent(),
                Value<double?> valorVenda = const Value.absent(),
                Value<String?> codigoNcm = const Value.absent(),
                Value<double?> estoqueMinimo = const Value.absent(),
                Value<double?> estoqueMaximo = const Value.absent(),
                Value<double?> quantidadeEstoque = const Value.absent(),
                Value<DateTime?> dataCadastro = const Value.absent(),
              }) => ProdutosCompanion.insert(
                id: id,
                idProdutoSubgrupo: idProdutoSubgrupo,
                idProdutoMarca: idProdutoMarca,
                idProdutoUnidade: idProdutoUnidade,
                idTributIcmsCustomCab: idTributIcmsCustomCab,
                idTributGrupoTributario: idTributGrupoTributario,
                nome: nome,
                descricao: descricao,
                gtin: gtin,
                codigoInterno: codigoInterno,
                valorCompra: valorCompra,
                valorVenda: valorVenda,
                codigoNcm: codigoNcm,
                estoqueMinimo: estoqueMinimo,
                estoqueMaximo: estoqueMaximo,
                quantidadeEstoque: quantidadeEstoque,
                dataCadastro: dataCadastro,
              ),
          withReferenceMapper:
              (p0) =>
                  p0
                      .map(
                        (e) => (
                          e.readTable(table),
                          BaseReferences(db, table, e),
                        ),
                      )
                      .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$ProdutosTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $ProdutosTable,
      Produto,
      $$ProdutosTableFilterComposer,
      $$ProdutosTableOrderingComposer,
      $$ProdutosTableAnnotationComposer,
      $$ProdutosTableCreateCompanionBuilder,
      $$ProdutosTableUpdateCompanionBuilder,
      (Produto, BaseReferences<_$AppDatabase, $ProdutosTable, Produto>),
      Produto,
      PrefetchHooks Function()
    >;
typedef $$NfeReferenciadasTableCreateCompanionBuilder =
    NfeReferenciadasCompanion Function({
      Value<int?> id,
      Value<int?> idNfeCabecalho,
      Value<String?> chaveAcesso,
      Value<String?> chaveCodigoZerado,
    });
typedef $$NfeReferenciadasTableUpdateCompanionBuilder =
    NfeReferenciadasCompanion Function({
      Value<int?> id,
      Value<int?> idNfeCabecalho,
      Value<String?> chaveAcesso,
      Value<String?> chaveCodigoZerado,
    });

class $$NfeReferenciadasTableFilterComposer
    extends Composer<_$AppDatabase, $NfeReferenciadasTable> {
  $$NfeReferenciadasTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idNfeCabecalho => $composableBuilder(
    column: $table.idNfeCabecalho,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get chaveAcesso => $composableBuilder(
    column: $table.chaveAcesso,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get chaveCodigoZerado => $composableBuilder(
    column: $table.chaveCodigoZerado,
    builder: (column) => ColumnFilters(column),
  );
}

class $$NfeReferenciadasTableOrderingComposer
    extends Composer<_$AppDatabase, $NfeReferenciadasTable> {
  $$NfeReferenciadasTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idNfeCabecalho => $composableBuilder(
    column: $table.idNfeCabecalho,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get chaveAcesso => $composableBuilder(
    column: $table.chaveAcesso,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get chaveCodigoZerado => $composableBuilder(
    column: $table.chaveCodigoZerado,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$NfeReferenciadasTableAnnotationComposer
    extends Composer<_$AppDatabase, $NfeReferenciadasTable> {
  $$NfeReferenciadasTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<int> get idNfeCabecalho => $composableBuilder(
    column: $table.idNfeCabecalho,
    builder: (column) => column,
  );

  GeneratedColumn<String> get chaveAcesso => $composableBuilder(
    column: $table.chaveAcesso,
    builder: (column) => column,
  );

  GeneratedColumn<String> get chaveCodigoZerado => $composableBuilder(
    column: $table.chaveCodigoZerado,
    builder: (column) => column,
  );
}

class $$NfeReferenciadasTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $NfeReferenciadasTable,
          NfeReferenciada,
          $$NfeReferenciadasTableFilterComposer,
          $$NfeReferenciadasTableOrderingComposer,
          $$NfeReferenciadasTableAnnotationComposer,
          $$NfeReferenciadasTableCreateCompanionBuilder,
          $$NfeReferenciadasTableUpdateCompanionBuilder,
          (
            NfeReferenciada,
            BaseReferences<
              _$AppDatabase,
              $NfeReferenciadasTable,
              NfeReferenciada
            >,
          ),
          NfeReferenciada,
          PrefetchHooks Function()
        > {
  $$NfeReferenciadasTableTableManager(
    _$AppDatabase db,
    $NfeReferenciadasTable table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer:
              () =>
                  $$NfeReferenciadasTableFilterComposer($db: db, $table: table),
          createOrderingComposer:
              () => $$NfeReferenciadasTableOrderingComposer(
                $db: db,
                $table: table,
              ),
          createComputedFieldComposer:
              () => $$NfeReferenciadasTableAnnotationComposer(
                $db: db,
                $table: table,
              ),
          updateCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeCabecalho = const Value.absent(),
                Value<String?> chaveAcesso = const Value.absent(),
                Value<String?> chaveCodigoZerado = const Value.absent(),
              }) => NfeReferenciadasCompanion(
                id: id,
                idNfeCabecalho: idNfeCabecalho,
                chaveAcesso: chaveAcesso,
                chaveCodigoZerado: chaveCodigoZerado,
              ),
          createCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeCabecalho = const Value.absent(),
                Value<String?> chaveAcesso = const Value.absent(),
                Value<String?> chaveCodigoZerado = const Value.absent(),
              }) => NfeReferenciadasCompanion.insert(
                id: id,
                idNfeCabecalho: idNfeCabecalho,
                chaveAcesso: chaveAcesso,
                chaveCodigoZerado: chaveCodigoZerado,
              ),
          withReferenceMapper:
              (p0) =>
                  p0
                      .map(
                        (e) => (
                          e.readTable(table),
                          BaseReferences(db, table, e),
                        ),
                      )
                      .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$NfeReferenciadasTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $NfeReferenciadasTable,
      NfeReferenciada,
      $$NfeReferenciadasTableFilterComposer,
      $$NfeReferenciadasTableOrderingComposer,
      $$NfeReferenciadasTableAnnotationComposer,
      $$NfeReferenciadasTableCreateCompanionBuilder,
      $$NfeReferenciadasTableUpdateCompanionBuilder,
      (
        NfeReferenciada,
        BaseReferences<_$AppDatabase, $NfeReferenciadasTable, NfeReferenciada>,
      ),
      NfeReferenciada,
      PrefetchHooks Function()
    >;
typedef $$NfeEmitentesTableCreateCompanionBuilder =
    NfeEmitentesCompanion Function({
      Value<int?> id,
      Value<int?> idNfeCabecalho,
      Value<String?> cnpj,
      Value<String?> cpf,
      Value<String?> nome,
      Value<String?> fantasia,
      Value<String?> logradouro,
      Value<String?> numero,
      Value<String?> complemento,
      Value<String?> bairro,
      Value<int?> codigoMunicipio,
      Value<String?> nomeMunicipio,
      Value<String?> uf,
      Value<String?> cep,
      Value<int?> codigoPais,
      Value<String?> nomePais,
      Value<String?> telefone,
      Value<String?> inscricaoEstadual,
      Value<String?> inscricaoEstadualSt,
      Value<String?> inscricaoMunicipal,
      Value<String?> cnae,
      Value<String?> crt,
    });
typedef $$NfeEmitentesTableUpdateCompanionBuilder =
    NfeEmitentesCompanion Function({
      Value<int?> id,
      Value<int?> idNfeCabecalho,
      Value<String?> cnpj,
      Value<String?> cpf,
      Value<String?> nome,
      Value<String?> fantasia,
      Value<String?> logradouro,
      Value<String?> numero,
      Value<String?> complemento,
      Value<String?> bairro,
      Value<int?> codigoMunicipio,
      Value<String?> nomeMunicipio,
      Value<String?> uf,
      Value<String?> cep,
      Value<int?> codigoPais,
      Value<String?> nomePais,
      Value<String?> telefone,
      Value<String?> inscricaoEstadual,
      Value<String?> inscricaoEstadualSt,
      Value<String?> inscricaoMunicipal,
      Value<String?> cnae,
      Value<String?> crt,
    });

class $$NfeEmitentesTableFilterComposer
    extends Composer<_$AppDatabase, $NfeEmitentesTable> {
  $$NfeEmitentesTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idNfeCabecalho => $composableBuilder(
    column: $table.idNfeCabecalho,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get cnpj => $composableBuilder(
    column: $table.cnpj,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get cpf => $composableBuilder(
    column: $table.cpf,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get nome => $composableBuilder(
    column: $table.nome,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get fantasia => $composableBuilder(
    column: $table.fantasia,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get logradouro => $composableBuilder(
    column: $table.logradouro,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get numero => $composableBuilder(
    column: $table.numero,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get complemento => $composableBuilder(
    column: $table.complemento,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get bairro => $composableBuilder(
    column: $table.bairro,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get codigoMunicipio => $composableBuilder(
    column: $table.codigoMunicipio,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get nomeMunicipio => $composableBuilder(
    column: $table.nomeMunicipio,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get uf => $composableBuilder(
    column: $table.uf,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get cep => $composableBuilder(
    column: $table.cep,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get codigoPais => $composableBuilder(
    column: $table.codigoPais,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get nomePais => $composableBuilder(
    column: $table.nomePais,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get telefone => $composableBuilder(
    column: $table.telefone,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get inscricaoEstadual => $composableBuilder(
    column: $table.inscricaoEstadual,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get inscricaoEstadualSt => $composableBuilder(
    column: $table.inscricaoEstadualSt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get inscricaoMunicipal => $composableBuilder(
    column: $table.inscricaoMunicipal,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get cnae => $composableBuilder(
    column: $table.cnae,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get crt => $composableBuilder(
    column: $table.crt,
    builder: (column) => ColumnFilters(column),
  );
}

class $$NfeEmitentesTableOrderingComposer
    extends Composer<_$AppDatabase, $NfeEmitentesTable> {
  $$NfeEmitentesTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idNfeCabecalho => $composableBuilder(
    column: $table.idNfeCabecalho,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get cnpj => $composableBuilder(
    column: $table.cnpj,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get cpf => $composableBuilder(
    column: $table.cpf,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get nome => $composableBuilder(
    column: $table.nome,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get fantasia => $composableBuilder(
    column: $table.fantasia,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get logradouro => $composableBuilder(
    column: $table.logradouro,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get numero => $composableBuilder(
    column: $table.numero,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get complemento => $composableBuilder(
    column: $table.complemento,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get bairro => $composableBuilder(
    column: $table.bairro,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get codigoMunicipio => $composableBuilder(
    column: $table.codigoMunicipio,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get nomeMunicipio => $composableBuilder(
    column: $table.nomeMunicipio,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get uf => $composableBuilder(
    column: $table.uf,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get cep => $composableBuilder(
    column: $table.cep,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get codigoPais => $composableBuilder(
    column: $table.codigoPais,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get nomePais => $composableBuilder(
    column: $table.nomePais,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get telefone => $composableBuilder(
    column: $table.telefone,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get inscricaoEstadual => $composableBuilder(
    column: $table.inscricaoEstadual,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get inscricaoEstadualSt => $composableBuilder(
    column: $table.inscricaoEstadualSt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get inscricaoMunicipal => $composableBuilder(
    column: $table.inscricaoMunicipal,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get cnae => $composableBuilder(
    column: $table.cnae,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get crt => $composableBuilder(
    column: $table.crt,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$NfeEmitentesTableAnnotationComposer
    extends Composer<_$AppDatabase, $NfeEmitentesTable> {
  $$NfeEmitentesTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<int> get idNfeCabecalho => $composableBuilder(
    column: $table.idNfeCabecalho,
    builder: (column) => column,
  );

  GeneratedColumn<String> get cnpj =>
      $composableBuilder(column: $table.cnpj, builder: (column) => column);

  GeneratedColumn<String> get cpf =>
      $composableBuilder(column: $table.cpf, builder: (column) => column);

  GeneratedColumn<String> get nome =>
      $composableBuilder(column: $table.nome, builder: (column) => column);

  GeneratedColumn<String> get fantasia =>
      $composableBuilder(column: $table.fantasia, builder: (column) => column);

  GeneratedColumn<String> get logradouro => $composableBuilder(
    column: $table.logradouro,
    builder: (column) => column,
  );

  GeneratedColumn<String> get numero =>
      $composableBuilder(column: $table.numero, builder: (column) => column);

  GeneratedColumn<String> get complemento => $composableBuilder(
    column: $table.complemento,
    builder: (column) => column,
  );

  GeneratedColumn<String> get bairro =>
      $composableBuilder(column: $table.bairro, builder: (column) => column);

  GeneratedColumn<int> get codigoMunicipio => $composableBuilder(
    column: $table.codigoMunicipio,
    builder: (column) => column,
  );

  GeneratedColumn<String> get nomeMunicipio => $composableBuilder(
    column: $table.nomeMunicipio,
    builder: (column) => column,
  );

  GeneratedColumn<String> get uf =>
      $composableBuilder(column: $table.uf, builder: (column) => column);

  GeneratedColumn<String> get cep =>
      $composableBuilder(column: $table.cep, builder: (column) => column);

  GeneratedColumn<int> get codigoPais => $composableBuilder(
    column: $table.codigoPais,
    builder: (column) => column,
  );

  GeneratedColumn<String> get nomePais =>
      $composableBuilder(column: $table.nomePais, builder: (column) => column);

  GeneratedColumn<String> get telefone =>
      $composableBuilder(column: $table.telefone, builder: (column) => column);

  GeneratedColumn<String> get inscricaoEstadual => $composableBuilder(
    column: $table.inscricaoEstadual,
    builder: (column) => column,
  );

  GeneratedColumn<String> get inscricaoEstadualSt => $composableBuilder(
    column: $table.inscricaoEstadualSt,
    builder: (column) => column,
  );

  GeneratedColumn<String> get inscricaoMunicipal => $composableBuilder(
    column: $table.inscricaoMunicipal,
    builder: (column) => column,
  );

  GeneratedColumn<String> get cnae =>
      $composableBuilder(column: $table.cnae, builder: (column) => column);

  GeneratedColumn<String> get crt =>
      $composableBuilder(column: $table.crt, builder: (column) => column);
}

class $$NfeEmitentesTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $NfeEmitentesTable,
          NfeEmitente,
          $$NfeEmitentesTableFilterComposer,
          $$NfeEmitentesTableOrderingComposer,
          $$NfeEmitentesTableAnnotationComposer,
          $$NfeEmitentesTableCreateCompanionBuilder,
          $$NfeEmitentesTableUpdateCompanionBuilder,
          (
            NfeEmitente,
            BaseReferences<_$AppDatabase, $NfeEmitentesTable, NfeEmitente>,
          ),
          NfeEmitente,
          PrefetchHooks Function()
        > {
  $$NfeEmitentesTableTableManager(_$AppDatabase db, $NfeEmitentesTable table)
    : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer:
              () => $$NfeEmitentesTableFilterComposer($db: db, $table: table),
          createOrderingComposer:
              () => $$NfeEmitentesTableOrderingComposer($db: db, $table: table),
          createComputedFieldComposer:
              () =>
                  $$NfeEmitentesTableAnnotationComposer($db: db, $table: table),
          updateCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeCabecalho = const Value.absent(),
                Value<String?> cnpj = const Value.absent(),
                Value<String?> cpf = const Value.absent(),
                Value<String?> nome = const Value.absent(),
                Value<String?> fantasia = const Value.absent(),
                Value<String?> logradouro = const Value.absent(),
                Value<String?> numero = const Value.absent(),
                Value<String?> complemento = const Value.absent(),
                Value<String?> bairro = const Value.absent(),
                Value<int?> codigoMunicipio = const Value.absent(),
                Value<String?> nomeMunicipio = const Value.absent(),
                Value<String?> uf = const Value.absent(),
                Value<String?> cep = const Value.absent(),
                Value<int?> codigoPais = const Value.absent(),
                Value<String?> nomePais = const Value.absent(),
                Value<String?> telefone = const Value.absent(),
                Value<String?> inscricaoEstadual = const Value.absent(),
                Value<String?> inscricaoEstadualSt = const Value.absent(),
                Value<String?> inscricaoMunicipal = const Value.absent(),
                Value<String?> cnae = const Value.absent(),
                Value<String?> crt = const Value.absent(),
              }) => NfeEmitentesCompanion(
                id: id,
                idNfeCabecalho: idNfeCabecalho,
                cnpj: cnpj,
                cpf: cpf,
                nome: nome,
                fantasia: fantasia,
                logradouro: logradouro,
                numero: numero,
                complemento: complemento,
                bairro: bairro,
                codigoMunicipio: codigoMunicipio,
                nomeMunicipio: nomeMunicipio,
                uf: uf,
                cep: cep,
                codigoPais: codigoPais,
                nomePais: nomePais,
                telefone: telefone,
                inscricaoEstadual: inscricaoEstadual,
                inscricaoEstadualSt: inscricaoEstadualSt,
                inscricaoMunicipal: inscricaoMunicipal,
                cnae: cnae,
                crt: crt,
              ),
          createCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeCabecalho = const Value.absent(),
                Value<String?> cnpj = const Value.absent(),
                Value<String?> cpf = const Value.absent(),
                Value<String?> nome = const Value.absent(),
                Value<String?> fantasia = const Value.absent(),
                Value<String?> logradouro = const Value.absent(),
                Value<String?> numero = const Value.absent(),
                Value<String?> complemento = const Value.absent(),
                Value<String?> bairro = const Value.absent(),
                Value<int?> codigoMunicipio = const Value.absent(),
                Value<String?> nomeMunicipio = const Value.absent(),
                Value<String?> uf = const Value.absent(),
                Value<String?> cep = const Value.absent(),
                Value<int?> codigoPais = const Value.absent(),
                Value<String?> nomePais = const Value.absent(),
                Value<String?> telefone = const Value.absent(),
                Value<String?> inscricaoEstadual = const Value.absent(),
                Value<String?> inscricaoEstadualSt = const Value.absent(),
                Value<String?> inscricaoMunicipal = const Value.absent(),
                Value<String?> cnae = const Value.absent(),
                Value<String?> crt = const Value.absent(),
              }) => NfeEmitentesCompanion.insert(
                id: id,
                idNfeCabecalho: idNfeCabecalho,
                cnpj: cnpj,
                cpf: cpf,
                nome: nome,
                fantasia: fantasia,
                logradouro: logradouro,
                numero: numero,
                complemento: complemento,
                bairro: bairro,
                codigoMunicipio: codigoMunicipio,
                nomeMunicipio: nomeMunicipio,
                uf: uf,
                cep: cep,
                codigoPais: codigoPais,
                nomePais: nomePais,
                telefone: telefone,
                inscricaoEstadual: inscricaoEstadual,
                inscricaoEstadualSt: inscricaoEstadualSt,
                inscricaoMunicipal: inscricaoMunicipal,
                cnae: cnae,
                crt: crt,
              ),
          withReferenceMapper:
              (p0) =>
                  p0
                      .map(
                        (e) => (
                          e.readTable(table),
                          BaseReferences(db, table, e),
                        ),
                      )
                      .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$NfeEmitentesTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $NfeEmitentesTable,
      NfeEmitente,
      $$NfeEmitentesTableFilterComposer,
      $$NfeEmitentesTableOrderingComposer,
      $$NfeEmitentesTableAnnotationComposer,
      $$NfeEmitentesTableCreateCompanionBuilder,
      $$NfeEmitentesTableUpdateCompanionBuilder,
      (
        NfeEmitente,
        BaseReferences<_$AppDatabase, $NfeEmitentesTable, NfeEmitente>,
      ),
      NfeEmitente,
      PrefetchHooks Function()
    >;
typedef $$NfeDestinatariosTableCreateCompanionBuilder =
    NfeDestinatariosCompanion Function({
      Value<int?> id,
      Value<int?> idNfeCabecalho,
      Value<String?> cnpj,
      Value<String?> cpf,
      Value<String?> estrangeiroIdentificacao,
      Value<String?> nome,
      Value<String?> logradouro,
      Value<String?> numero,
      Value<String?> complemento,
      Value<String?> bairro,
      Value<int?> codigoMunicipio,
      Value<String?> nomeMunicipio,
      Value<String?> uf,
      Value<String?> cep,
      Value<int?> codigoPais,
      Value<String?> nomePais,
      Value<String?> telefone,
      Value<String?> indicadorIe,
      Value<String?> inscricaoEstadual,
      Value<int?> suframa,
      Value<String?> inscricaoMunicipal,
      Value<String?> email,
    });
typedef $$NfeDestinatariosTableUpdateCompanionBuilder =
    NfeDestinatariosCompanion Function({
      Value<int?> id,
      Value<int?> idNfeCabecalho,
      Value<String?> cnpj,
      Value<String?> cpf,
      Value<String?> estrangeiroIdentificacao,
      Value<String?> nome,
      Value<String?> logradouro,
      Value<String?> numero,
      Value<String?> complemento,
      Value<String?> bairro,
      Value<int?> codigoMunicipio,
      Value<String?> nomeMunicipio,
      Value<String?> uf,
      Value<String?> cep,
      Value<int?> codigoPais,
      Value<String?> nomePais,
      Value<String?> telefone,
      Value<String?> indicadorIe,
      Value<String?> inscricaoEstadual,
      Value<int?> suframa,
      Value<String?> inscricaoMunicipal,
      Value<String?> email,
    });

class $$NfeDestinatariosTableFilterComposer
    extends Composer<_$AppDatabase, $NfeDestinatariosTable> {
  $$NfeDestinatariosTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idNfeCabecalho => $composableBuilder(
    column: $table.idNfeCabecalho,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get cnpj => $composableBuilder(
    column: $table.cnpj,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get cpf => $composableBuilder(
    column: $table.cpf,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get estrangeiroIdentificacao => $composableBuilder(
    column: $table.estrangeiroIdentificacao,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get nome => $composableBuilder(
    column: $table.nome,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get logradouro => $composableBuilder(
    column: $table.logradouro,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get numero => $composableBuilder(
    column: $table.numero,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get complemento => $composableBuilder(
    column: $table.complemento,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get bairro => $composableBuilder(
    column: $table.bairro,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get codigoMunicipio => $composableBuilder(
    column: $table.codigoMunicipio,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get nomeMunicipio => $composableBuilder(
    column: $table.nomeMunicipio,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get uf => $composableBuilder(
    column: $table.uf,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get cep => $composableBuilder(
    column: $table.cep,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get codigoPais => $composableBuilder(
    column: $table.codigoPais,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get nomePais => $composableBuilder(
    column: $table.nomePais,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get telefone => $composableBuilder(
    column: $table.telefone,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get indicadorIe => $composableBuilder(
    column: $table.indicadorIe,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get inscricaoEstadual => $composableBuilder(
    column: $table.inscricaoEstadual,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get suframa => $composableBuilder(
    column: $table.suframa,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get inscricaoMunicipal => $composableBuilder(
    column: $table.inscricaoMunicipal,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get email => $composableBuilder(
    column: $table.email,
    builder: (column) => ColumnFilters(column),
  );
}

class $$NfeDestinatariosTableOrderingComposer
    extends Composer<_$AppDatabase, $NfeDestinatariosTable> {
  $$NfeDestinatariosTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idNfeCabecalho => $composableBuilder(
    column: $table.idNfeCabecalho,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get cnpj => $composableBuilder(
    column: $table.cnpj,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get cpf => $composableBuilder(
    column: $table.cpf,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get estrangeiroIdentificacao => $composableBuilder(
    column: $table.estrangeiroIdentificacao,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get nome => $composableBuilder(
    column: $table.nome,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get logradouro => $composableBuilder(
    column: $table.logradouro,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get numero => $composableBuilder(
    column: $table.numero,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get complemento => $composableBuilder(
    column: $table.complemento,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get bairro => $composableBuilder(
    column: $table.bairro,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get codigoMunicipio => $composableBuilder(
    column: $table.codigoMunicipio,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get nomeMunicipio => $composableBuilder(
    column: $table.nomeMunicipio,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get uf => $composableBuilder(
    column: $table.uf,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get cep => $composableBuilder(
    column: $table.cep,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get codigoPais => $composableBuilder(
    column: $table.codigoPais,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get nomePais => $composableBuilder(
    column: $table.nomePais,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get telefone => $composableBuilder(
    column: $table.telefone,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get indicadorIe => $composableBuilder(
    column: $table.indicadorIe,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get inscricaoEstadual => $composableBuilder(
    column: $table.inscricaoEstadual,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get suframa => $composableBuilder(
    column: $table.suframa,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get inscricaoMunicipal => $composableBuilder(
    column: $table.inscricaoMunicipal,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get email => $composableBuilder(
    column: $table.email,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$NfeDestinatariosTableAnnotationComposer
    extends Composer<_$AppDatabase, $NfeDestinatariosTable> {
  $$NfeDestinatariosTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<int> get idNfeCabecalho => $composableBuilder(
    column: $table.idNfeCabecalho,
    builder: (column) => column,
  );

  GeneratedColumn<String> get cnpj =>
      $composableBuilder(column: $table.cnpj, builder: (column) => column);

  GeneratedColumn<String> get cpf =>
      $composableBuilder(column: $table.cpf, builder: (column) => column);

  GeneratedColumn<String> get estrangeiroIdentificacao => $composableBuilder(
    column: $table.estrangeiroIdentificacao,
    builder: (column) => column,
  );

  GeneratedColumn<String> get nome =>
      $composableBuilder(column: $table.nome, builder: (column) => column);

  GeneratedColumn<String> get logradouro => $composableBuilder(
    column: $table.logradouro,
    builder: (column) => column,
  );

  GeneratedColumn<String> get numero =>
      $composableBuilder(column: $table.numero, builder: (column) => column);

  GeneratedColumn<String> get complemento => $composableBuilder(
    column: $table.complemento,
    builder: (column) => column,
  );

  GeneratedColumn<String> get bairro =>
      $composableBuilder(column: $table.bairro, builder: (column) => column);

  GeneratedColumn<int> get codigoMunicipio => $composableBuilder(
    column: $table.codigoMunicipio,
    builder: (column) => column,
  );

  GeneratedColumn<String> get nomeMunicipio => $composableBuilder(
    column: $table.nomeMunicipio,
    builder: (column) => column,
  );

  GeneratedColumn<String> get uf =>
      $composableBuilder(column: $table.uf, builder: (column) => column);

  GeneratedColumn<String> get cep =>
      $composableBuilder(column: $table.cep, builder: (column) => column);

  GeneratedColumn<int> get codigoPais => $composableBuilder(
    column: $table.codigoPais,
    builder: (column) => column,
  );

  GeneratedColumn<String> get nomePais =>
      $composableBuilder(column: $table.nomePais, builder: (column) => column);

  GeneratedColumn<String> get telefone =>
      $composableBuilder(column: $table.telefone, builder: (column) => column);

  GeneratedColumn<String> get indicadorIe => $composableBuilder(
    column: $table.indicadorIe,
    builder: (column) => column,
  );

  GeneratedColumn<String> get inscricaoEstadual => $composableBuilder(
    column: $table.inscricaoEstadual,
    builder: (column) => column,
  );

  GeneratedColumn<int> get suframa =>
      $composableBuilder(column: $table.suframa, builder: (column) => column);

  GeneratedColumn<String> get inscricaoMunicipal => $composableBuilder(
    column: $table.inscricaoMunicipal,
    builder: (column) => column,
  );

  GeneratedColumn<String> get email =>
      $composableBuilder(column: $table.email, builder: (column) => column);
}

class $$NfeDestinatariosTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $NfeDestinatariosTable,
          NfeDestinatario,
          $$NfeDestinatariosTableFilterComposer,
          $$NfeDestinatariosTableOrderingComposer,
          $$NfeDestinatariosTableAnnotationComposer,
          $$NfeDestinatariosTableCreateCompanionBuilder,
          $$NfeDestinatariosTableUpdateCompanionBuilder,
          (
            NfeDestinatario,
            BaseReferences<
              _$AppDatabase,
              $NfeDestinatariosTable,
              NfeDestinatario
            >,
          ),
          NfeDestinatario,
          PrefetchHooks Function()
        > {
  $$NfeDestinatariosTableTableManager(
    _$AppDatabase db,
    $NfeDestinatariosTable table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer:
              () =>
                  $$NfeDestinatariosTableFilterComposer($db: db, $table: table),
          createOrderingComposer:
              () => $$NfeDestinatariosTableOrderingComposer(
                $db: db,
                $table: table,
              ),
          createComputedFieldComposer:
              () => $$NfeDestinatariosTableAnnotationComposer(
                $db: db,
                $table: table,
              ),
          updateCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeCabecalho = const Value.absent(),
                Value<String?> cnpj = const Value.absent(),
                Value<String?> cpf = const Value.absent(),
                Value<String?> estrangeiroIdentificacao = const Value.absent(),
                Value<String?> nome = const Value.absent(),
                Value<String?> logradouro = const Value.absent(),
                Value<String?> numero = const Value.absent(),
                Value<String?> complemento = const Value.absent(),
                Value<String?> bairro = const Value.absent(),
                Value<int?> codigoMunicipio = const Value.absent(),
                Value<String?> nomeMunicipio = const Value.absent(),
                Value<String?> uf = const Value.absent(),
                Value<String?> cep = const Value.absent(),
                Value<int?> codigoPais = const Value.absent(),
                Value<String?> nomePais = const Value.absent(),
                Value<String?> telefone = const Value.absent(),
                Value<String?> indicadorIe = const Value.absent(),
                Value<String?> inscricaoEstadual = const Value.absent(),
                Value<int?> suframa = const Value.absent(),
                Value<String?> inscricaoMunicipal = const Value.absent(),
                Value<String?> email = const Value.absent(),
              }) => NfeDestinatariosCompanion(
                id: id,
                idNfeCabecalho: idNfeCabecalho,
                cnpj: cnpj,
                cpf: cpf,
                estrangeiroIdentificacao: estrangeiroIdentificacao,
                nome: nome,
                logradouro: logradouro,
                numero: numero,
                complemento: complemento,
                bairro: bairro,
                codigoMunicipio: codigoMunicipio,
                nomeMunicipio: nomeMunicipio,
                uf: uf,
                cep: cep,
                codigoPais: codigoPais,
                nomePais: nomePais,
                telefone: telefone,
                indicadorIe: indicadorIe,
                inscricaoEstadual: inscricaoEstadual,
                suframa: suframa,
                inscricaoMunicipal: inscricaoMunicipal,
                email: email,
              ),
          createCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeCabecalho = const Value.absent(),
                Value<String?> cnpj = const Value.absent(),
                Value<String?> cpf = const Value.absent(),
                Value<String?> estrangeiroIdentificacao = const Value.absent(),
                Value<String?> nome = const Value.absent(),
                Value<String?> logradouro = const Value.absent(),
                Value<String?> numero = const Value.absent(),
                Value<String?> complemento = const Value.absent(),
                Value<String?> bairro = const Value.absent(),
                Value<int?> codigoMunicipio = const Value.absent(),
                Value<String?> nomeMunicipio = const Value.absent(),
                Value<String?> uf = const Value.absent(),
                Value<String?> cep = const Value.absent(),
                Value<int?> codigoPais = const Value.absent(),
                Value<String?> nomePais = const Value.absent(),
                Value<String?> telefone = const Value.absent(),
                Value<String?> indicadorIe = const Value.absent(),
                Value<String?> inscricaoEstadual = const Value.absent(),
                Value<int?> suframa = const Value.absent(),
                Value<String?> inscricaoMunicipal = const Value.absent(),
                Value<String?> email = const Value.absent(),
              }) => NfeDestinatariosCompanion.insert(
                id: id,
                idNfeCabecalho: idNfeCabecalho,
                cnpj: cnpj,
                cpf: cpf,
                estrangeiroIdentificacao: estrangeiroIdentificacao,
                nome: nome,
                logradouro: logradouro,
                numero: numero,
                complemento: complemento,
                bairro: bairro,
                codigoMunicipio: codigoMunicipio,
                nomeMunicipio: nomeMunicipio,
                uf: uf,
                cep: cep,
                codigoPais: codigoPais,
                nomePais: nomePais,
                telefone: telefone,
                indicadorIe: indicadorIe,
                inscricaoEstadual: inscricaoEstadual,
                suframa: suframa,
                inscricaoMunicipal: inscricaoMunicipal,
                email: email,
              ),
          withReferenceMapper:
              (p0) =>
                  p0
                      .map(
                        (e) => (
                          e.readTable(table),
                          BaseReferences(db, table, e),
                        ),
                      )
                      .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$NfeDestinatariosTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $NfeDestinatariosTable,
      NfeDestinatario,
      $$NfeDestinatariosTableFilterComposer,
      $$NfeDestinatariosTableOrderingComposer,
      $$NfeDestinatariosTableAnnotationComposer,
      $$NfeDestinatariosTableCreateCompanionBuilder,
      $$NfeDestinatariosTableUpdateCompanionBuilder,
      (
        NfeDestinatario,
        BaseReferences<_$AppDatabase, $NfeDestinatariosTable, NfeDestinatario>,
      ),
      NfeDestinatario,
      PrefetchHooks Function()
    >;
typedef $$NfeLocalRetiradasTableCreateCompanionBuilder =
    NfeLocalRetiradasCompanion Function({
      Value<int?> id,
      Value<int?> idNfeCabecalho,
      Value<String?> cnpj,
      Value<String?> cpf,
      Value<String?> nomeExpedidor,
      Value<String?> logradouro,
      Value<String?> numero,
      Value<String?> complemento,
      Value<String?> bairro,
      Value<int?> codigoMunicipio,
      Value<String?> nomeMunicipio,
      Value<String?> uf,
      Value<String?> cep,
      Value<int?> codigoPais,
      Value<String?> nomePais,
      Value<String?> telefone,
      Value<String?> email,
      Value<String?> inscricaoEstadual,
    });
typedef $$NfeLocalRetiradasTableUpdateCompanionBuilder =
    NfeLocalRetiradasCompanion Function({
      Value<int?> id,
      Value<int?> idNfeCabecalho,
      Value<String?> cnpj,
      Value<String?> cpf,
      Value<String?> nomeExpedidor,
      Value<String?> logradouro,
      Value<String?> numero,
      Value<String?> complemento,
      Value<String?> bairro,
      Value<int?> codigoMunicipio,
      Value<String?> nomeMunicipio,
      Value<String?> uf,
      Value<String?> cep,
      Value<int?> codigoPais,
      Value<String?> nomePais,
      Value<String?> telefone,
      Value<String?> email,
      Value<String?> inscricaoEstadual,
    });

class $$NfeLocalRetiradasTableFilterComposer
    extends Composer<_$AppDatabase, $NfeLocalRetiradasTable> {
  $$NfeLocalRetiradasTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idNfeCabecalho => $composableBuilder(
    column: $table.idNfeCabecalho,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get cnpj => $composableBuilder(
    column: $table.cnpj,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get cpf => $composableBuilder(
    column: $table.cpf,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get nomeExpedidor => $composableBuilder(
    column: $table.nomeExpedidor,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get logradouro => $composableBuilder(
    column: $table.logradouro,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get numero => $composableBuilder(
    column: $table.numero,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get complemento => $composableBuilder(
    column: $table.complemento,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get bairro => $composableBuilder(
    column: $table.bairro,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get codigoMunicipio => $composableBuilder(
    column: $table.codigoMunicipio,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get nomeMunicipio => $composableBuilder(
    column: $table.nomeMunicipio,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get uf => $composableBuilder(
    column: $table.uf,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get cep => $composableBuilder(
    column: $table.cep,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get codigoPais => $composableBuilder(
    column: $table.codigoPais,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get nomePais => $composableBuilder(
    column: $table.nomePais,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get telefone => $composableBuilder(
    column: $table.telefone,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get email => $composableBuilder(
    column: $table.email,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get inscricaoEstadual => $composableBuilder(
    column: $table.inscricaoEstadual,
    builder: (column) => ColumnFilters(column),
  );
}

class $$NfeLocalRetiradasTableOrderingComposer
    extends Composer<_$AppDatabase, $NfeLocalRetiradasTable> {
  $$NfeLocalRetiradasTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idNfeCabecalho => $composableBuilder(
    column: $table.idNfeCabecalho,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get cnpj => $composableBuilder(
    column: $table.cnpj,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get cpf => $composableBuilder(
    column: $table.cpf,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get nomeExpedidor => $composableBuilder(
    column: $table.nomeExpedidor,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get logradouro => $composableBuilder(
    column: $table.logradouro,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get numero => $composableBuilder(
    column: $table.numero,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get complemento => $composableBuilder(
    column: $table.complemento,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get bairro => $composableBuilder(
    column: $table.bairro,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get codigoMunicipio => $composableBuilder(
    column: $table.codigoMunicipio,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get nomeMunicipio => $composableBuilder(
    column: $table.nomeMunicipio,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get uf => $composableBuilder(
    column: $table.uf,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get cep => $composableBuilder(
    column: $table.cep,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get codigoPais => $composableBuilder(
    column: $table.codigoPais,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get nomePais => $composableBuilder(
    column: $table.nomePais,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get telefone => $composableBuilder(
    column: $table.telefone,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get email => $composableBuilder(
    column: $table.email,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get inscricaoEstadual => $composableBuilder(
    column: $table.inscricaoEstadual,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$NfeLocalRetiradasTableAnnotationComposer
    extends Composer<_$AppDatabase, $NfeLocalRetiradasTable> {
  $$NfeLocalRetiradasTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<int> get idNfeCabecalho => $composableBuilder(
    column: $table.idNfeCabecalho,
    builder: (column) => column,
  );

  GeneratedColumn<String> get cnpj =>
      $composableBuilder(column: $table.cnpj, builder: (column) => column);

  GeneratedColumn<String> get cpf =>
      $composableBuilder(column: $table.cpf, builder: (column) => column);

  GeneratedColumn<String> get nomeExpedidor => $composableBuilder(
    column: $table.nomeExpedidor,
    builder: (column) => column,
  );

  GeneratedColumn<String> get logradouro => $composableBuilder(
    column: $table.logradouro,
    builder: (column) => column,
  );

  GeneratedColumn<String> get numero =>
      $composableBuilder(column: $table.numero, builder: (column) => column);

  GeneratedColumn<String> get complemento => $composableBuilder(
    column: $table.complemento,
    builder: (column) => column,
  );

  GeneratedColumn<String> get bairro =>
      $composableBuilder(column: $table.bairro, builder: (column) => column);

  GeneratedColumn<int> get codigoMunicipio => $composableBuilder(
    column: $table.codigoMunicipio,
    builder: (column) => column,
  );

  GeneratedColumn<String> get nomeMunicipio => $composableBuilder(
    column: $table.nomeMunicipio,
    builder: (column) => column,
  );

  GeneratedColumn<String> get uf =>
      $composableBuilder(column: $table.uf, builder: (column) => column);

  GeneratedColumn<String> get cep =>
      $composableBuilder(column: $table.cep, builder: (column) => column);

  GeneratedColumn<int> get codigoPais => $composableBuilder(
    column: $table.codigoPais,
    builder: (column) => column,
  );

  GeneratedColumn<String> get nomePais =>
      $composableBuilder(column: $table.nomePais, builder: (column) => column);

  GeneratedColumn<String> get telefone =>
      $composableBuilder(column: $table.telefone, builder: (column) => column);

  GeneratedColumn<String> get email =>
      $composableBuilder(column: $table.email, builder: (column) => column);

  GeneratedColumn<String> get inscricaoEstadual => $composableBuilder(
    column: $table.inscricaoEstadual,
    builder: (column) => column,
  );
}

class $$NfeLocalRetiradasTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $NfeLocalRetiradasTable,
          NfeLocalRetirada,
          $$NfeLocalRetiradasTableFilterComposer,
          $$NfeLocalRetiradasTableOrderingComposer,
          $$NfeLocalRetiradasTableAnnotationComposer,
          $$NfeLocalRetiradasTableCreateCompanionBuilder,
          $$NfeLocalRetiradasTableUpdateCompanionBuilder,
          (
            NfeLocalRetirada,
            BaseReferences<
              _$AppDatabase,
              $NfeLocalRetiradasTable,
              NfeLocalRetirada
            >,
          ),
          NfeLocalRetirada,
          PrefetchHooks Function()
        > {
  $$NfeLocalRetiradasTableTableManager(
    _$AppDatabase db,
    $NfeLocalRetiradasTable table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer:
              () => $$NfeLocalRetiradasTableFilterComposer(
                $db: db,
                $table: table,
              ),
          createOrderingComposer:
              () => $$NfeLocalRetiradasTableOrderingComposer(
                $db: db,
                $table: table,
              ),
          createComputedFieldComposer:
              () => $$NfeLocalRetiradasTableAnnotationComposer(
                $db: db,
                $table: table,
              ),
          updateCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeCabecalho = const Value.absent(),
                Value<String?> cnpj = const Value.absent(),
                Value<String?> cpf = const Value.absent(),
                Value<String?> nomeExpedidor = const Value.absent(),
                Value<String?> logradouro = const Value.absent(),
                Value<String?> numero = const Value.absent(),
                Value<String?> complemento = const Value.absent(),
                Value<String?> bairro = const Value.absent(),
                Value<int?> codigoMunicipio = const Value.absent(),
                Value<String?> nomeMunicipio = const Value.absent(),
                Value<String?> uf = const Value.absent(),
                Value<String?> cep = const Value.absent(),
                Value<int?> codigoPais = const Value.absent(),
                Value<String?> nomePais = const Value.absent(),
                Value<String?> telefone = const Value.absent(),
                Value<String?> email = const Value.absent(),
                Value<String?> inscricaoEstadual = const Value.absent(),
              }) => NfeLocalRetiradasCompanion(
                id: id,
                idNfeCabecalho: idNfeCabecalho,
                cnpj: cnpj,
                cpf: cpf,
                nomeExpedidor: nomeExpedidor,
                logradouro: logradouro,
                numero: numero,
                complemento: complemento,
                bairro: bairro,
                codigoMunicipio: codigoMunicipio,
                nomeMunicipio: nomeMunicipio,
                uf: uf,
                cep: cep,
                codigoPais: codigoPais,
                nomePais: nomePais,
                telefone: telefone,
                email: email,
                inscricaoEstadual: inscricaoEstadual,
              ),
          createCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeCabecalho = const Value.absent(),
                Value<String?> cnpj = const Value.absent(),
                Value<String?> cpf = const Value.absent(),
                Value<String?> nomeExpedidor = const Value.absent(),
                Value<String?> logradouro = const Value.absent(),
                Value<String?> numero = const Value.absent(),
                Value<String?> complemento = const Value.absent(),
                Value<String?> bairro = const Value.absent(),
                Value<int?> codigoMunicipio = const Value.absent(),
                Value<String?> nomeMunicipio = const Value.absent(),
                Value<String?> uf = const Value.absent(),
                Value<String?> cep = const Value.absent(),
                Value<int?> codigoPais = const Value.absent(),
                Value<String?> nomePais = const Value.absent(),
                Value<String?> telefone = const Value.absent(),
                Value<String?> email = const Value.absent(),
                Value<String?> inscricaoEstadual = const Value.absent(),
              }) => NfeLocalRetiradasCompanion.insert(
                id: id,
                idNfeCabecalho: idNfeCabecalho,
                cnpj: cnpj,
                cpf: cpf,
                nomeExpedidor: nomeExpedidor,
                logradouro: logradouro,
                numero: numero,
                complemento: complemento,
                bairro: bairro,
                codigoMunicipio: codigoMunicipio,
                nomeMunicipio: nomeMunicipio,
                uf: uf,
                cep: cep,
                codigoPais: codigoPais,
                nomePais: nomePais,
                telefone: telefone,
                email: email,
                inscricaoEstadual: inscricaoEstadual,
              ),
          withReferenceMapper:
              (p0) =>
                  p0
                      .map(
                        (e) => (
                          e.readTable(table),
                          BaseReferences(db, table, e),
                        ),
                      )
                      .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$NfeLocalRetiradasTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $NfeLocalRetiradasTable,
      NfeLocalRetirada,
      $$NfeLocalRetiradasTableFilterComposer,
      $$NfeLocalRetiradasTableOrderingComposer,
      $$NfeLocalRetiradasTableAnnotationComposer,
      $$NfeLocalRetiradasTableCreateCompanionBuilder,
      $$NfeLocalRetiradasTableUpdateCompanionBuilder,
      (
        NfeLocalRetirada,
        BaseReferences<
          _$AppDatabase,
          $NfeLocalRetiradasTable,
          NfeLocalRetirada
        >,
      ),
      NfeLocalRetirada,
      PrefetchHooks Function()
    >;
typedef $$NfeLocalEntregasTableCreateCompanionBuilder =
    NfeLocalEntregasCompanion Function({
      Value<int?> id,
      Value<int?> idNfeCabecalho,
      Value<String?> cnpj,
      Value<String?> cpf,
      Value<String?> nomeRecebedor,
      Value<String?> logradouro,
      Value<String?> numero,
      Value<String?> complemento,
      Value<String?> bairro,
      Value<int?> codigoMunicipio,
      Value<String?> nomeMunicipio,
      Value<String?> uf,
      Value<String?> cep,
      Value<int?> codigoPais,
      Value<String?> nomePais,
      Value<String?> telefone,
      Value<String?> email,
      Value<String?> inscricaoEstadual,
    });
typedef $$NfeLocalEntregasTableUpdateCompanionBuilder =
    NfeLocalEntregasCompanion Function({
      Value<int?> id,
      Value<int?> idNfeCabecalho,
      Value<String?> cnpj,
      Value<String?> cpf,
      Value<String?> nomeRecebedor,
      Value<String?> logradouro,
      Value<String?> numero,
      Value<String?> complemento,
      Value<String?> bairro,
      Value<int?> codigoMunicipio,
      Value<String?> nomeMunicipio,
      Value<String?> uf,
      Value<String?> cep,
      Value<int?> codigoPais,
      Value<String?> nomePais,
      Value<String?> telefone,
      Value<String?> email,
      Value<String?> inscricaoEstadual,
    });

class $$NfeLocalEntregasTableFilterComposer
    extends Composer<_$AppDatabase, $NfeLocalEntregasTable> {
  $$NfeLocalEntregasTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idNfeCabecalho => $composableBuilder(
    column: $table.idNfeCabecalho,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get cnpj => $composableBuilder(
    column: $table.cnpj,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get cpf => $composableBuilder(
    column: $table.cpf,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get nomeRecebedor => $composableBuilder(
    column: $table.nomeRecebedor,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get logradouro => $composableBuilder(
    column: $table.logradouro,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get numero => $composableBuilder(
    column: $table.numero,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get complemento => $composableBuilder(
    column: $table.complemento,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get bairro => $composableBuilder(
    column: $table.bairro,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get codigoMunicipio => $composableBuilder(
    column: $table.codigoMunicipio,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get nomeMunicipio => $composableBuilder(
    column: $table.nomeMunicipio,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get uf => $composableBuilder(
    column: $table.uf,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get cep => $composableBuilder(
    column: $table.cep,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get codigoPais => $composableBuilder(
    column: $table.codigoPais,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get nomePais => $composableBuilder(
    column: $table.nomePais,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get telefone => $composableBuilder(
    column: $table.telefone,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get email => $composableBuilder(
    column: $table.email,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get inscricaoEstadual => $composableBuilder(
    column: $table.inscricaoEstadual,
    builder: (column) => ColumnFilters(column),
  );
}

class $$NfeLocalEntregasTableOrderingComposer
    extends Composer<_$AppDatabase, $NfeLocalEntregasTable> {
  $$NfeLocalEntregasTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idNfeCabecalho => $composableBuilder(
    column: $table.idNfeCabecalho,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get cnpj => $composableBuilder(
    column: $table.cnpj,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get cpf => $composableBuilder(
    column: $table.cpf,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get nomeRecebedor => $composableBuilder(
    column: $table.nomeRecebedor,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get logradouro => $composableBuilder(
    column: $table.logradouro,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get numero => $composableBuilder(
    column: $table.numero,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get complemento => $composableBuilder(
    column: $table.complemento,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get bairro => $composableBuilder(
    column: $table.bairro,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get codigoMunicipio => $composableBuilder(
    column: $table.codigoMunicipio,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get nomeMunicipio => $composableBuilder(
    column: $table.nomeMunicipio,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get uf => $composableBuilder(
    column: $table.uf,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get cep => $composableBuilder(
    column: $table.cep,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get codigoPais => $composableBuilder(
    column: $table.codigoPais,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get nomePais => $composableBuilder(
    column: $table.nomePais,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get telefone => $composableBuilder(
    column: $table.telefone,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get email => $composableBuilder(
    column: $table.email,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get inscricaoEstadual => $composableBuilder(
    column: $table.inscricaoEstadual,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$NfeLocalEntregasTableAnnotationComposer
    extends Composer<_$AppDatabase, $NfeLocalEntregasTable> {
  $$NfeLocalEntregasTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<int> get idNfeCabecalho => $composableBuilder(
    column: $table.idNfeCabecalho,
    builder: (column) => column,
  );

  GeneratedColumn<String> get cnpj =>
      $composableBuilder(column: $table.cnpj, builder: (column) => column);

  GeneratedColumn<String> get cpf =>
      $composableBuilder(column: $table.cpf, builder: (column) => column);

  GeneratedColumn<String> get nomeRecebedor => $composableBuilder(
    column: $table.nomeRecebedor,
    builder: (column) => column,
  );

  GeneratedColumn<String> get logradouro => $composableBuilder(
    column: $table.logradouro,
    builder: (column) => column,
  );

  GeneratedColumn<String> get numero =>
      $composableBuilder(column: $table.numero, builder: (column) => column);

  GeneratedColumn<String> get complemento => $composableBuilder(
    column: $table.complemento,
    builder: (column) => column,
  );

  GeneratedColumn<String> get bairro =>
      $composableBuilder(column: $table.bairro, builder: (column) => column);

  GeneratedColumn<int> get codigoMunicipio => $composableBuilder(
    column: $table.codigoMunicipio,
    builder: (column) => column,
  );

  GeneratedColumn<String> get nomeMunicipio => $composableBuilder(
    column: $table.nomeMunicipio,
    builder: (column) => column,
  );

  GeneratedColumn<String> get uf =>
      $composableBuilder(column: $table.uf, builder: (column) => column);

  GeneratedColumn<String> get cep =>
      $composableBuilder(column: $table.cep, builder: (column) => column);

  GeneratedColumn<int> get codigoPais => $composableBuilder(
    column: $table.codigoPais,
    builder: (column) => column,
  );

  GeneratedColumn<String> get nomePais =>
      $composableBuilder(column: $table.nomePais, builder: (column) => column);

  GeneratedColumn<String> get telefone =>
      $composableBuilder(column: $table.telefone, builder: (column) => column);

  GeneratedColumn<String> get email =>
      $composableBuilder(column: $table.email, builder: (column) => column);

  GeneratedColumn<String> get inscricaoEstadual => $composableBuilder(
    column: $table.inscricaoEstadual,
    builder: (column) => column,
  );
}

class $$NfeLocalEntregasTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $NfeLocalEntregasTable,
          NfeLocalEntrega,
          $$NfeLocalEntregasTableFilterComposer,
          $$NfeLocalEntregasTableOrderingComposer,
          $$NfeLocalEntregasTableAnnotationComposer,
          $$NfeLocalEntregasTableCreateCompanionBuilder,
          $$NfeLocalEntregasTableUpdateCompanionBuilder,
          (
            NfeLocalEntrega,
            BaseReferences<
              _$AppDatabase,
              $NfeLocalEntregasTable,
              NfeLocalEntrega
            >,
          ),
          NfeLocalEntrega,
          PrefetchHooks Function()
        > {
  $$NfeLocalEntregasTableTableManager(
    _$AppDatabase db,
    $NfeLocalEntregasTable table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer:
              () =>
                  $$NfeLocalEntregasTableFilterComposer($db: db, $table: table),
          createOrderingComposer:
              () => $$NfeLocalEntregasTableOrderingComposer(
                $db: db,
                $table: table,
              ),
          createComputedFieldComposer:
              () => $$NfeLocalEntregasTableAnnotationComposer(
                $db: db,
                $table: table,
              ),
          updateCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeCabecalho = const Value.absent(),
                Value<String?> cnpj = const Value.absent(),
                Value<String?> cpf = const Value.absent(),
                Value<String?> nomeRecebedor = const Value.absent(),
                Value<String?> logradouro = const Value.absent(),
                Value<String?> numero = const Value.absent(),
                Value<String?> complemento = const Value.absent(),
                Value<String?> bairro = const Value.absent(),
                Value<int?> codigoMunicipio = const Value.absent(),
                Value<String?> nomeMunicipio = const Value.absent(),
                Value<String?> uf = const Value.absent(),
                Value<String?> cep = const Value.absent(),
                Value<int?> codigoPais = const Value.absent(),
                Value<String?> nomePais = const Value.absent(),
                Value<String?> telefone = const Value.absent(),
                Value<String?> email = const Value.absent(),
                Value<String?> inscricaoEstadual = const Value.absent(),
              }) => NfeLocalEntregasCompanion(
                id: id,
                idNfeCabecalho: idNfeCabecalho,
                cnpj: cnpj,
                cpf: cpf,
                nomeRecebedor: nomeRecebedor,
                logradouro: logradouro,
                numero: numero,
                complemento: complemento,
                bairro: bairro,
                codigoMunicipio: codigoMunicipio,
                nomeMunicipio: nomeMunicipio,
                uf: uf,
                cep: cep,
                codigoPais: codigoPais,
                nomePais: nomePais,
                telefone: telefone,
                email: email,
                inscricaoEstadual: inscricaoEstadual,
              ),
          createCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeCabecalho = const Value.absent(),
                Value<String?> cnpj = const Value.absent(),
                Value<String?> cpf = const Value.absent(),
                Value<String?> nomeRecebedor = const Value.absent(),
                Value<String?> logradouro = const Value.absent(),
                Value<String?> numero = const Value.absent(),
                Value<String?> complemento = const Value.absent(),
                Value<String?> bairro = const Value.absent(),
                Value<int?> codigoMunicipio = const Value.absent(),
                Value<String?> nomeMunicipio = const Value.absent(),
                Value<String?> uf = const Value.absent(),
                Value<String?> cep = const Value.absent(),
                Value<int?> codigoPais = const Value.absent(),
                Value<String?> nomePais = const Value.absent(),
                Value<String?> telefone = const Value.absent(),
                Value<String?> email = const Value.absent(),
                Value<String?> inscricaoEstadual = const Value.absent(),
              }) => NfeLocalEntregasCompanion.insert(
                id: id,
                idNfeCabecalho: idNfeCabecalho,
                cnpj: cnpj,
                cpf: cpf,
                nomeRecebedor: nomeRecebedor,
                logradouro: logradouro,
                numero: numero,
                complemento: complemento,
                bairro: bairro,
                codigoMunicipio: codigoMunicipio,
                nomeMunicipio: nomeMunicipio,
                uf: uf,
                cep: cep,
                codigoPais: codigoPais,
                nomePais: nomePais,
                telefone: telefone,
                email: email,
                inscricaoEstadual: inscricaoEstadual,
              ),
          withReferenceMapper:
              (p0) =>
                  p0
                      .map(
                        (e) => (
                          e.readTable(table),
                          BaseReferences(db, table, e),
                        ),
                      )
                      .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$NfeLocalEntregasTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $NfeLocalEntregasTable,
      NfeLocalEntrega,
      $$NfeLocalEntregasTableFilterComposer,
      $$NfeLocalEntregasTableOrderingComposer,
      $$NfeLocalEntregasTableAnnotationComposer,
      $$NfeLocalEntregasTableCreateCompanionBuilder,
      $$NfeLocalEntregasTableUpdateCompanionBuilder,
      (
        NfeLocalEntrega,
        BaseReferences<_$AppDatabase, $NfeLocalEntregasTable, NfeLocalEntrega>,
      ),
      NfeLocalEntrega,
      PrefetchHooks Function()
    >;
typedef $$NfeDetEspecificoVeiculosTableCreateCompanionBuilder =
    NfeDetEspecificoVeiculosCompanion Function({
      Value<int?> id,
      Value<int?> idNfeDetalhe,
      Value<String?> tipoOperacao,
      Value<String?> chassi,
      Value<String?> cor,
      Value<String?> descricaoCor,
      Value<String?> potenciaMotor,
      Value<String?> cilindradas,
      Value<String?> pesoLiquido,
      Value<String?> pesoBruto,
      Value<String?> numeroSerie,
      Value<String?> tipoCombustivel,
      Value<String?> numeroMotor,
      Value<String?> capacidadeMaximaTracao,
      Value<String?> distanciaEixos,
      Value<String?> anoModelo,
      Value<String?> anoFabricacao,
      Value<String?> tipoPintura,
      Value<String?> tipoVeiculo,
      Value<String?> especieVeiculo,
      Value<String?> condicaoVin,
      Value<String?> condicaoVeiculo,
      Value<String?> codigoMarcaModelo,
      Value<String?> codigoCorDenatran,
      Value<int?> lotacaoMaxima,
      Value<String?> restricao,
    });
typedef $$NfeDetEspecificoVeiculosTableUpdateCompanionBuilder =
    NfeDetEspecificoVeiculosCompanion Function({
      Value<int?> id,
      Value<int?> idNfeDetalhe,
      Value<String?> tipoOperacao,
      Value<String?> chassi,
      Value<String?> cor,
      Value<String?> descricaoCor,
      Value<String?> potenciaMotor,
      Value<String?> cilindradas,
      Value<String?> pesoLiquido,
      Value<String?> pesoBruto,
      Value<String?> numeroSerie,
      Value<String?> tipoCombustivel,
      Value<String?> numeroMotor,
      Value<String?> capacidadeMaximaTracao,
      Value<String?> distanciaEixos,
      Value<String?> anoModelo,
      Value<String?> anoFabricacao,
      Value<String?> tipoPintura,
      Value<String?> tipoVeiculo,
      Value<String?> especieVeiculo,
      Value<String?> condicaoVin,
      Value<String?> condicaoVeiculo,
      Value<String?> codigoMarcaModelo,
      Value<String?> codigoCorDenatran,
      Value<int?> lotacaoMaxima,
      Value<String?> restricao,
    });

class $$NfeDetEspecificoVeiculosTableFilterComposer
    extends Composer<_$AppDatabase, $NfeDetEspecificoVeiculosTable> {
  $$NfeDetEspecificoVeiculosTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get tipoOperacao => $composableBuilder(
    column: $table.tipoOperacao,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get chassi => $composableBuilder(
    column: $table.chassi,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get cor => $composableBuilder(
    column: $table.cor,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get descricaoCor => $composableBuilder(
    column: $table.descricaoCor,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get potenciaMotor => $composableBuilder(
    column: $table.potenciaMotor,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get cilindradas => $composableBuilder(
    column: $table.cilindradas,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get pesoLiquido => $composableBuilder(
    column: $table.pesoLiquido,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get pesoBruto => $composableBuilder(
    column: $table.pesoBruto,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get numeroSerie => $composableBuilder(
    column: $table.numeroSerie,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get tipoCombustivel => $composableBuilder(
    column: $table.tipoCombustivel,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get numeroMotor => $composableBuilder(
    column: $table.numeroMotor,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get capacidadeMaximaTracao => $composableBuilder(
    column: $table.capacidadeMaximaTracao,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get distanciaEixos => $composableBuilder(
    column: $table.distanciaEixos,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get anoModelo => $composableBuilder(
    column: $table.anoModelo,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get anoFabricacao => $composableBuilder(
    column: $table.anoFabricacao,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get tipoPintura => $composableBuilder(
    column: $table.tipoPintura,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get tipoVeiculo => $composableBuilder(
    column: $table.tipoVeiculo,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get especieVeiculo => $composableBuilder(
    column: $table.especieVeiculo,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get condicaoVin => $composableBuilder(
    column: $table.condicaoVin,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get condicaoVeiculo => $composableBuilder(
    column: $table.condicaoVeiculo,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get codigoMarcaModelo => $composableBuilder(
    column: $table.codigoMarcaModelo,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get codigoCorDenatran => $composableBuilder(
    column: $table.codigoCorDenatran,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get lotacaoMaxima => $composableBuilder(
    column: $table.lotacaoMaxima,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get restricao => $composableBuilder(
    column: $table.restricao,
    builder: (column) => ColumnFilters(column),
  );
}

class $$NfeDetEspecificoVeiculosTableOrderingComposer
    extends Composer<_$AppDatabase, $NfeDetEspecificoVeiculosTable> {
  $$NfeDetEspecificoVeiculosTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get tipoOperacao => $composableBuilder(
    column: $table.tipoOperacao,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get chassi => $composableBuilder(
    column: $table.chassi,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get cor => $composableBuilder(
    column: $table.cor,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get descricaoCor => $composableBuilder(
    column: $table.descricaoCor,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get potenciaMotor => $composableBuilder(
    column: $table.potenciaMotor,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get cilindradas => $composableBuilder(
    column: $table.cilindradas,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get pesoLiquido => $composableBuilder(
    column: $table.pesoLiquido,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get pesoBruto => $composableBuilder(
    column: $table.pesoBruto,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get numeroSerie => $composableBuilder(
    column: $table.numeroSerie,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get tipoCombustivel => $composableBuilder(
    column: $table.tipoCombustivel,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get numeroMotor => $composableBuilder(
    column: $table.numeroMotor,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get capacidadeMaximaTracao => $composableBuilder(
    column: $table.capacidadeMaximaTracao,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get distanciaEixos => $composableBuilder(
    column: $table.distanciaEixos,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get anoModelo => $composableBuilder(
    column: $table.anoModelo,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get anoFabricacao => $composableBuilder(
    column: $table.anoFabricacao,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get tipoPintura => $composableBuilder(
    column: $table.tipoPintura,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get tipoVeiculo => $composableBuilder(
    column: $table.tipoVeiculo,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get especieVeiculo => $composableBuilder(
    column: $table.especieVeiculo,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get condicaoVin => $composableBuilder(
    column: $table.condicaoVin,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get condicaoVeiculo => $composableBuilder(
    column: $table.condicaoVeiculo,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get codigoMarcaModelo => $composableBuilder(
    column: $table.codigoMarcaModelo,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get codigoCorDenatran => $composableBuilder(
    column: $table.codigoCorDenatran,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get lotacaoMaxima => $composableBuilder(
    column: $table.lotacaoMaxima,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get restricao => $composableBuilder(
    column: $table.restricao,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$NfeDetEspecificoVeiculosTableAnnotationComposer
    extends Composer<_$AppDatabase, $NfeDetEspecificoVeiculosTable> {
  $$NfeDetEspecificoVeiculosTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => column,
  );

  GeneratedColumn<String> get tipoOperacao => $composableBuilder(
    column: $table.tipoOperacao,
    builder: (column) => column,
  );

  GeneratedColumn<String> get chassi =>
      $composableBuilder(column: $table.chassi, builder: (column) => column);

  GeneratedColumn<String> get cor =>
      $composableBuilder(column: $table.cor, builder: (column) => column);

  GeneratedColumn<String> get descricaoCor => $composableBuilder(
    column: $table.descricaoCor,
    builder: (column) => column,
  );

  GeneratedColumn<String> get potenciaMotor => $composableBuilder(
    column: $table.potenciaMotor,
    builder: (column) => column,
  );

  GeneratedColumn<String> get cilindradas => $composableBuilder(
    column: $table.cilindradas,
    builder: (column) => column,
  );

  GeneratedColumn<String> get pesoLiquido => $composableBuilder(
    column: $table.pesoLiquido,
    builder: (column) => column,
  );

  GeneratedColumn<String> get pesoBruto =>
      $composableBuilder(column: $table.pesoBruto, builder: (column) => column);

  GeneratedColumn<String> get numeroSerie => $composableBuilder(
    column: $table.numeroSerie,
    builder: (column) => column,
  );

  GeneratedColumn<String> get tipoCombustivel => $composableBuilder(
    column: $table.tipoCombustivel,
    builder: (column) => column,
  );

  GeneratedColumn<String> get numeroMotor => $composableBuilder(
    column: $table.numeroMotor,
    builder: (column) => column,
  );

  GeneratedColumn<String> get capacidadeMaximaTracao => $composableBuilder(
    column: $table.capacidadeMaximaTracao,
    builder: (column) => column,
  );

  GeneratedColumn<String> get distanciaEixos => $composableBuilder(
    column: $table.distanciaEixos,
    builder: (column) => column,
  );

  GeneratedColumn<String> get anoModelo =>
      $composableBuilder(column: $table.anoModelo, builder: (column) => column);

  GeneratedColumn<String> get anoFabricacao => $composableBuilder(
    column: $table.anoFabricacao,
    builder: (column) => column,
  );

  GeneratedColumn<String> get tipoPintura => $composableBuilder(
    column: $table.tipoPintura,
    builder: (column) => column,
  );

  GeneratedColumn<String> get tipoVeiculo => $composableBuilder(
    column: $table.tipoVeiculo,
    builder: (column) => column,
  );

  GeneratedColumn<String> get especieVeiculo => $composableBuilder(
    column: $table.especieVeiculo,
    builder: (column) => column,
  );

  GeneratedColumn<String> get condicaoVin => $composableBuilder(
    column: $table.condicaoVin,
    builder: (column) => column,
  );

  GeneratedColumn<String> get condicaoVeiculo => $composableBuilder(
    column: $table.condicaoVeiculo,
    builder: (column) => column,
  );

  GeneratedColumn<String> get codigoMarcaModelo => $composableBuilder(
    column: $table.codigoMarcaModelo,
    builder: (column) => column,
  );

  GeneratedColumn<String> get codigoCorDenatran => $composableBuilder(
    column: $table.codigoCorDenatran,
    builder: (column) => column,
  );

  GeneratedColumn<int> get lotacaoMaxima => $composableBuilder(
    column: $table.lotacaoMaxima,
    builder: (column) => column,
  );

  GeneratedColumn<String> get restricao =>
      $composableBuilder(column: $table.restricao, builder: (column) => column);
}

class $$NfeDetEspecificoVeiculosTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $NfeDetEspecificoVeiculosTable,
          NfeDetEspecificoVeiculo,
          $$NfeDetEspecificoVeiculosTableFilterComposer,
          $$NfeDetEspecificoVeiculosTableOrderingComposer,
          $$NfeDetEspecificoVeiculosTableAnnotationComposer,
          $$NfeDetEspecificoVeiculosTableCreateCompanionBuilder,
          $$NfeDetEspecificoVeiculosTableUpdateCompanionBuilder,
          (
            NfeDetEspecificoVeiculo,
            BaseReferences<
              _$AppDatabase,
              $NfeDetEspecificoVeiculosTable,
              NfeDetEspecificoVeiculo
            >,
          ),
          NfeDetEspecificoVeiculo,
          PrefetchHooks Function()
        > {
  $$NfeDetEspecificoVeiculosTableTableManager(
    _$AppDatabase db,
    $NfeDetEspecificoVeiculosTable table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer:
              () => $$NfeDetEspecificoVeiculosTableFilterComposer(
                $db: db,
                $table: table,
              ),
          createOrderingComposer:
              () => $$NfeDetEspecificoVeiculosTableOrderingComposer(
                $db: db,
                $table: table,
              ),
          createComputedFieldComposer:
              () => $$NfeDetEspecificoVeiculosTableAnnotationComposer(
                $db: db,
                $table: table,
              ),
          updateCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeDetalhe = const Value.absent(),
                Value<String?> tipoOperacao = const Value.absent(),
                Value<String?> chassi = const Value.absent(),
                Value<String?> cor = const Value.absent(),
                Value<String?> descricaoCor = const Value.absent(),
                Value<String?> potenciaMotor = const Value.absent(),
                Value<String?> cilindradas = const Value.absent(),
                Value<String?> pesoLiquido = const Value.absent(),
                Value<String?> pesoBruto = const Value.absent(),
                Value<String?> numeroSerie = const Value.absent(),
                Value<String?> tipoCombustivel = const Value.absent(),
                Value<String?> numeroMotor = const Value.absent(),
                Value<String?> capacidadeMaximaTracao = const Value.absent(),
                Value<String?> distanciaEixos = const Value.absent(),
                Value<String?> anoModelo = const Value.absent(),
                Value<String?> anoFabricacao = const Value.absent(),
                Value<String?> tipoPintura = const Value.absent(),
                Value<String?> tipoVeiculo = const Value.absent(),
                Value<String?> especieVeiculo = const Value.absent(),
                Value<String?> condicaoVin = const Value.absent(),
                Value<String?> condicaoVeiculo = const Value.absent(),
                Value<String?> codigoMarcaModelo = const Value.absent(),
                Value<String?> codigoCorDenatran = const Value.absent(),
                Value<int?> lotacaoMaxima = const Value.absent(),
                Value<String?> restricao = const Value.absent(),
              }) => NfeDetEspecificoVeiculosCompanion(
                id: id,
                idNfeDetalhe: idNfeDetalhe,
                tipoOperacao: tipoOperacao,
                chassi: chassi,
                cor: cor,
                descricaoCor: descricaoCor,
                potenciaMotor: potenciaMotor,
                cilindradas: cilindradas,
                pesoLiquido: pesoLiquido,
                pesoBruto: pesoBruto,
                numeroSerie: numeroSerie,
                tipoCombustivel: tipoCombustivel,
                numeroMotor: numeroMotor,
                capacidadeMaximaTracao: capacidadeMaximaTracao,
                distanciaEixos: distanciaEixos,
                anoModelo: anoModelo,
                anoFabricacao: anoFabricacao,
                tipoPintura: tipoPintura,
                tipoVeiculo: tipoVeiculo,
                especieVeiculo: especieVeiculo,
                condicaoVin: condicaoVin,
                condicaoVeiculo: condicaoVeiculo,
                codigoMarcaModelo: codigoMarcaModelo,
                codigoCorDenatran: codigoCorDenatran,
                lotacaoMaxima: lotacaoMaxima,
                restricao: restricao,
              ),
          createCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeDetalhe = const Value.absent(),
                Value<String?> tipoOperacao = const Value.absent(),
                Value<String?> chassi = const Value.absent(),
                Value<String?> cor = const Value.absent(),
                Value<String?> descricaoCor = const Value.absent(),
                Value<String?> potenciaMotor = const Value.absent(),
                Value<String?> cilindradas = const Value.absent(),
                Value<String?> pesoLiquido = const Value.absent(),
                Value<String?> pesoBruto = const Value.absent(),
                Value<String?> numeroSerie = const Value.absent(),
                Value<String?> tipoCombustivel = const Value.absent(),
                Value<String?> numeroMotor = const Value.absent(),
                Value<String?> capacidadeMaximaTracao = const Value.absent(),
                Value<String?> distanciaEixos = const Value.absent(),
                Value<String?> anoModelo = const Value.absent(),
                Value<String?> anoFabricacao = const Value.absent(),
                Value<String?> tipoPintura = const Value.absent(),
                Value<String?> tipoVeiculo = const Value.absent(),
                Value<String?> especieVeiculo = const Value.absent(),
                Value<String?> condicaoVin = const Value.absent(),
                Value<String?> condicaoVeiculo = const Value.absent(),
                Value<String?> codigoMarcaModelo = const Value.absent(),
                Value<String?> codigoCorDenatran = const Value.absent(),
                Value<int?> lotacaoMaxima = const Value.absent(),
                Value<String?> restricao = const Value.absent(),
              }) => NfeDetEspecificoVeiculosCompanion.insert(
                id: id,
                idNfeDetalhe: idNfeDetalhe,
                tipoOperacao: tipoOperacao,
                chassi: chassi,
                cor: cor,
                descricaoCor: descricaoCor,
                potenciaMotor: potenciaMotor,
                cilindradas: cilindradas,
                pesoLiquido: pesoLiquido,
                pesoBruto: pesoBruto,
                numeroSerie: numeroSerie,
                tipoCombustivel: tipoCombustivel,
                numeroMotor: numeroMotor,
                capacidadeMaximaTracao: capacidadeMaximaTracao,
                distanciaEixos: distanciaEixos,
                anoModelo: anoModelo,
                anoFabricacao: anoFabricacao,
                tipoPintura: tipoPintura,
                tipoVeiculo: tipoVeiculo,
                especieVeiculo: especieVeiculo,
                condicaoVin: condicaoVin,
                condicaoVeiculo: condicaoVeiculo,
                codigoMarcaModelo: codigoMarcaModelo,
                codigoCorDenatran: codigoCorDenatran,
                lotacaoMaxima: lotacaoMaxima,
                restricao: restricao,
              ),
          withReferenceMapper:
              (p0) =>
                  p0
                      .map(
                        (e) => (
                          e.readTable(table),
                          BaseReferences(db, table, e),
                        ),
                      )
                      .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$NfeDetEspecificoVeiculosTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $NfeDetEspecificoVeiculosTable,
      NfeDetEspecificoVeiculo,
      $$NfeDetEspecificoVeiculosTableFilterComposer,
      $$NfeDetEspecificoVeiculosTableOrderingComposer,
      $$NfeDetEspecificoVeiculosTableAnnotationComposer,
      $$NfeDetEspecificoVeiculosTableCreateCompanionBuilder,
      $$NfeDetEspecificoVeiculosTableUpdateCompanionBuilder,
      (
        NfeDetEspecificoVeiculo,
        BaseReferences<
          _$AppDatabase,
          $NfeDetEspecificoVeiculosTable,
          NfeDetEspecificoVeiculo
        >,
      ),
      NfeDetEspecificoVeiculo,
      PrefetchHooks Function()
    >;
typedef $$NfeDetEspecificoMedicamentosTableCreateCompanionBuilder =
    NfeDetEspecificoMedicamentosCompanion Function({
      Value<int?> id,
      Value<int?> idNfeDetalhe,
      Value<String?> codigoAnvisa,
      Value<String?> motivoIsencao,
      Value<double?> precoMaximoConsumidor,
    });
typedef $$NfeDetEspecificoMedicamentosTableUpdateCompanionBuilder =
    NfeDetEspecificoMedicamentosCompanion Function({
      Value<int?> id,
      Value<int?> idNfeDetalhe,
      Value<String?> codigoAnvisa,
      Value<String?> motivoIsencao,
      Value<double?> precoMaximoConsumidor,
    });

class $$NfeDetEspecificoMedicamentosTableFilterComposer
    extends Composer<_$AppDatabase, $NfeDetEspecificoMedicamentosTable> {
  $$NfeDetEspecificoMedicamentosTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get codigoAnvisa => $composableBuilder(
    column: $table.codigoAnvisa,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get motivoIsencao => $composableBuilder(
    column: $table.motivoIsencao,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get precoMaximoConsumidor => $composableBuilder(
    column: $table.precoMaximoConsumidor,
    builder: (column) => ColumnFilters(column),
  );
}

class $$NfeDetEspecificoMedicamentosTableOrderingComposer
    extends Composer<_$AppDatabase, $NfeDetEspecificoMedicamentosTable> {
  $$NfeDetEspecificoMedicamentosTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get codigoAnvisa => $composableBuilder(
    column: $table.codigoAnvisa,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get motivoIsencao => $composableBuilder(
    column: $table.motivoIsencao,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get precoMaximoConsumidor => $composableBuilder(
    column: $table.precoMaximoConsumidor,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$NfeDetEspecificoMedicamentosTableAnnotationComposer
    extends Composer<_$AppDatabase, $NfeDetEspecificoMedicamentosTable> {
  $$NfeDetEspecificoMedicamentosTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => column,
  );

  GeneratedColumn<String> get codigoAnvisa => $composableBuilder(
    column: $table.codigoAnvisa,
    builder: (column) => column,
  );

  GeneratedColumn<String> get motivoIsencao => $composableBuilder(
    column: $table.motivoIsencao,
    builder: (column) => column,
  );

  GeneratedColumn<double> get precoMaximoConsumidor => $composableBuilder(
    column: $table.precoMaximoConsumidor,
    builder: (column) => column,
  );
}

class $$NfeDetEspecificoMedicamentosTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $NfeDetEspecificoMedicamentosTable,
          NfeDetEspecificoMedicamento,
          $$NfeDetEspecificoMedicamentosTableFilterComposer,
          $$NfeDetEspecificoMedicamentosTableOrderingComposer,
          $$NfeDetEspecificoMedicamentosTableAnnotationComposer,
          $$NfeDetEspecificoMedicamentosTableCreateCompanionBuilder,
          $$NfeDetEspecificoMedicamentosTableUpdateCompanionBuilder,
          (
            NfeDetEspecificoMedicamento,
            BaseReferences<
              _$AppDatabase,
              $NfeDetEspecificoMedicamentosTable,
              NfeDetEspecificoMedicamento
            >,
          ),
          NfeDetEspecificoMedicamento,
          PrefetchHooks Function()
        > {
  $$NfeDetEspecificoMedicamentosTableTableManager(
    _$AppDatabase db,
    $NfeDetEspecificoMedicamentosTable table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer:
              () => $$NfeDetEspecificoMedicamentosTableFilterComposer(
                $db: db,
                $table: table,
              ),
          createOrderingComposer:
              () => $$NfeDetEspecificoMedicamentosTableOrderingComposer(
                $db: db,
                $table: table,
              ),
          createComputedFieldComposer:
              () => $$NfeDetEspecificoMedicamentosTableAnnotationComposer(
                $db: db,
                $table: table,
              ),
          updateCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeDetalhe = const Value.absent(),
                Value<String?> codigoAnvisa = const Value.absent(),
                Value<String?> motivoIsencao = const Value.absent(),
                Value<double?> precoMaximoConsumidor = const Value.absent(),
              }) => NfeDetEspecificoMedicamentosCompanion(
                id: id,
                idNfeDetalhe: idNfeDetalhe,
                codigoAnvisa: codigoAnvisa,
                motivoIsencao: motivoIsencao,
                precoMaximoConsumidor: precoMaximoConsumidor,
              ),
          createCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeDetalhe = const Value.absent(),
                Value<String?> codigoAnvisa = const Value.absent(),
                Value<String?> motivoIsencao = const Value.absent(),
                Value<double?> precoMaximoConsumidor = const Value.absent(),
              }) => NfeDetEspecificoMedicamentosCompanion.insert(
                id: id,
                idNfeDetalhe: idNfeDetalhe,
                codigoAnvisa: codigoAnvisa,
                motivoIsencao: motivoIsencao,
                precoMaximoConsumidor: precoMaximoConsumidor,
              ),
          withReferenceMapper:
              (p0) =>
                  p0
                      .map(
                        (e) => (
                          e.readTable(table),
                          BaseReferences(db, table, e),
                        ),
                      )
                      .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$NfeDetEspecificoMedicamentosTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $NfeDetEspecificoMedicamentosTable,
      NfeDetEspecificoMedicamento,
      $$NfeDetEspecificoMedicamentosTableFilterComposer,
      $$NfeDetEspecificoMedicamentosTableOrderingComposer,
      $$NfeDetEspecificoMedicamentosTableAnnotationComposer,
      $$NfeDetEspecificoMedicamentosTableCreateCompanionBuilder,
      $$NfeDetEspecificoMedicamentosTableUpdateCompanionBuilder,
      (
        NfeDetEspecificoMedicamento,
        BaseReferences<
          _$AppDatabase,
          $NfeDetEspecificoMedicamentosTable,
          NfeDetEspecificoMedicamento
        >,
      ),
      NfeDetEspecificoMedicamento,
      PrefetchHooks Function()
    >;
typedef $$NfeDetEspecificoArmamentosTableCreateCompanionBuilder =
    NfeDetEspecificoArmamentosCompanion Function({
      Value<int?> id,
      Value<int?> idNfeDetalhe,
      Value<String?> tipoArma,
      Value<String?> numeroSerieArma,
      Value<String?> numeroSerieCano,
      Value<String?> descricao,
    });
typedef $$NfeDetEspecificoArmamentosTableUpdateCompanionBuilder =
    NfeDetEspecificoArmamentosCompanion Function({
      Value<int?> id,
      Value<int?> idNfeDetalhe,
      Value<String?> tipoArma,
      Value<String?> numeroSerieArma,
      Value<String?> numeroSerieCano,
      Value<String?> descricao,
    });

class $$NfeDetEspecificoArmamentosTableFilterComposer
    extends Composer<_$AppDatabase, $NfeDetEspecificoArmamentosTable> {
  $$NfeDetEspecificoArmamentosTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get tipoArma => $composableBuilder(
    column: $table.tipoArma,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get numeroSerieArma => $composableBuilder(
    column: $table.numeroSerieArma,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get numeroSerieCano => $composableBuilder(
    column: $table.numeroSerieCano,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get descricao => $composableBuilder(
    column: $table.descricao,
    builder: (column) => ColumnFilters(column),
  );
}

class $$NfeDetEspecificoArmamentosTableOrderingComposer
    extends Composer<_$AppDatabase, $NfeDetEspecificoArmamentosTable> {
  $$NfeDetEspecificoArmamentosTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get tipoArma => $composableBuilder(
    column: $table.tipoArma,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get numeroSerieArma => $composableBuilder(
    column: $table.numeroSerieArma,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get numeroSerieCano => $composableBuilder(
    column: $table.numeroSerieCano,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get descricao => $composableBuilder(
    column: $table.descricao,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$NfeDetEspecificoArmamentosTableAnnotationComposer
    extends Composer<_$AppDatabase, $NfeDetEspecificoArmamentosTable> {
  $$NfeDetEspecificoArmamentosTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => column,
  );

  GeneratedColumn<String> get tipoArma =>
      $composableBuilder(column: $table.tipoArma, builder: (column) => column);

  GeneratedColumn<String> get numeroSerieArma => $composableBuilder(
    column: $table.numeroSerieArma,
    builder: (column) => column,
  );

  GeneratedColumn<String> get numeroSerieCano => $composableBuilder(
    column: $table.numeroSerieCano,
    builder: (column) => column,
  );

  GeneratedColumn<String> get descricao =>
      $composableBuilder(column: $table.descricao, builder: (column) => column);
}

class $$NfeDetEspecificoArmamentosTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $NfeDetEspecificoArmamentosTable,
          NfeDetEspecificoArmamento,
          $$NfeDetEspecificoArmamentosTableFilterComposer,
          $$NfeDetEspecificoArmamentosTableOrderingComposer,
          $$NfeDetEspecificoArmamentosTableAnnotationComposer,
          $$NfeDetEspecificoArmamentosTableCreateCompanionBuilder,
          $$NfeDetEspecificoArmamentosTableUpdateCompanionBuilder,
          (
            NfeDetEspecificoArmamento,
            BaseReferences<
              _$AppDatabase,
              $NfeDetEspecificoArmamentosTable,
              NfeDetEspecificoArmamento
            >,
          ),
          NfeDetEspecificoArmamento,
          PrefetchHooks Function()
        > {
  $$NfeDetEspecificoArmamentosTableTableManager(
    _$AppDatabase db,
    $NfeDetEspecificoArmamentosTable table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer:
              () => $$NfeDetEspecificoArmamentosTableFilterComposer(
                $db: db,
                $table: table,
              ),
          createOrderingComposer:
              () => $$NfeDetEspecificoArmamentosTableOrderingComposer(
                $db: db,
                $table: table,
              ),
          createComputedFieldComposer:
              () => $$NfeDetEspecificoArmamentosTableAnnotationComposer(
                $db: db,
                $table: table,
              ),
          updateCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeDetalhe = const Value.absent(),
                Value<String?> tipoArma = const Value.absent(),
                Value<String?> numeroSerieArma = const Value.absent(),
                Value<String?> numeroSerieCano = const Value.absent(),
                Value<String?> descricao = const Value.absent(),
              }) => NfeDetEspecificoArmamentosCompanion(
                id: id,
                idNfeDetalhe: idNfeDetalhe,
                tipoArma: tipoArma,
                numeroSerieArma: numeroSerieArma,
                numeroSerieCano: numeroSerieCano,
                descricao: descricao,
              ),
          createCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeDetalhe = const Value.absent(),
                Value<String?> tipoArma = const Value.absent(),
                Value<String?> numeroSerieArma = const Value.absent(),
                Value<String?> numeroSerieCano = const Value.absent(),
                Value<String?> descricao = const Value.absent(),
              }) => NfeDetEspecificoArmamentosCompanion.insert(
                id: id,
                idNfeDetalhe: idNfeDetalhe,
                tipoArma: tipoArma,
                numeroSerieArma: numeroSerieArma,
                numeroSerieCano: numeroSerieCano,
                descricao: descricao,
              ),
          withReferenceMapper:
              (p0) =>
                  p0
                      .map(
                        (e) => (
                          e.readTable(table),
                          BaseReferences(db, table, e),
                        ),
                      )
                      .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$NfeDetEspecificoArmamentosTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $NfeDetEspecificoArmamentosTable,
      NfeDetEspecificoArmamento,
      $$NfeDetEspecificoArmamentosTableFilterComposer,
      $$NfeDetEspecificoArmamentosTableOrderingComposer,
      $$NfeDetEspecificoArmamentosTableAnnotationComposer,
      $$NfeDetEspecificoArmamentosTableCreateCompanionBuilder,
      $$NfeDetEspecificoArmamentosTableUpdateCompanionBuilder,
      (
        NfeDetEspecificoArmamento,
        BaseReferences<
          _$AppDatabase,
          $NfeDetEspecificoArmamentosTable,
          NfeDetEspecificoArmamento
        >,
      ),
      NfeDetEspecificoArmamento,
      PrefetchHooks Function()
    >;
typedef $$NfeDuplicatasTableCreateCompanionBuilder =
    NfeDuplicatasCompanion Function({
      Value<int?> id,
      Value<int?> idNfeFatura,
      Value<String?> numero,
      Value<DateTime?> dataVencimento,
      Value<double?> valor,
    });
typedef $$NfeDuplicatasTableUpdateCompanionBuilder =
    NfeDuplicatasCompanion Function({
      Value<int?> id,
      Value<int?> idNfeFatura,
      Value<String?> numero,
      Value<DateTime?> dataVencimento,
      Value<double?> valor,
    });

class $$NfeDuplicatasTableFilterComposer
    extends Composer<_$AppDatabase, $NfeDuplicatasTable> {
  $$NfeDuplicatasTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idNfeFatura => $composableBuilder(
    column: $table.idNfeFatura,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get numero => $composableBuilder(
    column: $table.numero,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get dataVencimento => $composableBuilder(
    column: $table.dataVencimento,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valor => $composableBuilder(
    column: $table.valor,
    builder: (column) => ColumnFilters(column),
  );
}

class $$NfeDuplicatasTableOrderingComposer
    extends Composer<_$AppDatabase, $NfeDuplicatasTable> {
  $$NfeDuplicatasTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idNfeFatura => $composableBuilder(
    column: $table.idNfeFatura,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get numero => $composableBuilder(
    column: $table.numero,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get dataVencimento => $composableBuilder(
    column: $table.dataVencimento,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valor => $composableBuilder(
    column: $table.valor,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$NfeDuplicatasTableAnnotationComposer
    extends Composer<_$AppDatabase, $NfeDuplicatasTable> {
  $$NfeDuplicatasTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<int> get idNfeFatura => $composableBuilder(
    column: $table.idNfeFatura,
    builder: (column) => column,
  );

  GeneratedColumn<String> get numero =>
      $composableBuilder(column: $table.numero, builder: (column) => column);

  GeneratedColumn<DateTime> get dataVencimento => $composableBuilder(
    column: $table.dataVencimento,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valor =>
      $composableBuilder(column: $table.valor, builder: (column) => column);
}

class $$NfeDuplicatasTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $NfeDuplicatasTable,
          NfeDuplicata,
          $$NfeDuplicatasTableFilterComposer,
          $$NfeDuplicatasTableOrderingComposer,
          $$NfeDuplicatasTableAnnotationComposer,
          $$NfeDuplicatasTableCreateCompanionBuilder,
          $$NfeDuplicatasTableUpdateCompanionBuilder,
          (
            NfeDuplicata,
            BaseReferences<_$AppDatabase, $NfeDuplicatasTable, NfeDuplicata>,
          ),
          NfeDuplicata,
          PrefetchHooks Function()
        > {
  $$NfeDuplicatasTableTableManager(_$AppDatabase db, $NfeDuplicatasTable table)
    : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer:
              () => $$NfeDuplicatasTableFilterComposer($db: db, $table: table),
          createOrderingComposer:
              () =>
                  $$NfeDuplicatasTableOrderingComposer($db: db, $table: table),
          createComputedFieldComposer:
              () => $$NfeDuplicatasTableAnnotationComposer(
                $db: db,
                $table: table,
              ),
          updateCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeFatura = const Value.absent(),
                Value<String?> numero = const Value.absent(),
                Value<DateTime?> dataVencimento = const Value.absent(),
                Value<double?> valor = const Value.absent(),
              }) => NfeDuplicatasCompanion(
                id: id,
                idNfeFatura: idNfeFatura,
                numero: numero,
                dataVencimento: dataVencimento,
                valor: valor,
              ),
          createCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeFatura = const Value.absent(),
                Value<String?> numero = const Value.absent(),
                Value<DateTime?> dataVencimento = const Value.absent(),
                Value<double?> valor = const Value.absent(),
              }) => NfeDuplicatasCompanion.insert(
                id: id,
                idNfeFatura: idNfeFatura,
                numero: numero,
                dataVencimento: dataVencimento,
                valor: valor,
              ),
          withReferenceMapper:
              (p0) =>
                  p0
                      .map(
                        (e) => (
                          e.readTable(table),
                          BaseReferences(db, table, e),
                        ),
                      )
                      .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$NfeDuplicatasTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $NfeDuplicatasTable,
      NfeDuplicata,
      $$NfeDuplicatasTableFilterComposer,
      $$NfeDuplicatasTableOrderingComposer,
      $$NfeDuplicatasTableAnnotationComposer,
      $$NfeDuplicatasTableCreateCompanionBuilder,
      $$NfeDuplicatasTableUpdateCompanionBuilder,
      (
        NfeDuplicata,
        BaseReferences<_$AppDatabase, $NfeDuplicatasTable, NfeDuplicata>,
      ),
      NfeDuplicata,
      PrefetchHooks Function()
    >;
typedef $$NfeDeclaracaoImportacaosTableCreateCompanionBuilder =
    NfeDeclaracaoImportacaosCompanion Function({
      Value<int?> id,
      Value<int?> idNfeDetalhe,
      Value<String?> numeroDocumento,
      Value<DateTime?> dataRegistro,
      Value<String?> localDesembaraco,
      Value<String?> ufDesembaraco,
      Value<DateTime?> dataDesembaraco,
      Value<String?> viaTransporte,
      Value<double?> valorAfrmm,
      Value<String?> formaIntermediacao,
      Value<String?> cnpj,
      Value<String?> ufTerceiro,
      Value<String?> codigoExportador,
      Value<String?> cpf,
    });
typedef $$NfeDeclaracaoImportacaosTableUpdateCompanionBuilder =
    NfeDeclaracaoImportacaosCompanion Function({
      Value<int?> id,
      Value<int?> idNfeDetalhe,
      Value<String?> numeroDocumento,
      Value<DateTime?> dataRegistro,
      Value<String?> localDesembaraco,
      Value<String?> ufDesembaraco,
      Value<DateTime?> dataDesembaraco,
      Value<String?> viaTransporte,
      Value<double?> valorAfrmm,
      Value<String?> formaIntermediacao,
      Value<String?> cnpj,
      Value<String?> ufTerceiro,
      Value<String?> codigoExportador,
      Value<String?> cpf,
    });

class $$NfeDeclaracaoImportacaosTableFilterComposer
    extends Composer<_$AppDatabase, $NfeDeclaracaoImportacaosTable> {
  $$NfeDeclaracaoImportacaosTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get numeroDocumento => $composableBuilder(
    column: $table.numeroDocumento,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get dataRegistro => $composableBuilder(
    column: $table.dataRegistro,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get localDesembaraco => $composableBuilder(
    column: $table.localDesembaraco,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get ufDesembaraco => $composableBuilder(
    column: $table.ufDesembaraco,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get dataDesembaraco => $composableBuilder(
    column: $table.dataDesembaraco,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get viaTransporte => $composableBuilder(
    column: $table.viaTransporte,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorAfrmm => $composableBuilder(
    column: $table.valorAfrmm,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get formaIntermediacao => $composableBuilder(
    column: $table.formaIntermediacao,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get cnpj => $composableBuilder(
    column: $table.cnpj,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get ufTerceiro => $composableBuilder(
    column: $table.ufTerceiro,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get codigoExportador => $composableBuilder(
    column: $table.codigoExportador,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get cpf => $composableBuilder(
    column: $table.cpf,
    builder: (column) => ColumnFilters(column),
  );
}

class $$NfeDeclaracaoImportacaosTableOrderingComposer
    extends Composer<_$AppDatabase, $NfeDeclaracaoImportacaosTable> {
  $$NfeDeclaracaoImportacaosTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get numeroDocumento => $composableBuilder(
    column: $table.numeroDocumento,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get dataRegistro => $composableBuilder(
    column: $table.dataRegistro,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get localDesembaraco => $composableBuilder(
    column: $table.localDesembaraco,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get ufDesembaraco => $composableBuilder(
    column: $table.ufDesembaraco,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get dataDesembaraco => $composableBuilder(
    column: $table.dataDesembaraco,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get viaTransporte => $composableBuilder(
    column: $table.viaTransporte,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorAfrmm => $composableBuilder(
    column: $table.valorAfrmm,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get formaIntermediacao => $composableBuilder(
    column: $table.formaIntermediacao,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get cnpj => $composableBuilder(
    column: $table.cnpj,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get ufTerceiro => $composableBuilder(
    column: $table.ufTerceiro,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get codigoExportador => $composableBuilder(
    column: $table.codigoExportador,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get cpf => $composableBuilder(
    column: $table.cpf,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$NfeDeclaracaoImportacaosTableAnnotationComposer
    extends Composer<_$AppDatabase, $NfeDeclaracaoImportacaosTable> {
  $$NfeDeclaracaoImportacaosTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => column,
  );

  GeneratedColumn<String> get numeroDocumento => $composableBuilder(
    column: $table.numeroDocumento,
    builder: (column) => column,
  );

  GeneratedColumn<DateTime> get dataRegistro => $composableBuilder(
    column: $table.dataRegistro,
    builder: (column) => column,
  );

  GeneratedColumn<String> get localDesembaraco => $composableBuilder(
    column: $table.localDesembaraco,
    builder: (column) => column,
  );

  GeneratedColumn<String> get ufDesembaraco => $composableBuilder(
    column: $table.ufDesembaraco,
    builder: (column) => column,
  );

  GeneratedColumn<DateTime> get dataDesembaraco => $composableBuilder(
    column: $table.dataDesembaraco,
    builder: (column) => column,
  );

  GeneratedColumn<String> get viaTransporte => $composableBuilder(
    column: $table.viaTransporte,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorAfrmm => $composableBuilder(
    column: $table.valorAfrmm,
    builder: (column) => column,
  );

  GeneratedColumn<String> get formaIntermediacao => $composableBuilder(
    column: $table.formaIntermediacao,
    builder: (column) => column,
  );

  GeneratedColumn<String> get cnpj =>
      $composableBuilder(column: $table.cnpj, builder: (column) => column);

  GeneratedColumn<String> get ufTerceiro => $composableBuilder(
    column: $table.ufTerceiro,
    builder: (column) => column,
  );

  GeneratedColumn<String> get codigoExportador => $composableBuilder(
    column: $table.codigoExportador,
    builder: (column) => column,
  );

  GeneratedColumn<String> get cpf =>
      $composableBuilder(column: $table.cpf, builder: (column) => column);
}

class $$NfeDeclaracaoImportacaosTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $NfeDeclaracaoImportacaosTable,
          NfeDeclaracaoImportacao,
          $$NfeDeclaracaoImportacaosTableFilterComposer,
          $$NfeDeclaracaoImportacaosTableOrderingComposer,
          $$NfeDeclaracaoImportacaosTableAnnotationComposer,
          $$NfeDeclaracaoImportacaosTableCreateCompanionBuilder,
          $$NfeDeclaracaoImportacaosTableUpdateCompanionBuilder,
          (
            NfeDeclaracaoImportacao,
            BaseReferences<
              _$AppDatabase,
              $NfeDeclaracaoImportacaosTable,
              NfeDeclaracaoImportacao
            >,
          ),
          NfeDeclaracaoImportacao,
          PrefetchHooks Function()
        > {
  $$NfeDeclaracaoImportacaosTableTableManager(
    _$AppDatabase db,
    $NfeDeclaracaoImportacaosTable table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer:
              () => $$NfeDeclaracaoImportacaosTableFilterComposer(
                $db: db,
                $table: table,
              ),
          createOrderingComposer:
              () => $$NfeDeclaracaoImportacaosTableOrderingComposer(
                $db: db,
                $table: table,
              ),
          createComputedFieldComposer:
              () => $$NfeDeclaracaoImportacaosTableAnnotationComposer(
                $db: db,
                $table: table,
              ),
          updateCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeDetalhe = const Value.absent(),
                Value<String?> numeroDocumento = const Value.absent(),
                Value<DateTime?> dataRegistro = const Value.absent(),
                Value<String?> localDesembaraco = const Value.absent(),
                Value<String?> ufDesembaraco = const Value.absent(),
                Value<DateTime?> dataDesembaraco = const Value.absent(),
                Value<String?> viaTransporte = const Value.absent(),
                Value<double?> valorAfrmm = const Value.absent(),
                Value<String?> formaIntermediacao = const Value.absent(),
                Value<String?> cnpj = const Value.absent(),
                Value<String?> ufTerceiro = const Value.absent(),
                Value<String?> codigoExportador = const Value.absent(),
                Value<String?> cpf = const Value.absent(),
              }) => NfeDeclaracaoImportacaosCompanion(
                id: id,
                idNfeDetalhe: idNfeDetalhe,
                numeroDocumento: numeroDocumento,
                dataRegistro: dataRegistro,
                localDesembaraco: localDesembaraco,
                ufDesembaraco: ufDesembaraco,
                dataDesembaraco: dataDesembaraco,
                viaTransporte: viaTransporte,
                valorAfrmm: valorAfrmm,
                formaIntermediacao: formaIntermediacao,
                cnpj: cnpj,
                ufTerceiro: ufTerceiro,
                codigoExportador: codigoExportador,
                cpf: cpf,
              ),
          createCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeDetalhe = const Value.absent(),
                Value<String?> numeroDocumento = const Value.absent(),
                Value<DateTime?> dataRegistro = const Value.absent(),
                Value<String?> localDesembaraco = const Value.absent(),
                Value<String?> ufDesembaraco = const Value.absent(),
                Value<DateTime?> dataDesembaraco = const Value.absent(),
                Value<String?> viaTransporte = const Value.absent(),
                Value<double?> valorAfrmm = const Value.absent(),
                Value<String?> formaIntermediacao = const Value.absent(),
                Value<String?> cnpj = const Value.absent(),
                Value<String?> ufTerceiro = const Value.absent(),
                Value<String?> codigoExportador = const Value.absent(),
                Value<String?> cpf = const Value.absent(),
              }) => NfeDeclaracaoImportacaosCompanion.insert(
                id: id,
                idNfeDetalhe: idNfeDetalhe,
                numeroDocumento: numeroDocumento,
                dataRegistro: dataRegistro,
                localDesembaraco: localDesembaraco,
                ufDesembaraco: ufDesembaraco,
                dataDesembaraco: dataDesembaraco,
                viaTransporte: viaTransporte,
                valorAfrmm: valorAfrmm,
                formaIntermediacao: formaIntermediacao,
                cnpj: cnpj,
                ufTerceiro: ufTerceiro,
                codigoExportador: codigoExportador,
                cpf: cpf,
              ),
          withReferenceMapper:
              (p0) =>
                  p0
                      .map(
                        (e) => (
                          e.readTable(table),
                          BaseReferences(db, table, e),
                        ),
                      )
                      .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$NfeDeclaracaoImportacaosTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $NfeDeclaracaoImportacaosTable,
      NfeDeclaracaoImportacao,
      $$NfeDeclaracaoImportacaosTableFilterComposer,
      $$NfeDeclaracaoImportacaosTableOrderingComposer,
      $$NfeDeclaracaoImportacaosTableAnnotationComposer,
      $$NfeDeclaracaoImportacaosTableCreateCompanionBuilder,
      $$NfeDeclaracaoImportacaosTableUpdateCompanionBuilder,
      (
        NfeDeclaracaoImportacao,
        BaseReferences<
          _$AppDatabase,
          $NfeDeclaracaoImportacaosTable,
          NfeDeclaracaoImportacao
        >,
      ),
      NfeDeclaracaoImportacao,
      PrefetchHooks Function()
    >;
typedef $$NfeCanaFornecimentoDiariosTableCreateCompanionBuilder =
    NfeCanaFornecimentoDiariosCompanion Function({
      Value<int?> id,
      Value<int?> idNfeCana,
      Value<String?> dia,
      Value<double?> quantidade,
      Value<double?> quantidadeTotalMes,
      Value<double?> quantidadeTotalAnterior,
      Value<double?> quantidadeTotalGeral,
    });
typedef $$NfeCanaFornecimentoDiariosTableUpdateCompanionBuilder =
    NfeCanaFornecimentoDiariosCompanion Function({
      Value<int?> id,
      Value<int?> idNfeCana,
      Value<String?> dia,
      Value<double?> quantidade,
      Value<double?> quantidadeTotalMes,
      Value<double?> quantidadeTotalAnterior,
      Value<double?> quantidadeTotalGeral,
    });

class $$NfeCanaFornecimentoDiariosTableFilterComposer
    extends Composer<_$AppDatabase, $NfeCanaFornecimentoDiariosTable> {
  $$NfeCanaFornecimentoDiariosTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idNfeCana => $composableBuilder(
    column: $table.idNfeCana,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get dia => $composableBuilder(
    column: $table.dia,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get quantidade => $composableBuilder(
    column: $table.quantidade,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get quantidadeTotalMes => $composableBuilder(
    column: $table.quantidadeTotalMes,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get quantidadeTotalAnterior => $composableBuilder(
    column: $table.quantidadeTotalAnterior,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get quantidadeTotalGeral => $composableBuilder(
    column: $table.quantidadeTotalGeral,
    builder: (column) => ColumnFilters(column),
  );
}

class $$NfeCanaFornecimentoDiariosTableOrderingComposer
    extends Composer<_$AppDatabase, $NfeCanaFornecimentoDiariosTable> {
  $$NfeCanaFornecimentoDiariosTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idNfeCana => $composableBuilder(
    column: $table.idNfeCana,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get dia => $composableBuilder(
    column: $table.dia,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get quantidade => $composableBuilder(
    column: $table.quantidade,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get quantidadeTotalMes => $composableBuilder(
    column: $table.quantidadeTotalMes,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get quantidadeTotalAnterior => $composableBuilder(
    column: $table.quantidadeTotalAnterior,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get quantidadeTotalGeral => $composableBuilder(
    column: $table.quantidadeTotalGeral,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$NfeCanaFornecimentoDiariosTableAnnotationComposer
    extends Composer<_$AppDatabase, $NfeCanaFornecimentoDiariosTable> {
  $$NfeCanaFornecimentoDiariosTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<int> get idNfeCana =>
      $composableBuilder(column: $table.idNfeCana, builder: (column) => column);

  GeneratedColumn<String> get dia =>
      $composableBuilder(column: $table.dia, builder: (column) => column);

  GeneratedColumn<double> get quantidade => $composableBuilder(
    column: $table.quantidade,
    builder: (column) => column,
  );

  GeneratedColumn<double> get quantidadeTotalMes => $composableBuilder(
    column: $table.quantidadeTotalMes,
    builder: (column) => column,
  );

  GeneratedColumn<double> get quantidadeTotalAnterior => $composableBuilder(
    column: $table.quantidadeTotalAnterior,
    builder: (column) => column,
  );

  GeneratedColumn<double> get quantidadeTotalGeral => $composableBuilder(
    column: $table.quantidadeTotalGeral,
    builder: (column) => column,
  );
}

class $$NfeCanaFornecimentoDiariosTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $NfeCanaFornecimentoDiariosTable,
          NfeCanaFornecimentoDiario,
          $$NfeCanaFornecimentoDiariosTableFilterComposer,
          $$NfeCanaFornecimentoDiariosTableOrderingComposer,
          $$NfeCanaFornecimentoDiariosTableAnnotationComposer,
          $$NfeCanaFornecimentoDiariosTableCreateCompanionBuilder,
          $$NfeCanaFornecimentoDiariosTableUpdateCompanionBuilder,
          (
            NfeCanaFornecimentoDiario,
            BaseReferences<
              _$AppDatabase,
              $NfeCanaFornecimentoDiariosTable,
              NfeCanaFornecimentoDiario
            >,
          ),
          NfeCanaFornecimentoDiario,
          PrefetchHooks Function()
        > {
  $$NfeCanaFornecimentoDiariosTableTableManager(
    _$AppDatabase db,
    $NfeCanaFornecimentoDiariosTable table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer:
              () => $$NfeCanaFornecimentoDiariosTableFilterComposer(
                $db: db,
                $table: table,
              ),
          createOrderingComposer:
              () => $$NfeCanaFornecimentoDiariosTableOrderingComposer(
                $db: db,
                $table: table,
              ),
          createComputedFieldComposer:
              () => $$NfeCanaFornecimentoDiariosTableAnnotationComposer(
                $db: db,
                $table: table,
              ),
          updateCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeCana = const Value.absent(),
                Value<String?> dia = const Value.absent(),
                Value<double?> quantidade = const Value.absent(),
                Value<double?> quantidadeTotalMes = const Value.absent(),
                Value<double?> quantidadeTotalAnterior = const Value.absent(),
                Value<double?> quantidadeTotalGeral = const Value.absent(),
              }) => NfeCanaFornecimentoDiariosCompanion(
                id: id,
                idNfeCana: idNfeCana,
                dia: dia,
                quantidade: quantidade,
                quantidadeTotalMes: quantidadeTotalMes,
                quantidadeTotalAnterior: quantidadeTotalAnterior,
                quantidadeTotalGeral: quantidadeTotalGeral,
              ),
          createCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeCana = const Value.absent(),
                Value<String?> dia = const Value.absent(),
                Value<double?> quantidade = const Value.absent(),
                Value<double?> quantidadeTotalMes = const Value.absent(),
                Value<double?> quantidadeTotalAnterior = const Value.absent(),
                Value<double?> quantidadeTotalGeral = const Value.absent(),
              }) => NfeCanaFornecimentoDiariosCompanion.insert(
                id: id,
                idNfeCana: idNfeCana,
                dia: dia,
                quantidade: quantidade,
                quantidadeTotalMes: quantidadeTotalMes,
                quantidadeTotalAnterior: quantidadeTotalAnterior,
                quantidadeTotalGeral: quantidadeTotalGeral,
              ),
          withReferenceMapper:
              (p0) =>
                  p0
                      .map(
                        (e) => (
                          e.readTable(table),
                          BaseReferences(db, table, e),
                        ),
                      )
                      .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$NfeCanaFornecimentoDiariosTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $NfeCanaFornecimentoDiariosTable,
      NfeCanaFornecimentoDiario,
      $$NfeCanaFornecimentoDiariosTableFilterComposer,
      $$NfeCanaFornecimentoDiariosTableOrderingComposer,
      $$NfeCanaFornecimentoDiariosTableAnnotationComposer,
      $$NfeCanaFornecimentoDiariosTableCreateCompanionBuilder,
      $$NfeCanaFornecimentoDiariosTableUpdateCompanionBuilder,
      (
        NfeCanaFornecimentoDiario,
        BaseReferences<
          _$AppDatabase,
          $NfeCanaFornecimentoDiariosTable,
          NfeCanaFornecimentoDiario
        >,
      ),
      NfeCanaFornecimentoDiario,
      PrefetchHooks Function()
    >;
typedef $$NfeCanaDeducoesSafrasTableCreateCompanionBuilder =
    NfeCanaDeducoesSafrasCompanion Function({
      Value<int?> id,
      Value<int?> idNfeCana,
      Value<String?> decricao,
      Value<double?> valorDeducao,
      Value<double?> valorFornecimento,
      Value<double?> valorTotalDeducao,
      Value<double?> valorLiquidoFornecimento,
    });
typedef $$NfeCanaDeducoesSafrasTableUpdateCompanionBuilder =
    NfeCanaDeducoesSafrasCompanion Function({
      Value<int?> id,
      Value<int?> idNfeCana,
      Value<String?> decricao,
      Value<double?> valorDeducao,
      Value<double?> valorFornecimento,
      Value<double?> valorTotalDeducao,
      Value<double?> valorLiquidoFornecimento,
    });

class $$NfeCanaDeducoesSafrasTableFilterComposer
    extends Composer<_$AppDatabase, $NfeCanaDeducoesSafrasTable> {
  $$NfeCanaDeducoesSafrasTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idNfeCana => $composableBuilder(
    column: $table.idNfeCana,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get decricao => $composableBuilder(
    column: $table.decricao,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorDeducao => $composableBuilder(
    column: $table.valorDeducao,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorFornecimento => $composableBuilder(
    column: $table.valorFornecimento,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorTotalDeducao => $composableBuilder(
    column: $table.valorTotalDeducao,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorLiquidoFornecimento => $composableBuilder(
    column: $table.valorLiquidoFornecimento,
    builder: (column) => ColumnFilters(column),
  );
}

class $$NfeCanaDeducoesSafrasTableOrderingComposer
    extends Composer<_$AppDatabase, $NfeCanaDeducoesSafrasTable> {
  $$NfeCanaDeducoesSafrasTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idNfeCana => $composableBuilder(
    column: $table.idNfeCana,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get decricao => $composableBuilder(
    column: $table.decricao,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorDeducao => $composableBuilder(
    column: $table.valorDeducao,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorFornecimento => $composableBuilder(
    column: $table.valorFornecimento,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorTotalDeducao => $composableBuilder(
    column: $table.valorTotalDeducao,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorLiquidoFornecimento => $composableBuilder(
    column: $table.valorLiquidoFornecimento,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$NfeCanaDeducoesSafrasTableAnnotationComposer
    extends Composer<_$AppDatabase, $NfeCanaDeducoesSafrasTable> {
  $$NfeCanaDeducoesSafrasTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<int> get idNfeCana =>
      $composableBuilder(column: $table.idNfeCana, builder: (column) => column);

  GeneratedColumn<String> get decricao =>
      $composableBuilder(column: $table.decricao, builder: (column) => column);

  GeneratedColumn<double> get valorDeducao => $composableBuilder(
    column: $table.valorDeducao,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorFornecimento => $composableBuilder(
    column: $table.valorFornecimento,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorTotalDeducao => $composableBuilder(
    column: $table.valorTotalDeducao,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorLiquidoFornecimento => $composableBuilder(
    column: $table.valorLiquidoFornecimento,
    builder: (column) => column,
  );
}

class $$NfeCanaDeducoesSafrasTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $NfeCanaDeducoesSafrasTable,
          NfeCanaDeducoesSafra,
          $$NfeCanaDeducoesSafrasTableFilterComposer,
          $$NfeCanaDeducoesSafrasTableOrderingComposer,
          $$NfeCanaDeducoesSafrasTableAnnotationComposer,
          $$NfeCanaDeducoesSafrasTableCreateCompanionBuilder,
          $$NfeCanaDeducoesSafrasTableUpdateCompanionBuilder,
          (
            NfeCanaDeducoesSafra,
            BaseReferences<
              _$AppDatabase,
              $NfeCanaDeducoesSafrasTable,
              NfeCanaDeducoesSafra
            >,
          ),
          NfeCanaDeducoesSafra,
          PrefetchHooks Function()
        > {
  $$NfeCanaDeducoesSafrasTableTableManager(
    _$AppDatabase db,
    $NfeCanaDeducoesSafrasTable table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer:
              () => $$NfeCanaDeducoesSafrasTableFilterComposer(
                $db: db,
                $table: table,
              ),
          createOrderingComposer:
              () => $$NfeCanaDeducoesSafrasTableOrderingComposer(
                $db: db,
                $table: table,
              ),
          createComputedFieldComposer:
              () => $$NfeCanaDeducoesSafrasTableAnnotationComposer(
                $db: db,
                $table: table,
              ),
          updateCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeCana = const Value.absent(),
                Value<String?> decricao = const Value.absent(),
                Value<double?> valorDeducao = const Value.absent(),
                Value<double?> valorFornecimento = const Value.absent(),
                Value<double?> valorTotalDeducao = const Value.absent(),
                Value<double?> valorLiquidoFornecimento = const Value.absent(),
              }) => NfeCanaDeducoesSafrasCompanion(
                id: id,
                idNfeCana: idNfeCana,
                decricao: decricao,
                valorDeducao: valorDeducao,
                valorFornecimento: valorFornecimento,
                valorTotalDeducao: valorTotalDeducao,
                valorLiquidoFornecimento: valorLiquidoFornecimento,
              ),
          createCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeCana = const Value.absent(),
                Value<String?> decricao = const Value.absent(),
                Value<double?> valorDeducao = const Value.absent(),
                Value<double?> valorFornecimento = const Value.absent(),
                Value<double?> valorTotalDeducao = const Value.absent(),
                Value<double?> valorLiquidoFornecimento = const Value.absent(),
              }) => NfeCanaDeducoesSafrasCompanion.insert(
                id: id,
                idNfeCana: idNfeCana,
                decricao: decricao,
                valorDeducao: valorDeducao,
                valorFornecimento: valorFornecimento,
                valorTotalDeducao: valorTotalDeducao,
                valorLiquidoFornecimento: valorLiquidoFornecimento,
              ),
          withReferenceMapper:
              (p0) =>
                  p0
                      .map(
                        (e) => (
                          e.readTable(table),
                          BaseReferences(db, table, e),
                        ),
                      )
                      .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$NfeCanaDeducoesSafrasTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $NfeCanaDeducoesSafrasTable,
      NfeCanaDeducoesSafra,
      $$NfeCanaDeducoesSafrasTableFilterComposer,
      $$NfeCanaDeducoesSafrasTableOrderingComposer,
      $$NfeCanaDeducoesSafrasTableAnnotationComposer,
      $$NfeCanaDeducoesSafrasTableCreateCompanionBuilder,
      $$NfeCanaDeducoesSafrasTableUpdateCompanionBuilder,
      (
        NfeCanaDeducoesSafra,
        BaseReferences<
          _$AppDatabase,
          $NfeCanaDeducoesSafrasTable,
          NfeCanaDeducoesSafra
        >,
      ),
      NfeCanaDeducoesSafra,
      PrefetchHooks Function()
    >;
typedef $$NfeCupomFiscalReferenciadosTableCreateCompanionBuilder =
    NfeCupomFiscalReferenciadosCompanion Function({
      Value<int?> id,
      Value<int?> idNfeCabecalho,
      Value<String?> modeloDocumentoFiscal,
      Value<int?> numeroOrdemEcf,
      Value<int?> coo,
      Value<DateTime?> dataEmissaoCupom,
      Value<int?> numeroCaixa,
      Value<String?> numeroSerieEcf,
    });
typedef $$NfeCupomFiscalReferenciadosTableUpdateCompanionBuilder =
    NfeCupomFiscalReferenciadosCompanion Function({
      Value<int?> id,
      Value<int?> idNfeCabecalho,
      Value<String?> modeloDocumentoFiscal,
      Value<int?> numeroOrdemEcf,
      Value<int?> coo,
      Value<DateTime?> dataEmissaoCupom,
      Value<int?> numeroCaixa,
      Value<String?> numeroSerieEcf,
    });

class $$NfeCupomFiscalReferenciadosTableFilterComposer
    extends Composer<_$AppDatabase, $NfeCupomFiscalReferenciadosTable> {
  $$NfeCupomFiscalReferenciadosTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idNfeCabecalho => $composableBuilder(
    column: $table.idNfeCabecalho,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get modeloDocumentoFiscal => $composableBuilder(
    column: $table.modeloDocumentoFiscal,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get numeroOrdemEcf => $composableBuilder(
    column: $table.numeroOrdemEcf,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get coo => $composableBuilder(
    column: $table.coo,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get dataEmissaoCupom => $composableBuilder(
    column: $table.dataEmissaoCupom,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get numeroCaixa => $composableBuilder(
    column: $table.numeroCaixa,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get numeroSerieEcf => $composableBuilder(
    column: $table.numeroSerieEcf,
    builder: (column) => ColumnFilters(column),
  );
}

class $$NfeCupomFiscalReferenciadosTableOrderingComposer
    extends Composer<_$AppDatabase, $NfeCupomFiscalReferenciadosTable> {
  $$NfeCupomFiscalReferenciadosTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idNfeCabecalho => $composableBuilder(
    column: $table.idNfeCabecalho,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get modeloDocumentoFiscal => $composableBuilder(
    column: $table.modeloDocumentoFiscal,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get numeroOrdemEcf => $composableBuilder(
    column: $table.numeroOrdemEcf,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get coo => $composableBuilder(
    column: $table.coo,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get dataEmissaoCupom => $composableBuilder(
    column: $table.dataEmissaoCupom,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get numeroCaixa => $composableBuilder(
    column: $table.numeroCaixa,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get numeroSerieEcf => $composableBuilder(
    column: $table.numeroSerieEcf,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$NfeCupomFiscalReferenciadosTableAnnotationComposer
    extends Composer<_$AppDatabase, $NfeCupomFiscalReferenciadosTable> {
  $$NfeCupomFiscalReferenciadosTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<int> get idNfeCabecalho => $composableBuilder(
    column: $table.idNfeCabecalho,
    builder: (column) => column,
  );

  GeneratedColumn<String> get modeloDocumentoFiscal => $composableBuilder(
    column: $table.modeloDocumentoFiscal,
    builder: (column) => column,
  );

  GeneratedColumn<int> get numeroOrdemEcf => $composableBuilder(
    column: $table.numeroOrdemEcf,
    builder: (column) => column,
  );

  GeneratedColumn<int> get coo =>
      $composableBuilder(column: $table.coo, builder: (column) => column);

  GeneratedColumn<DateTime> get dataEmissaoCupom => $composableBuilder(
    column: $table.dataEmissaoCupom,
    builder: (column) => column,
  );

  GeneratedColumn<int> get numeroCaixa => $composableBuilder(
    column: $table.numeroCaixa,
    builder: (column) => column,
  );

  GeneratedColumn<String> get numeroSerieEcf => $composableBuilder(
    column: $table.numeroSerieEcf,
    builder: (column) => column,
  );
}

class $$NfeCupomFiscalReferenciadosTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $NfeCupomFiscalReferenciadosTable,
          NfeCupomFiscalReferenciado,
          $$NfeCupomFiscalReferenciadosTableFilterComposer,
          $$NfeCupomFiscalReferenciadosTableOrderingComposer,
          $$NfeCupomFiscalReferenciadosTableAnnotationComposer,
          $$NfeCupomFiscalReferenciadosTableCreateCompanionBuilder,
          $$NfeCupomFiscalReferenciadosTableUpdateCompanionBuilder,
          (
            NfeCupomFiscalReferenciado,
            BaseReferences<
              _$AppDatabase,
              $NfeCupomFiscalReferenciadosTable,
              NfeCupomFiscalReferenciado
            >,
          ),
          NfeCupomFiscalReferenciado,
          PrefetchHooks Function()
        > {
  $$NfeCupomFiscalReferenciadosTableTableManager(
    _$AppDatabase db,
    $NfeCupomFiscalReferenciadosTable table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer:
              () => $$NfeCupomFiscalReferenciadosTableFilterComposer(
                $db: db,
                $table: table,
              ),
          createOrderingComposer:
              () => $$NfeCupomFiscalReferenciadosTableOrderingComposer(
                $db: db,
                $table: table,
              ),
          createComputedFieldComposer:
              () => $$NfeCupomFiscalReferenciadosTableAnnotationComposer(
                $db: db,
                $table: table,
              ),
          updateCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeCabecalho = const Value.absent(),
                Value<String?> modeloDocumentoFiscal = const Value.absent(),
                Value<int?> numeroOrdemEcf = const Value.absent(),
                Value<int?> coo = const Value.absent(),
                Value<DateTime?> dataEmissaoCupom = const Value.absent(),
                Value<int?> numeroCaixa = const Value.absent(),
                Value<String?> numeroSerieEcf = const Value.absent(),
              }) => NfeCupomFiscalReferenciadosCompanion(
                id: id,
                idNfeCabecalho: idNfeCabecalho,
                modeloDocumentoFiscal: modeloDocumentoFiscal,
                numeroOrdemEcf: numeroOrdemEcf,
                coo: coo,
                dataEmissaoCupom: dataEmissaoCupom,
                numeroCaixa: numeroCaixa,
                numeroSerieEcf: numeroSerieEcf,
              ),
          createCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeCabecalho = const Value.absent(),
                Value<String?> modeloDocumentoFiscal = const Value.absent(),
                Value<int?> numeroOrdemEcf = const Value.absent(),
                Value<int?> coo = const Value.absent(),
                Value<DateTime?> dataEmissaoCupom = const Value.absent(),
                Value<int?> numeroCaixa = const Value.absent(),
                Value<String?> numeroSerieEcf = const Value.absent(),
              }) => NfeCupomFiscalReferenciadosCompanion.insert(
                id: id,
                idNfeCabecalho: idNfeCabecalho,
                modeloDocumentoFiscal: modeloDocumentoFiscal,
                numeroOrdemEcf: numeroOrdemEcf,
                coo: coo,
                dataEmissaoCupom: dataEmissaoCupom,
                numeroCaixa: numeroCaixa,
                numeroSerieEcf: numeroSerieEcf,
              ),
          withReferenceMapper:
              (p0) =>
                  p0
                      .map(
                        (e) => (
                          e.readTable(table),
                          BaseReferences(db, table, e),
                        ),
                      )
                      .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$NfeCupomFiscalReferenciadosTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $NfeCupomFiscalReferenciadosTable,
      NfeCupomFiscalReferenciado,
      $$NfeCupomFiscalReferenciadosTableFilterComposer,
      $$NfeCupomFiscalReferenciadosTableOrderingComposer,
      $$NfeCupomFiscalReferenciadosTableAnnotationComposer,
      $$NfeCupomFiscalReferenciadosTableCreateCompanionBuilder,
      $$NfeCupomFiscalReferenciadosTableUpdateCompanionBuilder,
      (
        NfeCupomFiscalReferenciado,
        BaseReferences<
          _$AppDatabase,
          $NfeCupomFiscalReferenciadosTable,
          NfeCupomFiscalReferenciado
        >,
      ),
      NfeCupomFiscalReferenciado,
      PrefetchHooks Function()
    >;
typedef $$NfeProdRuralReferenciadasTableCreateCompanionBuilder =
    NfeProdRuralReferenciadasCompanion Function({
      Value<int?> id,
      Value<int?> idNfeCabecalho,
      Value<int?> codigoUf,
      Value<String?> anoMes,
      Value<String?> cnpj,
      Value<String?> cpf,
      Value<String?> inscricaoEstadual,
      Value<String?> modelo,
      Value<String?> serie,
      Value<int?> numeroNf,
      Value<String?> cte,
    });
typedef $$NfeProdRuralReferenciadasTableUpdateCompanionBuilder =
    NfeProdRuralReferenciadasCompanion Function({
      Value<int?> id,
      Value<int?> idNfeCabecalho,
      Value<int?> codigoUf,
      Value<String?> anoMes,
      Value<String?> cnpj,
      Value<String?> cpf,
      Value<String?> inscricaoEstadual,
      Value<String?> modelo,
      Value<String?> serie,
      Value<int?> numeroNf,
      Value<String?> cte,
    });

class $$NfeProdRuralReferenciadasTableFilterComposer
    extends Composer<_$AppDatabase, $NfeProdRuralReferenciadasTable> {
  $$NfeProdRuralReferenciadasTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idNfeCabecalho => $composableBuilder(
    column: $table.idNfeCabecalho,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get codigoUf => $composableBuilder(
    column: $table.codigoUf,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get anoMes => $composableBuilder(
    column: $table.anoMes,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get cnpj => $composableBuilder(
    column: $table.cnpj,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get cpf => $composableBuilder(
    column: $table.cpf,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get inscricaoEstadual => $composableBuilder(
    column: $table.inscricaoEstadual,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get modelo => $composableBuilder(
    column: $table.modelo,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get serie => $composableBuilder(
    column: $table.serie,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get numeroNf => $composableBuilder(
    column: $table.numeroNf,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get cte => $composableBuilder(
    column: $table.cte,
    builder: (column) => ColumnFilters(column),
  );
}

class $$NfeProdRuralReferenciadasTableOrderingComposer
    extends Composer<_$AppDatabase, $NfeProdRuralReferenciadasTable> {
  $$NfeProdRuralReferenciadasTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idNfeCabecalho => $composableBuilder(
    column: $table.idNfeCabecalho,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get codigoUf => $composableBuilder(
    column: $table.codigoUf,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get anoMes => $composableBuilder(
    column: $table.anoMes,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get cnpj => $composableBuilder(
    column: $table.cnpj,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get cpf => $composableBuilder(
    column: $table.cpf,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get inscricaoEstadual => $composableBuilder(
    column: $table.inscricaoEstadual,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get modelo => $composableBuilder(
    column: $table.modelo,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get serie => $composableBuilder(
    column: $table.serie,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get numeroNf => $composableBuilder(
    column: $table.numeroNf,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get cte => $composableBuilder(
    column: $table.cte,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$NfeProdRuralReferenciadasTableAnnotationComposer
    extends Composer<_$AppDatabase, $NfeProdRuralReferenciadasTable> {
  $$NfeProdRuralReferenciadasTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<int> get idNfeCabecalho => $composableBuilder(
    column: $table.idNfeCabecalho,
    builder: (column) => column,
  );

  GeneratedColumn<int> get codigoUf =>
      $composableBuilder(column: $table.codigoUf, builder: (column) => column);

  GeneratedColumn<String> get anoMes =>
      $composableBuilder(column: $table.anoMes, builder: (column) => column);

  GeneratedColumn<String> get cnpj =>
      $composableBuilder(column: $table.cnpj, builder: (column) => column);

  GeneratedColumn<String> get cpf =>
      $composableBuilder(column: $table.cpf, builder: (column) => column);

  GeneratedColumn<String> get inscricaoEstadual => $composableBuilder(
    column: $table.inscricaoEstadual,
    builder: (column) => column,
  );

  GeneratedColumn<String> get modelo =>
      $composableBuilder(column: $table.modelo, builder: (column) => column);

  GeneratedColumn<String> get serie =>
      $composableBuilder(column: $table.serie, builder: (column) => column);

  GeneratedColumn<int> get numeroNf =>
      $composableBuilder(column: $table.numeroNf, builder: (column) => column);

  GeneratedColumn<String> get cte =>
      $composableBuilder(column: $table.cte, builder: (column) => column);
}

class $$NfeProdRuralReferenciadasTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $NfeProdRuralReferenciadasTable,
          NfeProdRuralReferenciada,
          $$NfeProdRuralReferenciadasTableFilterComposer,
          $$NfeProdRuralReferenciadasTableOrderingComposer,
          $$NfeProdRuralReferenciadasTableAnnotationComposer,
          $$NfeProdRuralReferenciadasTableCreateCompanionBuilder,
          $$NfeProdRuralReferenciadasTableUpdateCompanionBuilder,
          (
            NfeProdRuralReferenciada,
            BaseReferences<
              _$AppDatabase,
              $NfeProdRuralReferenciadasTable,
              NfeProdRuralReferenciada
            >,
          ),
          NfeProdRuralReferenciada,
          PrefetchHooks Function()
        > {
  $$NfeProdRuralReferenciadasTableTableManager(
    _$AppDatabase db,
    $NfeProdRuralReferenciadasTable table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer:
              () => $$NfeProdRuralReferenciadasTableFilterComposer(
                $db: db,
                $table: table,
              ),
          createOrderingComposer:
              () => $$NfeProdRuralReferenciadasTableOrderingComposer(
                $db: db,
                $table: table,
              ),
          createComputedFieldComposer:
              () => $$NfeProdRuralReferenciadasTableAnnotationComposer(
                $db: db,
                $table: table,
              ),
          updateCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeCabecalho = const Value.absent(),
                Value<int?> codigoUf = const Value.absent(),
                Value<String?> anoMes = const Value.absent(),
                Value<String?> cnpj = const Value.absent(),
                Value<String?> cpf = const Value.absent(),
                Value<String?> inscricaoEstadual = const Value.absent(),
                Value<String?> modelo = const Value.absent(),
                Value<String?> serie = const Value.absent(),
                Value<int?> numeroNf = const Value.absent(),
                Value<String?> cte = const Value.absent(),
              }) => NfeProdRuralReferenciadasCompanion(
                id: id,
                idNfeCabecalho: idNfeCabecalho,
                codigoUf: codigoUf,
                anoMes: anoMes,
                cnpj: cnpj,
                cpf: cpf,
                inscricaoEstadual: inscricaoEstadual,
                modelo: modelo,
                serie: serie,
                numeroNf: numeroNf,
                cte: cte,
              ),
          createCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeCabecalho = const Value.absent(),
                Value<int?> codigoUf = const Value.absent(),
                Value<String?> anoMes = const Value.absent(),
                Value<String?> cnpj = const Value.absent(),
                Value<String?> cpf = const Value.absent(),
                Value<String?> inscricaoEstadual = const Value.absent(),
                Value<String?> modelo = const Value.absent(),
                Value<String?> serie = const Value.absent(),
                Value<int?> numeroNf = const Value.absent(),
                Value<String?> cte = const Value.absent(),
              }) => NfeProdRuralReferenciadasCompanion.insert(
                id: id,
                idNfeCabecalho: idNfeCabecalho,
                codigoUf: codigoUf,
                anoMes: anoMes,
                cnpj: cnpj,
                cpf: cpf,
                inscricaoEstadual: inscricaoEstadual,
                modelo: modelo,
                serie: serie,
                numeroNf: numeroNf,
                cte: cte,
              ),
          withReferenceMapper:
              (p0) =>
                  p0
                      .map(
                        (e) => (
                          e.readTable(table),
                          BaseReferences(db, table, e),
                        ),
                      )
                      .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$NfeProdRuralReferenciadasTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $NfeProdRuralReferenciadasTable,
      NfeProdRuralReferenciada,
      $$NfeProdRuralReferenciadasTableFilterComposer,
      $$NfeProdRuralReferenciadasTableOrderingComposer,
      $$NfeProdRuralReferenciadasTableAnnotationComposer,
      $$NfeProdRuralReferenciadasTableCreateCompanionBuilder,
      $$NfeProdRuralReferenciadasTableUpdateCompanionBuilder,
      (
        NfeProdRuralReferenciada,
        BaseReferences<
          _$AppDatabase,
          $NfeProdRuralReferenciadasTable,
          NfeProdRuralReferenciada
        >,
      ),
      NfeProdRuralReferenciada,
      PrefetchHooks Function()
    >;
typedef $$NfeNfReferenciadasTableCreateCompanionBuilder =
    NfeNfReferenciadasCompanion Function({
      Value<int?> id,
      Value<int?> idNfeCabecalho,
      Value<int?> codigoUf,
      Value<String?> anoMes,
      Value<String?> cnpj,
      Value<String?> modelo,
      Value<String?> serie,
      Value<int?> numeroNf,
    });
typedef $$NfeNfReferenciadasTableUpdateCompanionBuilder =
    NfeNfReferenciadasCompanion Function({
      Value<int?> id,
      Value<int?> idNfeCabecalho,
      Value<int?> codigoUf,
      Value<String?> anoMes,
      Value<String?> cnpj,
      Value<String?> modelo,
      Value<String?> serie,
      Value<int?> numeroNf,
    });

class $$NfeNfReferenciadasTableFilterComposer
    extends Composer<_$AppDatabase, $NfeNfReferenciadasTable> {
  $$NfeNfReferenciadasTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idNfeCabecalho => $composableBuilder(
    column: $table.idNfeCabecalho,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get codigoUf => $composableBuilder(
    column: $table.codigoUf,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get anoMes => $composableBuilder(
    column: $table.anoMes,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get cnpj => $composableBuilder(
    column: $table.cnpj,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get modelo => $composableBuilder(
    column: $table.modelo,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get serie => $composableBuilder(
    column: $table.serie,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get numeroNf => $composableBuilder(
    column: $table.numeroNf,
    builder: (column) => ColumnFilters(column),
  );
}

class $$NfeNfReferenciadasTableOrderingComposer
    extends Composer<_$AppDatabase, $NfeNfReferenciadasTable> {
  $$NfeNfReferenciadasTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idNfeCabecalho => $composableBuilder(
    column: $table.idNfeCabecalho,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get codigoUf => $composableBuilder(
    column: $table.codigoUf,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get anoMes => $composableBuilder(
    column: $table.anoMes,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get cnpj => $composableBuilder(
    column: $table.cnpj,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get modelo => $composableBuilder(
    column: $table.modelo,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get serie => $composableBuilder(
    column: $table.serie,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get numeroNf => $composableBuilder(
    column: $table.numeroNf,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$NfeNfReferenciadasTableAnnotationComposer
    extends Composer<_$AppDatabase, $NfeNfReferenciadasTable> {
  $$NfeNfReferenciadasTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<int> get idNfeCabecalho => $composableBuilder(
    column: $table.idNfeCabecalho,
    builder: (column) => column,
  );

  GeneratedColumn<int> get codigoUf =>
      $composableBuilder(column: $table.codigoUf, builder: (column) => column);

  GeneratedColumn<String> get anoMes =>
      $composableBuilder(column: $table.anoMes, builder: (column) => column);

  GeneratedColumn<String> get cnpj =>
      $composableBuilder(column: $table.cnpj, builder: (column) => column);

  GeneratedColumn<String> get modelo =>
      $composableBuilder(column: $table.modelo, builder: (column) => column);

  GeneratedColumn<String> get serie =>
      $composableBuilder(column: $table.serie, builder: (column) => column);

  GeneratedColumn<int> get numeroNf =>
      $composableBuilder(column: $table.numeroNf, builder: (column) => column);
}

class $$NfeNfReferenciadasTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $NfeNfReferenciadasTable,
          NfeNfReferenciada,
          $$NfeNfReferenciadasTableFilterComposer,
          $$NfeNfReferenciadasTableOrderingComposer,
          $$NfeNfReferenciadasTableAnnotationComposer,
          $$NfeNfReferenciadasTableCreateCompanionBuilder,
          $$NfeNfReferenciadasTableUpdateCompanionBuilder,
          (
            NfeNfReferenciada,
            BaseReferences<
              _$AppDatabase,
              $NfeNfReferenciadasTable,
              NfeNfReferenciada
            >,
          ),
          NfeNfReferenciada,
          PrefetchHooks Function()
        > {
  $$NfeNfReferenciadasTableTableManager(
    _$AppDatabase db,
    $NfeNfReferenciadasTable table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer:
              () => $$NfeNfReferenciadasTableFilterComposer(
                $db: db,
                $table: table,
              ),
          createOrderingComposer:
              () => $$NfeNfReferenciadasTableOrderingComposer(
                $db: db,
                $table: table,
              ),
          createComputedFieldComposer:
              () => $$NfeNfReferenciadasTableAnnotationComposer(
                $db: db,
                $table: table,
              ),
          updateCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeCabecalho = const Value.absent(),
                Value<int?> codigoUf = const Value.absent(),
                Value<String?> anoMes = const Value.absent(),
                Value<String?> cnpj = const Value.absent(),
                Value<String?> modelo = const Value.absent(),
                Value<String?> serie = const Value.absent(),
                Value<int?> numeroNf = const Value.absent(),
              }) => NfeNfReferenciadasCompanion(
                id: id,
                idNfeCabecalho: idNfeCabecalho,
                codigoUf: codigoUf,
                anoMes: anoMes,
                cnpj: cnpj,
                modelo: modelo,
                serie: serie,
                numeroNf: numeroNf,
              ),
          createCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeCabecalho = const Value.absent(),
                Value<int?> codigoUf = const Value.absent(),
                Value<String?> anoMes = const Value.absent(),
                Value<String?> cnpj = const Value.absent(),
                Value<String?> modelo = const Value.absent(),
                Value<String?> serie = const Value.absent(),
                Value<int?> numeroNf = const Value.absent(),
              }) => NfeNfReferenciadasCompanion.insert(
                id: id,
                idNfeCabecalho: idNfeCabecalho,
                codigoUf: codigoUf,
                anoMes: anoMes,
                cnpj: cnpj,
                modelo: modelo,
                serie: serie,
                numeroNf: numeroNf,
              ),
          withReferenceMapper:
              (p0) =>
                  p0
                      .map(
                        (e) => (
                          e.readTable(table),
                          BaseReferences(db, table, e),
                        ),
                      )
                      .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$NfeNfReferenciadasTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $NfeNfReferenciadasTable,
      NfeNfReferenciada,
      $$NfeNfReferenciadasTableFilterComposer,
      $$NfeNfReferenciadasTableOrderingComposer,
      $$NfeNfReferenciadasTableAnnotationComposer,
      $$NfeNfReferenciadasTableCreateCompanionBuilder,
      $$NfeNfReferenciadasTableUpdateCompanionBuilder,
      (
        NfeNfReferenciada,
        BaseReferences<
          _$AppDatabase,
          $NfeNfReferenciadasTable,
          NfeNfReferenciada
        >,
      ),
      NfeNfReferenciada,
      PrefetchHooks Function()
    >;
typedef $$NfeDetalheImpostoIcmssTableCreateCompanionBuilder =
    NfeDetalheImpostoIcmssCompanion Function({
      Value<int?> id,
      Value<int?> idNfeDetalhe,
      Value<String?> origemMercadoria,
      Value<String?> cstIcms,
      Value<String?> csosn,
      Value<String?> modalidadeBcIcms,
      Value<double?> percentualReducaoBcIcms,
      Value<double?> valorBcIcms,
      Value<double?> aliquotaIcms,
      Value<double?> valorIcmsOperacao,
      Value<double?> percentualDiferimento,
      Value<double?> valorIcmsDiferido,
      Value<double?> valorIcms,
      Value<double?> baseCalculoFcp,
      Value<double?> percentualFcp,
      Value<double?> valorFcp,
      Value<String?> modalidadeBcIcmsSt,
      Value<double?> percentualMvaIcmsSt,
      Value<double?> percentualReducaoBcIcmsSt,
      Value<double?> valorBaseCalculoIcmsSt,
      Value<double?> aliquotaIcmsSt,
      Value<double?> valorIcmsSt,
      Value<double?> baseCalculoFcpSt,
      Value<double?> percentualFcpSt,
      Value<double?> valorFcpSt,
      Value<String?> ufSt,
      Value<double?> percentualBcOperacaoPropria,
      Value<double?> valorBcIcmsStRetido,
      Value<double?> aliquotaSuportadaConsumidor,
      Value<double?> valorIcmsSubstituto,
      Value<double?> valorIcmsStRetido,
      Value<double?> baseCalculoFcpStRetido,
      Value<double?> percentualFcpStRetido,
      Value<double?> valorFcpStRetido,
      Value<String?> motivoDesoneracaoIcms,
      Value<double?> valorIcmsDesonerado,
      Value<double?> aliquotaCreditoIcmsSn,
      Value<double?> valorCreditoIcmsSn,
      Value<double?> valorBcIcmsStDestino,
      Value<double?> valorIcmsStDestino,
      Value<double?> percentualReducaoBcEfetivo,
      Value<double?> valorBcEfetivo,
      Value<double?> aliquotaIcmsEfetivo,
      Value<double?> valorIcmsEfetivo,
      Value<double?> valorIcmsStDesonerado,
      Value<String?> motivoDesoneracaoIcmsSt,
      Value<double?> taxaFcpDiferido,
      Value<double?> valorFcpDiferido,
      Value<double?> valorFcpEfetivo,
      Value<String?> desoneradoDeduz,
      Value<double?> quantidadeTributada,
      Value<double?> aliquotaAdRem,
      Value<double?> valorIcmsMono,
      Value<double?> quantidadeSujeitaRetencao,
      Value<double?> aliquotaAdRemRetencao,
      Value<double?> valorIcmsMonoRetencao,
      Value<double?> percentualReducaoAdRem,
      Value<String?> motivoReducaoAdRem,
      Value<double?> valorIcmsMonoOperacao,
      Value<double?> percentualDiferimentoMono,
      Value<double?> valorIcmsDiferidoMono,
      Value<double?> quantidadeTributadaRetida,
      Value<double?> aliquotaAdRemRetida,
      Value<double?> valorIcmsRetido,
    });
typedef $$NfeDetalheImpostoIcmssTableUpdateCompanionBuilder =
    NfeDetalheImpostoIcmssCompanion Function({
      Value<int?> id,
      Value<int?> idNfeDetalhe,
      Value<String?> origemMercadoria,
      Value<String?> cstIcms,
      Value<String?> csosn,
      Value<String?> modalidadeBcIcms,
      Value<double?> percentualReducaoBcIcms,
      Value<double?> valorBcIcms,
      Value<double?> aliquotaIcms,
      Value<double?> valorIcmsOperacao,
      Value<double?> percentualDiferimento,
      Value<double?> valorIcmsDiferido,
      Value<double?> valorIcms,
      Value<double?> baseCalculoFcp,
      Value<double?> percentualFcp,
      Value<double?> valorFcp,
      Value<String?> modalidadeBcIcmsSt,
      Value<double?> percentualMvaIcmsSt,
      Value<double?> percentualReducaoBcIcmsSt,
      Value<double?> valorBaseCalculoIcmsSt,
      Value<double?> aliquotaIcmsSt,
      Value<double?> valorIcmsSt,
      Value<double?> baseCalculoFcpSt,
      Value<double?> percentualFcpSt,
      Value<double?> valorFcpSt,
      Value<String?> ufSt,
      Value<double?> percentualBcOperacaoPropria,
      Value<double?> valorBcIcmsStRetido,
      Value<double?> aliquotaSuportadaConsumidor,
      Value<double?> valorIcmsSubstituto,
      Value<double?> valorIcmsStRetido,
      Value<double?> baseCalculoFcpStRetido,
      Value<double?> percentualFcpStRetido,
      Value<double?> valorFcpStRetido,
      Value<String?> motivoDesoneracaoIcms,
      Value<double?> valorIcmsDesonerado,
      Value<double?> aliquotaCreditoIcmsSn,
      Value<double?> valorCreditoIcmsSn,
      Value<double?> valorBcIcmsStDestino,
      Value<double?> valorIcmsStDestino,
      Value<double?> percentualReducaoBcEfetivo,
      Value<double?> valorBcEfetivo,
      Value<double?> aliquotaIcmsEfetivo,
      Value<double?> valorIcmsEfetivo,
      Value<double?> valorIcmsStDesonerado,
      Value<String?> motivoDesoneracaoIcmsSt,
      Value<double?> taxaFcpDiferido,
      Value<double?> valorFcpDiferido,
      Value<double?> valorFcpEfetivo,
      Value<String?> desoneradoDeduz,
      Value<double?> quantidadeTributada,
      Value<double?> aliquotaAdRem,
      Value<double?> valorIcmsMono,
      Value<double?> quantidadeSujeitaRetencao,
      Value<double?> aliquotaAdRemRetencao,
      Value<double?> valorIcmsMonoRetencao,
      Value<double?> percentualReducaoAdRem,
      Value<String?> motivoReducaoAdRem,
      Value<double?> valorIcmsMonoOperacao,
      Value<double?> percentualDiferimentoMono,
      Value<double?> valorIcmsDiferidoMono,
      Value<double?> quantidadeTributadaRetida,
      Value<double?> aliquotaAdRemRetida,
      Value<double?> valorIcmsRetido,
    });

class $$NfeDetalheImpostoIcmssTableFilterComposer
    extends Composer<_$AppDatabase, $NfeDetalheImpostoIcmssTable> {
  $$NfeDetalheImpostoIcmssTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get origemMercadoria => $composableBuilder(
    column: $table.origemMercadoria,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get cstIcms => $composableBuilder(
    column: $table.cstIcms,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get csosn => $composableBuilder(
    column: $table.csosn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get modalidadeBcIcms => $composableBuilder(
    column: $table.modalidadeBcIcms,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get percentualReducaoBcIcms => $composableBuilder(
    column: $table.percentualReducaoBcIcms,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorBcIcms => $composableBuilder(
    column: $table.valorBcIcms,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get aliquotaIcms => $composableBuilder(
    column: $table.aliquotaIcms,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorIcmsOperacao => $composableBuilder(
    column: $table.valorIcmsOperacao,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get percentualDiferimento => $composableBuilder(
    column: $table.percentualDiferimento,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorIcmsDiferido => $composableBuilder(
    column: $table.valorIcmsDiferido,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorIcms => $composableBuilder(
    column: $table.valorIcms,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get baseCalculoFcp => $composableBuilder(
    column: $table.baseCalculoFcp,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get percentualFcp => $composableBuilder(
    column: $table.percentualFcp,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorFcp => $composableBuilder(
    column: $table.valorFcp,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get modalidadeBcIcmsSt => $composableBuilder(
    column: $table.modalidadeBcIcmsSt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get percentualMvaIcmsSt => $composableBuilder(
    column: $table.percentualMvaIcmsSt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get percentualReducaoBcIcmsSt => $composableBuilder(
    column: $table.percentualReducaoBcIcmsSt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorBaseCalculoIcmsSt => $composableBuilder(
    column: $table.valorBaseCalculoIcmsSt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get aliquotaIcmsSt => $composableBuilder(
    column: $table.aliquotaIcmsSt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorIcmsSt => $composableBuilder(
    column: $table.valorIcmsSt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get baseCalculoFcpSt => $composableBuilder(
    column: $table.baseCalculoFcpSt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get percentualFcpSt => $composableBuilder(
    column: $table.percentualFcpSt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorFcpSt => $composableBuilder(
    column: $table.valorFcpSt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get ufSt => $composableBuilder(
    column: $table.ufSt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get percentualBcOperacaoPropria => $composableBuilder(
    column: $table.percentualBcOperacaoPropria,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorBcIcmsStRetido => $composableBuilder(
    column: $table.valorBcIcmsStRetido,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get aliquotaSuportadaConsumidor => $composableBuilder(
    column: $table.aliquotaSuportadaConsumidor,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorIcmsSubstituto => $composableBuilder(
    column: $table.valorIcmsSubstituto,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorIcmsStRetido => $composableBuilder(
    column: $table.valorIcmsStRetido,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get baseCalculoFcpStRetido => $composableBuilder(
    column: $table.baseCalculoFcpStRetido,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get percentualFcpStRetido => $composableBuilder(
    column: $table.percentualFcpStRetido,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorFcpStRetido => $composableBuilder(
    column: $table.valorFcpStRetido,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get motivoDesoneracaoIcms => $composableBuilder(
    column: $table.motivoDesoneracaoIcms,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorIcmsDesonerado => $composableBuilder(
    column: $table.valorIcmsDesonerado,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get aliquotaCreditoIcmsSn => $composableBuilder(
    column: $table.aliquotaCreditoIcmsSn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorCreditoIcmsSn => $composableBuilder(
    column: $table.valorCreditoIcmsSn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorBcIcmsStDestino => $composableBuilder(
    column: $table.valorBcIcmsStDestino,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorIcmsStDestino => $composableBuilder(
    column: $table.valorIcmsStDestino,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get percentualReducaoBcEfetivo => $composableBuilder(
    column: $table.percentualReducaoBcEfetivo,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorBcEfetivo => $composableBuilder(
    column: $table.valorBcEfetivo,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get aliquotaIcmsEfetivo => $composableBuilder(
    column: $table.aliquotaIcmsEfetivo,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorIcmsEfetivo => $composableBuilder(
    column: $table.valorIcmsEfetivo,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorIcmsStDesonerado => $composableBuilder(
    column: $table.valorIcmsStDesonerado,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get motivoDesoneracaoIcmsSt => $composableBuilder(
    column: $table.motivoDesoneracaoIcmsSt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get taxaFcpDiferido => $composableBuilder(
    column: $table.taxaFcpDiferido,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorFcpDiferido => $composableBuilder(
    column: $table.valorFcpDiferido,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorFcpEfetivo => $composableBuilder(
    column: $table.valorFcpEfetivo,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get desoneradoDeduz => $composableBuilder(
    column: $table.desoneradoDeduz,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get quantidadeTributada => $composableBuilder(
    column: $table.quantidadeTributada,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get aliquotaAdRem => $composableBuilder(
    column: $table.aliquotaAdRem,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorIcmsMono => $composableBuilder(
    column: $table.valorIcmsMono,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get quantidadeSujeitaRetencao => $composableBuilder(
    column: $table.quantidadeSujeitaRetencao,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get aliquotaAdRemRetencao => $composableBuilder(
    column: $table.aliquotaAdRemRetencao,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorIcmsMonoRetencao => $composableBuilder(
    column: $table.valorIcmsMonoRetencao,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get percentualReducaoAdRem => $composableBuilder(
    column: $table.percentualReducaoAdRem,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get motivoReducaoAdRem => $composableBuilder(
    column: $table.motivoReducaoAdRem,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorIcmsMonoOperacao => $composableBuilder(
    column: $table.valorIcmsMonoOperacao,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get percentualDiferimentoMono => $composableBuilder(
    column: $table.percentualDiferimentoMono,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorIcmsDiferidoMono => $composableBuilder(
    column: $table.valorIcmsDiferidoMono,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get quantidadeTributadaRetida => $composableBuilder(
    column: $table.quantidadeTributadaRetida,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get aliquotaAdRemRetida => $composableBuilder(
    column: $table.aliquotaAdRemRetida,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorIcmsRetido => $composableBuilder(
    column: $table.valorIcmsRetido,
    builder: (column) => ColumnFilters(column),
  );
}

class $$NfeDetalheImpostoIcmssTableOrderingComposer
    extends Composer<_$AppDatabase, $NfeDetalheImpostoIcmssTable> {
  $$NfeDetalheImpostoIcmssTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get origemMercadoria => $composableBuilder(
    column: $table.origemMercadoria,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get cstIcms => $composableBuilder(
    column: $table.cstIcms,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get csosn => $composableBuilder(
    column: $table.csosn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get modalidadeBcIcms => $composableBuilder(
    column: $table.modalidadeBcIcms,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get percentualReducaoBcIcms => $composableBuilder(
    column: $table.percentualReducaoBcIcms,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorBcIcms => $composableBuilder(
    column: $table.valorBcIcms,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get aliquotaIcms => $composableBuilder(
    column: $table.aliquotaIcms,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorIcmsOperacao => $composableBuilder(
    column: $table.valorIcmsOperacao,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get percentualDiferimento => $composableBuilder(
    column: $table.percentualDiferimento,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorIcmsDiferido => $composableBuilder(
    column: $table.valorIcmsDiferido,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorIcms => $composableBuilder(
    column: $table.valorIcms,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get baseCalculoFcp => $composableBuilder(
    column: $table.baseCalculoFcp,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get percentualFcp => $composableBuilder(
    column: $table.percentualFcp,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorFcp => $composableBuilder(
    column: $table.valorFcp,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get modalidadeBcIcmsSt => $composableBuilder(
    column: $table.modalidadeBcIcmsSt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get percentualMvaIcmsSt => $composableBuilder(
    column: $table.percentualMvaIcmsSt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get percentualReducaoBcIcmsSt => $composableBuilder(
    column: $table.percentualReducaoBcIcmsSt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorBaseCalculoIcmsSt => $composableBuilder(
    column: $table.valorBaseCalculoIcmsSt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get aliquotaIcmsSt => $composableBuilder(
    column: $table.aliquotaIcmsSt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorIcmsSt => $composableBuilder(
    column: $table.valorIcmsSt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get baseCalculoFcpSt => $composableBuilder(
    column: $table.baseCalculoFcpSt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get percentualFcpSt => $composableBuilder(
    column: $table.percentualFcpSt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorFcpSt => $composableBuilder(
    column: $table.valorFcpSt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get ufSt => $composableBuilder(
    column: $table.ufSt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get percentualBcOperacaoPropria => $composableBuilder(
    column: $table.percentualBcOperacaoPropria,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorBcIcmsStRetido => $composableBuilder(
    column: $table.valorBcIcmsStRetido,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get aliquotaSuportadaConsumidor => $composableBuilder(
    column: $table.aliquotaSuportadaConsumidor,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorIcmsSubstituto => $composableBuilder(
    column: $table.valorIcmsSubstituto,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorIcmsStRetido => $composableBuilder(
    column: $table.valorIcmsStRetido,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get baseCalculoFcpStRetido => $composableBuilder(
    column: $table.baseCalculoFcpStRetido,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get percentualFcpStRetido => $composableBuilder(
    column: $table.percentualFcpStRetido,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorFcpStRetido => $composableBuilder(
    column: $table.valorFcpStRetido,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get motivoDesoneracaoIcms => $composableBuilder(
    column: $table.motivoDesoneracaoIcms,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorIcmsDesonerado => $composableBuilder(
    column: $table.valorIcmsDesonerado,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get aliquotaCreditoIcmsSn => $composableBuilder(
    column: $table.aliquotaCreditoIcmsSn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorCreditoIcmsSn => $composableBuilder(
    column: $table.valorCreditoIcmsSn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorBcIcmsStDestino => $composableBuilder(
    column: $table.valorBcIcmsStDestino,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorIcmsStDestino => $composableBuilder(
    column: $table.valorIcmsStDestino,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get percentualReducaoBcEfetivo => $composableBuilder(
    column: $table.percentualReducaoBcEfetivo,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorBcEfetivo => $composableBuilder(
    column: $table.valorBcEfetivo,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get aliquotaIcmsEfetivo => $composableBuilder(
    column: $table.aliquotaIcmsEfetivo,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorIcmsEfetivo => $composableBuilder(
    column: $table.valorIcmsEfetivo,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorIcmsStDesonerado => $composableBuilder(
    column: $table.valorIcmsStDesonerado,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get motivoDesoneracaoIcmsSt => $composableBuilder(
    column: $table.motivoDesoneracaoIcmsSt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get taxaFcpDiferido => $composableBuilder(
    column: $table.taxaFcpDiferido,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorFcpDiferido => $composableBuilder(
    column: $table.valorFcpDiferido,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorFcpEfetivo => $composableBuilder(
    column: $table.valorFcpEfetivo,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get desoneradoDeduz => $composableBuilder(
    column: $table.desoneradoDeduz,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get quantidadeTributada => $composableBuilder(
    column: $table.quantidadeTributada,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get aliquotaAdRem => $composableBuilder(
    column: $table.aliquotaAdRem,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorIcmsMono => $composableBuilder(
    column: $table.valorIcmsMono,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get quantidadeSujeitaRetencao => $composableBuilder(
    column: $table.quantidadeSujeitaRetencao,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get aliquotaAdRemRetencao => $composableBuilder(
    column: $table.aliquotaAdRemRetencao,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorIcmsMonoRetencao => $composableBuilder(
    column: $table.valorIcmsMonoRetencao,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get percentualReducaoAdRem => $composableBuilder(
    column: $table.percentualReducaoAdRem,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get motivoReducaoAdRem => $composableBuilder(
    column: $table.motivoReducaoAdRem,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorIcmsMonoOperacao => $composableBuilder(
    column: $table.valorIcmsMonoOperacao,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get percentualDiferimentoMono => $composableBuilder(
    column: $table.percentualDiferimentoMono,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorIcmsDiferidoMono => $composableBuilder(
    column: $table.valorIcmsDiferidoMono,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get quantidadeTributadaRetida => $composableBuilder(
    column: $table.quantidadeTributadaRetida,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get aliquotaAdRemRetida => $composableBuilder(
    column: $table.aliquotaAdRemRetida,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorIcmsRetido => $composableBuilder(
    column: $table.valorIcmsRetido,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$NfeDetalheImpostoIcmssTableAnnotationComposer
    extends Composer<_$AppDatabase, $NfeDetalheImpostoIcmssTable> {
  $$NfeDetalheImpostoIcmssTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => column,
  );

  GeneratedColumn<String> get origemMercadoria => $composableBuilder(
    column: $table.origemMercadoria,
    builder: (column) => column,
  );

  GeneratedColumn<String> get cstIcms =>
      $composableBuilder(column: $table.cstIcms, builder: (column) => column);

  GeneratedColumn<String> get csosn =>
      $composableBuilder(column: $table.csosn, builder: (column) => column);

  GeneratedColumn<String> get modalidadeBcIcms => $composableBuilder(
    column: $table.modalidadeBcIcms,
    builder: (column) => column,
  );

  GeneratedColumn<double> get percentualReducaoBcIcms => $composableBuilder(
    column: $table.percentualReducaoBcIcms,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorBcIcms => $composableBuilder(
    column: $table.valorBcIcms,
    builder: (column) => column,
  );

  GeneratedColumn<double> get aliquotaIcms => $composableBuilder(
    column: $table.aliquotaIcms,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorIcmsOperacao => $composableBuilder(
    column: $table.valorIcmsOperacao,
    builder: (column) => column,
  );

  GeneratedColumn<double> get percentualDiferimento => $composableBuilder(
    column: $table.percentualDiferimento,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorIcmsDiferido => $composableBuilder(
    column: $table.valorIcmsDiferido,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorIcms =>
      $composableBuilder(column: $table.valorIcms, builder: (column) => column);

  GeneratedColumn<double> get baseCalculoFcp => $composableBuilder(
    column: $table.baseCalculoFcp,
    builder: (column) => column,
  );

  GeneratedColumn<double> get percentualFcp => $composableBuilder(
    column: $table.percentualFcp,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorFcp =>
      $composableBuilder(column: $table.valorFcp, builder: (column) => column);

  GeneratedColumn<String> get modalidadeBcIcmsSt => $composableBuilder(
    column: $table.modalidadeBcIcmsSt,
    builder: (column) => column,
  );

  GeneratedColumn<double> get percentualMvaIcmsSt => $composableBuilder(
    column: $table.percentualMvaIcmsSt,
    builder: (column) => column,
  );

  GeneratedColumn<double> get percentualReducaoBcIcmsSt => $composableBuilder(
    column: $table.percentualReducaoBcIcmsSt,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorBaseCalculoIcmsSt => $composableBuilder(
    column: $table.valorBaseCalculoIcmsSt,
    builder: (column) => column,
  );

  GeneratedColumn<double> get aliquotaIcmsSt => $composableBuilder(
    column: $table.aliquotaIcmsSt,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorIcmsSt => $composableBuilder(
    column: $table.valorIcmsSt,
    builder: (column) => column,
  );

  GeneratedColumn<double> get baseCalculoFcpSt => $composableBuilder(
    column: $table.baseCalculoFcpSt,
    builder: (column) => column,
  );

  GeneratedColumn<double> get percentualFcpSt => $composableBuilder(
    column: $table.percentualFcpSt,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorFcpSt => $composableBuilder(
    column: $table.valorFcpSt,
    builder: (column) => column,
  );

  GeneratedColumn<String> get ufSt =>
      $composableBuilder(column: $table.ufSt, builder: (column) => column);

  GeneratedColumn<double> get percentualBcOperacaoPropria => $composableBuilder(
    column: $table.percentualBcOperacaoPropria,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorBcIcmsStRetido => $composableBuilder(
    column: $table.valorBcIcmsStRetido,
    builder: (column) => column,
  );

  GeneratedColumn<double> get aliquotaSuportadaConsumidor => $composableBuilder(
    column: $table.aliquotaSuportadaConsumidor,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorIcmsSubstituto => $composableBuilder(
    column: $table.valorIcmsSubstituto,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorIcmsStRetido => $composableBuilder(
    column: $table.valorIcmsStRetido,
    builder: (column) => column,
  );

  GeneratedColumn<double> get baseCalculoFcpStRetido => $composableBuilder(
    column: $table.baseCalculoFcpStRetido,
    builder: (column) => column,
  );

  GeneratedColumn<double> get percentualFcpStRetido => $composableBuilder(
    column: $table.percentualFcpStRetido,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorFcpStRetido => $composableBuilder(
    column: $table.valorFcpStRetido,
    builder: (column) => column,
  );

  GeneratedColumn<String> get motivoDesoneracaoIcms => $composableBuilder(
    column: $table.motivoDesoneracaoIcms,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorIcmsDesonerado => $composableBuilder(
    column: $table.valorIcmsDesonerado,
    builder: (column) => column,
  );

  GeneratedColumn<double> get aliquotaCreditoIcmsSn => $composableBuilder(
    column: $table.aliquotaCreditoIcmsSn,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorCreditoIcmsSn => $composableBuilder(
    column: $table.valorCreditoIcmsSn,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorBcIcmsStDestino => $composableBuilder(
    column: $table.valorBcIcmsStDestino,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorIcmsStDestino => $composableBuilder(
    column: $table.valorIcmsStDestino,
    builder: (column) => column,
  );

  GeneratedColumn<double> get percentualReducaoBcEfetivo => $composableBuilder(
    column: $table.percentualReducaoBcEfetivo,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorBcEfetivo => $composableBuilder(
    column: $table.valorBcEfetivo,
    builder: (column) => column,
  );

  GeneratedColumn<double> get aliquotaIcmsEfetivo => $composableBuilder(
    column: $table.aliquotaIcmsEfetivo,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorIcmsEfetivo => $composableBuilder(
    column: $table.valorIcmsEfetivo,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorIcmsStDesonerado => $composableBuilder(
    column: $table.valorIcmsStDesonerado,
    builder: (column) => column,
  );

  GeneratedColumn<String> get motivoDesoneracaoIcmsSt => $composableBuilder(
    column: $table.motivoDesoneracaoIcmsSt,
    builder: (column) => column,
  );

  GeneratedColumn<double> get taxaFcpDiferido => $composableBuilder(
    column: $table.taxaFcpDiferido,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorFcpDiferido => $composableBuilder(
    column: $table.valorFcpDiferido,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorFcpEfetivo => $composableBuilder(
    column: $table.valorFcpEfetivo,
    builder: (column) => column,
  );

  GeneratedColumn<String> get desoneradoDeduz => $composableBuilder(
    column: $table.desoneradoDeduz,
    builder: (column) => column,
  );

  GeneratedColumn<double> get quantidadeTributada => $composableBuilder(
    column: $table.quantidadeTributada,
    builder: (column) => column,
  );

  GeneratedColumn<double> get aliquotaAdRem => $composableBuilder(
    column: $table.aliquotaAdRem,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorIcmsMono => $composableBuilder(
    column: $table.valorIcmsMono,
    builder: (column) => column,
  );

  GeneratedColumn<double> get quantidadeSujeitaRetencao => $composableBuilder(
    column: $table.quantidadeSujeitaRetencao,
    builder: (column) => column,
  );

  GeneratedColumn<double> get aliquotaAdRemRetencao => $composableBuilder(
    column: $table.aliquotaAdRemRetencao,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorIcmsMonoRetencao => $composableBuilder(
    column: $table.valorIcmsMonoRetencao,
    builder: (column) => column,
  );

  GeneratedColumn<double> get percentualReducaoAdRem => $composableBuilder(
    column: $table.percentualReducaoAdRem,
    builder: (column) => column,
  );

  GeneratedColumn<String> get motivoReducaoAdRem => $composableBuilder(
    column: $table.motivoReducaoAdRem,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorIcmsMonoOperacao => $composableBuilder(
    column: $table.valorIcmsMonoOperacao,
    builder: (column) => column,
  );

  GeneratedColumn<double> get percentualDiferimentoMono => $composableBuilder(
    column: $table.percentualDiferimentoMono,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorIcmsDiferidoMono => $composableBuilder(
    column: $table.valorIcmsDiferidoMono,
    builder: (column) => column,
  );

  GeneratedColumn<double> get quantidadeTributadaRetida => $composableBuilder(
    column: $table.quantidadeTributadaRetida,
    builder: (column) => column,
  );

  GeneratedColumn<double> get aliquotaAdRemRetida => $composableBuilder(
    column: $table.aliquotaAdRemRetida,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorIcmsRetido => $composableBuilder(
    column: $table.valorIcmsRetido,
    builder: (column) => column,
  );
}

class $$NfeDetalheImpostoIcmssTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $NfeDetalheImpostoIcmssTable,
          NfeDetalheImpostoIcms,
          $$NfeDetalheImpostoIcmssTableFilterComposer,
          $$NfeDetalheImpostoIcmssTableOrderingComposer,
          $$NfeDetalheImpostoIcmssTableAnnotationComposer,
          $$NfeDetalheImpostoIcmssTableCreateCompanionBuilder,
          $$NfeDetalheImpostoIcmssTableUpdateCompanionBuilder,
          (
            NfeDetalheImpostoIcms,
            BaseReferences<
              _$AppDatabase,
              $NfeDetalheImpostoIcmssTable,
              NfeDetalheImpostoIcms
            >,
          ),
          NfeDetalheImpostoIcms,
          PrefetchHooks Function()
        > {
  $$NfeDetalheImpostoIcmssTableTableManager(
    _$AppDatabase db,
    $NfeDetalheImpostoIcmssTable table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer:
              () => $$NfeDetalheImpostoIcmssTableFilterComposer(
                $db: db,
                $table: table,
              ),
          createOrderingComposer:
              () => $$NfeDetalheImpostoIcmssTableOrderingComposer(
                $db: db,
                $table: table,
              ),
          createComputedFieldComposer:
              () => $$NfeDetalheImpostoIcmssTableAnnotationComposer(
                $db: db,
                $table: table,
              ),
          updateCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeDetalhe = const Value.absent(),
                Value<String?> origemMercadoria = const Value.absent(),
                Value<String?> cstIcms = const Value.absent(),
                Value<String?> csosn = const Value.absent(),
                Value<String?> modalidadeBcIcms = const Value.absent(),
                Value<double?> percentualReducaoBcIcms = const Value.absent(),
                Value<double?> valorBcIcms = const Value.absent(),
                Value<double?> aliquotaIcms = const Value.absent(),
                Value<double?> valorIcmsOperacao = const Value.absent(),
                Value<double?> percentualDiferimento = const Value.absent(),
                Value<double?> valorIcmsDiferido = const Value.absent(),
                Value<double?> valorIcms = const Value.absent(),
                Value<double?> baseCalculoFcp = const Value.absent(),
                Value<double?> percentualFcp = const Value.absent(),
                Value<double?> valorFcp = const Value.absent(),
                Value<String?> modalidadeBcIcmsSt = const Value.absent(),
                Value<double?> percentualMvaIcmsSt = const Value.absent(),
                Value<double?> percentualReducaoBcIcmsSt = const Value.absent(),
                Value<double?> valorBaseCalculoIcmsSt = const Value.absent(),
                Value<double?> aliquotaIcmsSt = const Value.absent(),
                Value<double?> valorIcmsSt = const Value.absent(),
                Value<double?> baseCalculoFcpSt = const Value.absent(),
                Value<double?> percentualFcpSt = const Value.absent(),
                Value<double?> valorFcpSt = const Value.absent(),
                Value<String?> ufSt = const Value.absent(),
                Value<double?> percentualBcOperacaoPropria =
                    const Value.absent(),
                Value<double?> valorBcIcmsStRetido = const Value.absent(),
                Value<double?> aliquotaSuportadaConsumidor =
                    const Value.absent(),
                Value<double?> valorIcmsSubstituto = const Value.absent(),
                Value<double?> valorIcmsStRetido = const Value.absent(),
                Value<double?> baseCalculoFcpStRetido = const Value.absent(),
                Value<double?> percentualFcpStRetido = const Value.absent(),
                Value<double?> valorFcpStRetido = const Value.absent(),
                Value<String?> motivoDesoneracaoIcms = const Value.absent(),
                Value<double?> valorIcmsDesonerado = const Value.absent(),
                Value<double?> aliquotaCreditoIcmsSn = const Value.absent(),
                Value<double?> valorCreditoIcmsSn = const Value.absent(),
                Value<double?> valorBcIcmsStDestino = const Value.absent(),
                Value<double?> valorIcmsStDestino = const Value.absent(),
                Value<double?> percentualReducaoBcEfetivo =
                    const Value.absent(),
                Value<double?> valorBcEfetivo = const Value.absent(),
                Value<double?> aliquotaIcmsEfetivo = const Value.absent(),
                Value<double?> valorIcmsEfetivo = const Value.absent(),
                Value<double?> valorIcmsStDesonerado = const Value.absent(),
                Value<String?> motivoDesoneracaoIcmsSt = const Value.absent(),
                Value<double?> taxaFcpDiferido = const Value.absent(),
                Value<double?> valorFcpDiferido = const Value.absent(),
                Value<double?> valorFcpEfetivo = const Value.absent(),
                Value<String?> desoneradoDeduz = const Value.absent(),
                Value<double?> quantidadeTributada = const Value.absent(),
                Value<double?> aliquotaAdRem = const Value.absent(),
                Value<double?> valorIcmsMono = const Value.absent(),
                Value<double?> quantidadeSujeitaRetencao = const Value.absent(),
                Value<double?> aliquotaAdRemRetencao = const Value.absent(),
                Value<double?> valorIcmsMonoRetencao = const Value.absent(),
                Value<double?> percentualReducaoAdRem = const Value.absent(),
                Value<String?> motivoReducaoAdRem = const Value.absent(),
                Value<double?> valorIcmsMonoOperacao = const Value.absent(),
                Value<double?> percentualDiferimentoMono = const Value.absent(),
                Value<double?> valorIcmsDiferidoMono = const Value.absent(),
                Value<double?> quantidadeTributadaRetida = const Value.absent(),
                Value<double?> aliquotaAdRemRetida = const Value.absent(),
                Value<double?> valorIcmsRetido = const Value.absent(),
              }) => NfeDetalheImpostoIcmssCompanion(
                id: id,
                idNfeDetalhe: idNfeDetalhe,
                origemMercadoria: origemMercadoria,
                cstIcms: cstIcms,
                csosn: csosn,
                modalidadeBcIcms: modalidadeBcIcms,
                percentualReducaoBcIcms: percentualReducaoBcIcms,
                valorBcIcms: valorBcIcms,
                aliquotaIcms: aliquotaIcms,
                valorIcmsOperacao: valorIcmsOperacao,
                percentualDiferimento: percentualDiferimento,
                valorIcmsDiferido: valorIcmsDiferido,
                valorIcms: valorIcms,
                baseCalculoFcp: baseCalculoFcp,
                percentualFcp: percentualFcp,
                valorFcp: valorFcp,
                modalidadeBcIcmsSt: modalidadeBcIcmsSt,
                percentualMvaIcmsSt: percentualMvaIcmsSt,
                percentualReducaoBcIcmsSt: percentualReducaoBcIcmsSt,
                valorBaseCalculoIcmsSt: valorBaseCalculoIcmsSt,
                aliquotaIcmsSt: aliquotaIcmsSt,
                valorIcmsSt: valorIcmsSt,
                baseCalculoFcpSt: baseCalculoFcpSt,
                percentualFcpSt: percentualFcpSt,
                valorFcpSt: valorFcpSt,
                ufSt: ufSt,
                percentualBcOperacaoPropria: percentualBcOperacaoPropria,
                valorBcIcmsStRetido: valorBcIcmsStRetido,
                aliquotaSuportadaConsumidor: aliquotaSuportadaConsumidor,
                valorIcmsSubstituto: valorIcmsSubstituto,
                valorIcmsStRetido: valorIcmsStRetido,
                baseCalculoFcpStRetido: baseCalculoFcpStRetido,
                percentualFcpStRetido: percentualFcpStRetido,
                valorFcpStRetido: valorFcpStRetido,
                motivoDesoneracaoIcms: motivoDesoneracaoIcms,
                valorIcmsDesonerado: valorIcmsDesonerado,
                aliquotaCreditoIcmsSn: aliquotaCreditoIcmsSn,
                valorCreditoIcmsSn: valorCreditoIcmsSn,
                valorBcIcmsStDestino: valorBcIcmsStDestino,
                valorIcmsStDestino: valorIcmsStDestino,
                percentualReducaoBcEfetivo: percentualReducaoBcEfetivo,
                valorBcEfetivo: valorBcEfetivo,
                aliquotaIcmsEfetivo: aliquotaIcmsEfetivo,
                valorIcmsEfetivo: valorIcmsEfetivo,
                valorIcmsStDesonerado: valorIcmsStDesonerado,
                motivoDesoneracaoIcmsSt: motivoDesoneracaoIcmsSt,
                taxaFcpDiferido: taxaFcpDiferido,
                valorFcpDiferido: valorFcpDiferido,
                valorFcpEfetivo: valorFcpEfetivo,
                desoneradoDeduz: desoneradoDeduz,
                quantidadeTributada: quantidadeTributada,
                aliquotaAdRem: aliquotaAdRem,
                valorIcmsMono: valorIcmsMono,
                quantidadeSujeitaRetencao: quantidadeSujeitaRetencao,
                aliquotaAdRemRetencao: aliquotaAdRemRetencao,
                valorIcmsMonoRetencao: valorIcmsMonoRetencao,
                percentualReducaoAdRem: percentualReducaoAdRem,
                motivoReducaoAdRem: motivoReducaoAdRem,
                valorIcmsMonoOperacao: valorIcmsMonoOperacao,
                percentualDiferimentoMono: percentualDiferimentoMono,
                valorIcmsDiferidoMono: valorIcmsDiferidoMono,
                quantidadeTributadaRetida: quantidadeTributadaRetida,
                aliquotaAdRemRetida: aliquotaAdRemRetida,
                valorIcmsRetido: valorIcmsRetido,
              ),
          createCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeDetalhe = const Value.absent(),
                Value<String?> origemMercadoria = const Value.absent(),
                Value<String?> cstIcms = const Value.absent(),
                Value<String?> csosn = const Value.absent(),
                Value<String?> modalidadeBcIcms = const Value.absent(),
                Value<double?> percentualReducaoBcIcms = const Value.absent(),
                Value<double?> valorBcIcms = const Value.absent(),
                Value<double?> aliquotaIcms = const Value.absent(),
                Value<double?> valorIcmsOperacao = const Value.absent(),
                Value<double?> percentualDiferimento = const Value.absent(),
                Value<double?> valorIcmsDiferido = const Value.absent(),
                Value<double?> valorIcms = const Value.absent(),
                Value<double?> baseCalculoFcp = const Value.absent(),
                Value<double?> percentualFcp = const Value.absent(),
                Value<double?> valorFcp = const Value.absent(),
                Value<String?> modalidadeBcIcmsSt = const Value.absent(),
                Value<double?> percentualMvaIcmsSt = const Value.absent(),
                Value<double?> percentualReducaoBcIcmsSt = const Value.absent(),
                Value<double?> valorBaseCalculoIcmsSt = const Value.absent(),
                Value<double?> aliquotaIcmsSt = const Value.absent(),
                Value<double?> valorIcmsSt = const Value.absent(),
                Value<double?> baseCalculoFcpSt = const Value.absent(),
                Value<double?> percentualFcpSt = const Value.absent(),
                Value<double?> valorFcpSt = const Value.absent(),
                Value<String?> ufSt = const Value.absent(),
                Value<double?> percentualBcOperacaoPropria =
                    const Value.absent(),
                Value<double?> valorBcIcmsStRetido = const Value.absent(),
                Value<double?> aliquotaSuportadaConsumidor =
                    const Value.absent(),
                Value<double?> valorIcmsSubstituto = const Value.absent(),
                Value<double?> valorIcmsStRetido = const Value.absent(),
                Value<double?> baseCalculoFcpStRetido = const Value.absent(),
                Value<double?> percentualFcpStRetido = const Value.absent(),
                Value<double?> valorFcpStRetido = const Value.absent(),
                Value<String?> motivoDesoneracaoIcms = const Value.absent(),
                Value<double?> valorIcmsDesonerado = const Value.absent(),
                Value<double?> aliquotaCreditoIcmsSn = const Value.absent(),
                Value<double?> valorCreditoIcmsSn = const Value.absent(),
                Value<double?> valorBcIcmsStDestino = const Value.absent(),
                Value<double?> valorIcmsStDestino = const Value.absent(),
                Value<double?> percentualReducaoBcEfetivo =
                    const Value.absent(),
                Value<double?> valorBcEfetivo = const Value.absent(),
                Value<double?> aliquotaIcmsEfetivo = const Value.absent(),
                Value<double?> valorIcmsEfetivo = const Value.absent(),
                Value<double?> valorIcmsStDesonerado = const Value.absent(),
                Value<String?> motivoDesoneracaoIcmsSt = const Value.absent(),
                Value<double?> taxaFcpDiferido = const Value.absent(),
                Value<double?> valorFcpDiferido = const Value.absent(),
                Value<double?> valorFcpEfetivo = const Value.absent(),
                Value<String?> desoneradoDeduz = const Value.absent(),
                Value<double?> quantidadeTributada = const Value.absent(),
                Value<double?> aliquotaAdRem = const Value.absent(),
                Value<double?> valorIcmsMono = const Value.absent(),
                Value<double?> quantidadeSujeitaRetencao = const Value.absent(),
                Value<double?> aliquotaAdRemRetencao = const Value.absent(),
                Value<double?> valorIcmsMonoRetencao = const Value.absent(),
                Value<double?> percentualReducaoAdRem = const Value.absent(),
                Value<String?> motivoReducaoAdRem = const Value.absent(),
                Value<double?> valorIcmsMonoOperacao = const Value.absent(),
                Value<double?> percentualDiferimentoMono = const Value.absent(),
                Value<double?> valorIcmsDiferidoMono = const Value.absent(),
                Value<double?> quantidadeTributadaRetida = const Value.absent(),
                Value<double?> aliquotaAdRemRetida = const Value.absent(),
                Value<double?> valorIcmsRetido = const Value.absent(),
              }) => NfeDetalheImpostoIcmssCompanion.insert(
                id: id,
                idNfeDetalhe: idNfeDetalhe,
                origemMercadoria: origemMercadoria,
                cstIcms: cstIcms,
                csosn: csosn,
                modalidadeBcIcms: modalidadeBcIcms,
                percentualReducaoBcIcms: percentualReducaoBcIcms,
                valorBcIcms: valorBcIcms,
                aliquotaIcms: aliquotaIcms,
                valorIcmsOperacao: valorIcmsOperacao,
                percentualDiferimento: percentualDiferimento,
                valorIcmsDiferido: valorIcmsDiferido,
                valorIcms: valorIcms,
                baseCalculoFcp: baseCalculoFcp,
                percentualFcp: percentualFcp,
                valorFcp: valorFcp,
                modalidadeBcIcmsSt: modalidadeBcIcmsSt,
                percentualMvaIcmsSt: percentualMvaIcmsSt,
                percentualReducaoBcIcmsSt: percentualReducaoBcIcmsSt,
                valorBaseCalculoIcmsSt: valorBaseCalculoIcmsSt,
                aliquotaIcmsSt: aliquotaIcmsSt,
                valorIcmsSt: valorIcmsSt,
                baseCalculoFcpSt: baseCalculoFcpSt,
                percentualFcpSt: percentualFcpSt,
                valorFcpSt: valorFcpSt,
                ufSt: ufSt,
                percentualBcOperacaoPropria: percentualBcOperacaoPropria,
                valorBcIcmsStRetido: valorBcIcmsStRetido,
                aliquotaSuportadaConsumidor: aliquotaSuportadaConsumidor,
                valorIcmsSubstituto: valorIcmsSubstituto,
                valorIcmsStRetido: valorIcmsStRetido,
                baseCalculoFcpStRetido: baseCalculoFcpStRetido,
                percentualFcpStRetido: percentualFcpStRetido,
                valorFcpStRetido: valorFcpStRetido,
                motivoDesoneracaoIcms: motivoDesoneracaoIcms,
                valorIcmsDesonerado: valorIcmsDesonerado,
                aliquotaCreditoIcmsSn: aliquotaCreditoIcmsSn,
                valorCreditoIcmsSn: valorCreditoIcmsSn,
                valorBcIcmsStDestino: valorBcIcmsStDestino,
                valorIcmsStDestino: valorIcmsStDestino,
                percentualReducaoBcEfetivo: percentualReducaoBcEfetivo,
                valorBcEfetivo: valorBcEfetivo,
                aliquotaIcmsEfetivo: aliquotaIcmsEfetivo,
                valorIcmsEfetivo: valorIcmsEfetivo,
                valorIcmsStDesonerado: valorIcmsStDesonerado,
                motivoDesoneracaoIcmsSt: motivoDesoneracaoIcmsSt,
                taxaFcpDiferido: taxaFcpDiferido,
                valorFcpDiferido: valorFcpDiferido,
                valorFcpEfetivo: valorFcpEfetivo,
                desoneradoDeduz: desoneradoDeduz,
                quantidadeTributada: quantidadeTributada,
                aliquotaAdRem: aliquotaAdRem,
                valorIcmsMono: valorIcmsMono,
                quantidadeSujeitaRetencao: quantidadeSujeitaRetencao,
                aliquotaAdRemRetencao: aliquotaAdRemRetencao,
                valorIcmsMonoRetencao: valorIcmsMonoRetencao,
                percentualReducaoAdRem: percentualReducaoAdRem,
                motivoReducaoAdRem: motivoReducaoAdRem,
                valorIcmsMonoOperacao: valorIcmsMonoOperacao,
                percentualDiferimentoMono: percentualDiferimentoMono,
                valorIcmsDiferidoMono: valorIcmsDiferidoMono,
                quantidadeTributadaRetida: quantidadeTributadaRetida,
                aliquotaAdRemRetida: aliquotaAdRemRetida,
                valorIcmsRetido: valorIcmsRetido,
              ),
          withReferenceMapper:
              (p0) =>
                  p0
                      .map(
                        (e) => (
                          e.readTable(table),
                          BaseReferences(db, table, e),
                        ),
                      )
                      .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$NfeDetalheImpostoIcmssTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $NfeDetalheImpostoIcmssTable,
      NfeDetalheImpostoIcms,
      $$NfeDetalheImpostoIcmssTableFilterComposer,
      $$NfeDetalheImpostoIcmssTableOrderingComposer,
      $$NfeDetalheImpostoIcmssTableAnnotationComposer,
      $$NfeDetalheImpostoIcmssTableCreateCompanionBuilder,
      $$NfeDetalheImpostoIcmssTableUpdateCompanionBuilder,
      (
        NfeDetalheImpostoIcms,
        BaseReferences<
          _$AppDatabase,
          $NfeDetalheImpostoIcmssTable,
          NfeDetalheImpostoIcms
        >,
      ),
      NfeDetalheImpostoIcms,
      PrefetchHooks Function()
    >;
typedef $$NfeDetalheImpostoIpisTableCreateCompanionBuilder =
    NfeDetalheImpostoIpisCompanion Function({
      Value<int?> id,
      Value<int?> idNfeDetalhe,
      Value<String?> cnpjProdutor,
      Value<String?> codigoSeloIpi,
      Value<int?> quantidadeSeloIpi,
      Value<String?> enquadramentoLegalIpi,
      Value<String?> cstIpi,
      Value<double?> valorBaseCalculoIpi,
      Value<double?> quantidadeUnidadeTributavel,
      Value<double?> valorUnidadeTributavel,
      Value<double?> aliquotaIpi,
      Value<double?> valorIpi,
    });
typedef $$NfeDetalheImpostoIpisTableUpdateCompanionBuilder =
    NfeDetalheImpostoIpisCompanion Function({
      Value<int?> id,
      Value<int?> idNfeDetalhe,
      Value<String?> cnpjProdutor,
      Value<String?> codigoSeloIpi,
      Value<int?> quantidadeSeloIpi,
      Value<String?> enquadramentoLegalIpi,
      Value<String?> cstIpi,
      Value<double?> valorBaseCalculoIpi,
      Value<double?> quantidadeUnidadeTributavel,
      Value<double?> valorUnidadeTributavel,
      Value<double?> aliquotaIpi,
      Value<double?> valorIpi,
    });

class $$NfeDetalheImpostoIpisTableFilterComposer
    extends Composer<_$AppDatabase, $NfeDetalheImpostoIpisTable> {
  $$NfeDetalheImpostoIpisTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get cnpjProdutor => $composableBuilder(
    column: $table.cnpjProdutor,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get codigoSeloIpi => $composableBuilder(
    column: $table.codigoSeloIpi,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get quantidadeSeloIpi => $composableBuilder(
    column: $table.quantidadeSeloIpi,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get enquadramentoLegalIpi => $composableBuilder(
    column: $table.enquadramentoLegalIpi,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get cstIpi => $composableBuilder(
    column: $table.cstIpi,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorBaseCalculoIpi => $composableBuilder(
    column: $table.valorBaseCalculoIpi,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get quantidadeUnidadeTributavel => $composableBuilder(
    column: $table.quantidadeUnidadeTributavel,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorUnidadeTributavel => $composableBuilder(
    column: $table.valorUnidadeTributavel,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get aliquotaIpi => $composableBuilder(
    column: $table.aliquotaIpi,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorIpi => $composableBuilder(
    column: $table.valorIpi,
    builder: (column) => ColumnFilters(column),
  );
}

class $$NfeDetalheImpostoIpisTableOrderingComposer
    extends Composer<_$AppDatabase, $NfeDetalheImpostoIpisTable> {
  $$NfeDetalheImpostoIpisTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get cnpjProdutor => $composableBuilder(
    column: $table.cnpjProdutor,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get codigoSeloIpi => $composableBuilder(
    column: $table.codigoSeloIpi,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get quantidadeSeloIpi => $composableBuilder(
    column: $table.quantidadeSeloIpi,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get enquadramentoLegalIpi => $composableBuilder(
    column: $table.enquadramentoLegalIpi,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get cstIpi => $composableBuilder(
    column: $table.cstIpi,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorBaseCalculoIpi => $composableBuilder(
    column: $table.valorBaseCalculoIpi,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get quantidadeUnidadeTributavel => $composableBuilder(
    column: $table.quantidadeUnidadeTributavel,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorUnidadeTributavel => $composableBuilder(
    column: $table.valorUnidadeTributavel,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get aliquotaIpi => $composableBuilder(
    column: $table.aliquotaIpi,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorIpi => $composableBuilder(
    column: $table.valorIpi,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$NfeDetalheImpostoIpisTableAnnotationComposer
    extends Composer<_$AppDatabase, $NfeDetalheImpostoIpisTable> {
  $$NfeDetalheImpostoIpisTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => column,
  );

  GeneratedColumn<String> get cnpjProdutor => $composableBuilder(
    column: $table.cnpjProdutor,
    builder: (column) => column,
  );

  GeneratedColumn<String> get codigoSeloIpi => $composableBuilder(
    column: $table.codigoSeloIpi,
    builder: (column) => column,
  );

  GeneratedColumn<int> get quantidadeSeloIpi => $composableBuilder(
    column: $table.quantidadeSeloIpi,
    builder: (column) => column,
  );

  GeneratedColumn<String> get enquadramentoLegalIpi => $composableBuilder(
    column: $table.enquadramentoLegalIpi,
    builder: (column) => column,
  );

  GeneratedColumn<String> get cstIpi =>
      $composableBuilder(column: $table.cstIpi, builder: (column) => column);

  GeneratedColumn<double> get valorBaseCalculoIpi => $composableBuilder(
    column: $table.valorBaseCalculoIpi,
    builder: (column) => column,
  );

  GeneratedColumn<double> get quantidadeUnidadeTributavel => $composableBuilder(
    column: $table.quantidadeUnidadeTributavel,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorUnidadeTributavel => $composableBuilder(
    column: $table.valorUnidadeTributavel,
    builder: (column) => column,
  );

  GeneratedColumn<double> get aliquotaIpi => $composableBuilder(
    column: $table.aliquotaIpi,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorIpi =>
      $composableBuilder(column: $table.valorIpi, builder: (column) => column);
}

class $$NfeDetalheImpostoIpisTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $NfeDetalheImpostoIpisTable,
          NfeDetalheImpostoIpi,
          $$NfeDetalheImpostoIpisTableFilterComposer,
          $$NfeDetalheImpostoIpisTableOrderingComposer,
          $$NfeDetalheImpostoIpisTableAnnotationComposer,
          $$NfeDetalheImpostoIpisTableCreateCompanionBuilder,
          $$NfeDetalheImpostoIpisTableUpdateCompanionBuilder,
          (
            NfeDetalheImpostoIpi,
            BaseReferences<
              _$AppDatabase,
              $NfeDetalheImpostoIpisTable,
              NfeDetalheImpostoIpi
            >,
          ),
          NfeDetalheImpostoIpi,
          PrefetchHooks Function()
        > {
  $$NfeDetalheImpostoIpisTableTableManager(
    _$AppDatabase db,
    $NfeDetalheImpostoIpisTable table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer:
              () => $$NfeDetalheImpostoIpisTableFilterComposer(
                $db: db,
                $table: table,
              ),
          createOrderingComposer:
              () => $$NfeDetalheImpostoIpisTableOrderingComposer(
                $db: db,
                $table: table,
              ),
          createComputedFieldComposer:
              () => $$NfeDetalheImpostoIpisTableAnnotationComposer(
                $db: db,
                $table: table,
              ),
          updateCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeDetalhe = const Value.absent(),
                Value<String?> cnpjProdutor = const Value.absent(),
                Value<String?> codigoSeloIpi = const Value.absent(),
                Value<int?> quantidadeSeloIpi = const Value.absent(),
                Value<String?> enquadramentoLegalIpi = const Value.absent(),
                Value<String?> cstIpi = const Value.absent(),
                Value<double?> valorBaseCalculoIpi = const Value.absent(),
                Value<double?> quantidadeUnidadeTributavel =
                    const Value.absent(),
                Value<double?> valorUnidadeTributavel = const Value.absent(),
                Value<double?> aliquotaIpi = const Value.absent(),
                Value<double?> valorIpi = const Value.absent(),
              }) => NfeDetalheImpostoIpisCompanion(
                id: id,
                idNfeDetalhe: idNfeDetalhe,
                cnpjProdutor: cnpjProdutor,
                codigoSeloIpi: codigoSeloIpi,
                quantidadeSeloIpi: quantidadeSeloIpi,
                enquadramentoLegalIpi: enquadramentoLegalIpi,
                cstIpi: cstIpi,
                valorBaseCalculoIpi: valorBaseCalculoIpi,
                quantidadeUnidadeTributavel: quantidadeUnidadeTributavel,
                valorUnidadeTributavel: valorUnidadeTributavel,
                aliquotaIpi: aliquotaIpi,
                valorIpi: valorIpi,
              ),
          createCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeDetalhe = const Value.absent(),
                Value<String?> cnpjProdutor = const Value.absent(),
                Value<String?> codigoSeloIpi = const Value.absent(),
                Value<int?> quantidadeSeloIpi = const Value.absent(),
                Value<String?> enquadramentoLegalIpi = const Value.absent(),
                Value<String?> cstIpi = const Value.absent(),
                Value<double?> valorBaseCalculoIpi = const Value.absent(),
                Value<double?> quantidadeUnidadeTributavel =
                    const Value.absent(),
                Value<double?> valorUnidadeTributavel = const Value.absent(),
                Value<double?> aliquotaIpi = const Value.absent(),
                Value<double?> valorIpi = const Value.absent(),
              }) => NfeDetalheImpostoIpisCompanion.insert(
                id: id,
                idNfeDetalhe: idNfeDetalhe,
                cnpjProdutor: cnpjProdutor,
                codigoSeloIpi: codigoSeloIpi,
                quantidadeSeloIpi: quantidadeSeloIpi,
                enquadramentoLegalIpi: enquadramentoLegalIpi,
                cstIpi: cstIpi,
                valorBaseCalculoIpi: valorBaseCalculoIpi,
                quantidadeUnidadeTributavel: quantidadeUnidadeTributavel,
                valorUnidadeTributavel: valorUnidadeTributavel,
                aliquotaIpi: aliquotaIpi,
                valorIpi: valorIpi,
              ),
          withReferenceMapper:
              (p0) =>
                  p0
                      .map(
                        (e) => (
                          e.readTable(table),
                          BaseReferences(db, table, e),
                        ),
                      )
                      .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$NfeDetalheImpostoIpisTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $NfeDetalheImpostoIpisTable,
      NfeDetalheImpostoIpi,
      $$NfeDetalheImpostoIpisTableFilterComposer,
      $$NfeDetalheImpostoIpisTableOrderingComposer,
      $$NfeDetalheImpostoIpisTableAnnotationComposer,
      $$NfeDetalheImpostoIpisTableCreateCompanionBuilder,
      $$NfeDetalheImpostoIpisTableUpdateCompanionBuilder,
      (
        NfeDetalheImpostoIpi,
        BaseReferences<
          _$AppDatabase,
          $NfeDetalheImpostoIpisTable,
          NfeDetalheImpostoIpi
        >,
      ),
      NfeDetalheImpostoIpi,
      PrefetchHooks Function()
    >;
typedef $$NfeDetalheImpostoIisTableCreateCompanionBuilder =
    NfeDetalheImpostoIisCompanion Function({
      Value<int?> id,
      Value<int?> idNfeDetalhe,
      Value<double?> valorBcIi,
      Value<double?> valorDespesasAduaneiras,
      Value<double?> valorImpostoImportacao,
      Value<double?> valorIof,
    });
typedef $$NfeDetalheImpostoIisTableUpdateCompanionBuilder =
    NfeDetalheImpostoIisCompanion Function({
      Value<int?> id,
      Value<int?> idNfeDetalhe,
      Value<double?> valorBcIi,
      Value<double?> valorDespesasAduaneiras,
      Value<double?> valorImpostoImportacao,
      Value<double?> valorIof,
    });

class $$NfeDetalheImpostoIisTableFilterComposer
    extends Composer<_$AppDatabase, $NfeDetalheImpostoIisTable> {
  $$NfeDetalheImpostoIisTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorBcIi => $composableBuilder(
    column: $table.valorBcIi,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorDespesasAduaneiras => $composableBuilder(
    column: $table.valorDespesasAduaneiras,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorImpostoImportacao => $composableBuilder(
    column: $table.valorImpostoImportacao,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorIof => $composableBuilder(
    column: $table.valorIof,
    builder: (column) => ColumnFilters(column),
  );
}

class $$NfeDetalheImpostoIisTableOrderingComposer
    extends Composer<_$AppDatabase, $NfeDetalheImpostoIisTable> {
  $$NfeDetalheImpostoIisTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorBcIi => $composableBuilder(
    column: $table.valorBcIi,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorDespesasAduaneiras => $composableBuilder(
    column: $table.valorDespesasAduaneiras,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorImpostoImportacao => $composableBuilder(
    column: $table.valorImpostoImportacao,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorIof => $composableBuilder(
    column: $table.valorIof,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$NfeDetalheImpostoIisTableAnnotationComposer
    extends Composer<_$AppDatabase, $NfeDetalheImpostoIisTable> {
  $$NfeDetalheImpostoIisTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorBcIi =>
      $composableBuilder(column: $table.valorBcIi, builder: (column) => column);

  GeneratedColumn<double> get valorDespesasAduaneiras => $composableBuilder(
    column: $table.valorDespesasAduaneiras,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorImpostoImportacao => $composableBuilder(
    column: $table.valorImpostoImportacao,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorIof =>
      $composableBuilder(column: $table.valorIof, builder: (column) => column);
}

class $$NfeDetalheImpostoIisTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $NfeDetalheImpostoIisTable,
          NfeDetalheImpostoIi,
          $$NfeDetalheImpostoIisTableFilterComposer,
          $$NfeDetalheImpostoIisTableOrderingComposer,
          $$NfeDetalheImpostoIisTableAnnotationComposer,
          $$NfeDetalheImpostoIisTableCreateCompanionBuilder,
          $$NfeDetalheImpostoIisTableUpdateCompanionBuilder,
          (
            NfeDetalheImpostoIi,
            BaseReferences<
              _$AppDatabase,
              $NfeDetalheImpostoIisTable,
              NfeDetalheImpostoIi
            >,
          ),
          NfeDetalheImpostoIi,
          PrefetchHooks Function()
        > {
  $$NfeDetalheImpostoIisTableTableManager(
    _$AppDatabase db,
    $NfeDetalheImpostoIisTable table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer:
              () => $$NfeDetalheImpostoIisTableFilterComposer(
                $db: db,
                $table: table,
              ),
          createOrderingComposer:
              () => $$NfeDetalheImpostoIisTableOrderingComposer(
                $db: db,
                $table: table,
              ),
          createComputedFieldComposer:
              () => $$NfeDetalheImpostoIisTableAnnotationComposer(
                $db: db,
                $table: table,
              ),
          updateCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeDetalhe = const Value.absent(),
                Value<double?> valorBcIi = const Value.absent(),
                Value<double?> valorDespesasAduaneiras = const Value.absent(),
                Value<double?> valorImpostoImportacao = const Value.absent(),
                Value<double?> valorIof = const Value.absent(),
              }) => NfeDetalheImpostoIisCompanion(
                id: id,
                idNfeDetalhe: idNfeDetalhe,
                valorBcIi: valorBcIi,
                valorDespesasAduaneiras: valorDespesasAduaneiras,
                valorImpostoImportacao: valorImpostoImportacao,
                valorIof: valorIof,
              ),
          createCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeDetalhe = const Value.absent(),
                Value<double?> valorBcIi = const Value.absent(),
                Value<double?> valorDespesasAduaneiras = const Value.absent(),
                Value<double?> valorImpostoImportacao = const Value.absent(),
                Value<double?> valorIof = const Value.absent(),
              }) => NfeDetalheImpostoIisCompanion.insert(
                id: id,
                idNfeDetalhe: idNfeDetalhe,
                valorBcIi: valorBcIi,
                valorDespesasAduaneiras: valorDespesasAduaneiras,
                valorImpostoImportacao: valorImpostoImportacao,
                valorIof: valorIof,
              ),
          withReferenceMapper:
              (p0) =>
                  p0
                      .map(
                        (e) => (
                          e.readTable(table),
                          BaseReferences(db, table, e),
                        ),
                      )
                      .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$NfeDetalheImpostoIisTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $NfeDetalheImpostoIisTable,
      NfeDetalheImpostoIi,
      $$NfeDetalheImpostoIisTableFilterComposer,
      $$NfeDetalheImpostoIisTableOrderingComposer,
      $$NfeDetalheImpostoIisTableAnnotationComposer,
      $$NfeDetalheImpostoIisTableCreateCompanionBuilder,
      $$NfeDetalheImpostoIisTableUpdateCompanionBuilder,
      (
        NfeDetalheImpostoIi,
        BaseReferences<
          _$AppDatabase,
          $NfeDetalheImpostoIisTable,
          NfeDetalheImpostoIi
        >,
      ),
      NfeDetalheImpostoIi,
      PrefetchHooks Function()
    >;
typedef $$NfeDetalheImpostoPissTableCreateCompanionBuilder =
    NfeDetalheImpostoPissCompanion Function({
      Value<int?> id,
      Value<int?> idNfeDetalhe,
      Value<String?> cstPis,
      Value<double?> valorBaseCalculoPis,
      Value<double?> aliquotaPisPercentual,
      Value<double?> valorPis,
      Value<double?> quantidadeVendida,
      Value<double?> aliquotaPisReais,
    });
typedef $$NfeDetalheImpostoPissTableUpdateCompanionBuilder =
    NfeDetalheImpostoPissCompanion Function({
      Value<int?> id,
      Value<int?> idNfeDetalhe,
      Value<String?> cstPis,
      Value<double?> valorBaseCalculoPis,
      Value<double?> aliquotaPisPercentual,
      Value<double?> valorPis,
      Value<double?> quantidadeVendida,
      Value<double?> aliquotaPisReais,
    });

class $$NfeDetalheImpostoPissTableFilterComposer
    extends Composer<_$AppDatabase, $NfeDetalheImpostoPissTable> {
  $$NfeDetalheImpostoPissTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get cstPis => $composableBuilder(
    column: $table.cstPis,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorBaseCalculoPis => $composableBuilder(
    column: $table.valorBaseCalculoPis,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get aliquotaPisPercentual => $composableBuilder(
    column: $table.aliquotaPisPercentual,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorPis => $composableBuilder(
    column: $table.valorPis,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get quantidadeVendida => $composableBuilder(
    column: $table.quantidadeVendida,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get aliquotaPisReais => $composableBuilder(
    column: $table.aliquotaPisReais,
    builder: (column) => ColumnFilters(column),
  );
}

class $$NfeDetalheImpostoPissTableOrderingComposer
    extends Composer<_$AppDatabase, $NfeDetalheImpostoPissTable> {
  $$NfeDetalheImpostoPissTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get cstPis => $composableBuilder(
    column: $table.cstPis,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorBaseCalculoPis => $composableBuilder(
    column: $table.valorBaseCalculoPis,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get aliquotaPisPercentual => $composableBuilder(
    column: $table.aliquotaPisPercentual,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorPis => $composableBuilder(
    column: $table.valorPis,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get quantidadeVendida => $composableBuilder(
    column: $table.quantidadeVendida,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get aliquotaPisReais => $composableBuilder(
    column: $table.aliquotaPisReais,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$NfeDetalheImpostoPissTableAnnotationComposer
    extends Composer<_$AppDatabase, $NfeDetalheImpostoPissTable> {
  $$NfeDetalheImpostoPissTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => column,
  );

  GeneratedColumn<String> get cstPis =>
      $composableBuilder(column: $table.cstPis, builder: (column) => column);

  GeneratedColumn<double> get valorBaseCalculoPis => $composableBuilder(
    column: $table.valorBaseCalculoPis,
    builder: (column) => column,
  );

  GeneratedColumn<double> get aliquotaPisPercentual => $composableBuilder(
    column: $table.aliquotaPisPercentual,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorPis =>
      $composableBuilder(column: $table.valorPis, builder: (column) => column);

  GeneratedColumn<double> get quantidadeVendida => $composableBuilder(
    column: $table.quantidadeVendida,
    builder: (column) => column,
  );

  GeneratedColumn<double> get aliquotaPisReais => $composableBuilder(
    column: $table.aliquotaPisReais,
    builder: (column) => column,
  );
}

class $$NfeDetalheImpostoPissTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $NfeDetalheImpostoPissTable,
          NfeDetalheImpostoPis,
          $$NfeDetalheImpostoPissTableFilterComposer,
          $$NfeDetalheImpostoPissTableOrderingComposer,
          $$NfeDetalheImpostoPissTableAnnotationComposer,
          $$NfeDetalheImpostoPissTableCreateCompanionBuilder,
          $$NfeDetalheImpostoPissTableUpdateCompanionBuilder,
          (
            NfeDetalheImpostoPis,
            BaseReferences<
              _$AppDatabase,
              $NfeDetalheImpostoPissTable,
              NfeDetalheImpostoPis
            >,
          ),
          NfeDetalheImpostoPis,
          PrefetchHooks Function()
        > {
  $$NfeDetalheImpostoPissTableTableManager(
    _$AppDatabase db,
    $NfeDetalheImpostoPissTable table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer:
              () => $$NfeDetalheImpostoPissTableFilterComposer(
                $db: db,
                $table: table,
              ),
          createOrderingComposer:
              () => $$NfeDetalheImpostoPissTableOrderingComposer(
                $db: db,
                $table: table,
              ),
          createComputedFieldComposer:
              () => $$NfeDetalheImpostoPissTableAnnotationComposer(
                $db: db,
                $table: table,
              ),
          updateCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeDetalhe = const Value.absent(),
                Value<String?> cstPis = const Value.absent(),
                Value<double?> valorBaseCalculoPis = const Value.absent(),
                Value<double?> aliquotaPisPercentual = const Value.absent(),
                Value<double?> valorPis = const Value.absent(),
                Value<double?> quantidadeVendida = const Value.absent(),
                Value<double?> aliquotaPisReais = const Value.absent(),
              }) => NfeDetalheImpostoPissCompanion(
                id: id,
                idNfeDetalhe: idNfeDetalhe,
                cstPis: cstPis,
                valorBaseCalculoPis: valorBaseCalculoPis,
                aliquotaPisPercentual: aliquotaPisPercentual,
                valorPis: valorPis,
                quantidadeVendida: quantidadeVendida,
                aliquotaPisReais: aliquotaPisReais,
              ),
          createCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeDetalhe = const Value.absent(),
                Value<String?> cstPis = const Value.absent(),
                Value<double?> valorBaseCalculoPis = const Value.absent(),
                Value<double?> aliquotaPisPercentual = const Value.absent(),
                Value<double?> valorPis = const Value.absent(),
                Value<double?> quantidadeVendida = const Value.absent(),
                Value<double?> aliquotaPisReais = const Value.absent(),
              }) => NfeDetalheImpostoPissCompanion.insert(
                id: id,
                idNfeDetalhe: idNfeDetalhe,
                cstPis: cstPis,
                valorBaseCalculoPis: valorBaseCalculoPis,
                aliquotaPisPercentual: aliquotaPisPercentual,
                valorPis: valorPis,
                quantidadeVendida: quantidadeVendida,
                aliquotaPisReais: aliquotaPisReais,
              ),
          withReferenceMapper:
              (p0) =>
                  p0
                      .map(
                        (e) => (
                          e.readTable(table),
                          BaseReferences(db, table, e),
                        ),
                      )
                      .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$NfeDetalheImpostoPissTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $NfeDetalheImpostoPissTable,
      NfeDetalheImpostoPis,
      $$NfeDetalheImpostoPissTableFilterComposer,
      $$NfeDetalheImpostoPissTableOrderingComposer,
      $$NfeDetalheImpostoPissTableAnnotationComposer,
      $$NfeDetalheImpostoPissTableCreateCompanionBuilder,
      $$NfeDetalheImpostoPissTableUpdateCompanionBuilder,
      (
        NfeDetalheImpostoPis,
        BaseReferences<
          _$AppDatabase,
          $NfeDetalheImpostoPissTable,
          NfeDetalheImpostoPis
        >,
      ),
      NfeDetalheImpostoPis,
      PrefetchHooks Function()
    >;
typedef $$NfeDetalheImpostoCofinssTableCreateCompanionBuilder =
    NfeDetalheImpostoCofinssCompanion Function({
      Value<int?> id,
      Value<int?> idNfeDetalhe,
      Value<String?> cstCofins,
      Value<double?> baseCalculoCofins,
      Value<double?> aliquotaCofinsPercentual,
      Value<double?> quantidadeVendida,
      Value<double?> aliquotaCofinsReais,
      Value<double?> valorCofins,
    });
typedef $$NfeDetalheImpostoCofinssTableUpdateCompanionBuilder =
    NfeDetalheImpostoCofinssCompanion Function({
      Value<int?> id,
      Value<int?> idNfeDetalhe,
      Value<String?> cstCofins,
      Value<double?> baseCalculoCofins,
      Value<double?> aliquotaCofinsPercentual,
      Value<double?> quantidadeVendida,
      Value<double?> aliquotaCofinsReais,
      Value<double?> valorCofins,
    });

class $$NfeDetalheImpostoCofinssTableFilterComposer
    extends Composer<_$AppDatabase, $NfeDetalheImpostoCofinssTable> {
  $$NfeDetalheImpostoCofinssTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get cstCofins => $composableBuilder(
    column: $table.cstCofins,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get baseCalculoCofins => $composableBuilder(
    column: $table.baseCalculoCofins,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get aliquotaCofinsPercentual => $composableBuilder(
    column: $table.aliquotaCofinsPercentual,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get quantidadeVendida => $composableBuilder(
    column: $table.quantidadeVendida,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get aliquotaCofinsReais => $composableBuilder(
    column: $table.aliquotaCofinsReais,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorCofins => $composableBuilder(
    column: $table.valorCofins,
    builder: (column) => ColumnFilters(column),
  );
}

class $$NfeDetalheImpostoCofinssTableOrderingComposer
    extends Composer<_$AppDatabase, $NfeDetalheImpostoCofinssTable> {
  $$NfeDetalheImpostoCofinssTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get cstCofins => $composableBuilder(
    column: $table.cstCofins,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get baseCalculoCofins => $composableBuilder(
    column: $table.baseCalculoCofins,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get aliquotaCofinsPercentual => $composableBuilder(
    column: $table.aliquotaCofinsPercentual,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get quantidadeVendida => $composableBuilder(
    column: $table.quantidadeVendida,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get aliquotaCofinsReais => $composableBuilder(
    column: $table.aliquotaCofinsReais,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorCofins => $composableBuilder(
    column: $table.valorCofins,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$NfeDetalheImpostoCofinssTableAnnotationComposer
    extends Composer<_$AppDatabase, $NfeDetalheImpostoCofinssTable> {
  $$NfeDetalheImpostoCofinssTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => column,
  );

  GeneratedColumn<String> get cstCofins =>
      $composableBuilder(column: $table.cstCofins, builder: (column) => column);

  GeneratedColumn<double> get baseCalculoCofins => $composableBuilder(
    column: $table.baseCalculoCofins,
    builder: (column) => column,
  );

  GeneratedColumn<double> get aliquotaCofinsPercentual => $composableBuilder(
    column: $table.aliquotaCofinsPercentual,
    builder: (column) => column,
  );

  GeneratedColumn<double> get quantidadeVendida => $composableBuilder(
    column: $table.quantidadeVendida,
    builder: (column) => column,
  );

  GeneratedColumn<double> get aliquotaCofinsReais => $composableBuilder(
    column: $table.aliquotaCofinsReais,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorCofins => $composableBuilder(
    column: $table.valorCofins,
    builder: (column) => column,
  );
}

class $$NfeDetalheImpostoCofinssTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $NfeDetalheImpostoCofinssTable,
          NfeDetalheImpostoCofins,
          $$NfeDetalheImpostoCofinssTableFilterComposer,
          $$NfeDetalheImpostoCofinssTableOrderingComposer,
          $$NfeDetalheImpostoCofinssTableAnnotationComposer,
          $$NfeDetalheImpostoCofinssTableCreateCompanionBuilder,
          $$NfeDetalheImpostoCofinssTableUpdateCompanionBuilder,
          (
            NfeDetalheImpostoCofins,
            BaseReferences<
              _$AppDatabase,
              $NfeDetalheImpostoCofinssTable,
              NfeDetalheImpostoCofins
            >,
          ),
          NfeDetalheImpostoCofins,
          PrefetchHooks Function()
        > {
  $$NfeDetalheImpostoCofinssTableTableManager(
    _$AppDatabase db,
    $NfeDetalheImpostoCofinssTable table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer:
              () => $$NfeDetalheImpostoCofinssTableFilterComposer(
                $db: db,
                $table: table,
              ),
          createOrderingComposer:
              () => $$NfeDetalheImpostoCofinssTableOrderingComposer(
                $db: db,
                $table: table,
              ),
          createComputedFieldComposer:
              () => $$NfeDetalheImpostoCofinssTableAnnotationComposer(
                $db: db,
                $table: table,
              ),
          updateCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeDetalhe = const Value.absent(),
                Value<String?> cstCofins = const Value.absent(),
                Value<double?> baseCalculoCofins = const Value.absent(),
                Value<double?> aliquotaCofinsPercentual = const Value.absent(),
                Value<double?> quantidadeVendida = const Value.absent(),
                Value<double?> aliquotaCofinsReais = const Value.absent(),
                Value<double?> valorCofins = const Value.absent(),
              }) => NfeDetalheImpostoCofinssCompanion(
                id: id,
                idNfeDetalhe: idNfeDetalhe,
                cstCofins: cstCofins,
                baseCalculoCofins: baseCalculoCofins,
                aliquotaCofinsPercentual: aliquotaCofinsPercentual,
                quantidadeVendida: quantidadeVendida,
                aliquotaCofinsReais: aliquotaCofinsReais,
                valorCofins: valorCofins,
              ),
          createCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeDetalhe = const Value.absent(),
                Value<String?> cstCofins = const Value.absent(),
                Value<double?> baseCalculoCofins = const Value.absent(),
                Value<double?> aliquotaCofinsPercentual = const Value.absent(),
                Value<double?> quantidadeVendida = const Value.absent(),
                Value<double?> aliquotaCofinsReais = const Value.absent(),
                Value<double?> valorCofins = const Value.absent(),
              }) => NfeDetalheImpostoCofinssCompanion.insert(
                id: id,
                idNfeDetalhe: idNfeDetalhe,
                cstCofins: cstCofins,
                baseCalculoCofins: baseCalculoCofins,
                aliquotaCofinsPercentual: aliquotaCofinsPercentual,
                quantidadeVendida: quantidadeVendida,
                aliquotaCofinsReais: aliquotaCofinsReais,
                valorCofins: valorCofins,
              ),
          withReferenceMapper:
              (p0) =>
                  p0
                      .map(
                        (e) => (
                          e.readTable(table),
                          BaseReferences(db, table, e),
                        ),
                      )
                      .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$NfeDetalheImpostoCofinssTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $NfeDetalheImpostoCofinssTable,
      NfeDetalheImpostoCofins,
      $$NfeDetalheImpostoCofinssTableFilterComposer,
      $$NfeDetalheImpostoCofinssTableOrderingComposer,
      $$NfeDetalheImpostoCofinssTableAnnotationComposer,
      $$NfeDetalheImpostoCofinssTableCreateCompanionBuilder,
      $$NfeDetalheImpostoCofinssTableUpdateCompanionBuilder,
      (
        NfeDetalheImpostoCofins,
        BaseReferences<
          _$AppDatabase,
          $NfeDetalheImpostoCofinssTable,
          NfeDetalheImpostoCofins
        >,
      ),
      NfeDetalheImpostoCofins,
      PrefetchHooks Function()
    >;
typedef $$NfeDetalheImpostoIssqnsTableCreateCompanionBuilder =
    NfeDetalheImpostoIssqnsCompanion Function({
      Value<int?> id,
      Value<int?> idNfeDetalhe,
      Value<double?> baseCalculoIssqn,
      Value<double?> aliquotaIssqn,
      Value<double?> valorIssqn,
      Value<int?> municipioIssqn,
      Value<int?> itemListaServicos,
      Value<double?> valorDeducao,
      Value<double?> valorOutrasRetencoes,
      Value<double?> valorDescontoIncondicionado,
      Value<double?> valorDescontoCondicionado,
      Value<double?> valorRetencaoIss,
      Value<String?> indicadorExigibilidadeIss,
      Value<String?> codigoServico,
      Value<int?> municipioIncidencia,
      Value<int?> paisSevicoPrestado,
      Value<String?> numeroProcesso,
      Value<String?> indicadorIncentivoFiscal,
    });
typedef $$NfeDetalheImpostoIssqnsTableUpdateCompanionBuilder =
    NfeDetalheImpostoIssqnsCompanion Function({
      Value<int?> id,
      Value<int?> idNfeDetalhe,
      Value<double?> baseCalculoIssqn,
      Value<double?> aliquotaIssqn,
      Value<double?> valorIssqn,
      Value<int?> municipioIssqn,
      Value<int?> itemListaServicos,
      Value<double?> valorDeducao,
      Value<double?> valorOutrasRetencoes,
      Value<double?> valorDescontoIncondicionado,
      Value<double?> valorDescontoCondicionado,
      Value<double?> valorRetencaoIss,
      Value<String?> indicadorExigibilidadeIss,
      Value<String?> codigoServico,
      Value<int?> municipioIncidencia,
      Value<int?> paisSevicoPrestado,
      Value<String?> numeroProcesso,
      Value<String?> indicadorIncentivoFiscal,
    });

class $$NfeDetalheImpostoIssqnsTableFilterComposer
    extends Composer<_$AppDatabase, $NfeDetalheImpostoIssqnsTable> {
  $$NfeDetalheImpostoIssqnsTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get baseCalculoIssqn => $composableBuilder(
    column: $table.baseCalculoIssqn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get aliquotaIssqn => $composableBuilder(
    column: $table.aliquotaIssqn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorIssqn => $composableBuilder(
    column: $table.valorIssqn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get municipioIssqn => $composableBuilder(
    column: $table.municipioIssqn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get itemListaServicos => $composableBuilder(
    column: $table.itemListaServicos,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorDeducao => $composableBuilder(
    column: $table.valorDeducao,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorOutrasRetencoes => $composableBuilder(
    column: $table.valorOutrasRetencoes,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorDescontoIncondicionado => $composableBuilder(
    column: $table.valorDescontoIncondicionado,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorDescontoCondicionado => $composableBuilder(
    column: $table.valorDescontoCondicionado,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorRetencaoIss => $composableBuilder(
    column: $table.valorRetencaoIss,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get indicadorExigibilidadeIss => $composableBuilder(
    column: $table.indicadorExigibilidadeIss,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get codigoServico => $composableBuilder(
    column: $table.codigoServico,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get municipioIncidencia => $composableBuilder(
    column: $table.municipioIncidencia,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get paisSevicoPrestado => $composableBuilder(
    column: $table.paisSevicoPrestado,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get numeroProcesso => $composableBuilder(
    column: $table.numeroProcesso,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get indicadorIncentivoFiscal => $composableBuilder(
    column: $table.indicadorIncentivoFiscal,
    builder: (column) => ColumnFilters(column),
  );
}

class $$NfeDetalheImpostoIssqnsTableOrderingComposer
    extends Composer<_$AppDatabase, $NfeDetalheImpostoIssqnsTable> {
  $$NfeDetalheImpostoIssqnsTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get baseCalculoIssqn => $composableBuilder(
    column: $table.baseCalculoIssqn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get aliquotaIssqn => $composableBuilder(
    column: $table.aliquotaIssqn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorIssqn => $composableBuilder(
    column: $table.valorIssqn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get municipioIssqn => $composableBuilder(
    column: $table.municipioIssqn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get itemListaServicos => $composableBuilder(
    column: $table.itemListaServicos,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorDeducao => $composableBuilder(
    column: $table.valorDeducao,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorOutrasRetencoes => $composableBuilder(
    column: $table.valorOutrasRetencoes,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorDescontoIncondicionado => $composableBuilder(
    column: $table.valorDescontoIncondicionado,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorDescontoCondicionado => $composableBuilder(
    column: $table.valorDescontoCondicionado,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorRetencaoIss => $composableBuilder(
    column: $table.valorRetencaoIss,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get indicadorExigibilidadeIss => $composableBuilder(
    column: $table.indicadorExigibilidadeIss,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get codigoServico => $composableBuilder(
    column: $table.codigoServico,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get municipioIncidencia => $composableBuilder(
    column: $table.municipioIncidencia,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get paisSevicoPrestado => $composableBuilder(
    column: $table.paisSevicoPrestado,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get numeroProcesso => $composableBuilder(
    column: $table.numeroProcesso,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get indicadorIncentivoFiscal => $composableBuilder(
    column: $table.indicadorIncentivoFiscal,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$NfeDetalheImpostoIssqnsTableAnnotationComposer
    extends Composer<_$AppDatabase, $NfeDetalheImpostoIssqnsTable> {
  $$NfeDetalheImpostoIssqnsTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => column,
  );

  GeneratedColumn<double> get baseCalculoIssqn => $composableBuilder(
    column: $table.baseCalculoIssqn,
    builder: (column) => column,
  );

  GeneratedColumn<double> get aliquotaIssqn => $composableBuilder(
    column: $table.aliquotaIssqn,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorIssqn => $composableBuilder(
    column: $table.valorIssqn,
    builder: (column) => column,
  );

  GeneratedColumn<int> get municipioIssqn => $composableBuilder(
    column: $table.municipioIssqn,
    builder: (column) => column,
  );

  GeneratedColumn<int> get itemListaServicos => $composableBuilder(
    column: $table.itemListaServicos,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorDeducao => $composableBuilder(
    column: $table.valorDeducao,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorOutrasRetencoes => $composableBuilder(
    column: $table.valorOutrasRetencoes,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorDescontoIncondicionado => $composableBuilder(
    column: $table.valorDescontoIncondicionado,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorDescontoCondicionado => $composableBuilder(
    column: $table.valorDescontoCondicionado,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorRetencaoIss => $composableBuilder(
    column: $table.valorRetencaoIss,
    builder: (column) => column,
  );

  GeneratedColumn<String> get indicadorExigibilidadeIss => $composableBuilder(
    column: $table.indicadorExigibilidadeIss,
    builder: (column) => column,
  );

  GeneratedColumn<String> get codigoServico => $composableBuilder(
    column: $table.codigoServico,
    builder: (column) => column,
  );

  GeneratedColumn<int> get municipioIncidencia => $composableBuilder(
    column: $table.municipioIncidencia,
    builder: (column) => column,
  );

  GeneratedColumn<int> get paisSevicoPrestado => $composableBuilder(
    column: $table.paisSevicoPrestado,
    builder: (column) => column,
  );

  GeneratedColumn<String> get numeroProcesso => $composableBuilder(
    column: $table.numeroProcesso,
    builder: (column) => column,
  );

  GeneratedColumn<String> get indicadorIncentivoFiscal => $composableBuilder(
    column: $table.indicadorIncentivoFiscal,
    builder: (column) => column,
  );
}

class $$NfeDetalheImpostoIssqnsTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $NfeDetalheImpostoIssqnsTable,
          NfeDetalheImpostoIssqn,
          $$NfeDetalheImpostoIssqnsTableFilterComposer,
          $$NfeDetalheImpostoIssqnsTableOrderingComposer,
          $$NfeDetalheImpostoIssqnsTableAnnotationComposer,
          $$NfeDetalheImpostoIssqnsTableCreateCompanionBuilder,
          $$NfeDetalheImpostoIssqnsTableUpdateCompanionBuilder,
          (
            NfeDetalheImpostoIssqn,
            BaseReferences<
              _$AppDatabase,
              $NfeDetalheImpostoIssqnsTable,
              NfeDetalheImpostoIssqn
            >,
          ),
          NfeDetalheImpostoIssqn,
          PrefetchHooks Function()
        > {
  $$NfeDetalheImpostoIssqnsTableTableManager(
    _$AppDatabase db,
    $NfeDetalheImpostoIssqnsTable table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer:
              () => $$NfeDetalheImpostoIssqnsTableFilterComposer(
                $db: db,
                $table: table,
              ),
          createOrderingComposer:
              () => $$NfeDetalheImpostoIssqnsTableOrderingComposer(
                $db: db,
                $table: table,
              ),
          createComputedFieldComposer:
              () => $$NfeDetalheImpostoIssqnsTableAnnotationComposer(
                $db: db,
                $table: table,
              ),
          updateCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeDetalhe = const Value.absent(),
                Value<double?> baseCalculoIssqn = const Value.absent(),
                Value<double?> aliquotaIssqn = const Value.absent(),
                Value<double?> valorIssqn = const Value.absent(),
                Value<int?> municipioIssqn = const Value.absent(),
                Value<int?> itemListaServicos = const Value.absent(),
                Value<double?> valorDeducao = const Value.absent(),
                Value<double?> valorOutrasRetencoes = const Value.absent(),
                Value<double?> valorDescontoIncondicionado =
                    const Value.absent(),
                Value<double?> valorDescontoCondicionado = const Value.absent(),
                Value<double?> valorRetencaoIss = const Value.absent(),
                Value<String?> indicadorExigibilidadeIss = const Value.absent(),
                Value<String?> codigoServico = const Value.absent(),
                Value<int?> municipioIncidencia = const Value.absent(),
                Value<int?> paisSevicoPrestado = const Value.absent(),
                Value<String?> numeroProcesso = const Value.absent(),
                Value<String?> indicadorIncentivoFiscal = const Value.absent(),
              }) => NfeDetalheImpostoIssqnsCompanion(
                id: id,
                idNfeDetalhe: idNfeDetalhe,
                baseCalculoIssqn: baseCalculoIssqn,
                aliquotaIssqn: aliquotaIssqn,
                valorIssqn: valorIssqn,
                municipioIssqn: municipioIssqn,
                itemListaServicos: itemListaServicos,
                valorDeducao: valorDeducao,
                valorOutrasRetencoes: valorOutrasRetencoes,
                valorDescontoIncondicionado: valorDescontoIncondicionado,
                valorDescontoCondicionado: valorDescontoCondicionado,
                valorRetencaoIss: valorRetencaoIss,
                indicadorExigibilidadeIss: indicadorExigibilidadeIss,
                codigoServico: codigoServico,
                municipioIncidencia: municipioIncidencia,
                paisSevicoPrestado: paisSevicoPrestado,
                numeroProcesso: numeroProcesso,
                indicadorIncentivoFiscal: indicadorIncentivoFiscal,
              ),
          createCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeDetalhe = const Value.absent(),
                Value<double?> baseCalculoIssqn = const Value.absent(),
                Value<double?> aliquotaIssqn = const Value.absent(),
                Value<double?> valorIssqn = const Value.absent(),
                Value<int?> municipioIssqn = const Value.absent(),
                Value<int?> itemListaServicos = const Value.absent(),
                Value<double?> valorDeducao = const Value.absent(),
                Value<double?> valorOutrasRetencoes = const Value.absent(),
                Value<double?> valorDescontoIncondicionado =
                    const Value.absent(),
                Value<double?> valorDescontoCondicionado = const Value.absent(),
                Value<double?> valorRetencaoIss = const Value.absent(),
                Value<String?> indicadorExigibilidadeIss = const Value.absent(),
                Value<String?> codigoServico = const Value.absent(),
                Value<int?> municipioIncidencia = const Value.absent(),
                Value<int?> paisSevicoPrestado = const Value.absent(),
                Value<String?> numeroProcesso = const Value.absent(),
                Value<String?> indicadorIncentivoFiscal = const Value.absent(),
              }) => NfeDetalheImpostoIssqnsCompanion.insert(
                id: id,
                idNfeDetalhe: idNfeDetalhe,
                baseCalculoIssqn: baseCalculoIssqn,
                aliquotaIssqn: aliquotaIssqn,
                valorIssqn: valorIssqn,
                municipioIssqn: municipioIssqn,
                itemListaServicos: itemListaServicos,
                valorDeducao: valorDeducao,
                valorOutrasRetencoes: valorOutrasRetencoes,
                valorDescontoIncondicionado: valorDescontoIncondicionado,
                valorDescontoCondicionado: valorDescontoCondicionado,
                valorRetencaoIss: valorRetencaoIss,
                indicadorExigibilidadeIss: indicadorExigibilidadeIss,
                codigoServico: codigoServico,
                municipioIncidencia: municipioIncidencia,
                paisSevicoPrestado: paisSevicoPrestado,
                numeroProcesso: numeroProcesso,
                indicadorIncentivoFiscal: indicadorIncentivoFiscal,
              ),
          withReferenceMapper:
              (p0) =>
                  p0
                      .map(
                        (e) => (
                          e.readTable(table),
                          BaseReferences(db, table, e),
                        ),
                      )
                      .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$NfeDetalheImpostoIssqnsTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $NfeDetalheImpostoIssqnsTable,
      NfeDetalheImpostoIssqn,
      $$NfeDetalheImpostoIssqnsTableFilterComposer,
      $$NfeDetalheImpostoIssqnsTableOrderingComposer,
      $$NfeDetalheImpostoIssqnsTableAnnotationComposer,
      $$NfeDetalheImpostoIssqnsTableCreateCompanionBuilder,
      $$NfeDetalheImpostoIssqnsTableUpdateCompanionBuilder,
      (
        NfeDetalheImpostoIssqn,
        BaseReferences<
          _$AppDatabase,
          $NfeDetalheImpostoIssqnsTable,
          NfeDetalheImpostoIssqn
        >,
      ),
      NfeDetalheImpostoIssqn,
      PrefetchHooks Function()
    >;
typedef $$NfeTransporteReboquesTableCreateCompanionBuilder =
    NfeTransporteReboquesCompanion Function({
      Value<int?> id,
      Value<int?> idNfeTransporte,
      Value<String?> placa,
      Value<String?> uf,
      Value<String?> rntc,
      Value<String?> vagao,
      Value<String?> balsa,
    });
typedef $$NfeTransporteReboquesTableUpdateCompanionBuilder =
    NfeTransporteReboquesCompanion Function({
      Value<int?> id,
      Value<int?> idNfeTransporte,
      Value<String?> placa,
      Value<String?> uf,
      Value<String?> rntc,
      Value<String?> vagao,
      Value<String?> balsa,
    });

class $$NfeTransporteReboquesTableFilterComposer
    extends Composer<_$AppDatabase, $NfeTransporteReboquesTable> {
  $$NfeTransporteReboquesTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idNfeTransporte => $composableBuilder(
    column: $table.idNfeTransporte,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get placa => $composableBuilder(
    column: $table.placa,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get uf => $composableBuilder(
    column: $table.uf,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get rntc => $composableBuilder(
    column: $table.rntc,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get vagao => $composableBuilder(
    column: $table.vagao,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get balsa => $composableBuilder(
    column: $table.balsa,
    builder: (column) => ColumnFilters(column),
  );
}

class $$NfeTransporteReboquesTableOrderingComposer
    extends Composer<_$AppDatabase, $NfeTransporteReboquesTable> {
  $$NfeTransporteReboquesTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idNfeTransporte => $composableBuilder(
    column: $table.idNfeTransporte,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get placa => $composableBuilder(
    column: $table.placa,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get uf => $composableBuilder(
    column: $table.uf,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get rntc => $composableBuilder(
    column: $table.rntc,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get vagao => $composableBuilder(
    column: $table.vagao,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get balsa => $composableBuilder(
    column: $table.balsa,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$NfeTransporteReboquesTableAnnotationComposer
    extends Composer<_$AppDatabase, $NfeTransporteReboquesTable> {
  $$NfeTransporteReboquesTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<int> get idNfeTransporte => $composableBuilder(
    column: $table.idNfeTransporte,
    builder: (column) => column,
  );

  GeneratedColumn<String> get placa =>
      $composableBuilder(column: $table.placa, builder: (column) => column);

  GeneratedColumn<String> get uf =>
      $composableBuilder(column: $table.uf, builder: (column) => column);

  GeneratedColumn<String> get rntc =>
      $composableBuilder(column: $table.rntc, builder: (column) => column);

  GeneratedColumn<String> get vagao =>
      $composableBuilder(column: $table.vagao, builder: (column) => column);

  GeneratedColumn<String> get balsa =>
      $composableBuilder(column: $table.balsa, builder: (column) => column);
}

class $$NfeTransporteReboquesTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $NfeTransporteReboquesTable,
          NfeTransporteReboque,
          $$NfeTransporteReboquesTableFilterComposer,
          $$NfeTransporteReboquesTableOrderingComposer,
          $$NfeTransporteReboquesTableAnnotationComposer,
          $$NfeTransporteReboquesTableCreateCompanionBuilder,
          $$NfeTransporteReboquesTableUpdateCompanionBuilder,
          (
            NfeTransporteReboque,
            BaseReferences<
              _$AppDatabase,
              $NfeTransporteReboquesTable,
              NfeTransporteReboque
            >,
          ),
          NfeTransporteReboque,
          PrefetchHooks Function()
        > {
  $$NfeTransporteReboquesTableTableManager(
    _$AppDatabase db,
    $NfeTransporteReboquesTable table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer:
              () => $$NfeTransporteReboquesTableFilterComposer(
                $db: db,
                $table: table,
              ),
          createOrderingComposer:
              () => $$NfeTransporteReboquesTableOrderingComposer(
                $db: db,
                $table: table,
              ),
          createComputedFieldComposer:
              () => $$NfeTransporteReboquesTableAnnotationComposer(
                $db: db,
                $table: table,
              ),
          updateCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeTransporte = const Value.absent(),
                Value<String?> placa = const Value.absent(),
                Value<String?> uf = const Value.absent(),
                Value<String?> rntc = const Value.absent(),
                Value<String?> vagao = const Value.absent(),
                Value<String?> balsa = const Value.absent(),
              }) => NfeTransporteReboquesCompanion(
                id: id,
                idNfeTransporte: idNfeTransporte,
                placa: placa,
                uf: uf,
                rntc: rntc,
                vagao: vagao,
                balsa: balsa,
              ),
          createCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeTransporte = const Value.absent(),
                Value<String?> placa = const Value.absent(),
                Value<String?> uf = const Value.absent(),
                Value<String?> rntc = const Value.absent(),
                Value<String?> vagao = const Value.absent(),
                Value<String?> balsa = const Value.absent(),
              }) => NfeTransporteReboquesCompanion.insert(
                id: id,
                idNfeTransporte: idNfeTransporte,
                placa: placa,
                uf: uf,
                rntc: rntc,
                vagao: vagao,
                balsa: balsa,
              ),
          withReferenceMapper:
              (p0) =>
                  p0
                      .map(
                        (e) => (
                          e.readTable(table),
                          BaseReferences(db, table, e),
                        ),
                      )
                      .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$NfeTransporteReboquesTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $NfeTransporteReboquesTable,
      NfeTransporteReboque,
      $$NfeTransporteReboquesTableFilterComposer,
      $$NfeTransporteReboquesTableOrderingComposer,
      $$NfeTransporteReboquesTableAnnotationComposer,
      $$NfeTransporteReboquesTableCreateCompanionBuilder,
      $$NfeTransporteReboquesTableUpdateCompanionBuilder,
      (
        NfeTransporteReboque,
        BaseReferences<
          _$AppDatabase,
          $NfeTransporteReboquesTable,
          NfeTransporteReboque
        >,
      ),
      NfeTransporteReboque,
      PrefetchHooks Function()
    >;
typedef $$NfeTransporteVolumeLacresTableCreateCompanionBuilder =
    NfeTransporteVolumeLacresCompanion Function({
      Value<int?> id,
      Value<int?> idNfeTransporteVolume,
      Value<String?> numero,
    });
typedef $$NfeTransporteVolumeLacresTableUpdateCompanionBuilder =
    NfeTransporteVolumeLacresCompanion Function({
      Value<int?> id,
      Value<int?> idNfeTransporteVolume,
      Value<String?> numero,
    });

class $$NfeTransporteVolumeLacresTableFilterComposer
    extends Composer<_$AppDatabase, $NfeTransporteVolumeLacresTable> {
  $$NfeTransporteVolumeLacresTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idNfeTransporteVolume => $composableBuilder(
    column: $table.idNfeTransporteVolume,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get numero => $composableBuilder(
    column: $table.numero,
    builder: (column) => ColumnFilters(column),
  );
}

class $$NfeTransporteVolumeLacresTableOrderingComposer
    extends Composer<_$AppDatabase, $NfeTransporteVolumeLacresTable> {
  $$NfeTransporteVolumeLacresTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idNfeTransporteVolume => $composableBuilder(
    column: $table.idNfeTransporteVolume,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get numero => $composableBuilder(
    column: $table.numero,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$NfeTransporteVolumeLacresTableAnnotationComposer
    extends Composer<_$AppDatabase, $NfeTransporteVolumeLacresTable> {
  $$NfeTransporteVolumeLacresTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<int> get idNfeTransporteVolume => $composableBuilder(
    column: $table.idNfeTransporteVolume,
    builder: (column) => column,
  );

  GeneratedColumn<String> get numero =>
      $composableBuilder(column: $table.numero, builder: (column) => column);
}

class $$NfeTransporteVolumeLacresTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $NfeTransporteVolumeLacresTable,
          NfeTransporteVolumeLacre,
          $$NfeTransporteVolumeLacresTableFilterComposer,
          $$NfeTransporteVolumeLacresTableOrderingComposer,
          $$NfeTransporteVolumeLacresTableAnnotationComposer,
          $$NfeTransporteVolumeLacresTableCreateCompanionBuilder,
          $$NfeTransporteVolumeLacresTableUpdateCompanionBuilder,
          (
            NfeTransporteVolumeLacre,
            BaseReferences<
              _$AppDatabase,
              $NfeTransporteVolumeLacresTable,
              NfeTransporteVolumeLacre
            >,
          ),
          NfeTransporteVolumeLacre,
          PrefetchHooks Function()
        > {
  $$NfeTransporteVolumeLacresTableTableManager(
    _$AppDatabase db,
    $NfeTransporteVolumeLacresTable table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer:
              () => $$NfeTransporteVolumeLacresTableFilterComposer(
                $db: db,
                $table: table,
              ),
          createOrderingComposer:
              () => $$NfeTransporteVolumeLacresTableOrderingComposer(
                $db: db,
                $table: table,
              ),
          createComputedFieldComposer:
              () => $$NfeTransporteVolumeLacresTableAnnotationComposer(
                $db: db,
                $table: table,
              ),
          updateCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeTransporteVolume = const Value.absent(),
                Value<String?> numero = const Value.absent(),
              }) => NfeTransporteVolumeLacresCompanion(
                id: id,
                idNfeTransporteVolume: idNfeTransporteVolume,
                numero: numero,
              ),
          createCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeTransporteVolume = const Value.absent(),
                Value<String?> numero = const Value.absent(),
              }) => NfeTransporteVolumeLacresCompanion.insert(
                id: id,
                idNfeTransporteVolume: idNfeTransporteVolume,
                numero: numero,
              ),
          withReferenceMapper:
              (p0) =>
                  p0
                      .map(
                        (e) => (
                          e.readTable(table),
                          BaseReferences(db, table, e),
                        ),
                      )
                      .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$NfeTransporteVolumeLacresTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $NfeTransporteVolumeLacresTable,
      NfeTransporteVolumeLacre,
      $$NfeTransporteVolumeLacresTableFilterComposer,
      $$NfeTransporteVolumeLacresTableOrderingComposer,
      $$NfeTransporteVolumeLacresTableAnnotationComposer,
      $$NfeTransporteVolumeLacresTableCreateCompanionBuilder,
      $$NfeTransporteVolumeLacresTableUpdateCompanionBuilder,
      (
        NfeTransporteVolumeLacre,
        BaseReferences<
          _$AppDatabase,
          $NfeTransporteVolumeLacresTable,
          NfeTransporteVolumeLacre
        >,
      ),
      NfeTransporteVolumeLacre,
      PrefetchHooks Function()
    >;
typedef $$NfeProcessoReferenciadosTableCreateCompanionBuilder =
    NfeProcessoReferenciadosCompanion Function({
      Value<int?> id,
      Value<int?> idNfeCabecalho,
      Value<String?> identificador,
      Value<String?> origem,
      Value<String?> tipoAtoConcessorio,
    });
typedef $$NfeProcessoReferenciadosTableUpdateCompanionBuilder =
    NfeProcessoReferenciadosCompanion Function({
      Value<int?> id,
      Value<int?> idNfeCabecalho,
      Value<String?> identificador,
      Value<String?> origem,
      Value<String?> tipoAtoConcessorio,
    });

class $$NfeProcessoReferenciadosTableFilterComposer
    extends Composer<_$AppDatabase, $NfeProcessoReferenciadosTable> {
  $$NfeProcessoReferenciadosTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idNfeCabecalho => $composableBuilder(
    column: $table.idNfeCabecalho,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get identificador => $composableBuilder(
    column: $table.identificador,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get origem => $composableBuilder(
    column: $table.origem,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get tipoAtoConcessorio => $composableBuilder(
    column: $table.tipoAtoConcessorio,
    builder: (column) => ColumnFilters(column),
  );
}

class $$NfeProcessoReferenciadosTableOrderingComposer
    extends Composer<_$AppDatabase, $NfeProcessoReferenciadosTable> {
  $$NfeProcessoReferenciadosTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idNfeCabecalho => $composableBuilder(
    column: $table.idNfeCabecalho,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get identificador => $composableBuilder(
    column: $table.identificador,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get origem => $composableBuilder(
    column: $table.origem,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get tipoAtoConcessorio => $composableBuilder(
    column: $table.tipoAtoConcessorio,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$NfeProcessoReferenciadosTableAnnotationComposer
    extends Composer<_$AppDatabase, $NfeProcessoReferenciadosTable> {
  $$NfeProcessoReferenciadosTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<int> get idNfeCabecalho => $composableBuilder(
    column: $table.idNfeCabecalho,
    builder: (column) => column,
  );

  GeneratedColumn<String> get identificador => $composableBuilder(
    column: $table.identificador,
    builder: (column) => column,
  );

  GeneratedColumn<String> get origem =>
      $composableBuilder(column: $table.origem, builder: (column) => column);

  GeneratedColumn<String> get tipoAtoConcessorio => $composableBuilder(
    column: $table.tipoAtoConcessorio,
    builder: (column) => column,
  );
}

class $$NfeProcessoReferenciadosTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $NfeProcessoReferenciadosTable,
          NfeProcessoReferenciado,
          $$NfeProcessoReferenciadosTableFilterComposer,
          $$NfeProcessoReferenciadosTableOrderingComposer,
          $$NfeProcessoReferenciadosTableAnnotationComposer,
          $$NfeProcessoReferenciadosTableCreateCompanionBuilder,
          $$NfeProcessoReferenciadosTableUpdateCompanionBuilder,
          (
            NfeProcessoReferenciado,
            BaseReferences<
              _$AppDatabase,
              $NfeProcessoReferenciadosTable,
              NfeProcessoReferenciado
            >,
          ),
          NfeProcessoReferenciado,
          PrefetchHooks Function()
        > {
  $$NfeProcessoReferenciadosTableTableManager(
    _$AppDatabase db,
    $NfeProcessoReferenciadosTable table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer:
              () => $$NfeProcessoReferenciadosTableFilterComposer(
                $db: db,
                $table: table,
              ),
          createOrderingComposer:
              () => $$NfeProcessoReferenciadosTableOrderingComposer(
                $db: db,
                $table: table,
              ),
          createComputedFieldComposer:
              () => $$NfeProcessoReferenciadosTableAnnotationComposer(
                $db: db,
                $table: table,
              ),
          updateCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeCabecalho = const Value.absent(),
                Value<String?> identificador = const Value.absent(),
                Value<String?> origem = const Value.absent(),
                Value<String?> tipoAtoConcessorio = const Value.absent(),
              }) => NfeProcessoReferenciadosCompanion(
                id: id,
                idNfeCabecalho: idNfeCabecalho,
                identificador: identificador,
                origem: origem,
                tipoAtoConcessorio: tipoAtoConcessorio,
              ),
          createCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeCabecalho = const Value.absent(),
                Value<String?> identificador = const Value.absent(),
                Value<String?> origem = const Value.absent(),
                Value<String?> tipoAtoConcessorio = const Value.absent(),
              }) => NfeProcessoReferenciadosCompanion.insert(
                id: id,
                idNfeCabecalho: idNfeCabecalho,
                identificador: identificador,
                origem: origem,
                tipoAtoConcessorio: tipoAtoConcessorio,
              ),
          withReferenceMapper:
              (p0) =>
                  p0
                      .map(
                        (e) => (
                          e.readTable(table),
                          BaseReferences(db, table, e),
                        ),
                      )
                      .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$NfeProcessoReferenciadosTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $NfeProcessoReferenciadosTable,
      NfeProcessoReferenciado,
      $$NfeProcessoReferenciadosTableFilterComposer,
      $$NfeProcessoReferenciadosTableOrderingComposer,
      $$NfeProcessoReferenciadosTableAnnotationComposer,
      $$NfeProcessoReferenciadosTableCreateCompanionBuilder,
      $$NfeProcessoReferenciadosTableUpdateCompanionBuilder,
      (
        NfeProcessoReferenciado,
        BaseReferences<
          _$AppDatabase,
          $NfeProcessoReferenciadosTable,
          NfeProcessoReferenciado
        >,
      ),
      NfeProcessoReferenciado,
      PrefetchHooks Function()
    >;
typedef $$NfeCteReferenciadosTableCreateCompanionBuilder =
    NfeCteReferenciadosCompanion Function({
      Value<int?> id,
      Value<int?> idNfeCabecalho,
      Value<String?> chaveAcesso,
    });
typedef $$NfeCteReferenciadosTableUpdateCompanionBuilder =
    NfeCteReferenciadosCompanion Function({
      Value<int?> id,
      Value<int?> idNfeCabecalho,
      Value<String?> chaveAcesso,
    });

class $$NfeCteReferenciadosTableFilterComposer
    extends Composer<_$AppDatabase, $NfeCteReferenciadosTable> {
  $$NfeCteReferenciadosTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idNfeCabecalho => $composableBuilder(
    column: $table.idNfeCabecalho,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get chaveAcesso => $composableBuilder(
    column: $table.chaveAcesso,
    builder: (column) => ColumnFilters(column),
  );
}

class $$NfeCteReferenciadosTableOrderingComposer
    extends Composer<_$AppDatabase, $NfeCteReferenciadosTable> {
  $$NfeCteReferenciadosTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idNfeCabecalho => $composableBuilder(
    column: $table.idNfeCabecalho,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get chaveAcesso => $composableBuilder(
    column: $table.chaveAcesso,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$NfeCteReferenciadosTableAnnotationComposer
    extends Composer<_$AppDatabase, $NfeCteReferenciadosTable> {
  $$NfeCteReferenciadosTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<int> get idNfeCabecalho => $composableBuilder(
    column: $table.idNfeCabecalho,
    builder: (column) => column,
  );

  GeneratedColumn<String> get chaveAcesso => $composableBuilder(
    column: $table.chaveAcesso,
    builder: (column) => column,
  );
}

class $$NfeCteReferenciadosTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $NfeCteReferenciadosTable,
          NfeCteReferenciado,
          $$NfeCteReferenciadosTableFilterComposer,
          $$NfeCteReferenciadosTableOrderingComposer,
          $$NfeCteReferenciadosTableAnnotationComposer,
          $$NfeCteReferenciadosTableCreateCompanionBuilder,
          $$NfeCteReferenciadosTableUpdateCompanionBuilder,
          (
            NfeCteReferenciado,
            BaseReferences<
              _$AppDatabase,
              $NfeCteReferenciadosTable,
              NfeCteReferenciado
            >,
          ),
          NfeCteReferenciado,
          PrefetchHooks Function()
        > {
  $$NfeCteReferenciadosTableTableManager(
    _$AppDatabase db,
    $NfeCteReferenciadosTable table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer:
              () => $$NfeCteReferenciadosTableFilterComposer(
                $db: db,
                $table: table,
              ),
          createOrderingComposer:
              () => $$NfeCteReferenciadosTableOrderingComposer(
                $db: db,
                $table: table,
              ),
          createComputedFieldComposer:
              () => $$NfeCteReferenciadosTableAnnotationComposer(
                $db: db,
                $table: table,
              ),
          updateCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeCabecalho = const Value.absent(),
                Value<String?> chaveAcesso = const Value.absent(),
              }) => NfeCteReferenciadosCompanion(
                id: id,
                idNfeCabecalho: idNfeCabecalho,
                chaveAcesso: chaveAcesso,
              ),
          createCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeCabecalho = const Value.absent(),
                Value<String?> chaveAcesso = const Value.absent(),
              }) => NfeCteReferenciadosCompanion.insert(
                id: id,
                idNfeCabecalho: idNfeCabecalho,
                chaveAcesso: chaveAcesso,
              ),
          withReferenceMapper:
              (p0) =>
                  p0
                      .map(
                        (e) => (
                          e.readTable(table),
                          BaseReferences(db, table, e),
                        ),
                      )
                      .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$NfeCteReferenciadosTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $NfeCteReferenciadosTable,
      NfeCteReferenciado,
      $$NfeCteReferenciadosTableFilterComposer,
      $$NfeCteReferenciadosTableOrderingComposer,
      $$NfeCteReferenciadosTableAnnotationComposer,
      $$NfeCteReferenciadosTableCreateCompanionBuilder,
      $$NfeCteReferenciadosTableUpdateCompanionBuilder,
      (
        NfeCteReferenciado,
        BaseReferences<
          _$AppDatabase,
          $NfeCteReferenciadosTable,
          NfeCteReferenciado
        >,
      ),
      NfeCteReferenciado,
      PrefetchHooks Function()
    >;
typedef $$NfeAcessoXmlsTableCreateCompanionBuilder =
    NfeAcessoXmlsCompanion Function({
      Value<int?> id,
      Value<int?> idNfeCabecalho,
      Value<String?> cnpj,
      Value<String?> cpf,
    });
typedef $$NfeAcessoXmlsTableUpdateCompanionBuilder =
    NfeAcessoXmlsCompanion Function({
      Value<int?> id,
      Value<int?> idNfeCabecalho,
      Value<String?> cnpj,
      Value<String?> cpf,
    });

class $$NfeAcessoXmlsTableFilterComposer
    extends Composer<_$AppDatabase, $NfeAcessoXmlsTable> {
  $$NfeAcessoXmlsTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idNfeCabecalho => $composableBuilder(
    column: $table.idNfeCabecalho,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get cnpj => $composableBuilder(
    column: $table.cnpj,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get cpf => $composableBuilder(
    column: $table.cpf,
    builder: (column) => ColumnFilters(column),
  );
}

class $$NfeAcessoXmlsTableOrderingComposer
    extends Composer<_$AppDatabase, $NfeAcessoXmlsTable> {
  $$NfeAcessoXmlsTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idNfeCabecalho => $composableBuilder(
    column: $table.idNfeCabecalho,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get cnpj => $composableBuilder(
    column: $table.cnpj,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get cpf => $composableBuilder(
    column: $table.cpf,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$NfeAcessoXmlsTableAnnotationComposer
    extends Composer<_$AppDatabase, $NfeAcessoXmlsTable> {
  $$NfeAcessoXmlsTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<int> get idNfeCabecalho => $composableBuilder(
    column: $table.idNfeCabecalho,
    builder: (column) => column,
  );

  GeneratedColumn<String> get cnpj =>
      $composableBuilder(column: $table.cnpj, builder: (column) => column);

  GeneratedColumn<String> get cpf =>
      $composableBuilder(column: $table.cpf, builder: (column) => column);
}

class $$NfeAcessoXmlsTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $NfeAcessoXmlsTable,
          NfeAcessoXml,
          $$NfeAcessoXmlsTableFilterComposer,
          $$NfeAcessoXmlsTableOrderingComposer,
          $$NfeAcessoXmlsTableAnnotationComposer,
          $$NfeAcessoXmlsTableCreateCompanionBuilder,
          $$NfeAcessoXmlsTableUpdateCompanionBuilder,
          (
            NfeAcessoXml,
            BaseReferences<_$AppDatabase, $NfeAcessoXmlsTable, NfeAcessoXml>,
          ),
          NfeAcessoXml,
          PrefetchHooks Function()
        > {
  $$NfeAcessoXmlsTableTableManager(_$AppDatabase db, $NfeAcessoXmlsTable table)
    : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer:
              () => $$NfeAcessoXmlsTableFilterComposer($db: db, $table: table),
          createOrderingComposer:
              () =>
                  $$NfeAcessoXmlsTableOrderingComposer($db: db, $table: table),
          createComputedFieldComposer:
              () => $$NfeAcessoXmlsTableAnnotationComposer(
                $db: db,
                $table: table,
              ),
          updateCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeCabecalho = const Value.absent(),
                Value<String?> cnpj = const Value.absent(),
                Value<String?> cpf = const Value.absent(),
              }) => NfeAcessoXmlsCompanion(
                id: id,
                idNfeCabecalho: idNfeCabecalho,
                cnpj: cnpj,
                cpf: cpf,
              ),
          createCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeCabecalho = const Value.absent(),
                Value<String?> cnpj = const Value.absent(),
                Value<String?> cpf = const Value.absent(),
              }) => NfeAcessoXmlsCompanion.insert(
                id: id,
                idNfeCabecalho: idNfeCabecalho,
                cnpj: cnpj,
                cpf: cpf,
              ),
          withReferenceMapper:
              (p0) =>
                  p0
                      .map(
                        (e) => (
                          e.readTable(table),
                          BaseReferences(db, table, e),
                        ),
                      )
                      .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$NfeAcessoXmlsTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $NfeAcessoXmlsTable,
      NfeAcessoXml,
      $$NfeAcessoXmlsTableFilterComposer,
      $$NfeAcessoXmlsTableOrderingComposer,
      $$NfeAcessoXmlsTableAnnotationComposer,
      $$NfeAcessoXmlsTableCreateCompanionBuilder,
      $$NfeAcessoXmlsTableUpdateCompanionBuilder,
      (
        NfeAcessoXml,
        BaseReferences<_$AppDatabase, $NfeAcessoXmlsTable, NfeAcessoXml>,
      ),
      NfeAcessoXml,
      PrefetchHooks Function()
    >;
typedef $$NfeExportacaosTableCreateCompanionBuilder =
    NfeExportacaosCompanion Function({
      Value<int?> id,
      Value<int?> idNfeDetalhe,
      Value<int?> drawback,
      Value<int?> numeroRegistro,
      Value<String?> chaveAcesso,
      Value<double?> quantidade,
    });
typedef $$NfeExportacaosTableUpdateCompanionBuilder =
    NfeExportacaosCompanion Function({
      Value<int?> id,
      Value<int?> idNfeDetalhe,
      Value<int?> drawback,
      Value<int?> numeroRegistro,
      Value<String?> chaveAcesso,
      Value<double?> quantidade,
    });

class $$NfeExportacaosTableFilterComposer
    extends Composer<_$AppDatabase, $NfeExportacaosTable> {
  $$NfeExportacaosTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get drawback => $composableBuilder(
    column: $table.drawback,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get numeroRegistro => $composableBuilder(
    column: $table.numeroRegistro,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get chaveAcesso => $composableBuilder(
    column: $table.chaveAcesso,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get quantidade => $composableBuilder(
    column: $table.quantidade,
    builder: (column) => ColumnFilters(column),
  );
}

class $$NfeExportacaosTableOrderingComposer
    extends Composer<_$AppDatabase, $NfeExportacaosTable> {
  $$NfeExportacaosTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get drawback => $composableBuilder(
    column: $table.drawback,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get numeroRegistro => $composableBuilder(
    column: $table.numeroRegistro,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get chaveAcesso => $composableBuilder(
    column: $table.chaveAcesso,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get quantidade => $composableBuilder(
    column: $table.quantidade,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$NfeExportacaosTableAnnotationComposer
    extends Composer<_$AppDatabase, $NfeExportacaosTable> {
  $$NfeExportacaosTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => column,
  );

  GeneratedColumn<int> get drawback =>
      $composableBuilder(column: $table.drawback, builder: (column) => column);

  GeneratedColumn<int> get numeroRegistro => $composableBuilder(
    column: $table.numeroRegistro,
    builder: (column) => column,
  );

  GeneratedColumn<String> get chaveAcesso => $composableBuilder(
    column: $table.chaveAcesso,
    builder: (column) => column,
  );

  GeneratedColumn<double> get quantidade => $composableBuilder(
    column: $table.quantidade,
    builder: (column) => column,
  );
}

class $$NfeExportacaosTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $NfeExportacaosTable,
          NfeExportacao,
          $$NfeExportacaosTableFilterComposer,
          $$NfeExportacaosTableOrderingComposer,
          $$NfeExportacaosTableAnnotationComposer,
          $$NfeExportacaosTableCreateCompanionBuilder,
          $$NfeExportacaosTableUpdateCompanionBuilder,
          (
            NfeExportacao,
            BaseReferences<_$AppDatabase, $NfeExportacaosTable, NfeExportacao>,
          ),
          NfeExportacao,
          PrefetchHooks Function()
        > {
  $$NfeExportacaosTableTableManager(
    _$AppDatabase db,
    $NfeExportacaosTable table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer:
              () => $$NfeExportacaosTableFilterComposer($db: db, $table: table),
          createOrderingComposer:
              () =>
                  $$NfeExportacaosTableOrderingComposer($db: db, $table: table),
          createComputedFieldComposer:
              () => $$NfeExportacaosTableAnnotationComposer(
                $db: db,
                $table: table,
              ),
          updateCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeDetalhe = const Value.absent(),
                Value<int?> drawback = const Value.absent(),
                Value<int?> numeroRegistro = const Value.absent(),
                Value<String?> chaveAcesso = const Value.absent(),
                Value<double?> quantidade = const Value.absent(),
              }) => NfeExportacaosCompanion(
                id: id,
                idNfeDetalhe: idNfeDetalhe,
                drawback: drawback,
                numeroRegistro: numeroRegistro,
                chaveAcesso: chaveAcesso,
                quantidade: quantidade,
              ),
          createCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeDetalhe = const Value.absent(),
                Value<int?> drawback = const Value.absent(),
                Value<int?> numeroRegistro = const Value.absent(),
                Value<String?> chaveAcesso = const Value.absent(),
                Value<double?> quantidade = const Value.absent(),
              }) => NfeExportacaosCompanion.insert(
                id: id,
                idNfeDetalhe: idNfeDetalhe,
                drawback: drawback,
                numeroRegistro: numeroRegistro,
                chaveAcesso: chaveAcesso,
                quantidade: quantidade,
              ),
          withReferenceMapper:
              (p0) =>
                  p0
                      .map(
                        (e) => (
                          e.readTable(table),
                          BaseReferences(db, table, e),
                        ),
                      )
                      .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$NfeExportacaosTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $NfeExportacaosTable,
      NfeExportacao,
      $$NfeExportacaosTableFilterComposer,
      $$NfeExportacaosTableOrderingComposer,
      $$NfeExportacaosTableAnnotationComposer,
      $$NfeExportacaosTableCreateCompanionBuilder,
      $$NfeExportacaosTableUpdateCompanionBuilder,
      (
        NfeExportacao,
        BaseReferences<_$AppDatabase, $NfeExportacaosTable, NfeExportacao>,
      ),
      NfeExportacao,
      PrefetchHooks Function()
    >;
typedef $$NfeInformacaoPagamentosTableCreateCompanionBuilder =
    NfeInformacaoPagamentosCompanion Function({
      Value<int?> id,
      Value<int?> idNfeCabecalho,
      Value<String?> indicadorPagamento,
      Value<String?> meioPagamento,
      Value<double?> valor,
      Value<String?> tipoIntegracao,
      Value<String?> cnpjOperadoraCartao,
      Value<String?> bandeira,
      Value<String?> numeroAutorizacao,
      Value<double?> troco,
      Value<String?> descricaoQuandoOutros,
      Value<DateTime?> dataPagamento,
      Value<String?> cnpjTransacional,
      Value<String?> ufCnpjTransacional,
      Value<String?> cnpjBeneficiario,
      Value<String?> idTerminalPagamento,
    });
typedef $$NfeInformacaoPagamentosTableUpdateCompanionBuilder =
    NfeInformacaoPagamentosCompanion Function({
      Value<int?> id,
      Value<int?> idNfeCabecalho,
      Value<String?> indicadorPagamento,
      Value<String?> meioPagamento,
      Value<double?> valor,
      Value<String?> tipoIntegracao,
      Value<String?> cnpjOperadoraCartao,
      Value<String?> bandeira,
      Value<String?> numeroAutorizacao,
      Value<double?> troco,
      Value<String?> descricaoQuandoOutros,
      Value<DateTime?> dataPagamento,
      Value<String?> cnpjTransacional,
      Value<String?> ufCnpjTransacional,
      Value<String?> cnpjBeneficiario,
      Value<String?> idTerminalPagamento,
    });

class $$NfeInformacaoPagamentosTableFilterComposer
    extends Composer<_$AppDatabase, $NfeInformacaoPagamentosTable> {
  $$NfeInformacaoPagamentosTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idNfeCabecalho => $composableBuilder(
    column: $table.idNfeCabecalho,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get indicadorPagamento => $composableBuilder(
    column: $table.indicadorPagamento,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get meioPagamento => $composableBuilder(
    column: $table.meioPagamento,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valor => $composableBuilder(
    column: $table.valor,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get tipoIntegracao => $composableBuilder(
    column: $table.tipoIntegracao,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get cnpjOperadoraCartao => $composableBuilder(
    column: $table.cnpjOperadoraCartao,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get bandeira => $composableBuilder(
    column: $table.bandeira,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get numeroAutorizacao => $composableBuilder(
    column: $table.numeroAutorizacao,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get troco => $composableBuilder(
    column: $table.troco,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get descricaoQuandoOutros => $composableBuilder(
    column: $table.descricaoQuandoOutros,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get dataPagamento => $composableBuilder(
    column: $table.dataPagamento,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get cnpjTransacional => $composableBuilder(
    column: $table.cnpjTransacional,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get ufCnpjTransacional => $composableBuilder(
    column: $table.ufCnpjTransacional,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get cnpjBeneficiario => $composableBuilder(
    column: $table.cnpjBeneficiario,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get idTerminalPagamento => $composableBuilder(
    column: $table.idTerminalPagamento,
    builder: (column) => ColumnFilters(column),
  );
}

class $$NfeInformacaoPagamentosTableOrderingComposer
    extends Composer<_$AppDatabase, $NfeInformacaoPagamentosTable> {
  $$NfeInformacaoPagamentosTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idNfeCabecalho => $composableBuilder(
    column: $table.idNfeCabecalho,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get indicadorPagamento => $composableBuilder(
    column: $table.indicadorPagamento,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get meioPagamento => $composableBuilder(
    column: $table.meioPagamento,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valor => $composableBuilder(
    column: $table.valor,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get tipoIntegracao => $composableBuilder(
    column: $table.tipoIntegracao,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get cnpjOperadoraCartao => $composableBuilder(
    column: $table.cnpjOperadoraCartao,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get bandeira => $composableBuilder(
    column: $table.bandeira,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get numeroAutorizacao => $composableBuilder(
    column: $table.numeroAutorizacao,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get troco => $composableBuilder(
    column: $table.troco,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get descricaoQuandoOutros => $composableBuilder(
    column: $table.descricaoQuandoOutros,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get dataPagamento => $composableBuilder(
    column: $table.dataPagamento,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get cnpjTransacional => $composableBuilder(
    column: $table.cnpjTransacional,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get ufCnpjTransacional => $composableBuilder(
    column: $table.ufCnpjTransacional,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get cnpjBeneficiario => $composableBuilder(
    column: $table.cnpjBeneficiario,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get idTerminalPagamento => $composableBuilder(
    column: $table.idTerminalPagamento,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$NfeInformacaoPagamentosTableAnnotationComposer
    extends Composer<_$AppDatabase, $NfeInformacaoPagamentosTable> {
  $$NfeInformacaoPagamentosTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<int> get idNfeCabecalho => $composableBuilder(
    column: $table.idNfeCabecalho,
    builder: (column) => column,
  );

  GeneratedColumn<String> get indicadorPagamento => $composableBuilder(
    column: $table.indicadorPagamento,
    builder: (column) => column,
  );

  GeneratedColumn<String> get meioPagamento => $composableBuilder(
    column: $table.meioPagamento,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valor =>
      $composableBuilder(column: $table.valor, builder: (column) => column);

  GeneratedColumn<String> get tipoIntegracao => $composableBuilder(
    column: $table.tipoIntegracao,
    builder: (column) => column,
  );

  GeneratedColumn<String> get cnpjOperadoraCartao => $composableBuilder(
    column: $table.cnpjOperadoraCartao,
    builder: (column) => column,
  );

  GeneratedColumn<String> get bandeira =>
      $composableBuilder(column: $table.bandeira, builder: (column) => column);

  GeneratedColumn<String> get numeroAutorizacao => $composableBuilder(
    column: $table.numeroAutorizacao,
    builder: (column) => column,
  );

  GeneratedColumn<double> get troco =>
      $composableBuilder(column: $table.troco, builder: (column) => column);

  GeneratedColumn<String> get descricaoQuandoOutros => $composableBuilder(
    column: $table.descricaoQuandoOutros,
    builder: (column) => column,
  );

  GeneratedColumn<DateTime> get dataPagamento => $composableBuilder(
    column: $table.dataPagamento,
    builder: (column) => column,
  );

  GeneratedColumn<String> get cnpjTransacional => $composableBuilder(
    column: $table.cnpjTransacional,
    builder: (column) => column,
  );

  GeneratedColumn<String> get ufCnpjTransacional => $composableBuilder(
    column: $table.ufCnpjTransacional,
    builder: (column) => column,
  );

  GeneratedColumn<String> get cnpjBeneficiario => $composableBuilder(
    column: $table.cnpjBeneficiario,
    builder: (column) => column,
  );

  GeneratedColumn<String> get idTerminalPagamento => $composableBuilder(
    column: $table.idTerminalPagamento,
    builder: (column) => column,
  );
}

class $$NfeInformacaoPagamentosTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $NfeInformacaoPagamentosTable,
          NfeInformacaoPagamento,
          $$NfeInformacaoPagamentosTableFilterComposer,
          $$NfeInformacaoPagamentosTableOrderingComposer,
          $$NfeInformacaoPagamentosTableAnnotationComposer,
          $$NfeInformacaoPagamentosTableCreateCompanionBuilder,
          $$NfeInformacaoPagamentosTableUpdateCompanionBuilder,
          (
            NfeInformacaoPagamento,
            BaseReferences<
              _$AppDatabase,
              $NfeInformacaoPagamentosTable,
              NfeInformacaoPagamento
            >,
          ),
          NfeInformacaoPagamento,
          PrefetchHooks Function()
        > {
  $$NfeInformacaoPagamentosTableTableManager(
    _$AppDatabase db,
    $NfeInformacaoPagamentosTable table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer:
              () => $$NfeInformacaoPagamentosTableFilterComposer(
                $db: db,
                $table: table,
              ),
          createOrderingComposer:
              () => $$NfeInformacaoPagamentosTableOrderingComposer(
                $db: db,
                $table: table,
              ),
          createComputedFieldComposer:
              () => $$NfeInformacaoPagamentosTableAnnotationComposer(
                $db: db,
                $table: table,
              ),
          updateCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeCabecalho = const Value.absent(),
                Value<String?> indicadorPagamento = const Value.absent(),
                Value<String?> meioPagamento = const Value.absent(),
                Value<double?> valor = const Value.absent(),
                Value<String?> tipoIntegracao = const Value.absent(),
                Value<String?> cnpjOperadoraCartao = const Value.absent(),
                Value<String?> bandeira = const Value.absent(),
                Value<String?> numeroAutorizacao = const Value.absent(),
                Value<double?> troco = const Value.absent(),
                Value<String?> descricaoQuandoOutros = const Value.absent(),
                Value<DateTime?> dataPagamento = const Value.absent(),
                Value<String?> cnpjTransacional = const Value.absent(),
                Value<String?> ufCnpjTransacional = const Value.absent(),
                Value<String?> cnpjBeneficiario = const Value.absent(),
                Value<String?> idTerminalPagamento = const Value.absent(),
              }) => NfeInformacaoPagamentosCompanion(
                id: id,
                idNfeCabecalho: idNfeCabecalho,
                indicadorPagamento: indicadorPagamento,
                meioPagamento: meioPagamento,
                valor: valor,
                tipoIntegracao: tipoIntegracao,
                cnpjOperadoraCartao: cnpjOperadoraCartao,
                bandeira: bandeira,
                numeroAutorizacao: numeroAutorizacao,
                troco: troco,
                descricaoQuandoOutros: descricaoQuandoOutros,
                dataPagamento: dataPagamento,
                cnpjTransacional: cnpjTransacional,
                ufCnpjTransacional: ufCnpjTransacional,
                cnpjBeneficiario: cnpjBeneficiario,
                idTerminalPagamento: idTerminalPagamento,
              ),
          createCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeCabecalho = const Value.absent(),
                Value<String?> indicadorPagamento = const Value.absent(),
                Value<String?> meioPagamento = const Value.absent(),
                Value<double?> valor = const Value.absent(),
                Value<String?> tipoIntegracao = const Value.absent(),
                Value<String?> cnpjOperadoraCartao = const Value.absent(),
                Value<String?> bandeira = const Value.absent(),
                Value<String?> numeroAutorizacao = const Value.absent(),
                Value<double?> troco = const Value.absent(),
                Value<String?> descricaoQuandoOutros = const Value.absent(),
                Value<DateTime?> dataPagamento = const Value.absent(),
                Value<String?> cnpjTransacional = const Value.absent(),
                Value<String?> ufCnpjTransacional = const Value.absent(),
                Value<String?> cnpjBeneficiario = const Value.absent(),
                Value<String?> idTerminalPagamento = const Value.absent(),
              }) => NfeInformacaoPagamentosCompanion.insert(
                id: id,
                idNfeCabecalho: idNfeCabecalho,
                indicadorPagamento: indicadorPagamento,
                meioPagamento: meioPagamento,
                valor: valor,
                tipoIntegracao: tipoIntegracao,
                cnpjOperadoraCartao: cnpjOperadoraCartao,
                bandeira: bandeira,
                numeroAutorizacao: numeroAutorizacao,
                troco: troco,
                descricaoQuandoOutros: descricaoQuandoOutros,
                dataPagamento: dataPagamento,
                cnpjTransacional: cnpjTransacional,
                ufCnpjTransacional: ufCnpjTransacional,
                cnpjBeneficiario: cnpjBeneficiario,
                idTerminalPagamento: idTerminalPagamento,
              ),
          withReferenceMapper:
              (p0) =>
                  p0
                      .map(
                        (e) => (
                          e.readTable(table),
                          BaseReferences(db, table, e),
                        ),
                      )
                      .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$NfeInformacaoPagamentosTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $NfeInformacaoPagamentosTable,
      NfeInformacaoPagamento,
      $$NfeInformacaoPagamentosTableFilterComposer,
      $$NfeInformacaoPagamentosTableOrderingComposer,
      $$NfeInformacaoPagamentosTableAnnotationComposer,
      $$NfeInformacaoPagamentosTableCreateCompanionBuilder,
      $$NfeInformacaoPagamentosTableUpdateCompanionBuilder,
      (
        NfeInformacaoPagamento,
        BaseReferences<
          _$AppDatabase,
          $NfeInformacaoPagamentosTable,
          NfeInformacaoPagamento
        >,
      ),
      NfeInformacaoPagamento,
      PrefetchHooks Function()
    >;
typedef $$NfeItemRastreadosTableCreateCompanionBuilder =
    NfeItemRastreadosCompanion Function({
      Value<int?> id,
      Value<int?> idNfeDetalhe,
      Value<String?> numeroLote,
      Value<double?> quantidadeItens,
      Value<DateTime?> dataFabricacao,
      Value<DateTime?> dataValidade,
      Value<String?> codigoAgregacao,
    });
typedef $$NfeItemRastreadosTableUpdateCompanionBuilder =
    NfeItemRastreadosCompanion Function({
      Value<int?> id,
      Value<int?> idNfeDetalhe,
      Value<String?> numeroLote,
      Value<double?> quantidadeItens,
      Value<DateTime?> dataFabricacao,
      Value<DateTime?> dataValidade,
      Value<String?> codigoAgregacao,
    });

class $$NfeItemRastreadosTableFilterComposer
    extends Composer<_$AppDatabase, $NfeItemRastreadosTable> {
  $$NfeItemRastreadosTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get numeroLote => $composableBuilder(
    column: $table.numeroLote,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get quantidadeItens => $composableBuilder(
    column: $table.quantidadeItens,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get dataFabricacao => $composableBuilder(
    column: $table.dataFabricacao,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get dataValidade => $composableBuilder(
    column: $table.dataValidade,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get codigoAgregacao => $composableBuilder(
    column: $table.codigoAgregacao,
    builder: (column) => ColumnFilters(column),
  );
}

class $$NfeItemRastreadosTableOrderingComposer
    extends Composer<_$AppDatabase, $NfeItemRastreadosTable> {
  $$NfeItemRastreadosTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get numeroLote => $composableBuilder(
    column: $table.numeroLote,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get quantidadeItens => $composableBuilder(
    column: $table.quantidadeItens,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get dataFabricacao => $composableBuilder(
    column: $table.dataFabricacao,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get dataValidade => $composableBuilder(
    column: $table.dataValidade,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get codigoAgregacao => $composableBuilder(
    column: $table.codigoAgregacao,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$NfeItemRastreadosTableAnnotationComposer
    extends Composer<_$AppDatabase, $NfeItemRastreadosTable> {
  $$NfeItemRastreadosTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => column,
  );

  GeneratedColumn<String> get numeroLote => $composableBuilder(
    column: $table.numeroLote,
    builder: (column) => column,
  );

  GeneratedColumn<double> get quantidadeItens => $composableBuilder(
    column: $table.quantidadeItens,
    builder: (column) => column,
  );

  GeneratedColumn<DateTime> get dataFabricacao => $composableBuilder(
    column: $table.dataFabricacao,
    builder: (column) => column,
  );

  GeneratedColumn<DateTime> get dataValidade => $composableBuilder(
    column: $table.dataValidade,
    builder: (column) => column,
  );

  GeneratedColumn<String> get codigoAgregacao => $composableBuilder(
    column: $table.codigoAgregacao,
    builder: (column) => column,
  );
}

class $$NfeItemRastreadosTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $NfeItemRastreadosTable,
          NfeItemRastreado,
          $$NfeItemRastreadosTableFilterComposer,
          $$NfeItemRastreadosTableOrderingComposer,
          $$NfeItemRastreadosTableAnnotationComposer,
          $$NfeItemRastreadosTableCreateCompanionBuilder,
          $$NfeItemRastreadosTableUpdateCompanionBuilder,
          (
            NfeItemRastreado,
            BaseReferences<
              _$AppDatabase,
              $NfeItemRastreadosTable,
              NfeItemRastreado
            >,
          ),
          NfeItemRastreado,
          PrefetchHooks Function()
        > {
  $$NfeItemRastreadosTableTableManager(
    _$AppDatabase db,
    $NfeItemRastreadosTable table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer:
              () => $$NfeItemRastreadosTableFilterComposer(
                $db: db,
                $table: table,
              ),
          createOrderingComposer:
              () => $$NfeItemRastreadosTableOrderingComposer(
                $db: db,
                $table: table,
              ),
          createComputedFieldComposer:
              () => $$NfeItemRastreadosTableAnnotationComposer(
                $db: db,
                $table: table,
              ),
          updateCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeDetalhe = const Value.absent(),
                Value<String?> numeroLote = const Value.absent(),
                Value<double?> quantidadeItens = const Value.absent(),
                Value<DateTime?> dataFabricacao = const Value.absent(),
                Value<DateTime?> dataValidade = const Value.absent(),
                Value<String?> codigoAgregacao = const Value.absent(),
              }) => NfeItemRastreadosCompanion(
                id: id,
                idNfeDetalhe: idNfeDetalhe,
                numeroLote: numeroLote,
                quantidadeItens: quantidadeItens,
                dataFabricacao: dataFabricacao,
                dataValidade: dataValidade,
                codigoAgregacao: codigoAgregacao,
              ),
          createCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeDetalhe = const Value.absent(),
                Value<String?> numeroLote = const Value.absent(),
                Value<double?> quantidadeItens = const Value.absent(),
                Value<DateTime?> dataFabricacao = const Value.absent(),
                Value<DateTime?> dataValidade = const Value.absent(),
                Value<String?> codigoAgregacao = const Value.absent(),
              }) => NfeItemRastreadosCompanion.insert(
                id: id,
                idNfeDetalhe: idNfeDetalhe,
                numeroLote: numeroLote,
                quantidadeItens: quantidadeItens,
                dataFabricacao: dataFabricacao,
                dataValidade: dataValidade,
                codigoAgregacao: codigoAgregacao,
              ),
          withReferenceMapper:
              (p0) =>
                  p0
                      .map(
                        (e) => (
                          e.readTable(table),
                          BaseReferences(db, table, e),
                        ),
                      )
                      .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$NfeItemRastreadosTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $NfeItemRastreadosTable,
      NfeItemRastreado,
      $$NfeItemRastreadosTableFilterComposer,
      $$NfeItemRastreadosTableOrderingComposer,
      $$NfeItemRastreadosTableAnnotationComposer,
      $$NfeItemRastreadosTableCreateCompanionBuilder,
      $$NfeItemRastreadosTableUpdateCompanionBuilder,
      (
        NfeItemRastreado,
        BaseReferences<
          _$AppDatabase,
          $NfeItemRastreadosTable,
          NfeItemRastreado
        >,
      ),
      NfeItemRastreado,
      PrefetchHooks Function()
    >;
typedef $$NfeDetalheImpostoPisStsTableCreateCompanionBuilder =
    NfeDetalheImpostoPisStsCompanion Function({
      Value<int?> id,
      Value<int?> idNfeDetalhe,
      Value<double?> valorBaseCalculoPisSt,
      Value<double?> aliquotaPisStPercentual,
      Value<double?> quantidadeVendidaPisSt,
      Value<double?> aliquotaPisStReais,
      Value<double?> valorPisSt,
      Value<String?> pisStCompoeValorTotal,
    });
typedef $$NfeDetalheImpostoPisStsTableUpdateCompanionBuilder =
    NfeDetalheImpostoPisStsCompanion Function({
      Value<int?> id,
      Value<int?> idNfeDetalhe,
      Value<double?> valorBaseCalculoPisSt,
      Value<double?> aliquotaPisStPercentual,
      Value<double?> quantidadeVendidaPisSt,
      Value<double?> aliquotaPisStReais,
      Value<double?> valorPisSt,
      Value<String?> pisStCompoeValorTotal,
    });

class $$NfeDetalheImpostoPisStsTableFilterComposer
    extends Composer<_$AppDatabase, $NfeDetalheImpostoPisStsTable> {
  $$NfeDetalheImpostoPisStsTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorBaseCalculoPisSt => $composableBuilder(
    column: $table.valorBaseCalculoPisSt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get aliquotaPisStPercentual => $composableBuilder(
    column: $table.aliquotaPisStPercentual,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get quantidadeVendidaPisSt => $composableBuilder(
    column: $table.quantidadeVendidaPisSt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get aliquotaPisStReais => $composableBuilder(
    column: $table.aliquotaPisStReais,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorPisSt => $composableBuilder(
    column: $table.valorPisSt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get pisStCompoeValorTotal => $composableBuilder(
    column: $table.pisStCompoeValorTotal,
    builder: (column) => ColumnFilters(column),
  );
}

class $$NfeDetalheImpostoPisStsTableOrderingComposer
    extends Composer<_$AppDatabase, $NfeDetalheImpostoPisStsTable> {
  $$NfeDetalheImpostoPisStsTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorBaseCalculoPisSt => $composableBuilder(
    column: $table.valorBaseCalculoPisSt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get aliquotaPisStPercentual => $composableBuilder(
    column: $table.aliquotaPisStPercentual,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get quantidadeVendidaPisSt => $composableBuilder(
    column: $table.quantidadeVendidaPisSt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get aliquotaPisStReais => $composableBuilder(
    column: $table.aliquotaPisStReais,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorPisSt => $composableBuilder(
    column: $table.valorPisSt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get pisStCompoeValorTotal => $composableBuilder(
    column: $table.pisStCompoeValorTotal,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$NfeDetalheImpostoPisStsTableAnnotationComposer
    extends Composer<_$AppDatabase, $NfeDetalheImpostoPisStsTable> {
  $$NfeDetalheImpostoPisStsTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorBaseCalculoPisSt => $composableBuilder(
    column: $table.valorBaseCalculoPisSt,
    builder: (column) => column,
  );

  GeneratedColumn<double> get aliquotaPisStPercentual => $composableBuilder(
    column: $table.aliquotaPisStPercentual,
    builder: (column) => column,
  );

  GeneratedColumn<double> get quantidadeVendidaPisSt => $composableBuilder(
    column: $table.quantidadeVendidaPisSt,
    builder: (column) => column,
  );

  GeneratedColumn<double> get aliquotaPisStReais => $composableBuilder(
    column: $table.aliquotaPisStReais,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorPisSt => $composableBuilder(
    column: $table.valorPisSt,
    builder: (column) => column,
  );

  GeneratedColumn<String> get pisStCompoeValorTotal => $composableBuilder(
    column: $table.pisStCompoeValorTotal,
    builder: (column) => column,
  );
}

class $$NfeDetalheImpostoPisStsTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $NfeDetalheImpostoPisStsTable,
          NfeDetalheImpostoPisSt,
          $$NfeDetalheImpostoPisStsTableFilterComposer,
          $$NfeDetalheImpostoPisStsTableOrderingComposer,
          $$NfeDetalheImpostoPisStsTableAnnotationComposer,
          $$NfeDetalheImpostoPisStsTableCreateCompanionBuilder,
          $$NfeDetalheImpostoPisStsTableUpdateCompanionBuilder,
          (
            NfeDetalheImpostoPisSt,
            BaseReferences<
              _$AppDatabase,
              $NfeDetalheImpostoPisStsTable,
              NfeDetalheImpostoPisSt
            >,
          ),
          NfeDetalheImpostoPisSt,
          PrefetchHooks Function()
        > {
  $$NfeDetalheImpostoPisStsTableTableManager(
    _$AppDatabase db,
    $NfeDetalheImpostoPisStsTable table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer:
              () => $$NfeDetalheImpostoPisStsTableFilterComposer(
                $db: db,
                $table: table,
              ),
          createOrderingComposer:
              () => $$NfeDetalheImpostoPisStsTableOrderingComposer(
                $db: db,
                $table: table,
              ),
          createComputedFieldComposer:
              () => $$NfeDetalheImpostoPisStsTableAnnotationComposer(
                $db: db,
                $table: table,
              ),
          updateCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeDetalhe = const Value.absent(),
                Value<double?> valorBaseCalculoPisSt = const Value.absent(),
                Value<double?> aliquotaPisStPercentual = const Value.absent(),
                Value<double?> quantidadeVendidaPisSt = const Value.absent(),
                Value<double?> aliquotaPisStReais = const Value.absent(),
                Value<double?> valorPisSt = const Value.absent(),
                Value<String?> pisStCompoeValorTotal = const Value.absent(),
              }) => NfeDetalheImpostoPisStsCompanion(
                id: id,
                idNfeDetalhe: idNfeDetalhe,
                valorBaseCalculoPisSt: valorBaseCalculoPisSt,
                aliquotaPisStPercentual: aliquotaPisStPercentual,
                quantidadeVendidaPisSt: quantidadeVendidaPisSt,
                aliquotaPisStReais: aliquotaPisStReais,
                valorPisSt: valorPisSt,
                pisStCompoeValorTotal: pisStCompoeValorTotal,
              ),
          createCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeDetalhe = const Value.absent(),
                Value<double?> valorBaseCalculoPisSt = const Value.absent(),
                Value<double?> aliquotaPisStPercentual = const Value.absent(),
                Value<double?> quantidadeVendidaPisSt = const Value.absent(),
                Value<double?> aliquotaPisStReais = const Value.absent(),
                Value<double?> valorPisSt = const Value.absent(),
                Value<String?> pisStCompoeValorTotal = const Value.absent(),
              }) => NfeDetalheImpostoPisStsCompanion.insert(
                id: id,
                idNfeDetalhe: idNfeDetalhe,
                valorBaseCalculoPisSt: valorBaseCalculoPisSt,
                aliquotaPisStPercentual: aliquotaPisStPercentual,
                quantidadeVendidaPisSt: quantidadeVendidaPisSt,
                aliquotaPisStReais: aliquotaPisStReais,
                valorPisSt: valorPisSt,
                pisStCompoeValorTotal: pisStCompoeValorTotal,
              ),
          withReferenceMapper:
              (p0) =>
                  p0
                      .map(
                        (e) => (
                          e.readTable(table),
                          BaseReferences(db, table, e),
                        ),
                      )
                      .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$NfeDetalheImpostoPisStsTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $NfeDetalheImpostoPisStsTable,
      NfeDetalheImpostoPisSt,
      $$NfeDetalheImpostoPisStsTableFilterComposer,
      $$NfeDetalheImpostoPisStsTableOrderingComposer,
      $$NfeDetalheImpostoPisStsTableAnnotationComposer,
      $$NfeDetalheImpostoPisStsTableCreateCompanionBuilder,
      $$NfeDetalheImpostoPisStsTableUpdateCompanionBuilder,
      (
        NfeDetalheImpostoPisSt,
        BaseReferences<
          _$AppDatabase,
          $NfeDetalheImpostoPisStsTable,
          NfeDetalheImpostoPisSt
        >,
      ),
      NfeDetalheImpostoPisSt,
      PrefetchHooks Function()
    >;
typedef $$NfeDetalheImpostoIcmsUfdestsTableCreateCompanionBuilder =
    NfeDetalheImpostoIcmsUfdestsCompanion Function({
      Value<int?> id,
      Value<int?> idNfeDetalhe,
      Value<double?> valorBcIcmsUfDestino,
      Value<double?> valorBcFcpUfDestino,
      Value<double?> percentualFcpUfDestino,
      Value<double?> aliquotaInternaUfDestino,
      Value<double?> aliquotaInteresdatualUfEnvolvidas,
      Value<double?> percentualProvisorioPartilhaIcms,
      Value<double?> valorIcmsFcpUfDestino,
      Value<double?> valorInterestadualUfDestino,
      Value<double?> valorInterestadualUfRemetente,
    });
typedef $$NfeDetalheImpostoIcmsUfdestsTableUpdateCompanionBuilder =
    NfeDetalheImpostoIcmsUfdestsCompanion Function({
      Value<int?> id,
      Value<int?> idNfeDetalhe,
      Value<double?> valorBcIcmsUfDestino,
      Value<double?> valorBcFcpUfDestino,
      Value<double?> percentualFcpUfDestino,
      Value<double?> aliquotaInternaUfDestino,
      Value<double?> aliquotaInteresdatualUfEnvolvidas,
      Value<double?> percentualProvisorioPartilhaIcms,
      Value<double?> valorIcmsFcpUfDestino,
      Value<double?> valorInterestadualUfDestino,
      Value<double?> valorInterestadualUfRemetente,
    });

class $$NfeDetalheImpostoIcmsUfdestsTableFilterComposer
    extends Composer<_$AppDatabase, $NfeDetalheImpostoIcmsUfdestsTable> {
  $$NfeDetalheImpostoIcmsUfdestsTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorBcIcmsUfDestino => $composableBuilder(
    column: $table.valorBcIcmsUfDestino,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorBcFcpUfDestino => $composableBuilder(
    column: $table.valorBcFcpUfDestino,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get percentualFcpUfDestino => $composableBuilder(
    column: $table.percentualFcpUfDestino,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get aliquotaInternaUfDestino => $composableBuilder(
    column: $table.aliquotaInternaUfDestino,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get aliquotaInteresdatualUfEnvolvidas =>
      $composableBuilder(
        column: $table.aliquotaInteresdatualUfEnvolvidas,
        builder: (column) => ColumnFilters(column),
      );

  ColumnFilters<double> get percentualProvisorioPartilhaIcms =>
      $composableBuilder(
        column: $table.percentualProvisorioPartilhaIcms,
        builder: (column) => ColumnFilters(column),
      );

  ColumnFilters<double> get valorIcmsFcpUfDestino => $composableBuilder(
    column: $table.valorIcmsFcpUfDestino,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorInterestadualUfDestino => $composableBuilder(
    column: $table.valorInterestadualUfDestino,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorInterestadualUfRemetente => $composableBuilder(
    column: $table.valorInterestadualUfRemetente,
    builder: (column) => ColumnFilters(column),
  );
}

class $$NfeDetalheImpostoIcmsUfdestsTableOrderingComposer
    extends Composer<_$AppDatabase, $NfeDetalheImpostoIcmsUfdestsTable> {
  $$NfeDetalheImpostoIcmsUfdestsTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorBcIcmsUfDestino => $composableBuilder(
    column: $table.valorBcIcmsUfDestino,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorBcFcpUfDestino => $composableBuilder(
    column: $table.valorBcFcpUfDestino,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get percentualFcpUfDestino => $composableBuilder(
    column: $table.percentualFcpUfDestino,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get aliquotaInternaUfDestino => $composableBuilder(
    column: $table.aliquotaInternaUfDestino,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get aliquotaInteresdatualUfEnvolvidas =>
      $composableBuilder(
        column: $table.aliquotaInteresdatualUfEnvolvidas,
        builder: (column) => ColumnOrderings(column),
      );

  ColumnOrderings<double> get percentualProvisorioPartilhaIcms =>
      $composableBuilder(
        column: $table.percentualProvisorioPartilhaIcms,
        builder: (column) => ColumnOrderings(column),
      );

  ColumnOrderings<double> get valorIcmsFcpUfDestino => $composableBuilder(
    column: $table.valorIcmsFcpUfDestino,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorInterestadualUfDestino => $composableBuilder(
    column: $table.valorInterestadualUfDestino,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorInterestadualUfRemetente =>
      $composableBuilder(
        column: $table.valorInterestadualUfRemetente,
        builder: (column) => ColumnOrderings(column),
      );
}

class $$NfeDetalheImpostoIcmsUfdestsTableAnnotationComposer
    extends Composer<_$AppDatabase, $NfeDetalheImpostoIcmsUfdestsTable> {
  $$NfeDetalheImpostoIcmsUfdestsTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorBcIcmsUfDestino => $composableBuilder(
    column: $table.valorBcIcmsUfDestino,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorBcFcpUfDestino => $composableBuilder(
    column: $table.valorBcFcpUfDestino,
    builder: (column) => column,
  );

  GeneratedColumn<double> get percentualFcpUfDestino => $composableBuilder(
    column: $table.percentualFcpUfDestino,
    builder: (column) => column,
  );

  GeneratedColumn<double> get aliquotaInternaUfDestino => $composableBuilder(
    column: $table.aliquotaInternaUfDestino,
    builder: (column) => column,
  );

  GeneratedColumn<double> get aliquotaInteresdatualUfEnvolvidas =>
      $composableBuilder(
        column: $table.aliquotaInteresdatualUfEnvolvidas,
        builder: (column) => column,
      );

  GeneratedColumn<double> get percentualProvisorioPartilhaIcms =>
      $composableBuilder(
        column: $table.percentualProvisorioPartilhaIcms,
        builder: (column) => column,
      );

  GeneratedColumn<double> get valorIcmsFcpUfDestino => $composableBuilder(
    column: $table.valorIcmsFcpUfDestino,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorInterestadualUfDestino => $composableBuilder(
    column: $table.valorInterestadualUfDestino,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorInterestadualUfRemetente =>
      $composableBuilder(
        column: $table.valorInterestadualUfRemetente,
        builder: (column) => column,
      );
}

class $$NfeDetalheImpostoIcmsUfdestsTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $NfeDetalheImpostoIcmsUfdestsTable,
          NfeDetalheImpostoIcmsUfdest,
          $$NfeDetalheImpostoIcmsUfdestsTableFilterComposer,
          $$NfeDetalheImpostoIcmsUfdestsTableOrderingComposer,
          $$NfeDetalheImpostoIcmsUfdestsTableAnnotationComposer,
          $$NfeDetalheImpostoIcmsUfdestsTableCreateCompanionBuilder,
          $$NfeDetalheImpostoIcmsUfdestsTableUpdateCompanionBuilder,
          (
            NfeDetalheImpostoIcmsUfdest,
            BaseReferences<
              _$AppDatabase,
              $NfeDetalheImpostoIcmsUfdestsTable,
              NfeDetalheImpostoIcmsUfdest
            >,
          ),
          NfeDetalheImpostoIcmsUfdest,
          PrefetchHooks Function()
        > {
  $$NfeDetalheImpostoIcmsUfdestsTableTableManager(
    _$AppDatabase db,
    $NfeDetalheImpostoIcmsUfdestsTable table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer:
              () => $$NfeDetalheImpostoIcmsUfdestsTableFilterComposer(
                $db: db,
                $table: table,
              ),
          createOrderingComposer:
              () => $$NfeDetalheImpostoIcmsUfdestsTableOrderingComposer(
                $db: db,
                $table: table,
              ),
          createComputedFieldComposer:
              () => $$NfeDetalheImpostoIcmsUfdestsTableAnnotationComposer(
                $db: db,
                $table: table,
              ),
          updateCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeDetalhe = const Value.absent(),
                Value<double?> valorBcIcmsUfDestino = const Value.absent(),
                Value<double?> valorBcFcpUfDestino = const Value.absent(),
                Value<double?> percentualFcpUfDestino = const Value.absent(),
                Value<double?> aliquotaInternaUfDestino = const Value.absent(),
                Value<double?> aliquotaInteresdatualUfEnvolvidas =
                    const Value.absent(),
                Value<double?> percentualProvisorioPartilhaIcms =
                    const Value.absent(),
                Value<double?> valorIcmsFcpUfDestino = const Value.absent(),
                Value<double?> valorInterestadualUfDestino =
                    const Value.absent(),
                Value<double?> valorInterestadualUfRemetente =
                    const Value.absent(),
              }) => NfeDetalheImpostoIcmsUfdestsCompanion(
                id: id,
                idNfeDetalhe: idNfeDetalhe,
                valorBcIcmsUfDestino: valorBcIcmsUfDestino,
                valorBcFcpUfDestino: valorBcFcpUfDestino,
                percentualFcpUfDestino: percentualFcpUfDestino,
                aliquotaInternaUfDestino: aliquotaInternaUfDestino,
                aliquotaInteresdatualUfEnvolvidas:
                    aliquotaInteresdatualUfEnvolvidas,
                percentualProvisorioPartilhaIcms:
                    percentualProvisorioPartilhaIcms,
                valorIcmsFcpUfDestino: valorIcmsFcpUfDestino,
                valorInterestadualUfDestino: valorInterestadualUfDestino,
                valorInterestadualUfRemetente: valorInterestadualUfRemetente,
              ),
          createCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeDetalhe = const Value.absent(),
                Value<double?> valorBcIcmsUfDestino = const Value.absent(),
                Value<double?> valorBcFcpUfDestino = const Value.absent(),
                Value<double?> percentualFcpUfDestino = const Value.absent(),
                Value<double?> aliquotaInternaUfDestino = const Value.absent(),
                Value<double?> aliquotaInteresdatualUfEnvolvidas =
                    const Value.absent(),
                Value<double?> percentualProvisorioPartilhaIcms =
                    const Value.absent(),
                Value<double?> valorIcmsFcpUfDestino = const Value.absent(),
                Value<double?> valorInterestadualUfDestino =
                    const Value.absent(),
                Value<double?> valorInterestadualUfRemetente =
                    const Value.absent(),
              }) => NfeDetalheImpostoIcmsUfdestsCompanion.insert(
                id: id,
                idNfeDetalhe: idNfeDetalhe,
                valorBcIcmsUfDestino: valorBcIcmsUfDestino,
                valorBcFcpUfDestino: valorBcFcpUfDestino,
                percentualFcpUfDestino: percentualFcpUfDestino,
                aliquotaInternaUfDestino: aliquotaInternaUfDestino,
                aliquotaInteresdatualUfEnvolvidas:
                    aliquotaInteresdatualUfEnvolvidas,
                percentualProvisorioPartilhaIcms:
                    percentualProvisorioPartilhaIcms,
                valorIcmsFcpUfDestino: valorIcmsFcpUfDestino,
                valorInterestadualUfDestino: valorInterestadualUfDestino,
                valorInterestadualUfRemetente: valorInterestadualUfRemetente,
              ),
          withReferenceMapper:
              (p0) =>
                  p0
                      .map(
                        (e) => (
                          e.readTable(table),
                          BaseReferences(db, table, e),
                        ),
                      )
                      .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$NfeDetalheImpostoIcmsUfdestsTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $NfeDetalheImpostoIcmsUfdestsTable,
      NfeDetalheImpostoIcmsUfdest,
      $$NfeDetalheImpostoIcmsUfdestsTableFilterComposer,
      $$NfeDetalheImpostoIcmsUfdestsTableOrderingComposer,
      $$NfeDetalheImpostoIcmsUfdestsTableAnnotationComposer,
      $$NfeDetalheImpostoIcmsUfdestsTableCreateCompanionBuilder,
      $$NfeDetalheImpostoIcmsUfdestsTableUpdateCompanionBuilder,
      (
        NfeDetalheImpostoIcmsUfdest,
        BaseReferences<
          _$AppDatabase,
          $NfeDetalheImpostoIcmsUfdestsTable,
          NfeDetalheImpostoIcmsUfdest
        >,
      ),
      NfeDetalheImpostoIcmsUfdest,
      PrefetchHooks Function()
    >;
typedef $$NfeDetalheImpostoCofinsStsTableCreateCompanionBuilder =
    NfeDetalheImpostoCofinsStsCompanion Function({
      Value<int?> id,
      Value<int?> idNfeDetalhe,
      Value<double?> baseCalculoCofinsSt,
      Value<double?> aliquotaCofinsStPercentual,
      Value<double?> quantidadeVendidaCofinsSt,
      Value<double?> aliquotaCofinsStReais,
      Value<double?> valorCofinsSt,
      Value<String?> cofinsStCompoeValorTotal,
    });
typedef $$NfeDetalheImpostoCofinsStsTableUpdateCompanionBuilder =
    NfeDetalheImpostoCofinsStsCompanion Function({
      Value<int?> id,
      Value<int?> idNfeDetalhe,
      Value<double?> baseCalculoCofinsSt,
      Value<double?> aliquotaCofinsStPercentual,
      Value<double?> quantidadeVendidaCofinsSt,
      Value<double?> aliquotaCofinsStReais,
      Value<double?> valorCofinsSt,
      Value<String?> cofinsStCompoeValorTotal,
    });

class $$NfeDetalheImpostoCofinsStsTableFilterComposer
    extends Composer<_$AppDatabase, $NfeDetalheImpostoCofinsStsTable> {
  $$NfeDetalheImpostoCofinsStsTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get baseCalculoCofinsSt => $composableBuilder(
    column: $table.baseCalculoCofinsSt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get aliquotaCofinsStPercentual => $composableBuilder(
    column: $table.aliquotaCofinsStPercentual,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get quantidadeVendidaCofinsSt => $composableBuilder(
    column: $table.quantidadeVendidaCofinsSt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get aliquotaCofinsStReais => $composableBuilder(
    column: $table.aliquotaCofinsStReais,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorCofinsSt => $composableBuilder(
    column: $table.valorCofinsSt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get cofinsStCompoeValorTotal => $composableBuilder(
    column: $table.cofinsStCompoeValorTotal,
    builder: (column) => ColumnFilters(column),
  );
}

class $$NfeDetalheImpostoCofinsStsTableOrderingComposer
    extends Composer<_$AppDatabase, $NfeDetalheImpostoCofinsStsTable> {
  $$NfeDetalheImpostoCofinsStsTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get baseCalculoCofinsSt => $composableBuilder(
    column: $table.baseCalculoCofinsSt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get aliquotaCofinsStPercentual => $composableBuilder(
    column: $table.aliquotaCofinsStPercentual,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get quantidadeVendidaCofinsSt => $composableBuilder(
    column: $table.quantidadeVendidaCofinsSt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get aliquotaCofinsStReais => $composableBuilder(
    column: $table.aliquotaCofinsStReais,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorCofinsSt => $composableBuilder(
    column: $table.valorCofinsSt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get cofinsStCompoeValorTotal => $composableBuilder(
    column: $table.cofinsStCompoeValorTotal,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$NfeDetalheImpostoCofinsStsTableAnnotationComposer
    extends Composer<_$AppDatabase, $NfeDetalheImpostoCofinsStsTable> {
  $$NfeDetalheImpostoCofinsStsTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => column,
  );

  GeneratedColumn<double> get baseCalculoCofinsSt => $composableBuilder(
    column: $table.baseCalculoCofinsSt,
    builder: (column) => column,
  );

  GeneratedColumn<double> get aliquotaCofinsStPercentual => $composableBuilder(
    column: $table.aliquotaCofinsStPercentual,
    builder: (column) => column,
  );

  GeneratedColumn<double> get quantidadeVendidaCofinsSt => $composableBuilder(
    column: $table.quantidadeVendidaCofinsSt,
    builder: (column) => column,
  );

  GeneratedColumn<double> get aliquotaCofinsStReais => $composableBuilder(
    column: $table.aliquotaCofinsStReais,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorCofinsSt => $composableBuilder(
    column: $table.valorCofinsSt,
    builder: (column) => column,
  );

  GeneratedColumn<String> get cofinsStCompoeValorTotal => $composableBuilder(
    column: $table.cofinsStCompoeValorTotal,
    builder: (column) => column,
  );
}

class $$NfeDetalheImpostoCofinsStsTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $NfeDetalheImpostoCofinsStsTable,
          NfeDetalheImpostoCofinsSt,
          $$NfeDetalheImpostoCofinsStsTableFilterComposer,
          $$NfeDetalheImpostoCofinsStsTableOrderingComposer,
          $$NfeDetalheImpostoCofinsStsTableAnnotationComposer,
          $$NfeDetalheImpostoCofinsStsTableCreateCompanionBuilder,
          $$NfeDetalheImpostoCofinsStsTableUpdateCompanionBuilder,
          (
            NfeDetalheImpostoCofinsSt,
            BaseReferences<
              _$AppDatabase,
              $NfeDetalheImpostoCofinsStsTable,
              NfeDetalheImpostoCofinsSt
            >,
          ),
          NfeDetalheImpostoCofinsSt,
          PrefetchHooks Function()
        > {
  $$NfeDetalheImpostoCofinsStsTableTableManager(
    _$AppDatabase db,
    $NfeDetalheImpostoCofinsStsTable table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer:
              () => $$NfeDetalheImpostoCofinsStsTableFilterComposer(
                $db: db,
                $table: table,
              ),
          createOrderingComposer:
              () => $$NfeDetalheImpostoCofinsStsTableOrderingComposer(
                $db: db,
                $table: table,
              ),
          createComputedFieldComposer:
              () => $$NfeDetalheImpostoCofinsStsTableAnnotationComposer(
                $db: db,
                $table: table,
              ),
          updateCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeDetalhe = const Value.absent(),
                Value<double?> baseCalculoCofinsSt = const Value.absent(),
                Value<double?> aliquotaCofinsStPercentual =
                    const Value.absent(),
                Value<double?> quantidadeVendidaCofinsSt = const Value.absent(),
                Value<double?> aliquotaCofinsStReais = const Value.absent(),
                Value<double?> valorCofinsSt = const Value.absent(),
                Value<String?> cofinsStCompoeValorTotal = const Value.absent(),
              }) => NfeDetalheImpostoCofinsStsCompanion(
                id: id,
                idNfeDetalhe: idNfeDetalhe,
                baseCalculoCofinsSt: baseCalculoCofinsSt,
                aliquotaCofinsStPercentual: aliquotaCofinsStPercentual,
                quantidadeVendidaCofinsSt: quantidadeVendidaCofinsSt,
                aliquotaCofinsStReais: aliquotaCofinsStReais,
                valorCofinsSt: valorCofinsSt,
                cofinsStCompoeValorTotal: cofinsStCompoeValorTotal,
              ),
          createCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeDetalhe = const Value.absent(),
                Value<double?> baseCalculoCofinsSt = const Value.absent(),
                Value<double?> aliquotaCofinsStPercentual =
                    const Value.absent(),
                Value<double?> quantidadeVendidaCofinsSt = const Value.absent(),
                Value<double?> aliquotaCofinsStReais = const Value.absent(),
                Value<double?> valorCofinsSt = const Value.absent(),
                Value<String?> cofinsStCompoeValorTotal = const Value.absent(),
              }) => NfeDetalheImpostoCofinsStsCompanion.insert(
                id: id,
                idNfeDetalhe: idNfeDetalhe,
                baseCalculoCofinsSt: baseCalculoCofinsSt,
                aliquotaCofinsStPercentual: aliquotaCofinsStPercentual,
                quantidadeVendidaCofinsSt: quantidadeVendidaCofinsSt,
                aliquotaCofinsStReais: aliquotaCofinsStReais,
                valorCofinsSt: valorCofinsSt,
                cofinsStCompoeValorTotal: cofinsStCompoeValorTotal,
              ),
          withReferenceMapper:
              (p0) =>
                  p0
                      .map(
                        (e) => (
                          e.readTable(table),
                          BaseReferences(db, table, e),
                        ),
                      )
                      .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$NfeDetalheImpostoCofinsStsTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $NfeDetalheImpostoCofinsStsTable,
      NfeDetalheImpostoCofinsSt,
      $$NfeDetalheImpostoCofinsStsTableFilterComposer,
      $$NfeDetalheImpostoCofinsStsTableOrderingComposer,
      $$NfeDetalheImpostoCofinsStsTableAnnotationComposer,
      $$NfeDetalheImpostoCofinsStsTableCreateCompanionBuilder,
      $$NfeDetalheImpostoCofinsStsTableUpdateCompanionBuilder,
      (
        NfeDetalheImpostoCofinsSt,
        BaseReferences<
          _$AppDatabase,
          $NfeDetalheImpostoCofinsStsTable,
          NfeDetalheImpostoCofinsSt
        >,
      ),
      NfeDetalheImpostoCofinsSt,
      PrefetchHooks Function()
    >;
typedef $$NfeResponsavelTecnicosTableCreateCompanionBuilder =
    NfeResponsavelTecnicosCompanion Function({
      Value<int?> id,
      Value<int?> idNfeCabecalho,
      Value<String?> cnpj,
      Value<String?> contato,
      Value<String?> email,
      Value<String?> telefone,
      Value<String?> identificadorCsrt,
      Value<String?> hashCsrt,
    });
typedef $$NfeResponsavelTecnicosTableUpdateCompanionBuilder =
    NfeResponsavelTecnicosCompanion Function({
      Value<int?> id,
      Value<int?> idNfeCabecalho,
      Value<String?> cnpj,
      Value<String?> contato,
      Value<String?> email,
      Value<String?> telefone,
      Value<String?> identificadorCsrt,
      Value<String?> hashCsrt,
    });

class $$NfeResponsavelTecnicosTableFilterComposer
    extends Composer<_$AppDatabase, $NfeResponsavelTecnicosTable> {
  $$NfeResponsavelTecnicosTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idNfeCabecalho => $composableBuilder(
    column: $table.idNfeCabecalho,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get cnpj => $composableBuilder(
    column: $table.cnpj,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get contato => $composableBuilder(
    column: $table.contato,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get email => $composableBuilder(
    column: $table.email,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get telefone => $composableBuilder(
    column: $table.telefone,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get identificadorCsrt => $composableBuilder(
    column: $table.identificadorCsrt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get hashCsrt => $composableBuilder(
    column: $table.hashCsrt,
    builder: (column) => ColumnFilters(column),
  );
}

class $$NfeResponsavelTecnicosTableOrderingComposer
    extends Composer<_$AppDatabase, $NfeResponsavelTecnicosTable> {
  $$NfeResponsavelTecnicosTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idNfeCabecalho => $composableBuilder(
    column: $table.idNfeCabecalho,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get cnpj => $composableBuilder(
    column: $table.cnpj,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get contato => $composableBuilder(
    column: $table.contato,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get email => $composableBuilder(
    column: $table.email,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get telefone => $composableBuilder(
    column: $table.telefone,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get identificadorCsrt => $composableBuilder(
    column: $table.identificadorCsrt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get hashCsrt => $composableBuilder(
    column: $table.hashCsrt,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$NfeResponsavelTecnicosTableAnnotationComposer
    extends Composer<_$AppDatabase, $NfeResponsavelTecnicosTable> {
  $$NfeResponsavelTecnicosTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<int> get idNfeCabecalho => $composableBuilder(
    column: $table.idNfeCabecalho,
    builder: (column) => column,
  );

  GeneratedColumn<String> get cnpj =>
      $composableBuilder(column: $table.cnpj, builder: (column) => column);

  GeneratedColumn<String> get contato =>
      $composableBuilder(column: $table.contato, builder: (column) => column);

  GeneratedColumn<String> get email =>
      $composableBuilder(column: $table.email, builder: (column) => column);

  GeneratedColumn<String> get telefone =>
      $composableBuilder(column: $table.telefone, builder: (column) => column);

  GeneratedColumn<String> get identificadorCsrt => $composableBuilder(
    column: $table.identificadorCsrt,
    builder: (column) => column,
  );

  GeneratedColumn<String> get hashCsrt =>
      $composableBuilder(column: $table.hashCsrt, builder: (column) => column);
}

class $$NfeResponsavelTecnicosTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $NfeResponsavelTecnicosTable,
          NfeResponsavelTecnico,
          $$NfeResponsavelTecnicosTableFilterComposer,
          $$NfeResponsavelTecnicosTableOrderingComposer,
          $$NfeResponsavelTecnicosTableAnnotationComposer,
          $$NfeResponsavelTecnicosTableCreateCompanionBuilder,
          $$NfeResponsavelTecnicosTableUpdateCompanionBuilder,
          (
            NfeResponsavelTecnico,
            BaseReferences<
              _$AppDatabase,
              $NfeResponsavelTecnicosTable,
              NfeResponsavelTecnico
            >,
          ),
          NfeResponsavelTecnico,
          PrefetchHooks Function()
        > {
  $$NfeResponsavelTecnicosTableTableManager(
    _$AppDatabase db,
    $NfeResponsavelTecnicosTable table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer:
              () => $$NfeResponsavelTecnicosTableFilterComposer(
                $db: db,
                $table: table,
              ),
          createOrderingComposer:
              () => $$NfeResponsavelTecnicosTableOrderingComposer(
                $db: db,
                $table: table,
              ),
          createComputedFieldComposer:
              () => $$NfeResponsavelTecnicosTableAnnotationComposer(
                $db: db,
                $table: table,
              ),
          updateCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeCabecalho = const Value.absent(),
                Value<String?> cnpj = const Value.absent(),
                Value<String?> contato = const Value.absent(),
                Value<String?> email = const Value.absent(),
                Value<String?> telefone = const Value.absent(),
                Value<String?> identificadorCsrt = const Value.absent(),
                Value<String?> hashCsrt = const Value.absent(),
              }) => NfeResponsavelTecnicosCompanion(
                id: id,
                idNfeCabecalho: idNfeCabecalho,
                cnpj: cnpj,
                contato: contato,
                email: email,
                telefone: telefone,
                identificadorCsrt: identificadorCsrt,
                hashCsrt: hashCsrt,
              ),
          createCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeCabecalho = const Value.absent(),
                Value<String?> cnpj = const Value.absent(),
                Value<String?> contato = const Value.absent(),
                Value<String?> email = const Value.absent(),
                Value<String?> telefone = const Value.absent(),
                Value<String?> identificadorCsrt = const Value.absent(),
                Value<String?> hashCsrt = const Value.absent(),
              }) => NfeResponsavelTecnicosCompanion.insert(
                id: id,
                idNfeCabecalho: idNfeCabecalho,
                cnpj: cnpj,
                contato: contato,
                email: email,
                telefone: telefone,
                identificadorCsrt: identificadorCsrt,
                hashCsrt: hashCsrt,
              ),
          withReferenceMapper:
              (p0) =>
                  p0
                      .map(
                        (e) => (
                          e.readTable(table),
                          BaseReferences(db, table, e),
                        ),
                      )
                      .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$NfeResponsavelTecnicosTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $NfeResponsavelTecnicosTable,
      NfeResponsavelTecnico,
      $$NfeResponsavelTecnicosTableFilterComposer,
      $$NfeResponsavelTecnicosTableOrderingComposer,
      $$NfeResponsavelTecnicosTableAnnotationComposer,
      $$NfeResponsavelTecnicosTableCreateCompanionBuilder,
      $$NfeResponsavelTecnicosTableUpdateCompanionBuilder,
      (
        NfeResponsavelTecnico,
        BaseReferences<
          _$AppDatabase,
          $NfeResponsavelTecnicosTable,
          NfeResponsavelTecnico
        >,
      ),
      NfeResponsavelTecnico,
      PrefetchHooks Function()
    >;
typedef $$NfeCompraGovernamentalsTableCreateCompanionBuilder =
    NfeCompraGovernamentalsCompanion Function({
      Value<int?> id,
      Value<int?> idNfeCabecalho,
      Value<String?> tipoEnte,
      Value<double?> percentualReducao,
      Value<String?> tipoOperacao,
    });
typedef $$NfeCompraGovernamentalsTableUpdateCompanionBuilder =
    NfeCompraGovernamentalsCompanion Function({
      Value<int?> id,
      Value<int?> idNfeCabecalho,
      Value<String?> tipoEnte,
      Value<double?> percentualReducao,
      Value<String?> tipoOperacao,
    });

class $$NfeCompraGovernamentalsTableFilterComposer
    extends Composer<_$AppDatabase, $NfeCompraGovernamentalsTable> {
  $$NfeCompraGovernamentalsTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idNfeCabecalho => $composableBuilder(
    column: $table.idNfeCabecalho,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get tipoEnte => $composableBuilder(
    column: $table.tipoEnte,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get percentualReducao => $composableBuilder(
    column: $table.percentualReducao,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get tipoOperacao => $composableBuilder(
    column: $table.tipoOperacao,
    builder: (column) => ColumnFilters(column),
  );
}

class $$NfeCompraGovernamentalsTableOrderingComposer
    extends Composer<_$AppDatabase, $NfeCompraGovernamentalsTable> {
  $$NfeCompraGovernamentalsTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idNfeCabecalho => $composableBuilder(
    column: $table.idNfeCabecalho,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get tipoEnte => $composableBuilder(
    column: $table.tipoEnte,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get percentualReducao => $composableBuilder(
    column: $table.percentualReducao,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get tipoOperacao => $composableBuilder(
    column: $table.tipoOperacao,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$NfeCompraGovernamentalsTableAnnotationComposer
    extends Composer<_$AppDatabase, $NfeCompraGovernamentalsTable> {
  $$NfeCompraGovernamentalsTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<int> get idNfeCabecalho => $composableBuilder(
    column: $table.idNfeCabecalho,
    builder: (column) => column,
  );

  GeneratedColumn<String> get tipoEnte =>
      $composableBuilder(column: $table.tipoEnte, builder: (column) => column);

  GeneratedColumn<double> get percentualReducao => $composableBuilder(
    column: $table.percentualReducao,
    builder: (column) => column,
  );

  GeneratedColumn<String> get tipoOperacao => $composableBuilder(
    column: $table.tipoOperacao,
    builder: (column) => column,
  );
}

class $$NfeCompraGovernamentalsTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $NfeCompraGovernamentalsTable,
          NfeCompraGovernamental,
          $$NfeCompraGovernamentalsTableFilterComposer,
          $$NfeCompraGovernamentalsTableOrderingComposer,
          $$NfeCompraGovernamentalsTableAnnotationComposer,
          $$NfeCompraGovernamentalsTableCreateCompanionBuilder,
          $$NfeCompraGovernamentalsTableUpdateCompanionBuilder,
          (
            NfeCompraGovernamental,
            BaseReferences<
              _$AppDatabase,
              $NfeCompraGovernamentalsTable,
              NfeCompraGovernamental
            >,
          ),
          NfeCompraGovernamental,
          PrefetchHooks Function()
        > {
  $$NfeCompraGovernamentalsTableTableManager(
    _$AppDatabase db,
    $NfeCompraGovernamentalsTable table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer:
              () => $$NfeCompraGovernamentalsTableFilterComposer(
                $db: db,
                $table: table,
              ),
          createOrderingComposer:
              () => $$NfeCompraGovernamentalsTableOrderingComposer(
                $db: db,
                $table: table,
              ),
          createComputedFieldComposer:
              () => $$NfeCompraGovernamentalsTableAnnotationComposer(
                $db: db,
                $table: table,
              ),
          updateCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeCabecalho = const Value.absent(),
                Value<String?> tipoEnte = const Value.absent(),
                Value<double?> percentualReducao = const Value.absent(),
                Value<String?> tipoOperacao = const Value.absent(),
              }) => NfeCompraGovernamentalsCompanion(
                id: id,
                idNfeCabecalho: idNfeCabecalho,
                tipoEnte: tipoEnte,
                percentualReducao: percentualReducao,
                tipoOperacao: tipoOperacao,
              ),
          createCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeCabecalho = const Value.absent(),
                Value<String?> tipoEnte = const Value.absent(),
                Value<double?> percentualReducao = const Value.absent(),
                Value<String?> tipoOperacao = const Value.absent(),
              }) => NfeCompraGovernamentalsCompanion.insert(
                id: id,
                idNfeCabecalho: idNfeCabecalho,
                tipoEnte: tipoEnte,
                percentualReducao: percentualReducao,
                tipoOperacao: tipoOperacao,
              ),
          withReferenceMapper:
              (p0) =>
                  p0
                      .map(
                        (e) => (
                          e.readTable(table),
                          BaseReferences(db, table, e),
                        ),
                      )
                      .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$NfeCompraGovernamentalsTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $NfeCompraGovernamentalsTable,
      NfeCompraGovernamental,
      $$NfeCompraGovernamentalsTableFilterComposer,
      $$NfeCompraGovernamentalsTableOrderingComposer,
      $$NfeCompraGovernamentalsTableAnnotationComposer,
      $$NfeCompraGovernamentalsTableCreateCompanionBuilder,
      $$NfeCompraGovernamentalsTableUpdateCompanionBuilder,
      (
        NfeCompraGovernamental,
        BaseReferences<
          _$AppDatabase,
          $NfeCompraGovernamentalsTable,
          NfeCompraGovernamental
        >,
      ),
      NfeCompraGovernamental,
      PrefetchHooks Function()
    >;
typedef $$NfeAntecipacaoPagamentosTableCreateCompanionBuilder =
    NfeAntecipacaoPagamentosCompanion Function({
      Value<int?> id,
      Value<int?> idNfeCabecalho,
      Value<String?> chaveAcesso,
    });
typedef $$NfeAntecipacaoPagamentosTableUpdateCompanionBuilder =
    NfeAntecipacaoPagamentosCompanion Function({
      Value<int?> id,
      Value<int?> idNfeCabecalho,
      Value<String?> chaveAcesso,
    });

class $$NfeAntecipacaoPagamentosTableFilterComposer
    extends Composer<_$AppDatabase, $NfeAntecipacaoPagamentosTable> {
  $$NfeAntecipacaoPagamentosTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idNfeCabecalho => $composableBuilder(
    column: $table.idNfeCabecalho,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get chaveAcesso => $composableBuilder(
    column: $table.chaveAcesso,
    builder: (column) => ColumnFilters(column),
  );
}

class $$NfeAntecipacaoPagamentosTableOrderingComposer
    extends Composer<_$AppDatabase, $NfeAntecipacaoPagamentosTable> {
  $$NfeAntecipacaoPagamentosTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idNfeCabecalho => $composableBuilder(
    column: $table.idNfeCabecalho,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get chaveAcesso => $composableBuilder(
    column: $table.chaveAcesso,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$NfeAntecipacaoPagamentosTableAnnotationComposer
    extends Composer<_$AppDatabase, $NfeAntecipacaoPagamentosTable> {
  $$NfeAntecipacaoPagamentosTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<int> get idNfeCabecalho => $composableBuilder(
    column: $table.idNfeCabecalho,
    builder: (column) => column,
  );

  GeneratedColumn<String> get chaveAcesso => $composableBuilder(
    column: $table.chaveAcesso,
    builder: (column) => column,
  );
}

class $$NfeAntecipacaoPagamentosTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $NfeAntecipacaoPagamentosTable,
          NfeAntecipacaoPagamento,
          $$NfeAntecipacaoPagamentosTableFilterComposer,
          $$NfeAntecipacaoPagamentosTableOrderingComposer,
          $$NfeAntecipacaoPagamentosTableAnnotationComposer,
          $$NfeAntecipacaoPagamentosTableCreateCompanionBuilder,
          $$NfeAntecipacaoPagamentosTableUpdateCompanionBuilder,
          (
            NfeAntecipacaoPagamento,
            BaseReferences<
              _$AppDatabase,
              $NfeAntecipacaoPagamentosTable,
              NfeAntecipacaoPagamento
            >,
          ),
          NfeAntecipacaoPagamento,
          PrefetchHooks Function()
        > {
  $$NfeAntecipacaoPagamentosTableTableManager(
    _$AppDatabase db,
    $NfeAntecipacaoPagamentosTable table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer:
              () => $$NfeAntecipacaoPagamentosTableFilterComposer(
                $db: db,
                $table: table,
              ),
          createOrderingComposer:
              () => $$NfeAntecipacaoPagamentosTableOrderingComposer(
                $db: db,
                $table: table,
              ),
          createComputedFieldComposer:
              () => $$NfeAntecipacaoPagamentosTableAnnotationComposer(
                $db: db,
                $table: table,
              ),
          updateCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeCabecalho = const Value.absent(),
                Value<String?> chaveAcesso = const Value.absent(),
              }) => NfeAntecipacaoPagamentosCompanion(
                id: id,
                idNfeCabecalho: idNfeCabecalho,
                chaveAcesso: chaveAcesso,
              ),
          createCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeCabecalho = const Value.absent(),
                Value<String?> chaveAcesso = const Value.absent(),
              }) => NfeAntecipacaoPagamentosCompanion.insert(
                id: id,
                idNfeCabecalho: idNfeCabecalho,
                chaveAcesso: chaveAcesso,
              ),
          withReferenceMapper:
              (p0) =>
                  p0
                      .map(
                        (e) => (
                          e.readTable(table),
                          BaseReferences(db, table, e),
                        ),
                      )
                      .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$NfeAntecipacaoPagamentosTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $NfeAntecipacaoPagamentosTable,
      NfeAntecipacaoPagamento,
      $$NfeAntecipacaoPagamentosTableFilterComposer,
      $$NfeAntecipacaoPagamentosTableOrderingComposer,
      $$NfeAntecipacaoPagamentosTableAnnotationComposer,
      $$NfeAntecipacaoPagamentosTableCreateCompanionBuilder,
      $$NfeAntecipacaoPagamentosTableUpdateCompanionBuilder,
      (
        NfeAntecipacaoPagamento,
        BaseReferences<
          _$AppDatabase,
          $NfeAntecipacaoPagamentosTable,
          NfeAntecipacaoPagamento
        >,
      ),
      NfeAntecipacaoPagamento,
      PrefetchHooks Function()
    >;
typedef $$NfeDetalheImpostoSeletivosTableCreateCompanionBuilder =
    NfeDetalheImpostoSeletivosCompanion Function({
      Value<int?> id,
      Value<int?> idNfeDetalhe,
      Value<String?> cst,
      Value<String?> codigoClassificacaoTributaria,
      Value<double?> valorBaseCalculo,
      Value<double?> aliquota,
      Value<double?> aliquotaEspecifica,
      Value<String?> unidadeTributavel,
      Value<double?> quantidadeTributavel,
      Value<double?> valor,
    });
typedef $$NfeDetalheImpostoSeletivosTableUpdateCompanionBuilder =
    NfeDetalheImpostoSeletivosCompanion Function({
      Value<int?> id,
      Value<int?> idNfeDetalhe,
      Value<String?> cst,
      Value<String?> codigoClassificacaoTributaria,
      Value<double?> valorBaseCalculo,
      Value<double?> aliquota,
      Value<double?> aliquotaEspecifica,
      Value<String?> unidadeTributavel,
      Value<double?> quantidadeTributavel,
      Value<double?> valor,
    });

class $$NfeDetalheImpostoSeletivosTableFilterComposer
    extends Composer<_$AppDatabase, $NfeDetalheImpostoSeletivosTable> {
  $$NfeDetalheImpostoSeletivosTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get cst => $composableBuilder(
    column: $table.cst,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get codigoClassificacaoTributaria => $composableBuilder(
    column: $table.codigoClassificacaoTributaria,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorBaseCalculo => $composableBuilder(
    column: $table.valorBaseCalculo,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get aliquota => $composableBuilder(
    column: $table.aliquota,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get aliquotaEspecifica => $composableBuilder(
    column: $table.aliquotaEspecifica,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get unidadeTributavel => $composableBuilder(
    column: $table.unidadeTributavel,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get quantidadeTributavel => $composableBuilder(
    column: $table.quantidadeTributavel,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valor => $composableBuilder(
    column: $table.valor,
    builder: (column) => ColumnFilters(column),
  );
}

class $$NfeDetalheImpostoSeletivosTableOrderingComposer
    extends Composer<_$AppDatabase, $NfeDetalheImpostoSeletivosTable> {
  $$NfeDetalheImpostoSeletivosTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get cst => $composableBuilder(
    column: $table.cst,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get codigoClassificacaoTributaria =>
      $composableBuilder(
        column: $table.codigoClassificacaoTributaria,
        builder: (column) => ColumnOrderings(column),
      );

  ColumnOrderings<double> get valorBaseCalculo => $composableBuilder(
    column: $table.valorBaseCalculo,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get aliquota => $composableBuilder(
    column: $table.aliquota,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get aliquotaEspecifica => $composableBuilder(
    column: $table.aliquotaEspecifica,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get unidadeTributavel => $composableBuilder(
    column: $table.unidadeTributavel,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get quantidadeTributavel => $composableBuilder(
    column: $table.quantidadeTributavel,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valor => $composableBuilder(
    column: $table.valor,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$NfeDetalheImpostoSeletivosTableAnnotationComposer
    extends Composer<_$AppDatabase, $NfeDetalheImpostoSeletivosTable> {
  $$NfeDetalheImpostoSeletivosTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => column,
  );

  GeneratedColumn<String> get cst =>
      $composableBuilder(column: $table.cst, builder: (column) => column);

  GeneratedColumn<String> get codigoClassificacaoTributaria =>
      $composableBuilder(
        column: $table.codigoClassificacaoTributaria,
        builder: (column) => column,
      );

  GeneratedColumn<double> get valorBaseCalculo => $composableBuilder(
    column: $table.valorBaseCalculo,
    builder: (column) => column,
  );

  GeneratedColumn<double> get aliquota =>
      $composableBuilder(column: $table.aliquota, builder: (column) => column);

  GeneratedColumn<double> get aliquotaEspecifica => $composableBuilder(
    column: $table.aliquotaEspecifica,
    builder: (column) => column,
  );

  GeneratedColumn<String> get unidadeTributavel => $composableBuilder(
    column: $table.unidadeTributavel,
    builder: (column) => column,
  );

  GeneratedColumn<double> get quantidadeTributavel => $composableBuilder(
    column: $table.quantidadeTributavel,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valor =>
      $composableBuilder(column: $table.valor, builder: (column) => column);
}

class $$NfeDetalheImpostoSeletivosTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $NfeDetalheImpostoSeletivosTable,
          NfeDetalheImpostoSeletivo,
          $$NfeDetalheImpostoSeletivosTableFilterComposer,
          $$NfeDetalheImpostoSeletivosTableOrderingComposer,
          $$NfeDetalheImpostoSeletivosTableAnnotationComposer,
          $$NfeDetalheImpostoSeletivosTableCreateCompanionBuilder,
          $$NfeDetalheImpostoSeletivosTableUpdateCompanionBuilder,
          (
            NfeDetalheImpostoSeletivo,
            BaseReferences<
              _$AppDatabase,
              $NfeDetalheImpostoSeletivosTable,
              NfeDetalheImpostoSeletivo
            >,
          ),
          NfeDetalheImpostoSeletivo,
          PrefetchHooks Function()
        > {
  $$NfeDetalheImpostoSeletivosTableTableManager(
    _$AppDatabase db,
    $NfeDetalheImpostoSeletivosTable table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer:
              () => $$NfeDetalheImpostoSeletivosTableFilterComposer(
                $db: db,
                $table: table,
              ),
          createOrderingComposer:
              () => $$NfeDetalheImpostoSeletivosTableOrderingComposer(
                $db: db,
                $table: table,
              ),
          createComputedFieldComposer:
              () => $$NfeDetalheImpostoSeletivosTableAnnotationComposer(
                $db: db,
                $table: table,
              ),
          updateCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeDetalhe = const Value.absent(),
                Value<String?> cst = const Value.absent(),
                Value<String?> codigoClassificacaoTributaria =
                    const Value.absent(),
                Value<double?> valorBaseCalculo = const Value.absent(),
                Value<double?> aliquota = const Value.absent(),
                Value<double?> aliquotaEspecifica = const Value.absent(),
                Value<String?> unidadeTributavel = const Value.absent(),
                Value<double?> quantidadeTributavel = const Value.absent(),
                Value<double?> valor = const Value.absent(),
              }) => NfeDetalheImpostoSeletivosCompanion(
                id: id,
                idNfeDetalhe: idNfeDetalhe,
                cst: cst,
                codigoClassificacaoTributaria: codigoClassificacaoTributaria,
                valorBaseCalculo: valorBaseCalculo,
                aliquota: aliquota,
                aliquotaEspecifica: aliquotaEspecifica,
                unidadeTributavel: unidadeTributavel,
                quantidadeTributavel: quantidadeTributavel,
                valor: valor,
              ),
          createCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeDetalhe = const Value.absent(),
                Value<String?> cst = const Value.absent(),
                Value<String?> codigoClassificacaoTributaria =
                    const Value.absent(),
                Value<double?> valorBaseCalculo = const Value.absent(),
                Value<double?> aliquota = const Value.absent(),
                Value<double?> aliquotaEspecifica = const Value.absent(),
                Value<String?> unidadeTributavel = const Value.absent(),
                Value<double?> quantidadeTributavel = const Value.absent(),
                Value<double?> valor = const Value.absent(),
              }) => NfeDetalheImpostoSeletivosCompanion.insert(
                id: id,
                idNfeDetalhe: idNfeDetalhe,
                cst: cst,
                codigoClassificacaoTributaria: codigoClassificacaoTributaria,
                valorBaseCalculo: valorBaseCalculo,
                aliquota: aliquota,
                aliquotaEspecifica: aliquotaEspecifica,
                unidadeTributavel: unidadeTributavel,
                quantidadeTributavel: quantidadeTributavel,
                valor: valor,
              ),
          withReferenceMapper:
              (p0) =>
                  p0
                      .map(
                        (e) => (
                          e.readTable(table),
                          BaseReferences(db, table, e),
                        ),
                      )
                      .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$NfeDetalheImpostoSeletivosTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $NfeDetalheImpostoSeletivosTable,
      NfeDetalheImpostoSeletivo,
      $$NfeDetalheImpostoSeletivosTableFilterComposer,
      $$NfeDetalheImpostoSeletivosTableOrderingComposer,
      $$NfeDetalheImpostoSeletivosTableAnnotationComposer,
      $$NfeDetalheImpostoSeletivosTableCreateCompanionBuilder,
      $$NfeDetalheImpostoSeletivosTableUpdateCompanionBuilder,
      (
        NfeDetalheImpostoSeletivo,
        BaseReferences<
          _$AppDatabase,
          $NfeDetalheImpostoSeletivosTable,
          NfeDetalheImpostoSeletivo
        >,
      ),
      NfeDetalheImpostoSeletivo,
      PrefetchHooks Function()
    >;
typedef $$NfeDetalheImpostoIbsUfsTableCreateCompanionBuilder =
    NfeDetalheImpostoIbsUfsCompanion Function({
      Value<int?> id,
      Value<int?> idNfeDetalhe,
      Value<String?> cst,
      Value<String?> codigoClassificacaoTributaria,
      Value<double?> valorBaseCalculo,
      Value<double?> aliquota,
      Value<double?> percentualDiferimento,
      Value<double?> valorDiferimento,
      Value<double?> valorTributoDevolvido,
      Value<double?> percentualReducaoAliquota,
      Value<double?> aliquotaEfetiva,
      Value<double?> valor,
    });
typedef $$NfeDetalheImpostoIbsUfsTableUpdateCompanionBuilder =
    NfeDetalheImpostoIbsUfsCompanion Function({
      Value<int?> id,
      Value<int?> idNfeDetalhe,
      Value<String?> cst,
      Value<String?> codigoClassificacaoTributaria,
      Value<double?> valorBaseCalculo,
      Value<double?> aliquota,
      Value<double?> percentualDiferimento,
      Value<double?> valorDiferimento,
      Value<double?> valorTributoDevolvido,
      Value<double?> percentualReducaoAliquota,
      Value<double?> aliquotaEfetiva,
      Value<double?> valor,
    });

class $$NfeDetalheImpostoIbsUfsTableFilterComposer
    extends Composer<_$AppDatabase, $NfeDetalheImpostoIbsUfsTable> {
  $$NfeDetalheImpostoIbsUfsTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get cst => $composableBuilder(
    column: $table.cst,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get codigoClassificacaoTributaria => $composableBuilder(
    column: $table.codigoClassificacaoTributaria,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorBaseCalculo => $composableBuilder(
    column: $table.valorBaseCalculo,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get aliquota => $composableBuilder(
    column: $table.aliquota,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get percentualDiferimento => $composableBuilder(
    column: $table.percentualDiferimento,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorDiferimento => $composableBuilder(
    column: $table.valorDiferimento,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorTributoDevolvido => $composableBuilder(
    column: $table.valorTributoDevolvido,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get percentualReducaoAliquota => $composableBuilder(
    column: $table.percentualReducaoAliquota,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get aliquotaEfetiva => $composableBuilder(
    column: $table.aliquotaEfetiva,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valor => $composableBuilder(
    column: $table.valor,
    builder: (column) => ColumnFilters(column),
  );
}

class $$NfeDetalheImpostoIbsUfsTableOrderingComposer
    extends Composer<_$AppDatabase, $NfeDetalheImpostoIbsUfsTable> {
  $$NfeDetalheImpostoIbsUfsTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get cst => $composableBuilder(
    column: $table.cst,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get codigoClassificacaoTributaria =>
      $composableBuilder(
        column: $table.codigoClassificacaoTributaria,
        builder: (column) => ColumnOrderings(column),
      );

  ColumnOrderings<double> get valorBaseCalculo => $composableBuilder(
    column: $table.valorBaseCalculo,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get aliquota => $composableBuilder(
    column: $table.aliquota,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get percentualDiferimento => $composableBuilder(
    column: $table.percentualDiferimento,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorDiferimento => $composableBuilder(
    column: $table.valorDiferimento,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorTributoDevolvido => $composableBuilder(
    column: $table.valorTributoDevolvido,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get percentualReducaoAliquota => $composableBuilder(
    column: $table.percentualReducaoAliquota,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get aliquotaEfetiva => $composableBuilder(
    column: $table.aliquotaEfetiva,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valor => $composableBuilder(
    column: $table.valor,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$NfeDetalheImpostoIbsUfsTableAnnotationComposer
    extends Composer<_$AppDatabase, $NfeDetalheImpostoIbsUfsTable> {
  $$NfeDetalheImpostoIbsUfsTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => column,
  );

  GeneratedColumn<String> get cst =>
      $composableBuilder(column: $table.cst, builder: (column) => column);

  GeneratedColumn<String> get codigoClassificacaoTributaria =>
      $composableBuilder(
        column: $table.codigoClassificacaoTributaria,
        builder: (column) => column,
      );

  GeneratedColumn<double> get valorBaseCalculo => $composableBuilder(
    column: $table.valorBaseCalculo,
    builder: (column) => column,
  );

  GeneratedColumn<double> get aliquota =>
      $composableBuilder(column: $table.aliquota, builder: (column) => column);

  GeneratedColumn<double> get percentualDiferimento => $composableBuilder(
    column: $table.percentualDiferimento,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorDiferimento => $composableBuilder(
    column: $table.valorDiferimento,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorTributoDevolvido => $composableBuilder(
    column: $table.valorTributoDevolvido,
    builder: (column) => column,
  );

  GeneratedColumn<double> get percentualReducaoAliquota => $composableBuilder(
    column: $table.percentualReducaoAliquota,
    builder: (column) => column,
  );

  GeneratedColumn<double> get aliquotaEfetiva => $composableBuilder(
    column: $table.aliquotaEfetiva,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valor =>
      $composableBuilder(column: $table.valor, builder: (column) => column);
}

class $$NfeDetalheImpostoIbsUfsTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $NfeDetalheImpostoIbsUfsTable,
          NfeDetalheImpostoIbsUf,
          $$NfeDetalheImpostoIbsUfsTableFilterComposer,
          $$NfeDetalheImpostoIbsUfsTableOrderingComposer,
          $$NfeDetalheImpostoIbsUfsTableAnnotationComposer,
          $$NfeDetalheImpostoIbsUfsTableCreateCompanionBuilder,
          $$NfeDetalheImpostoIbsUfsTableUpdateCompanionBuilder,
          (
            NfeDetalheImpostoIbsUf,
            BaseReferences<
              _$AppDatabase,
              $NfeDetalheImpostoIbsUfsTable,
              NfeDetalheImpostoIbsUf
            >,
          ),
          NfeDetalheImpostoIbsUf,
          PrefetchHooks Function()
        > {
  $$NfeDetalheImpostoIbsUfsTableTableManager(
    _$AppDatabase db,
    $NfeDetalheImpostoIbsUfsTable table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer:
              () => $$NfeDetalheImpostoIbsUfsTableFilterComposer(
                $db: db,
                $table: table,
              ),
          createOrderingComposer:
              () => $$NfeDetalheImpostoIbsUfsTableOrderingComposer(
                $db: db,
                $table: table,
              ),
          createComputedFieldComposer:
              () => $$NfeDetalheImpostoIbsUfsTableAnnotationComposer(
                $db: db,
                $table: table,
              ),
          updateCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeDetalhe = const Value.absent(),
                Value<String?> cst = const Value.absent(),
                Value<String?> codigoClassificacaoTributaria =
                    const Value.absent(),
                Value<double?> valorBaseCalculo = const Value.absent(),
                Value<double?> aliquota = const Value.absent(),
                Value<double?> percentualDiferimento = const Value.absent(),
                Value<double?> valorDiferimento = const Value.absent(),
                Value<double?> valorTributoDevolvido = const Value.absent(),
                Value<double?> percentualReducaoAliquota = const Value.absent(),
                Value<double?> aliquotaEfetiva = const Value.absent(),
                Value<double?> valor = const Value.absent(),
              }) => NfeDetalheImpostoIbsUfsCompanion(
                id: id,
                idNfeDetalhe: idNfeDetalhe,
                cst: cst,
                codigoClassificacaoTributaria: codigoClassificacaoTributaria,
                valorBaseCalculo: valorBaseCalculo,
                aliquota: aliquota,
                percentualDiferimento: percentualDiferimento,
                valorDiferimento: valorDiferimento,
                valorTributoDevolvido: valorTributoDevolvido,
                percentualReducaoAliquota: percentualReducaoAliquota,
                aliquotaEfetiva: aliquotaEfetiva,
                valor: valor,
              ),
          createCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeDetalhe = const Value.absent(),
                Value<String?> cst = const Value.absent(),
                Value<String?> codigoClassificacaoTributaria =
                    const Value.absent(),
                Value<double?> valorBaseCalculo = const Value.absent(),
                Value<double?> aliquota = const Value.absent(),
                Value<double?> percentualDiferimento = const Value.absent(),
                Value<double?> valorDiferimento = const Value.absent(),
                Value<double?> valorTributoDevolvido = const Value.absent(),
                Value<double?> percentualReducaoAliquota = const Value.absent(),
                Value<double?> aliquotaEfetiva = const Value.absent(),
                Value<double?> valor = const Value.absent(),
              }) => NfeDetalheImpostoIbsUfsCompanion.insert(
                id: id,
                idNfeDetalhe: idNfeDetalhe,
                cst: cst,
                codigoClassificacaoTributaria: codigoClassificacaoTributaria,
                valorBaseCalculo: valorBaseCalculo,
                aliquota: aliquota,
                percentualDiferimento: percentualDiferimento,
                valorDiferimento: valorDiferimento,
                valorTributoDevolvido: valorTributoDevolvido,
                percentualReducaoAliquota: percentualReducaoAliquota,
                aliquotaEfetiva: aliquotaEfetiva,
                valor: valor,
              ),
          withReferenceMapper:
              (p0) =>
                  p0
                      .map(
                        (e) => (
                          e.readTable(table),
                          BaseReferences(db, table, e),
                        ),
                      )
                      .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$NfeDetalheImpostoIbsUfsTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $NfeDetalheImpostoIbsUfsTable,
      NfeDetalheImpostoIbsUf,
      $$NfeDetalheImpostoIbsUfsTableFilterComposer,
      $$NfeDetalheImpostoIbsUfsTableOrderingComposer,
      $$NfeDetalheImpostoIbsUfsTableAnnotationComposer,
      $$NfeDetalheImpostoIbsUfsTableCreateCompanionBuilder,
      $$NfeDetalheImpostoIbsUfsTableUpdateCompanionBuilder,
      (
        NfeDetalheImpostoIbsUf,
        BaseReferences<
          _$AppDatabase,
          $NfeDetalheImpostoIbsUfsTable,
          NfeDetalheImpostoIbsUf
        >,
      ),
      NfeDetalheImpostoIbsUf,
      PrefetchHooks Function()
    >;
typedef $$NfeDetalheImpostoIbsMunsTableCreateCompanionBuilder =
    NfeDetalheImpostoIbsMunsCompanion Function({
      Value<int?> id,
      Value<int?> idNfeDetalhe,
      Value<String?> cst,
      Value<String?> codigoClassificacaoTributaria,
      Value<double?> valorBaseCalculo,
      Value<double?> aliquota,
      Value<double?> percentualDiferimento,
      Value<double?> valorDiferimento,
      Value<double?> valorTributoDevolvido,
      Value<double?> percentualReducaoAliquota,
      Value<double?> aliquotaEfetiva,
      Value<double?> valor,
    });
typedef $$NfeDetalheImpostoIbsMunsTableUpdateCompanionBuilder =
    NfeDetalheImpostoIbsMunsCompanion Function({
      Value<int?> id,
      Value<int?> idNfeDetalhe,
      Value<String?> cst,
      Value<String?> codigoClassificacaoTributaria,
      Value<double?> valorBaseCalculo,
      Value<double?> aliquota,
      Value<double?> percentualDiferimento,
      Value<double?> valorDiferimento,
      Value<double?> valorTributoDevolvido,
      Value<double?> percentualReducaoAliquota,
      Value<double?> aliquotaEfetiva,
      Value<double?> valor,
    });

class $$NfeDetalheImpostoIbsMunsTableFilterComposer
    extends Composer<_$AppDatabase, $NfeDetalheImpostoIbsMunsTable> {
  $$NfeDetalheImpostoIbsMunsTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get cst => $composableBuilder(
    column: $table.cst,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get codigoClassificacaoTributaria => $composableBuilder(
    column: $table.codigoClassificacaoTributaria,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorBaseCalculo => $composableBuilder(
    column: $table.valorBaseCalculo,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get aliquota => $composableBuilder(
    column: $table.aliquota,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get percentualDiferimento => $composableBuilder(
    column: $table.percentualDiferimento,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorDiferimento => $composableBuilder(
    column: $table.valorDiferimento,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorTributoDevolvido => $composableBuilder(
    column: $table.valorTributoDevolvido,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get percentualReducaoAliquota => $composableBuilder(
    column: $table.percentualReducaoAliquota,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get aliquotaEfetiva => $composableBuilder(
    column: $table.aliquotaEfetiva,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valor => $composableBuilder(
    column: $table.valor,
    builder: (column) => ColumnFilters(column),
  );
}

class $$NfeDetalheImpostoIbsMunsTableOrderingComposer
    extends Composer<_$AppDatabase, $NfeDetalheImpostoIbsMunsTable> {
  $$NfeDetalheImpostoIbsMunsTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get cst => $composableBuilder(
    column: $table.cst,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get codigoClassificacaoTributaria =>
      $composableBuilder(
        column: $table.codigoClassificacaoTributaria,
        builder: (column) => ColumnOrderings(column),
      );

  ColumnOrderings<double> get valorBaseCalculo => $composableBuilder(
    column: $table.valorBaseCalculo,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get aliquota => $composableBuilder(
    column: $table.aliquota,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get percentualDiferimento => $composableBuilder(
    column: $table.percentualDiferimento,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorDiferimento => $composableBuilder(
    column: $table.valorDiferimento,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorTributoDevolvido => $composableBuilder(
    column: $table.valorTributoDevolvido,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get percentualReducaoAliquota => $composableBuilder(
    column: $table.percentualReducaoAliquota,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get aliquotaEfetiva => $composableBuilder(
    column: $table.aliquotaEfetiva,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valor => $composableBuilder(
    column: $table.valor,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$NfeDetalheImpostoIbsMunsTableAnnotationComposer
    extends Composer<_$AppDatabase, $NfeDetalheImpostoIbsMunsTable> {
  $$NfeDetalheImpostoIbsMunsTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => column,
  );

  GeneratedColumn<String> get cst =>
      $composableBuilder(column: $table.cst, builder: (column) => column);

  GeneratedColumn<String> get codigoClassificacaoTributaria =>
      $composableBuilder(
        column: $table.codigoClassificacaoTributaria,
        builder: (column) => column,
      );

  GeneratedColumn<double> get valorBaseCalculo => $composableBuilder(
    column: $table.valorBaseCalculo,
    builder: (column) => column,
  );

  GeneratedColumn<double> get aliquota =>
      $composableBuilder(column: $table.aliquota, builder: (column) => column);

  GeneratedColumn<double> get percentualDiferimento => $composableBuilder(
    column: $table.percentualDiferimento,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorDiferimento => $composableBuilder(
    column: $table.valorDiferimento,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorTributoDevolvido => $composableBuilder(
    column: $table.valorTributoDevolvido,
    builder: (column) => column,
  );

  GeneratedColumn<double> get percentualReducaoAliquota => $composableBuilder(
    column: $table.percentualReducaoAliquota,
    builder: (column) => column,
  );

  GeneratedColumn<double> get aliquotaEfetiva => $composableBuilder(
    column: $table.aliquotaEfetiva,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valor =>
      $composableBuilder(column: $table.valor, builder: (column) => column);
}

class $$NfeDetalheImpostoIbsMunsTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $NfeDetalheImpostoIbsMunsTable,
          NfeDetalheImpostoIbsMun,
          $$NfeDetalheImpostoIbsMunsTableFilterComposer,
          $$NfeDetalheImpostoIbsMunsTableOrderingComposer,
          $$NfeDetalheImpostoIbsMunsTableAnnotationComposer,
          $$NfeDetalheImpostoIbsMunsTableCreateCompanionBuilder,
          $$NfeDetalheImpostoIbsMunsTableUpdateCompanionBuilder,
          (
            NfeDetalheImpostoIbsMun,
            BaseReferences<
              _$AppDatabase,
              $NfeDetalheImpostoIbsMunsTable,
              NfeDetalheImpostoIbsMun
            >,
          ),
          NfeDetalheImpostoIbsMun,
          PrefetchHooks Function()
        > {
  $$NfeDetalheImpostoIbsMunsTableTableManager(
    _$AppDatabase db,
    $NfeDetalheImpostoIbsMunsTable table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer:
              () => $$NfeDetalheImpostoIbsMunsTableFilterComposer(
                $db: db,
                $table: table,
              ),
          createOrderingComposer:
              () => $$NfeDetalheImpostoIbsMunsTableOrderingComposer(
                $db: db,
                $table: table,
              ),
          createComputedFieldComposer:
              () => $$NfeDetalheImpostoIbsMunsTableAnnotationComposer(
                $db: db,
                $table: table,
              ),
          updateCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeDetalhe = const Value.absent(),
                Value<String?> cst = const Value.absent(),
                Value<String?> codigoClassificacaoTributaria =
                    const Value.absent(),
                Value<double?> valorBaseCalculo = const Value.absent(),
                Value<double?> aliquota = const Value.absent(),
                Value<double?> percentualDiferimento = const Value.absent(),
                Value<double?> valorDiferimento = const Value.absent(),
                Value<double?> valorTributoDevolvido = const Value.absent(),
                Value<double?> percentualReducaoAliquota = const Value.absent(),
                Value<double?> aliquotaEfetiva = const Value.absent(),
                Value<double?> valor = const Value.absent(),
              }) => NfeDetalheImpostoIbsMunsCompanion(
                id: id,
                idNfeDetalhe: idNfeDetalhe,
                cst: cst,
                codigoClassificacaoTributaria: codigoClassificacaoTributaria,
                valorBaseCalculo: valorBaseCalculo,
                aliquota: aliquota,
                percentualDiferimento: percentualDiferimento,
                valorDiferimento: valorDiferimento,
                valorTributoDevolvido: valorTributoDevolvido,
                percentualReducaoAliquota: percentualReducaoAliquota,
                aliquotaEfetiva: aliquotaEfetiva,
                valor: valor,
              ),
          createCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeDetalhe = const Value.absent(),
                Value<String?> cst = const Value.absent(),
                Value<String?> codigoClassificacaoTributaria =
                    const Value.absent(),
                Value<double?> valorBaseCalculo = const Value.absent(),
                Value<double?> aliquota = const Value.absent(),
                Value<double?> percentualDiferimento = const Value.absent(),
                Value<double?> valorDiferimento = const Value.absent(),
                Value<double?> valorTributoDevolvido = const Value.absent(),
                Value<double?> percentualReducaoAliquota = const Value.absent(),
                Value<double?> aliquotaEfetiva = const Value.absent(),
                Value<double?> valor = const Value.absent(),
              }) => NfeDetalheImpostoIbsMunsCompanion.insert(
                id: id,
                idNfeDetalhe: idNfeDetalhe,
                cst: cst,
                codigoClassificacaoTributaria: codigoClassificacaoTributaria,
                valorBaseCalculo: valorBaseCalculo,
                aliquota: aliquota,
                percentualDiferimento: percentualDiferimento,
                valorDiferimento: valorDiferimento,
                valorTributoDevolvido: valorTributoDevolvido,
                percentualReducaoAliquota: percentualReducaoAliquota,
                aliquotaEfetiva: aliquotaEfetiva,
                valor: valor,
              ),
          withReferenceMapper:
              (p0) =>
                  p0
                      .map(
                        (e) => (
                          e.readTable(table),
                          BaseReferences(db, table, e),
                        ),
                      )
                      .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$NfeDetalheImpostoIbsMunsTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $NfeDetalheImpostoIbsMunsTable,
      NfeDetalheImpostoIbsMun,
      $$NfeDetalheImpostoIbsMunsTableFilterComposer,
      $$NfeDetalheImpostoIbsMunsTableOrderingComposer,
      $$NfeDetalheImpostoIbsMunsTableAnnotationComposer,
      $$NfeDetalheImpostoIbsMunsTableCreateCompanionBuilder,
      $$NfeDetalheImpostoIbsMunsTableUpdateCompanionBuilder,
      (
        NfeDetalheImpostoIbsMun,
        BaseReferences<
          _$AppDatabase,
          $NfeDetalheImpostoIbsMunsTable,
          NfeDetalheImpostoIbsMun
        >,
      ),
      NfeDetalheImpostoIbsMun,
      PrefetchHooks Function()
    >;
typedef $$NfeDetalheImpostoCbssTableCreateCompanionBuilder =
    NfeDetalheImpostoCbssCompanion Function({
      Value<int?> id,
      Value<int?> idNfeDetalhe,
      Value<String?> cst,
      Value<String?> codigoClassificacaoTributaria,
      Value<double?> valorBaseCalculo,
      Value<double?> aliquota,
      Value<double?> percentualDiferimento,
      Value<double?> valorDiferimento,
      Value<double?> valorTributoDevolvido,
      Value<double?> percentualReducaoAliquota,
      Value<double?> aliquotaEfetiva,
      Value<double?> valor,
    });
typedef $$NfeDetalheImpostoCbssTableUpdateCompanionBuilder =
    NfeDetalheImpostoCbssCompanion Function({
      Value<int?> id,
      Value<int?> idNfeDetalhe,
      Value<String?> cst,
      Value<String?> codigoClassificacaoTributaria,
      Value<double?> valorBaseCalculo,
      Value<double?> aliquota,
      Value<double?> percentualDiferimento,
      Value<double?> valorDiferimento,
      Value<double?> valorTributoDevolvido,
      Value<double?> percentualReducaoAliquota,
      Value<double?> aliquotaEfetiva,
      Value<double?> valor,
    });

class $$NfeDetalheImpostoCbssTableFilterComposer
    extends Composer<_$AppDatabase, $NfeDetalheImpostoCbssTable> {
  $$NfeDetalheImpostoCbssTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get cst => $composableBuilder(
    column: $table.cst,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get codigoClassificacaoTributaria => $composableBuilder(
    column: $table.codigoClassificacaoTributaria,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorBaseCalculo => $composableBuilder(
    column: $table.valorBaseCalculo,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get aliquota => $composableBuilder(
    column: $table.aliquota,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get percentualDiferimento => $composableBuilder(
    column: $table.percentualDiferimento,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorDiferimento => $composableBuilder(
    column: $table.valorDiferimento,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorTributoDevolvido => $composableBuilder(
    column: $table.valorTributoDevolvido,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get percentualReducaoAliquota => $composableBuilder(
    column: $table.percentualReducaoAliquota,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get aliquotaEfetiva => $composableBuilder(
    column: $table.aliquotaEfetiva,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valor => $composableBuilder(
    column: $table.valor,
    builder: (column) => ColumnFilters(column),
  );
}

class $$NfeDetalheImpostoCbssTableOrderingComposer
    extends Composer<_$AppDatabase, $NfeDetalheImpostoCbssTable> {
  $$NfeDetalheImpostoCbssTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get cst => $composableBuilder(
    column: $table.cst,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get codigoClassificacaoTributaria =>
      $composableBuilder(
        column: $table.codigoClassificacaoTributaria,
        builder: (column) => ColumnOrderings(column),
      );

  ColumnOrderings<double> get valorBaseCalculo => $composableBuilder(
    column: $table.valorBaseCalculo,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get aliquota => $composableBuilder(
    column: $table.aliquota,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get percentualDiferimento => $composableBuilder(
    column: $table.percentualDiferimento,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorDiferimento => $composableBuilder(
    column: $table.valorDiferimento,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorTributoDevolvido => $composableBuilder(
    column: $table.valorTributoDevolvido,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get percentualReducaoAliquota => $composableBuilder(
    column: $table.percentualReducaoAliquota,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get aliquotaEfetiva => $composableBuilder(
    column: $table.aliquotaEfetiva,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valor => $composableBuilder(
    column: $table.valor,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$NfeDetalheImpostoCbssTableAnnotationComposer
    extends Composer<_$AppDatabase, $NfeDetalheImpostoCbssTable> {
  $$NfeDetalheImpostoCbssTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => column,
  );

  GeneratedColumn<String> get cst =>
      $composableBuilder(column: $table.cst, builder: (column) => column);

  GeneratedColumn<String> get codigoClassificacaoTributaria =>
      $composableBuilder(
        column: $table.codigoClassificacaoTributaria,
        builder: (column) => column,
      );

  GeneratedColumn<double> get valorBaseCalculo => $composableBuilder(
    column: $table.valorBaseCalculo,
    builder: (column) => column,
  );

  GeneratedColumn<double> get aliquota =>
      $composableBuilder(column: $table.aliquota, builder: (column) => column);

  GeneratedColumn<double> get percentualDiferimento => $composableBuilder(
    column: $table.percentualDiferimento,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorDiferimento => $composableBuilder(
    column: $table.valorDiferimento,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorTributoDevolvido => $composableBuilder(
    column: $table.valorTributoDevolvido,
    builder: (column) => column,
  );

  GeneratedColumn<double> get percentualReducaoAliquota => $composableBuilder(
    column: $table.percentualReducaoAliquota,
    builder: (column) => column,
  );

  GeneratedColumn<double> get aliquotaEfetiva => $composableBuilder(
    column: $table.aliquotaEfetiva,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valor =>
      $composableBuilder(column: $table.valor, builder: (column) => column);
}

class $$NfeDetalheImpostoCbssTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $NfeDetalheImpostoCbssTable,
          NfeDetalheImpostoCbs,
          $$NfeDetalheImpostoCbssTableFilterComposer,
          $$NfeDetalheImpostoCbssTableOrderingComposer,
          $$NfeDetalheImpostoCbssTableAnnotationComposer,
          $$NfeDetalheImpostoCbssTableCreateCompanionBuilder,
          $$NfeDetalheImpostoCbssTableUpdateCompanionBuilder,
          (
            NfeDetalheImpostoCbs,
            BaseReferences<
              _$AppDatabase,
              $NfeDetalheImpostoCbssTable,
              NfeDetalheImpostoCbs
            >,
          ),
          NfeDetalheImpostoCbs,
          PrefetchHooks Function()
        > {
  $$NfeDetalheImpostoCbssTableTableManager(
    _$AppDatabase db,
    $NfeDetalheImpostoCbssTable table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer:
              () => $$NfeDetalheImpostoCbssTableFilterComposer(
                $db: db,
                $table: table,
              ),
          createOrderingComposer:
              () => $$NfeDetalheImpostoCbssTableOrderingComposer(
                $db: db,
                $table: table,
              ),
          createComputedFieldComposer:
              () => $$NfeDetalheImpostoCbssTableAnnotationComposer(
                $db: db,
                $table: table,
              ),
          updateCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeDetalhe = const Value.absent(),
                Value<String?> cst = const Value.absent(),
                Value<String?> codigoClassificacaoTributaria =
                    const Value.absent(),
                Value<double?> valorBaseCalculo = const Value.absent(),
                Value<double?> aliquota = const Value.absent(),
                Value<double?> percentualDiferimento = const Value.absent(),
                Value<double?> valorDiferimento = const Value.absent(),
                Value<double?> valorTributoDevolvido = const Value.absent(),
                Value<double?> percentualReducaoAliquota = const Value.absent(),
                Value<double?> aliquotaEfetiva = const Value.absent(),
                Value<double?> valor = const Value.absent(),
              }) => NfeDetalheImpostoCbssCompanion(
                id: id,
                idNfeDetalhe: idNfeDetalhe,
                cst: cst,
                codigoClassificacaoTributaria: codigoClassificacaoTributaria,
                valorBaseCalculo: valorBaseCalculo,
                aliquota: aliquota,
                percentualDiferimento: percentualDiferimento,
                valorDiferimento: valorDiferimento,
                valorTributoDevolvido: valorTributoDevolvido,
                percentualReducaoAliquota: percentualReducaoAliquota,
                aliquotaEfetiva: aliquotaEfetiva,
                valor: valor,
              ),
          createCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeDetalhe = const Value.absent(),
                Value<String?> cst = const Value.absent(),
                Value<String?> codigoClassificacaoTributaria =
                    const Value.absent(),
                Value<double?> valorBaseCalculo = const Value.absent(),
                Value<double?> aliquota = const Value.absent(),
                Value<double?> percentualDiferimento = const Value.absent(),
                Value<double?> valorDiferimento = const Value.absent(),
                Value<double?> valorTributoDevolvido = const Value.absent(),
                Value<double?> percentualReducaoAliquota = const Value.absent(),
                Value<double?> aliquotaEfetiva = const Value.absent(),
                Value<double?> valor = const Value.absent(),
              }) => NfeDetalheImpostoCbssCompanion.insert(
                id: id,
                idNfeDetalhe: idNfeDetalhe,
                cst: cst,
                codigoClassificacaoTributaria: codigoClassificacaoTributaria,
                valorBaseCalculo: valorBaseCalculo,
                aliquota: aliquota,
                percentualDiferimento: percentualDiferimento,
                valorDiferimento: valorDiferimento,
                valorTributoDevolvido: valorTributoDevolvido,
                percentualReducaoAliquota: percentualReducaoAliquota,
                aliquotaEfetiva: aliquotaEfetiva,
                valor: valor,
              ),
          withReferenceMapper:
              (p0) =>
                  p0
                      .map(
                        (e) => (
                          e.readTable(table),
                          BaseReferences(db, table, e),
                        ),
                      )
                      .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$NfeDetalheImpostoCbssTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $NfeDetalheImpostoCbssTable,
      NfeDetalheImpostoCbs,
      $$NfeDetalheImpostoCbssTableFilterComposer,
      $$NfeDetalheImpostoCbssTableOrderingComposer,
      $$NfeDetalheImpostoCbssTableAnnotationComposer,
      $$NfeDetalheImpostoCbssTableCreateCompanionBuilder,
      $$NfeDetalheImpostoCbssTableUpdateCompanionBuilder,
      (
        NfeDetalheImpostoCbs,
        BaseReferences<
          _$AppDatabase,
          $NfeDetalheImpostoCbssTable,
          NfeDetalheImpostoCbs
        >,
      ),
      NfeDetalheImpostoCbs,
      PrefetchHooks Function()
    >;
typedef $$NfeDetalheTributoRegularsTableCreateCompanionBuilder =
    NfeDetalheTributoRegularsCompanion Function({
      Value<int?> id,
      Value<int?> idNfeDetalhe,
      Value<String?> cst,
      Value<String?> codigoClassificacaoTributaria,
      Value<double?> aliquotaIbsUf,
      Value<double?> valorTributoIbsUf,
      Value<double?> aliquotaIbsMun,
      Value<double?> valorTributoIbsMun,
      Value<double?> alquotaCbs,
      Value<double?> valorTributoCbs,
    });
typedef $$NfeDetalheTributoRegularsTableUpdateCompanionBuilder =
    NfeDetalheTributoRegularsCompanion Function({
      Value<int?> id,
      Value<int?> idNfeDetalhe,
      Value<String?> cst,
      Value<String?> codigoClassificacaoTributaria,
      Value<double?> aliquotaIbsUf,
      Value<double?> valorTributoIbsUf,
      Value<double?> aliquotaIbsMun,
      Value<double?> valorTributoIbsMun,
      Value<double?> alquotaCbs,
      Value<double?> valorTributoCbs,
    });

class $$NfeDetalheTributoRegularsTableFilterComposer
    extends Composer<_$AppDatabase, $NfeDetalheTributoRegularsTable> {
  $$NfeDetalheTributoRegularsTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get cst => $composableBuilder(
    column: $table.cst,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get codigoClassificacaoTributaria => $composableBuilder(
    column: $table.codigoClassificacaoTributaria,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get aliquotaIbsUf => $composableBuilder(
    column: $table.aliquotaIbsUf,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorTributoIbsUf => $composableBuilder(
    column: $table.valorTributoIbsUf,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get aliquotaIbsMun => $composableBuilder(
    column: $table.aliquotaIbsMun,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorTributoIbsMun => $composableBuilder(
    column: $table.valorTributoIbsMun,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get alquotaCbs => $composableBuilder(
    column: $table.alquotaCbs,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorTributoCbs => $composableBuilder(
    column: $table.valorTributoCbs,
    builder: (column) => ColumnFilters(column),
  );
}

class $$NfeDetalheTributoRegularsTableOrderingComposer
    extends Composer<_$AppDatabase, $NfeDetalheTributoRegularsTable> {
  $$NfeDetalheTributoRegularsTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get cst => $composableBuilder(
    column: $table.cst,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get codigoClassificacaoTributaria =>
      $composableBuilder(
        column: $table.codigoClassificacaoTributaria,
        builder: (column) => ColumnOrderings(column),
      );

  ColumnOrderings<double> get aliquotaIbsUf => $composableBuilder(
    column: $table.aliquotaIbsUf,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorTributoIbsUf => $composableBuilder(
    column: $table.valorTributoIbsUf,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get aliquotaIbsMun => $composableBuilder(
    column: $table.aliquotaIbsMun,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorTributoIbsMun => $composableBuilder(
    column: $table.valorTributoIbsMun,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get alquotaCbs => $composableBuilder(
    column: $table.alquotaCbs,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorTributoCbs => $composableBuilder(
    column: $table.valorTributoCbs,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$NfeDetalheTributoRegularsTableAnnotationComposer
    extends Composer<_$AppDatabase, $NfeDetalheTributoRegularsTable> {
  $$NfeDetalheTributoRegularsTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => column,
  );

  GeneratedColumn<String> get cst =>
      $composableBuilder(column: $table.cst, builder: (column) => column);

  GeneratedColumn<String> get codigoClassificacaoTributaria =>
      $composableBuilder(
        column: $table.codigoClassificacaoTributaria,
        builder: (column) => column,
      );

  GeneratedColumn<double> get aliquotaIbsUf => $composableBuilder(
    column: $table.aliquotaIbsUf,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorTributoIbsUf => $composableBuilder(
    column: $table.valorTributoIbsUf,
    builder: (column) => column,
  );

  GeneratedColumn<double> get aliquotaIbsMun => $composableBuilder(
    column: $table.aliquotaIbsMun,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorTributoIbsMun => $composableBuilder(
    column: $table.valorTributoIbsMun,
    builder: (column) => column,
  );

  GeneratedColumn<double> get alquotaCbs => $composableBuilder(
    column: $table.alquotaCbs,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorTributoCbs => $composableBuilder(
    column: $table.valorTributoCbs,
    builder: (column) => column,
  );
}

class $$NfeDetalheTributoRegularsTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $NfeDetalheTributoRegularsTable,
          NfeDetalheTributoRegular,
          $$NfeDetalheTributoRegularsTableFilterComposer,
          $$NfeDetalheTributoRegularsTableOrderingComposer,
          $$NfeDetalheTributoRegularsTableAnnotationComposer,
          $$NfeDetalheTributoRegularsTableCreateCompanionBuilder,
          $$NfeDetalheTributoRegularsTableUpdateCompanionBuilder,
          (
            NfeDetalheTributoRegular,
            BaseReferences<
              _$AppDatabase,
              $NfeDetalheTributoRegularsTable,
              NfeDetalheTributoRegular
            >,
          ),
          NfeDetalheTributoRegular,
          PrefetchHooks Function()
        > {
  $$NfeDetalheTributoRegularsTableTableManager(
    _$AppDatabase db,
    $NfeDetalheTributoRegularsTable table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer:
              () => $$NfeDetalheTributoRegularsTableFilterComposer(
                $db: db,
                $table: table,
              ),
          createOrderingComposer:
              () => $$NfeDetalheTributoRegularsTableOrderingComposer(
                $db: db,
                $table: table,
              ),
          createComputedFieldComposer:
              () => $$NfeDetalheTributoRegularsTableAnnotationComposer(
                $db: db,
                $table: table,
              ),
          updateCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeDetalhe = const Value.absent(),
                Value<String?> cst = const Value.absent(),
                Value<String?> codigoClassificacaoTributaria =
                    const Value.absent(),
                Value<double?> aliquotaIbsUf = const Value.absent(),
                Value<double?> valorTributoIbsUf = const Value.absent(),
                Value<double?> aliquotaIbsMun = const Value.absent(),
                Value<double?> valorTributoIbsMun = const Value.absent(),
                Value<double?> alquotaCbs = const Value.absent(),
                Value<double?> valorTributoCbs = const Value.absent(),
              }) => NfeDetalheTributoRegularsCompanion(
                id: id,
                idNfeDetalhe: idNfeDetalhe,
                cst: cst,
                codigoClassificacaoTributaria: codigoClassificacaoTributaria,
                aliquotaIbsUf: aliquotaIbsUf,
                valorTributoIbsUf: valorTributoIbsUf,
                aliquotaIbsMun: aliquotaIbsMun,
                valorTributoIbsMun: valorTributoIbsMun,
                alquotaCbs: alquotaCbs,
                valorTributoCbs: valorTributoCbs,
              ),
          createCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeDetalhe = const Value.absent(),
                Value<String?> cst = const Value.absent(),
                Value<String?> codigoClassificacaoTributaria =
                    const Value.absent(),
                Value<double?> aliquotaIbsUf = const Value.absent(),
                Value<double?> valorTributoIbsUf = const Value.absent(),
                Value<double?> aliquotaIbsMun = const Value.absent(),
                Value<double?> valorTributoIbsMun = const Value.absent(),
                Value<double?> alquotaCbs = const Value.absent(),
                Value<double?> valorTributoCbs = const Value.absent(),
              }) => NfeDetalheTributoRegularsCompanion.insert(
                id: id,
                idNfeDetalhe: idNfeDetalhe,
                cst: cst,
                codigoClassificacaoTributaria: codigoClassificacaoTributaria,
                aliquotaIbsUf: aliquotaIbsUf,
                valorTributoIbsUf: valorTributoIbsUf,
                aliquotaIbsMun: aliquotaIbsMun,
                valorTributoIbsMun: valorTributoIbsMun,
                alquotaCbs: alquotaCbs,
                valorTributoCbs: valorTributoCbs,
              ),
          withReferenceMapper:
              (p0) =>
                  p0
                      .map(
                        (e) => (
                          e.readTable(table),
                          BaseReferences(db, table, e),
                        ),
                      )
                      .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$NfeDetalheTributoRegularsTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $NfeDetalheTributoRegularsTable,
      NfeDetalheTributoRegular,
      $$NfeDetalheTributoRegularsTableFilterComposer,
      $$NfeDetalheTributoRegularsTableOrderingComposer,
      $$NfeDetalheTributoRegularsTableAnnotationComposer,
      $$NfeDetalheTributoRegularsTableCreateCompanionBuilder,
      $$NfeDetalheTributoRegularsTableUpdateCompanionBuilder,
      (
        NfeDetalheTributoRegular,
        BaseReferences<
          _$AppDatabase,
          $NfeDetalheTributoRegularsTable,
          NfeDetalheTributoRegular
        >,
      ),
      NfeDetalheTributoRegular,
      PrefetchHooks Function()
    >;
typedef $$NfeDetalheCreditoPresumidoIbssTableCreateCompanionBuilder =
    NfeDetalheCreditoPresumidoIbssCompanion Function({
      Value<int?> id,
      Value<int?> idNfeDetalhe,
      Value<String?> codigoClassificacao,
      Value<double?> percentual,
      Value<double?> valor,
      Value<double?> valorSuspensivo,
    });
typedef $$NfeDetalheCreditoPresumidoIbssTableUpdateCompanionBuilder =
    NfeDetalheCreditoPresumidoIbssCompanion Function({
      Value<int?> id,
      Value<int?> idNfeDetalhe,
      Value<String?> codigoClassificacao,
      Value<double?> percentual,
      Value<double?> valor,
      Value<double?> valorSuspensivo,
    });

class $$NfeDetalheCreditoPresumidoIbssTableFilterComposer
    extends Composer<_$AppDatabase, $NfeDetalheCreditoPresumidoIbssTable> {
  $$NfeDetalheCreditoPresumidoIbssTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get codigoClassificacao => $composableBuilder(
    column: $table.codigoClassificacao,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get percentual => $composableBuilder(
    column: $table.percentual,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valor => $composableBuilder(
    column: $table.valor,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorSuspensivo => $composableBuilder(
    column: $table.valorSuspensivo,
    builder: (column) => ColumnFilters(column),
  );
}

class $$NfeDetalheCreditoPresumidoIbssTableOrderingComposer
    extends Composer<_$AppDatabase, $NfeDetalheCreditoPresumidoIbssTable> {
  $$NfeDetalheCreditoPresumidoIbssTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get codigoClassificacao => $composableBuilder(
    column: $table.codigoClassificacao,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get percentual => $composableBuilder(
    column: $table.percentual,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valor => $composableBuilder(
    column: $table.valor,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorSuspensivo => $composableBuilder(
    column: $table.valorSuspensivo,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$NfeDetalheCreditoPresumidoIbssTableAnnotationComposer
    extends Composer<_$AppDatabase, $NfeDetalheCreditoPresumidoIbssTable> {
  $$NfeDetalheCreditoPresumidoIbssTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => column,
  );

  GeneratedColumn<String> get codigoClassificacao => $composableBuilder(
    column: $table.codigoClassificacao,
    builder: (column) => column,
  );

  GeneratedColumn<double> get percentual => $composableBuilder(
    column: $table.percentual,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valor =>
      $composableBuilder(column: $table.valor, builder: (column) => column);

  GeneratedColumn<double> get valorSuspensivo => $composableBuilder(
    column: $table.valorSuspensivo,
    builder: (column) => column,
  );
}

class $$NfeDetalheCreditoPresumidoIbssTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $NfeDetalheCreditoPresumidoIbssTable,
          NfeDetalheCreditoPresumidoIbs,
          $$NfeDetalheCreditoPresumidoIbssTableFilterComposer,
          $$NfeDetalheCreditoPresumidoIbssTableOrderingComposer,
          $$NfeDetalheCreditoPresumidoIbssTableAnnotationComposer,
          $$NfeDetalheCreditoPresumidoIbssTableCreateCompanionBuilder,
          $$NfeDetalheCreditoPresumidoIbssTableUpdateCompanionBuilder,
          (
            NfeDetalheCreditoPresumidoIbs,
            BaseReferences<
              _$AppDatabase,
              $NfeDetalheCreditoPresumidoIbssTable,
              NfeDetalheCreditoPresumidoIbs
            >,
          ),
          NfeDetalheCreditoPresumidoIbs,
          PrefetchHooks Function()
        > {
  $$NfeDetalheCreditoPresumidoIbssTableTableManager(
    _$AppDatabase db,
    $NfeDetalheCreditoPresumidoIbssTable table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer:
              () => $$NfeDetalheCreditoPresumidoIbssTableFilterComposer(
                $db: db,
                $table: table,
              ),
          createOrderingComposer:
              () => $$NfeDetalheCreditoPresumidoIbssTableOrderingComposer(
                $db: db,
                $table: table,
              ),
          createComputedFieldComposer:
              () => $$NfeDetalheCreditoPresumidoIbssTableAnnotationComposer(
                $db: db,
                $table: table,
              ),
          updateCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeDetalhe = const Value.absent(),
                Value<String?> codigoClassificacao = const Value.absent(),
                Value<double?> percentual = const Value.absent(),
                Value<double?> valor = const Value.absent(),
                Value<double?> valorSuspensivo = const Value.absent(),
              }) => NfeDetalheCreditoPresumidoIbssCompanion(
                id: id,
                idNfeDetalhe: idNfeDetalhe,
                codigoClassificacao: codigoClassificacao,
                percentual: percentual,
                valor: valor,
                valorSuspensivo: valorSuspensivo,
              ),
          createCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeDetalhe = const Value.absent(),
                Value<String?> codigoClassificacao = const Value.absent(),
                Value<double?> percentual = const Value.absent(),
                Value<double?> valor = const Value.absent(),
                Value<double?> valorSuspensivo = const Value.absent(),
              }) => NfeDetalheCreditoPresumidoIbssCompanion.insert(
                id: id,
                idNfeDetalhe: idNfeDetalhe,
                codigoClassificacao: codigoClassificacao,
                percentual: percentual,
                valor: valor,
                valorSuspensivo: valorSuspensivo,
              ),
          withReferenceMapper:
              (p0) =>
                  p0
                      .map(
                        (e) => (
                          e.readTable(table),
                          BaseReferences(db, table, e),
                        ),
                      )
                      .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$NfeDetalheCreditoPresumidoIbssTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $NfeDetalheCreditoPresumidoIbssTable,
      NfeDetalheCreditoPresumidoIbs,
      $$NfeDetalheCreditoPresumidoIbssTableFilterComposer,
      $$NfeDetalheCreditoPresumidoIbssTableOrderingComposer,
      $$NfeDetalheCreditoPresumidoIbssTableAnnotationComposer,
      $$NfeDetalheCreditoPresumidoIbssTableCreateCompanionBuilder,
      $$NfeDetalheCreditoPresumidoIbssTableUpdateCompanionBuilder,
      (
        NfeDetalheCreditoPresumidoIbs,
        BaseReferences<
          _$AppDatabase,
          $NfeDetalheCreditoPresumidoIbssTable,
          NfeDetalheCreditoPresumidoIbs
        >,
      ),
      NfeDetalheCreditoPresumidoIbs,
      PrefetchHooks Function()
    >;
typedef $$NfeDetalheCreditoPresumidoCbssTableCreateCompanionBuilder =
    NfeDetalheCreditoPresumidoCbssCompanion Function({
      Value<int?> id,
      Value<int?> idNfeDetalhe,
      Value<String?> codigoClassificacao,
      Value<double?> percentual,
      Value<double?> valor,
      Value<double?> valorSuspensivo,
    });
typedef $$NfeDetalheCreditoPresumidoCbssTableUpdateCompanionBuilder =
    NfeDetalheCreditoPresumidoCbssCompanion Function({
      Value<int?> id,
      Value<int?> idNfeDetalhe,
      Value<String?> codigoClassificacao,
      Value<double?> percentual,
      Value<double?> valor,
      Value<double?> valorSuspensivo,
    });

class $$NfeDetalheCreditoPresumidoCbssTableFilterComposer
    extends Composer<_$AppDatabase, $NfeDetalheCreditoPresumidoCbssTable> {
  $$NfeDetalheCreditoPresumidoCbssTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get codigoClassificacao => $composableBuilder(
    column: $table.codigoClassificacao,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get percentual => $composableBuilder(
    column: $table.percentual,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valor => $composableBuilder(
    column: $table.valor,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorSuspensivo => $composableBuilder(
    column: $table.valorSuspensivo,
    builder: (column) => ColumnFilters(column),
  );
}

class $$NfeDetalheCreditoPresumidoCbssTableOrderingComposer
    extends Composer<_$AppDatabase, $NfeDetalheCreditoPresumidoCbssTable> {
  $$NfeDetalheCreditoPresumidoCbssTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get codigoClassificacao => $composableBuilder(
    column: $table.codigoClassificacao,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get percentual => $composableBuilder(
    column: $table.percentual,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valor => $composableBuilder(
    column: $table.valor,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorSuspensivo => $composableBuilder(
    column: $table.valorSuspensivo,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$NfeDetalheCreditoPresumidoCbssTableAnnotationComposer
    extends Composer<_$AppDatabase, $NfeDetalheCreditoPresumidoCbssTable> {
  $$NfeDetalheCreditoPresumidoCbssTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => column,
  );

  GeneratedColumn<String> get codigoClassificacao => $composableBuilder(
    column: $table.codigoClassificacao,
    builder: (column) => column,
  );

  GeneratedColumn<double> get percentual => $composableBuilder(
    column: $table.percentual,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valor =>
      $composableBuilder(column: $table.valor, builder: (column) => column);

  GeneratedColumn<double> get valorSuspensivo => $composableBuilder(
    column: $table.valorSuspensivo,
    builder: (column) => column,
  );
}

class $$NfeDetalheCreditoPresumidoCbssTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $NfeDetalheCreditoPresumidoCbssTable,
          NfeDetalheCreditoPresumidoCbs,
          $$NfeDetalheCreditoPresumidoCbssTableFilterComposer,
          $$NfeDetalheCreditoPresumidoCbssTableOrderingComposer,
          $$NfeDetalheCreditoPresumidoCbssTableAnnotationComposer,
          $$NfeDetalheCreditoPresumidoCbssTableCreateCompanionBuilder,
          $$NfeDetalheCreditoPresumidoCbssTableUpdateCompanionBuilder,
          (
            NfeDetalheCreditoPresumidoCbs,
            BaseReferences<
              _$AppDatabase,
              $NfeDetalheCreditoPresumidoCbssTable,
              NfeDetalheCreditoPresumidoCbs
            >,
          ),
          NfeDetalheCreditoPresumidoCbs,
          PrefetchHooks Function()
        > {
  $$NfeDetalheCreditoPresumidoCbssTableTableManager(
    _$AppDatabase db,
    $NfeDetalheCreditoPresumidoCbssTable table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer:
              () => $$NfeDetalheCreditoPresumidoCbssTableFilterComposer(
                $db: db,
                $table: table,
              ),
          createOrderingComposer:
              () => $$NfeDetalheCreditoPresumidoCbssTableOrderingComposer(
                $db: db,
                $table: table,
              ),
          createComputedFieldComposer:
              () => $$NfeDetalheCreditoPresumidoCbssTableAnnotationComposer(
                $db: db,
                $table: table,
              ),
          updateCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeDetalhe = const Value.absent(),
                Value<String?> codigoClassificacao = const Value.absent(),
                Value<double?> percentual = const Value.absent(),
                Value<double?> valor = const Value.absent(),
                Value<double?> valorSuspensivo = const Value.absent(),
              }) => NfeDetalheCreditoPresumidoCbssCompanion(
                id: id,
                idNfeDetalhe: idNfeDetalhe,
                codigoClassificacao: codigoClassificacao,
                percentual: percentual,
                valor: valor,
                valorSuspensivo: valorSuspensivo,
              ),
          createCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeDetalhe = const Value.absent(),
                Value<String?> codigoClassificacao = const Value.absent(),
                Value<double?> percentual = const Value.absent(),
                Value<double?> valor = const Value.absent(),
                Value<double?> valorSuspensivo = const Value.absent(),
              }) => NfeDetalheCreditoPresumidoCbssCompanion.insert(
                id: id,
                idNfeDetalhe: idNfeDetalhe,
                codigoClassificacao: codigoClassificacao,
                percentual: percentual,
                valor: valor,
                valorSuspensivo: valorSuspensivo,
              ),
          withReferenceMapper:
              (p0) =>
                  p0
                      .map(
                        (e) => (
                          e.readTable(table),
                          BaseReferences(db, table, e),
                        ),
                      )
                      .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$NfeDetalheCreditoPresumidoCbssTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $NfeDetalheCreditoPresumidoCbssTable,
      NfeDetalheCreditoPresumidoCbs,
      $$NfeDetalheCreditoPresumidoCbssTableFilterComposer,
      $$NfeDetalheCreditoPresumidoCbssTableOrderingComposer,
      $$NfeDetalheCreditoPresumidoCbssTableAnnotationComposer,
      $$NfeDetalheCreditoPresumidoCbssTableCreateCompanionBuilder,
      $$NfeDetalheCreditoPresumidoCbssTableUpdateCompanionBuilder,
      (
        NfeDetalheCreditoPresumidoCbs,
        BaseReferences<
          _$AppDatabase,
          $NfeDetalheCreditoPresumidoCbssTable,
          NfeDetalheCreditoPresumidoCbs
        >,
      ),
      NfeDetalheCreditoPresumidoCbs,
      PrefetchHooks Function()
    >;
typedef $$NfeDetalheCompraGovernosTableCreateCompanionBuilder =
    NfeDetalheCompraGovernosCompanion Function({
      Value<int?> id,
      Value<int?> idNfeDetalhe,
      Value<double?> aliquotaIbsUf,
      Value<double?> valorIbsUf,
      Value<double?> aliquotaIbsMun,
      Value<double?> valorIbsMun,
      Value<double?> aliquotaCbs,
      Value<double?> valorCbs,
    });
typedef $$NfeDetalheCompraGovernosTableUpdateCompanionBuilder =
    NfeDetalheCompraGovernosCompanion Function({
      Value<int?> id,
      Value<int?> idNfeDetalhe,
      Value<double?> aliquotaIbsUf,
      Value<double?> valorIbsUf,
      Value<double?> aliquotaIbsMun,
      Value<double?> valorIbsMun,
      Value<double?> aliquotaCbs,
      Value<double?> valorCbs,
    });

class $$NfeDetalheCompraGovernosTableFilterComposer
    extends Composer<_$AppDatabase, $NfeDetalheCompraGovernosTable> {
  $$NfeDetalheCompraGovernosTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get aliquotaIbsUf => $composableBuilder(
    column: $table.aliquotaIbsUf,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorIbsUf => $composableBuilder(
    column: $table.valorIbsUf,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get aliquotaIbsMun => $composableBuilder(
    column: $table.aliquotaIbsMun,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorIbsMun => $composableBuilder(
    column: $table.valorIbsMun,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get aliquotaCbs => $composableBuilder(
    column: $table.aliquotaCbs,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorCbs => $composableBuilder(
    column: $table.valorCbs,
    builder: (column) => ColumnFilters(column),
  );
}

class $$NfeDetalheCompraGovernosTableOrderingComposer
    extends Composer<_$AppDatabase, $NfeDetalheCompraGovernosTable> {
  $$NfeDetalheCompraGovernosTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get aliquotaIbsUf => $composableBuilder(
    column: $table.aliquotaIbsUf,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorIbsUf => $composableBuilder(
    column: $table.valorIbsUf,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get aliquotaIbsMun => $composableBuilder(
    column: $table.aliquotaIbsMun,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorIbsMun => $composableBuilder(
    column: $table.valorIbsMun,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get aliquotaCbs => $composableBuilder(
    column: $table.aliquotaCbs,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorCbs => $composableBuilder(
    column: $table.valorCbs,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$NfeDetalheCompraGovernosTableAnnotationComposer
    extends Composer<_$AppDatabase, $NfeDetalheCompraGovernosTable> {
  $$NfeDetalheCompraGovernosTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => column,
  );

  GeneratedColumn<double> get aliquotaIbsUf => $composableBuilder(
    column: $table.aliquotaIbsUf,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorIbsUf => $composableBuilder(
    column: $table.valorIbsUf,
    builder: (column) => column,
  );

  GeneratedColumn<double> get aliquotaIbsMun => $composableBuilder(
    column: $table.aliquotaIbsMun,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorIbsMun => $composableBuilder(
    column: $table.valorIbsMun,
    builder: (column) => column,
  );

  GeneratedColumn<double> get aliquotaCbs => $composableBuilder(
    column: $table.aliquotaCbs,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorCbs =>
      $composableBuilder(column: $table.valorCbs, builder: (column) => column);
}

class $$NfeDetalheCompraGovernosTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $NfeDetalheCompraGovernosTable,
          NfeDetalheCompraGoverno,
          $$NfeDetalheCompraGovernosTableFilterComposer,
          $$NfeDetalheCompraGovernosTableOrderingComposer,
          $$NfeDetalheCompraGovernosTableAnnotationComposer,
          $$NfeDetalheCompraGovernosTableCreateCompanionBuilder,
          $$NfeDetalheCompraGovernosTableUpdateCompanionBuilder,
          (
            NfeDetalheCompraGoverno,
            BaseReferences<
              _$AppDatabase,
              $NfeDetalheCompraGovernosTable,
              NfeDetalheCompraGoverno
            >,
          ),
          NfeDetalheCompraGoverno,
          PrefetchHooks Function()
        > {
  $$NfeDetalheCompraGovernosTableTableManager(
    _$AppDatabase db,
    $NfeDetalheCompraGovernosTable table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer:
              () => $$NfeDetalheCompraGovernosTableFilterComposer(
                $db: db,
                $table: table,
              ),
          createOrderingComposer:
              () => $$NfeDetalheCompraGovernosTableOrderingComposer(
                $db: db,
                $table: table,
              ),
          createComputedFieldComposer:
              () => $$NfeDetalheCompraGovernosTableAnnotationComposer(
                $db: db,
                $table: table,
              ),
          updateCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeDetalhe = const Value.absent(),
                Value<double?> aliquotaIbsUf = const Value.absent(),
                Value<double?> valorIbsUf = const Value.absent(),
                Value<double?> aliquotaIbsMun = const Value.absent(),
                Value<double?> valorIbsMun = const Value.absent(),
                Value<double?> aliquotaCbs = const Value.absent(),
                Value<double?> valorCbs = const Value.absent(),
              }) => NfeDetalheCompraGovernosCompanion(
                id: id,
                idNfeDetalhe: idNfeDetalhe,
                aliquotaIbsUf: aliquotaIbsUf,
                valorIbsUf: valorIbsUf,
                aliquotaIbsMun: aliquotaIbsMun,
                valorIbsMun: valorIbsMun,
                aliquotaCbs: aliquotaCbs,
                valorCbs: valorCbs,
              ),
          createCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeDetalhe = const Value.absent(),
                Value<double?> aliquotaIbsUf = const Value.absent(),
                Value<double?> valorIbsUf = const Value.absent(),
                Value<double?> aliquotaIbsMun = const Value.absent(),
                Value<double?> valorIbsMun = const Value.absent(),
                Value<double?> aliquotaCbs = const Value.absent(),
                Value<double?> valorCbs = const Value.absent(),
              }) => NfeDetalheCompraGovernosCompanion.insert(
                id: id,
                idNfeDetalhe: idNfeDetalhe,
                aliquotaIbsUf: aliquotaIbsUf,
                valorIbsUf: valorIbsUf,
                aliquotaIbsMun: aliquotaIbsMun,
                valorIbsMun: valorIbsMun,
                aliquotaCbs: aliquotaCbs,
                valorCbs: valorCbs,
              ),
          withReferenceMapper:
              (p0) =>
                  p0
                      .map(
                        (e) => (
                          e.readTable(table),
                          BaseReferences(db, table, e),
                        ),
                      )
                      .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$NfeDetalheCompraGovernosTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $NfeDetalheCompraGovernosTable,
      NfeDetalheCompraGoverno,
      $$NfeDetalheCompraGovernosTableFilterComposer,
      $$NfeDetalheCompraGovernosTableOrderingComposer,
      $$NfeDetalheCompraGovernosTableAnnotationComposer,
      $$NfeDetalheCompraGovernosTableCreateCompanionBuilder,
      $$NfeDetalheCompraGovernosTableUpdateCompanionBuilder,
      (
        NfeDetalheCompraGoverno,
        BaseReferences<
          _$AppDatabase,
          $NfeDetalheCompraGovernosTable,
          NfeDetalheCompraGoverno
        >,
      ),
      NfeDetalheCompraGoverno,
      PrefetchHooks Function()
    >;
typedef $$NfeDetalheImpostoMonofasicosTableCreateCompanionBuilder =
    NfeDetalheImpostoMonofasicosCompanion Function({
      Value<int?> id,
      Value<int?> idNfeDetalhe,
      Value<double?> quantidadeTributada,
      Value<double?> aliquotaIbs,
      Value<double?> aliquotaCbs,
      Value<double?> valorIbs,
      Value<double?> valorCbs,
      Value<double?> quantidadeTributadaRetencao,
      Value<double?> aliquotaIbsRetencao,
      Value<double?> valorIbsRetencao,
      Value<double?> aliquotaCbsRetencao,
      Value<double?> valorCbsRetencao,
      Value<double?> quantidadeTributadaRetido,
      Value<double?> aliquotaIbsRetido,
      Value<double?> valorIbsRetido,
      Value<double?> aliquotaCbsRetido,
      Value<double?> valorCbsRetido,
      Value<double?> percentualIbsDiferido,
      Value<double?> valorIbsDiferido,
      Value<double?> percentualCbsDiferido,
      Value<double?> valorCbsDiferido,
      Value<double?> totalIbs,
      Value<double?> totalCbs,
    });
typedef $$NfeDetalheImpostoMonofasicosTableUpdateCompanionBuilder =
    NfeDetalheImpostoMonofasicosCompanion Function({
      Value<int?> id,
      Value<int?> idNfeDetalhe,
      Value<double?> quantidadeTributada,
      Value<double?> aliquotaIbs,
      Value<double?> aliquotaCbs,
      Value<double?> valorIbs,
      Value<double?> valorCbs,
      Value<double?> quantidadeTributadaRetencao,
      Value<double?> aliquotaIbsRetencao,
      Value<double?> valorIbsRetencao,
      Value<double?> aliquotaCbsRetencao,
      Value<double?> valorCbsRetencao,
      Value<double?> quantidadeTributadaRetido,
      Value<double?> aliquotaIbsRetido,
      Value<double?> valorIbsRetido,
      Value<double?> aliquotaCbsRetido,
      Value<double?> valorCbsRetido,
      Value<double?> percentualIbsDiferido,
      Value<double?> valorIbsDiferido,
      Value<double?> percentualCbsDiferido,
      Value<double?> valorCbsDiferido,
      Value<double?> totalIbs,
      Value<double?> totalCbs,
    });

class $$NfeDetalheImpostoMonofasicosTableFilterComposer
    extends Composer<_$AppDatabase, $NfeDetalheImpostoMonofasicosTable> {
  $$NfeDetalheImpostoMonofasicosTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get quantidadeTributada => $composableBuilder(
    column: $table.quantidadeTributada,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get aliquotaIbs => $composableBuilder(
    column: $table.aliquotaIbs,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get aliquotaCbs => $composableBuilder(
    column: $table.aliquotaCbs,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorIbs => $composableBuilder(
    column: $table.valorIbs,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorCbs => $composableBuilder(
    column: $table.valorCbs,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get quantidadeTributadaRetencao => $composableBuilder(
    column: $table.quantidadeTributadaRetencao,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get aliquotaIbsRetencao => $composableBuilder(
    column: $table.aliquotaIbsRetencao,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorIbsRetencao => $composableBuilder(
    column: $table.valorIbsRetencao,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get aliquotaCbsRetencao => $composableBuilder(
    column: $table.aliquotaCbsRetencao,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorCbsRetencao => $composableBuilder(
    column: $table.valorCbsRetencao,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get quantidadeTributadaRetido => $composableBuilder(
    column: $table.quantidadeTributadaRetido,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get aliquotaIbsRetido => $composableBuilder(
    column: $table.aliquotaIbsRetido,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorIbsRetido => $composableBuilder(
    column: $table.valorIbsRetido,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get aliquotaCbsRetido => $composableBuilder(
    column: $table.aliquotaCbsRetido,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorCbsRetido => $composableBuilder(
    column: $table.valorCbsRetido,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get percentualIbsDiferido => $composableBuilder(
    column: $table.percentualIbsDiferido,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorIbsDiferido => $composableBuilder(
    column: $table.valorIbsDiferido,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get percentualCbsDiferido => $composableBuilder(
    column: $table.percentualCbsDiferido,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorCbsDiferido => $composableBuilder(
    column: $table.valorCbsDiferido,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get totalIbs => $composableBuilder(
    column: $table.totalIbs,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get totalCbs => $composableBuilder(
    column: $table.totalCbs,
    builder: (column) => ColumnFilters(column),
  );
}

class $$NfeDetalheImpostoMonofasicosTableOrderingComposer
    extends Composer<_$AppDatabase, $NfeDetalheImpostoMonofasicosTable> {
  $$NfeDetalheImpostoMonofasicosTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get quantidadeTributada => $composableBuilder(
    column: $table.quantidadeTributada,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get aliquotaIbs => $composableBuilder(
    column: $table.aliquotaIbs,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get aliquotaCbs => $composableBuilder(
    column: $table.aliquotaCbs,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorIbs => $composableBuilder(
    column: $table.valorIbs,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorCbs => $composableBuilder(
    column: $table.valorCbs,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get quantidadeTributadaRetencao => $composableBuilder(
    column: $table.quantidadeTributadaRetencao,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get aliquotaIbsRetencao => $composableBuilder(
    column: $table.aliquotaIbsRetencao,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorIbsRetencao => $composableBuilder(
    column: $table.valorIbsRetencao,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get aliquotaCbsRetencao => $composableBuilder(
    column: $table.aliquotaCbsRetencao,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorCbsRetencao => $composableBuilder(
    column: $table.valorCbsRetencao,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get quantidadeTributadaRetido => $composableBuilder(
    column: $table.quantidadeTributadaRetido,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get aliquotaIbsRetido => $composableBuilder(
    column: $table.aliquotaIbsRetido,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorIbsRetido => $composableBuilder(
    column: $table.valorIbsRetido,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get aliquotaCbsRetido => $composableBuilder(
    column: $table.aliquotaCbsRetido,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorCbsRetido => $composableBuilder(
    column: $table.valorCbsRetido,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get percentualIbsDiferido => $composableBuilder(
    column: $table.percentualIbsDiferido,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorIbsDiferido => $composableBuilder(
    column: $table.valorIbsDiferido,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get percentualCbsDiferido => $composableBuilder(
    column: $table.percentualCbsDiferido,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorCbsDiferido => $composableBuilder(
    column: $table.valorCbsDiferido,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get totalIbs => $composableBuilder(
    column: $table.totalIbs,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get totalCbs => $composableBuilder(
    column: $table.totalCbs,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$NfeDetalheImpostoMonofasicosTableAnnotationComposer
    extends Composer<_$AppDatabase, $NfeDetalheImpostoMonofasicosTable> {
  $$NfeDetalheImpostoMonofasicosTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => column,
  );

  GeneratedColumn<double> get quantidadeTributada => $composableBuilder(
    column: $table.quantidadeTributada,
    builder: (column) => column,
  );

  GeneratedColumn<double> get aliquotaIbs => $composableBuilder(
    column: $table.aliquotaIbs,
    builder: (column) => column,
  );

  GeneratedColumn<double> get aliquotaCbs => $composableBuilder(
    column: $table.aliquotaCbs,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorIbs =>
      $composableBuilder(column: $table.valorIbs, builder: (column) => column);

  GeneratedColumn<double> get valorCbs =>
      $composableBuilder(column: $table.valorCbs, builder: (column) => column);

  GeneratedColumn<double> get quantidadeTributadaRetencao => $composableBuilder(
    column: $table.quantidadeTributadaRetencao,
    builder: (column) => column,
  );

  GeneratedColumn<double> get aliquotaIbsRetencao => $composableBuilder(
    column: $table.aliquotaIbsRetencao,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorIbsRetencao => $composableBuilder(
    column: $table.valorIbsRetencao,
    builder: (column) => column,
  );

  GeneratedColumn<double> get aliquotaCbsRetencao => $composableBuilder(
    column: $table.aliquotaCbsRetencao,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorCbsRetencao => $composableBuilder(
    column: $table.valorCbsRetencao,
    builder: (column) => column,
  );

  GeneratedColumn<double> get quantidadeTributadaRetido => $composableBuilder(
    column: $table.quantidadeTributadaRetido,
    builder: (column) => column,
  );

  GeneratedColumn<double> get aliquotaIbsRetido => $composableBuilder(
    column: $table.aliquotaIbsRetido,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorIbsRetido => $composableBuilder(
    column: $table.valorIbsRetido,
    builder: (column) => column,
  );

  GeneratedColumn<double> get aliquotaCbsRetido => $composableBuilder(
    column: $table.aliquotaCbsRetido,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorCbsRetido => $composableBuilder(
    column: $table.valorCbsRetido,
    builder: (column) => column,
  );

  GeneratedColumn<double> get percentualIbsDiferido => $composableBuilder(
    column: $table.percentualIbsDiferido,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorIbsDiferido => $composableBuilder(
    column: $table.valorIbsDiferido,
    builder: (column) => column,
  );

  GeneratedColumn<double> get percentualCbsDiferido => $composableBuilder(
    column: $table.percentualCbsDiferido,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorCbsDiferido => $composableBuilder(
    column: $table.valorCbsDiferido,
    builder: (column) => column,
  );

  GeneratedColumn<double> get totalIbs =>
      $composableBuilder(column: $table.totalIbs, builder: (column) => column);

  GeneratedColumn<double> get totalCbs =>
      $composableBuilder(column: $table.totalCbs, builder: (column) => column);
}

class $$NfeDetalheImpostoMonofasicosTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $NfeDetalheImpostoMonofasicosTable,
          NfeDetalheImpostoMonofasico,
          $$NfeDetalheImpostoMonofasicosTableFilterComposer,
          $$NfeDetalheImpostoMonofasicosTableOrderingComposer,
          $$NfeDetalheImpostoMonofasicosTableAnnotationComposer,
          $$NfeDetalheImpostoMonofasicosTableCreateCompanionBuilder,
          $$NfeDetalheImpostoMonofasicosTableUpdateCompanionBuilder,
          (
            NfeDetalheImpostoMonofasico,
            BaseReferences<
              _$AppDatabase,
              $NfeDetalheImpostoMonofasicosTable,
              NfeDetalheImpostoMonofasico
            >,
          ),
          NfeDetalheImpostoMonofasico,
          PrefetchHooks Function()
        > {
  $$NfeDetalheImpostoMonofasicosTableTableManager(
    _$AppDatabase db,
    $NfeDetalheImpostoMonofasicosTable table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer:
              () => $$NfeDetalheImpostoMonofasicosTableFilterComposer(
                $db: db,
                $table: table,
              ),
          createOrderingComposer:
              () => $$NfeDetalheImpostoMonofasicosTableOrderingComposer(
                $db: db,
                $table: table,
              ),
          createComputedFieldComposer:
              () => $$NfeDetalheImpostoMonofasicosTableAnnotationComposer(
                $db: db,
                $table: table,
              ),
          updateCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeDetalhe = const Value.absent(),
                Value<double?> quantidadeTributada = const Value.absent(),
                Value<double?> aliquotaIbs = const Value.absent(),
                Value<double?> aliquotaCbs = const Value.absent(),
                Value<double?> valorIbs = const Value.absent(),
                Value<double?> valorCbs = const Value.absent(),
                Value<double?> quantidadeTributadaRetencao =
                    const Value.absent(),
                Value<double?> aliquotaIbsRetencao = const Value.absent(),
                Value<double?> valorIbsRetencao = const Value.absent(),
                Value<double?> aliquotaCbsRetencao = const Value.absent(),
                Value<double?> valorCbsRetencao = const Value.absent(),
                Value<double?> quantidadeTributadaRetido = const Value.absent(),
                Value<double?> aliquotaIbsRetido = const Value.absent(),
                Value<double?> valorIbsRetido = const Value.absent(),
                Value<double?> aliquotaCbsRetido = const Value.absent(),
                Value<double?> valorCbsRetido = const Value.absent(),
                Value<double?> percentualIbsDiferido = const Value.absent(),
                Value<double?> valorIbsDiferido = const Value.absent(),
                Value<double?> percentualCbsDiferido = const Value.absent(),
                Value<double?> valorCbsDiferido = const Value.absent(),
                Value<double?> totalIbs = const Value.absent(),
                Value<double?> totalCbs = const Value.absent(),
              }) => NfeDetalheImpostoMonofasicosCompanion(
                id: id,
                idNfeDetalhe: idNfeDetalhe,
                quantidadeTributada: quantidadeTributada,
                aliquotaIbs: aliquotaIbs,
                aliquotaCbs: aliquotaCbs,
                valorIbs: valorIbs,
                valorCbs: valorCbs,
                quantidadeTributadaRetencao: quantidadeTributadaRetencao,
                aliquotaIbsRetencao: aliquotaIbsRetencao,
                valorIbsRetencao: valorIbsRetencao,
                aliquotaCbsRetencao: aliquotaCbsRetencao,
                valorCbsRetencao: valorCbsRetencao,
                quantidadeTributadaRetido: quantidadeTributadaRetido,
                aliquotaIbsRetido: aliquotaIbsRetido,
                valorIbsRetido: valorIbsRetido,
                aliquotaCbsRetido: aliquotaCbsRetido,
                valorCbsRetido: valorCbsRetido,
                percentualIbsDiferido: percentualIbsDiferido,
                valorIbsDiferido: valorIbsDiferido,
                percentualCbsDiferido: percentualCbsDiferido,
                valorCbsDiferido: valorCbsDiferido,
                totalIbs: totalIbs,
                totalCbs: totalCbs,
              ),
          createCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeDetalhe = const Value.absent(),
                Value<double?> quantidadeTributada = const Value.absent(),
                Value<double?> aliquotaIbs = const Value.absent(),
                Value<double?> aliquotaCbs = const Value.absent(),
                Value<double?> valorIbs = const Value.absent(),
                Value<double?> valorCbs = const Value.absent(),
                Value<double?> quantidadeTributadaRetencao =
                    const Value.absent(),
                Value<double?> aliquotaIbsRetencao = const Value.absent(),
                Value<double?> valorIbsRetencao = const Value.absent(),
                Value<double?> aliquotaCbsRetencao = const Value.absent(),
                Value<double?> valorCbsRetencao = const Value.absent(),
                Value<double?> quantidadeTributadaRetido = const Value.absent(),
                Value<double?> aliquotaIbsRetido = const Value.absent(),
                Value<double?> valorIbsRetido = const Value.absent(),
                Value<double?> aliquotaCbsRetido = const Value.absent(),
                Value<double?> valorCbsRetido = const Value.absent(),
                Value<double?> percentualIbsDiferido = const Value.absent(),
                Value<double?> valorIbsDiferido = const Value.absent(),
                Value<double?> percentualCbsDiferido = const Value.absent(),
                Value<double?> valorCbsDiferido = const Value.absent(),
                Value<double?> totalIbs = const Value.absent(),
                Value<double?> totalCbs = const Value.absent(),
              }) => NfeDetalheImpostoMonofasicosCompanion.insert(
                id: id,
                idNfeDetalhe: idNfeDetalhe,
                quantidadeTributada: quantidadeTributada,
                aliquotaIbs: aliquotaIbs,
                aliquotaCbs: aliquotaCbs,
                valorIbs: valorIbs,
                valorCbs: valorCbs,
                quantidadeTributadaRetencao: quantidadeTributadaRetencao,
                aliquotaIbsRetencao: aliquotaIbsRetencao,
                valorIbsRetencao: valorIbsRetencao,
                aliquotaCbsRetencao: aliquotaCbsRetencao,
                valorCbsRetencao: valorCbsRetencao,
                quantidadeTributadaRetido: quantidadeTributadaRetido,
                aliquotaIbsRetido: aliquotaIbsRetido,
                valorIbsRetido: valorIbsRetido,
                aliquotaCbsRetido: aliquotaCbsRetido,
                valorCbsRetido: valorCbsRetido,
                percentualIbsDiferido: percentualIbsDiferido,
                valorIbsDiferido: valorIbsDiferido,
                percentualCbsDiferido: percentualCbsDiferido,
                valorCbsDiferido: valorCbsDiferido,
                totalIbs: totalIbs,
                totalCbs: totalCbs,
              ),
          withReferenceMapper:
              (p0) =>
                  p0
                      .map(
                        (e) => (
                          e.readTable(table),
                          BaseReferences(db, table, e),
                        ),
                      )
                      .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$NfeDetalheImpostoMonofasicosTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $NfeDetalheImpostoMonofasicosTable,
      NfeDetalheImpostoMonofasico,
      $$NfeDetalheImpostoMonofasicosTableFilterComposer,
      $$NfeDetalheImpostoMonofasicosTableOrderingComposer,
      $$NfeDetalheImpostoMonofasicosTableAnnotationComposer,
      $$NfeDetalheImpostoMonofasicosTableCreateCompanionBuilder,
      $$NfeDetalheImpostoMonofasicosTableUpdateCompanionBuilder,
      (
        NfeDetalheImpostoMonofasico,
        BaseReferences<
          _$AppDatabase,
          $NfeDetalheImpostoMonofasicosTable,
          NfeDetalheImpostoMonofasico
        >,
      ),
      NfeDetalheImpostoMonofasico,
      PrefetchHooks Function()
    >;
typedef $$NfeDetalheTransfCreditosTableCreateCompanionBuilder =
    NfeDetalheTransfCreditosCompanion Function({
      Value<int?> id,
      Value<int?> idNfeDetalhe,
      Value<double?> valorIbs,
      Value<double?> valorCbs,
    });
typedef $$NfeDetalheTransfCreditosTableUpdateCompanionBuilder =
    NfeDetalheTransfCreditosCompanion Function({
      Value<int?> id,
      Value<int?> idNfeDetalhe,
      Value<double?> valorIbs,
      Value<double?> valorCbs,
    });

class $$NfeDetalheTransfCreditosTableFilterComposer
    extends Composer<_$AppDatabase, $NfeDetalheTransfCreditosTable> {
  $$NfeDetalheTransfCreditosTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorIbs => $composableBuilder(
    column: $table.valorIbs,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorCbs => $composableBuilder(
    column: $table.valorCbs,
    builder: (column) => ColumnFilters(column),
  );
}

class $$NfeDetalheTransfCreditosTableOrderingComposer
    extends Composer<_$AppDatabase, $NfeDetalheTransfCreditosTable> {
  $$NfeDetalheTransfCreditosTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorIbs => $composableBuilder(
    column: $table.valorIbs,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorCbs => $composableBuilder(
    column: $table.valorCbs,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$NfeDetalheTransfCreditosTableAnnotationComposer
    extends Composer<_$AppDatabase, $NfeDetalheTransfCreditosTable> {
  $$NfeDetalheTransfCreditosTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorIbs =>
      $composableBuilder(column: $table.valorIbs, builder: (column) => column);

  GeneratedColumn<double> get valorCbs =>
      $composableBuilder(column: $table.valorCbs, builder: (column) => column);
}

class $$NfeDetalheTransfCreditosTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $NfeDetalheTransfCreditosTable,
          NfeDetalheTransfCredito,
          $$NfeDetalheTransfCreditosTableFilterComposer,
          $$NfeDetalheTransfCreditosTableOrderingComposer,
          $$NfeDetalheTransfCreditosTableAnnotationComposer,
          $$NfeDetalheTransfCreditosTableCreateCompanionBuilder,
          $$NfeDetalheTransfCreditosTableUpdateCompanionBuilder,
          (
            NfeDetalheTransfCredito,
            BaseReferences<
              _$AppDatabase,
              $NfeDetalheTransfCreditosTable,
              NfeDetalheTransfCredito
            >,
          ),
          NfeDetalheTransfCredito,
          PrefetchHooks Function()
        > {
  $$NfeDetalheTransfCreditosTableTableManager(
    _$AppDatabase db,
    $NfeDetalheTransfCreditosTable table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer:
              () => $$NfeDetalheTransfCreditosTableFilterComposer(
                $db: db,
                $table: table,
              ),
          createOrderingComposer:
              () => $$NfeDetalheTransfCreditosTableOrderingComposer(
                $db: db,
                $table: table,
              ),
          createComputedFieldComposer:
              () => $$NfeDetalheTransfCreditosTableAnnotationComposer(
                $db: db,
                $table: table,
              ),
          updateCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeDetalhe = const Value.absent(),
                Value<double?> valorIbs = const Value.absent(),
                Value<double?> valorCbs = const Value.absent(),
              }) => NfeDetalheTransfCreditosCompanion(
                id: id,
                idNfeDetalhe: idNfeDetalhe,
                valorIbs: valorIbs,
                valorCbs: valorCbs,
              ),
          createCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeDetalhe = const Value.absent(),
                Value<double?> valorIbs = const Value.absent(),
                Value<double?> valorCbs = const Value.absent(),
              }) => NfeDetalheTransfCreditosCompanion.insert(
                id: id,
                idNfeDetalhe: idNfeDetalhe,
                valorIbs: valorIbs,
                valorCbs: valorCbs,
              ),
          withReferenceMapper:
              (p0) =>
                  p0
                      .map(
                        (e) => (
                          e.readTable(table),
                          BaseReferences(db, table, e),
                        ),
                      )
                      .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$NfeDetalheTransfCreditosTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $NfeDetalheTransfCreditosTable,
      NfeDetalheTransfCredito,
      $$NfeDetalheTransfCreditosTableFilterComposer,
      $$NfeDetalheTransfCreditosTableOrderingComposer,
      $$NfeDetalheTransfCreditosTableAnnotationComposer,
      $$NfeDetalheTransfCreditosTableCreateCompanionBuilder,
      $$NfeDetalheTransfCreditosTableUpdateCompanionBuilder,
      (
        NfeDetalheTransfCredito,
        BaseReferences<
          _$AppDatabase,
          $NfeDetalheTransfCreditosTable,
          NfeDetalheTransfCredito
        >,
      ),
      NfeDetalheTransfCredito,
      PrefetchHooks Function()
    >;
typedef $$NfeDetalheIbsZfmsTableCreateCompanionBuilder =
    NfeDetalheIbsZfmsCompanion Function({
      Value<int?> id,
      Value<int?> idNfeDetalhe,
      Value<String?> tipoCredito,
      Value<double?> valorCredito,
    });
typedef $$NfeDetalheIbsZfmsTableUpdateCompanionBuilder =
    NfeDetalheIbsZfmsCompanion Function({
      Value<int?> id,
      Value<int?> idNfeDetalhe,
      Value<String?> tipoCredito,
      Value<double?> valorCredito,
    });

class $$NfeDetalheIbsZfmsTableFilterComposer
    extends Composer<_$AppDatabase, $NfeDetalheIbsZfmsTable> {
  $$NfeDetalheIbsZfmsTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get tipoCredito => $composableBuilder(
    column: $table.tipoCredito,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorCredito => $composableBuilder(
    column: $table.valorCredito,
    builder: (column) => ColumnFilters(column),
  );
}

class $$NfeDetalheIbsZfmsTableOrderingComposer
    extends Composer<_$AppDatabase, $NfeDetalheIbsZfmsTable> {
  $$NfeDetalheIbsZfmsTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get tipoCredito => $composableBuilder(
    column: $table.tipoCredito,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorCredito => $composableBuilder(
    column: $table.valorCredito,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$NfeDetalheIbsZfmsTableAnnotationComposer
    extends Composer<_$AppDatabase, $NfeDetalheIbsZfmsTable> {
  $$NfeDetalheIbsZfmsTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => column,
  );

  GeneratedColumn<String> get tipoCredito => $composableBuilder(
    column: $table.tipoCredito,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorCredito => $composableBuilder(
    column: $table.valorCredito,
    builder: (column) => column,
  );
}

class $$NfeDetalheIbsZfmsTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $NfeDetalheIbsZfmsTable,
          NfeDetalheIbsZfm,
          $$NfeDetalheIbsZfmsTableFilterComposer,
          $$NfeDetalheIbsZfmsTableOrderingComposer,
          $$NfeDetalheIbsZfmsTableAnnotationComposer,
          $$NfeDetalheIbsZfmsTableCreateCompanionBuilder,
          $$NfeDetalheIbsZfmsTableUpdateCompanionBuilder,
          (
            NfeDetalheIbsZfm,
            BaseReferences<
              _$AppDatabase,
              $NfeDetalheIbsZfmsTable,
              NfeDetalheIbsZfm
            >,
          ),
          NfeDetalheIbsZfm,
          PrefetchHooks Function()
        > {
  $$NfeDetalheIbsZfmsTableTableManager(
    _$AppDatabase db,
    $NfeDetalheIbsZfmsTable table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer:
              () => $$NfeDetalheIbsZfmsTableFilterComposer(
                $db: db,
                $table: table,
              ),
          createOrderingComposer:
              () => $$NfeDetalheIbsZfmsTableOrderingComposer(
                $db: db,
                $table: table,
              ),
          createComputedFieldComposer:
              () => $$NfeDetalheIbsZfmsTableAnnotationComposer(
                $db: db,
                $table: table,
              ),
          updateCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeDetalhe = const Value.absent(),
                Value<String?> tipoCredito = const Value.absent(),
                Value<double?> valorCredito = const Value.absent(),
              }) => NfeDetalheIbsZfmsCompanion(
                id: id,
                idNfeDetalhe: idNfeDetalhe,
                tipoCredito: tipoCredito,
                valorCredito: valorCredito,
              ),
          createCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeDetalhe = const Value.absent(),
                Value<String?> tipoCredito = const Value.absent(),
                Value<double?> valorCredito = const Value.absent(),
              }) => NfeDetalheIbsZfmsCompanion.insert(
                id: id,
                idNfeDetalhe: idNfeDetalhe,
                tipoCredito: tipoCredito,
                valorCredito: valorCredito,
              ),
          withReferenceMapper:
              (p0) =>
                  p0
                      .map(
                        (e) => (
                          e.readTable(table),
                          BaseReferences(db, table, e),
                        ),
                      )
                      .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$NfeDetalheIbsZfmsTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $NfeDetalheIbsZfmsTable,
      NfeDetalheIbsZfm,
      $$NfeDetalheIbsZfmsTableFilterComposer,
      $$NfeDetalheIbsZfmsTableOrderingComposer,
      $$NfeDetalheIbsZfmsTableAnnotationComposer,
      $$NfeDetalheIbsZfmsTableCreateCompanionBuilder,
      $$NfeDetalheIbsZfmsTableUpdateCompanionBuilder,
      (
        NfeDetalheIbsZfm,
        BaseReferences<
          _$AppDatabase,
          $NfeDetalheIbsZfmsTable,
          NfeDetalheIbsZfm
        >,
      ),
      NfeDetalheIbsZfm,
      PrefetchHooks Function()
    >;
typedef $$NfeDetalheDfeReferenciadosTableCreateCompanionBuilder =
    NfeDetalheDfeReferenciadosCompanion Function({
      Value<int?> id,
      Value<int?> idNfeDetalhe,
      Value<String?> chaveAcesso,
      Value<int?> numeroItem,
    });
typedef $$NfeDetalheDfeReferenciadosTableUpdateCompanionBuilder =
    NfeDetalheDfeReferenciadosCompanion Function({
      Value<int?> id,
      Value<int?> idNfeDetalhe,
      Value<String?> chaveAcesso,
      Value<int?> numeroItem,
    });

class $$NfeDetalheDfeReferenciadosTableFilterComposer
    extends Composer<_$AppDatabase, $NfeDetalheDfeReferenciadosTable> {
  $$NfeDetalheDfeReferenciadosTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get chaveAcesso => $composableBuilder(
    column: $table.chaveAcesso,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get numeroItem => $composableBuilder(
    column: $table.numeroItem,
    builder: (column) => ColumnFilters(column),
  );
}

class $$NfeDetalheDfeReferenciadosTableOrderingComposer
    extends Composer<_$AppDatabase, $NfeDetalheDfeReferenciadosTable> {
  $$NfeDetalheDfeReferenciadosTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get chaveAcesso => $composableBuilder(
    column: $table.chaveAcesso,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get numeroItem => $composableBuilder(
    column: $table.numeroItem,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$NfeDetalheDfeReferenciadosTableAnnotationComposer
    extends Composer<_$AppDatabase, $NfeDetalheDfeReferenciadosTable> {
  $$NfeDetalheDfeReferenciadosTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => column,
  );

  GeneratedColumn<String> get chaveAcesso => $composableBuilder(
    column: $table.chaveAcesso,
    builder: (column) => column,
  );

  GeneratedColumn<int> get numeroItem => $composableBuilder(
    column: $table.numeroItem,
    builder: (column) => column,
  );
}

class $$NfeDetalheDfeReferenciadosTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $NfeDetalheDfeReferenciadosTable,
          NfeDetalheDfeReferenciado,
          $$NfeDetalheDfeReferenciadosTableFilterComposer,
          $$NfeDetalheDfeReferenciadosTableOrderingComposer,
          $$NfeDetalheDfeReferenciadosTableAnnotationComposer,
          $$NfeDetalheDfeReferenciadosTableCreateCompanionBuilder,
          $$NfeDetalheDfeReferenciadosTableUpdateCompanionBuilder,
          (
            NfeDetalheDfeReferenciado,
            BaseReferences<
              _$AppDatabase,
              $NfeDetalheDfeReferenciadosTable,
              NfeDetalheDfeReferenciado
            >,
          ),
          NfeDetalheDfeReferenciado,
          PrefetchHooks Function()
        > {
  $$NfeDetalheDfeReferenciadosTableTableManager(
    _$AppDatabase db,
    $NfeDetalheDfeReferenciadosTable table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer:
              () => $$NfeDetalheDfeReferenciadosTableFilterComposer(
                $db: db,
                $table: table,
              ),
          createOrderingComposer:
              () => $$NfeDetalheDfeReferenciadosTableOrderingComposer(
                $db: db,
                $table: table,
              ),
          createComputedFieldComposer:
              () => $$NfeDetalheDfeReferenciadosTableAnnotationComposer(
                $db: db,
                $table: table,
              ),
          updateCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeDetalhe = const Value.absent(),
                Value<String?> chaveAcesso = const Value.absent(),
                Value<int?> numeroItem = const Value.absent(),
              }) => NfeDetalheDfeReferenciadosCompanion(
                id: id,
                idNfeDetalhe: idNfeDetalhe,
                chaveAcesso: chaveAcesso,
                numeroItem: numeroItem,
              ),
          createCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeDetalhe = const Value.absent(),
                Value<String?> chaveAcesso = const Value.absent(),
                Value<int?> numeroItem = const Value.absent(),
              }) => NfeDetalheDfeReferenciadosCompanion.insert(
                id: id,
                idNfeDetalhe: idNfeDetalhe,
                chaveAcesso: chaveAcesso,
                numeroItem: numeroItem,
              ),
          withReferenceMapper:
              (p0) =>
                  p0
                      .map(
                        (e) => (
                          e.readTable(table),
                          BaseReferences(db, table, e),
                        ),
                      )
                      .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$NfeDetalheDfeReferenciadosTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $NfeDetalheDfeReferenciadosTable,
      NfeDetalheDfeReferenciado,
      $$NfeDetalheDfeReferenciadosTableFilterComposer,
      $$NfeDetalheDfeReferenciadosTableOrderingComposer,
      $$NfeDetalheDfeReferenciadosTableAnnotationComposer,
      $$NfeDetalheDfeReferenciadosTableCreateCompanionBuilder,
      $$NfeDetalheDfeReferenciadosTableUpdateCompanionBuilder,
      (
        NfeDetalheDfeReferenciado,
        BaseReferences<
          _$AppDatabase,
          $NfeDetalheDfeReferenciadosTable,
          NfeDetalheDfeReferenciado
        >,
      ),
      NfeDetalheDfeReferenciado,
      PrefetchHooks Function()
    >;
typedef $$NfeDetCombustivelOrigemsTableCreateCompanionBuilder =
    NfeDetCombustivelOrigemsCompanion Function({
      Value<int?> id,
      Value<int?> idNfeDetEspecificoCombustivel,
      Value<String?> indicadorImportacao,
      Value<int?> codigoUf,
      Value<double?> percentualOriginario,
    });
typedef $$NfeDetCombustivelOrigemsTableUpdateCompanionBuilder =
    NfeDetCombustivelOrigemsCompanion Function({
      Value<int?> id,
      Value<int?> idNfeDetEspecificoCombustivel,
      Value<String?> indicadorImportacao,
      Value<int?> codigoUf,
      Value<double?> percentualOriginario,
    });

class $$NfeDetCombustivelOrigemsTableFilterComposer
    extends Composer<_$AppDatabase, $NfeDetCombustivelOrigemsTable> {
  $$NfeDetCombustivelOrigemsTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idNfeDetEspecificoCombustivel => $composableBuilder(
    column: $table.idNfeDetEspecificoCombustivel,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get indicadorImportacao => $composableBuilder(
    column: $table.indicadorImportacao,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get codigoUf => $composableBuilder(
    column: $table.codigoUf,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get percentualOriginario => $composableBuilder(
    column: $table.percentualOriginario,
    builder: (column) => ColumnFilters(column),
  );
}

class $$NfeDetCombustivelOrigemsTableOrderingComposer
    extends Composer<_$AppDatabase, $NfeDetCombustivelOrigemsTable> {
  $$NfeDetCombustivelOrigemsTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idNfeDetEspecificoCombustivel => $composableBuilder(
    column: $table.idNfeDetEspecificoCombustivel,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get indicadorImportacao => $composableBuilder(
    column: $table.indicadorImportacao,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get codigoUf => $composableBuilder(
    column: $table.codigoUf,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get percentualOriginario => $composableBuilder(
    column: $table.percentualOriginario,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$NfeDetCombustivelOrigemsTableAnnotationComposer
    extends Composer<_$AppDatabase, $NfeDetCombustivelOrigemsTable> {
  $$NfeDetCombustivelOrigemsTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<int> get idNfeDetEspecificoCombustivel => $composableBuilder(
    column: $table.idNfeDetEspecificoCombustivel,
    builder: (column) => column,
  );

  GeneratedColumn<String> get indicadorImportacao => $composableBuilder(
    column: $table.indicadorImportacao,
    builder: (column) => column,
  );

  GeneratedColumn<int> get codigoUf =>
      $composableBuilder(column: $table.codigoUf, builder: (column) => column);

  GeneratedColumn<double> get percentualOriginario => $composableBuilder(
    column: $table.percentualOriginario,
    builder: (column) => column,
  );
}

class $$NfeDetCombustivelOrigemsTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $NfeDetCombustivelOrigemsTable,
          NfeDetCombustivelOrigem,
          $$NfeDetCombustivelOrigemsTableFilterComposer,
          $$NfeDetCombustivelOrigemsTableOrderingComposer,
          $$NfeDetCombustivelOrigemsTableAnnotationComposer,
          $$NfeDetCombustivelOrigemsTableCreateCompanionBuilder,
          $$NfeDetCombustivelOrigemsTableUpdateCompanionBuilder,
          (
            NfeDetCombustivelOrigem,
            BaseReferences<
              _$AppDatabase,
              $NfeDetCombustivelOrigemsTable,
              NfeDetCombustivelOrigem
            >,
          ),
          NfeDetCombustivelOrigem,
          PrefetchHooks Function()
        > {
  $$NfeDetCombustivelOrigemsTableTableManager(
    _$AppDatabase db,
    $NfeDetCombustivelOrigemsTable table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer:
              () => $$NfeDetCombustivelOrigemsTableFilterComposer(
                $db: db,
                $table: table,
              ),
          createOrderingComposer:
              () => $$NfeDetCombustivelOrigemsTableOrderingComposer(
                $db: db,
                $table: table,
              ),
          createComputedFieldComposer:
              () => $$NfeDetCombustivelOrigemsTableAnnotationComposer(
                $db: db,
                $table: table,
              ),
          updateCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeDetEspecificoCombustivel =
                    const Value.absent(),
                Value<String?> indicadorImportacao = const Value.absent(),
                Value<int?> codigoUf = const Value.absent(),
                Value<double?> percentualOriginario = const Value.absent(),
              }) => NfeDetCombustivelOrigemsCompanion(
                id: id,
                idNfeDetEspecificoCombustivel: idNfeDetEspecificoCombustivel,
                indicadorImportacao: indicadorImportacao,
                codigoUf: codigoUf,
                percentualOriginario: percentualOriginario,
              ),
          createCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeDetEspecificoCombustivel =
                    const Value.absent(),
                Value<String?> indicadorImportacao = const Value.absent(),
                Value<int?> codigoUf = const Value.absent(),
                Value<double?> percentualOriginario = const Value.absent(),
              }) => NfeDetCombustivelOrigemsCompanion.insert(
                id: id,
                idNfeDetEspecificoCombustivel: idNfeDetEspecificoCombustivel,
                indicadorImportacao: indicadorImportacao,
                codigoUf: codigoUf,
                percentualOriginario: percentualOriginario,
              ),
          withReferenceMapper:
              (p0) =>
                  p0
                      .map(
                        (e) => (
                          e.readTable(table),
                          BaseReferences(db, table, e),
                        ),
                      )
                      .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$NfeDetCombustivelOrigemsTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $NfeDetCombustivelOrigemsTable,
      NfeDetCombustivelOrigem,
      $$NfeDetCombustivelOrigemsTableFilterComposer,
      $$NfeDetCombustivelOrigemsTableOrderingComposer,
      $$NfeDetCombustivelOrigemsTableAnnotationComposer,
      $$NfeDetCombustivelOrigemsTableCreateCompanionBuilder,
      $$NfeDetCombustivelOrigemsTableUpdateCompanionBuilder,
      (
        NfeDetCombustivelOrigem,
        BaseReferences<
          _$AppDatabase,
          $NfeDetCombustivelOrigemsTable,
          NfeDetCombustivelOrigem
        >,
      ),
      NfeDetCombustivelOrigem,
      PrefetchHooks Function()
    >;
typedef $$NfeInformacaoAgropecuariosTableCreateCompanionBuilder =
    NfeInformacaoAgropecuariosCompanion Function({
      Value<int?> id,
      Value<int?> idNfeCabecalho,
      Value<String?> numeroReceituario,
      Value<String?> cpfResponsavelTecnico,
      Value<String?> guiaTipo,
      Value<String?> guiaUfEmissao,
      Value<String?> guiaSerie,
      Value<String?> guiaNumero,
    });
typedef $$NfeInformacaoAgropecuariosTableUpdateCompanionBuilder =
    NfeInformacaoAgropecuariosCompanion Function({
      Value<int?> id,
      Value<int?> idNfeCabecalho,
      Value<String?> numeroReceituario,
      Value<String?> cpfResponsavelTecnico,
      Value<String?> guiaTipo,
      Value<String?> guiaUfEmissao,
      Value<String?> guiaSerie,
      Value<String?> guiaNumero,
    });

class $$NfeInformacaoAgropecuariosTableFilterComposer
    extends Composer<_$AppDatabase, $NfeInformacaoAgropecuariosTable> {
  $$NfeInformacaoAgropecuariosTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idNfeCabecalho => $composableBuilder(
    column: $table.idNfeCabecalho,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get numeroReceituario => $composableBuilder(
    column: $table.numeroReceituario,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get cpfResponsavelTecnico => $composableBuilder(
    column: $table.cpfResponsavelTecnico,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get guiaTipo => $composableBuilder(
    column: $table.guiaTipo,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get guiaUfEmissao => $composableBuilder(
    column: $table.guiaUfEmissao,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get guiaSerie => $composableBuilder(
    column: $table.guiaSerie,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get guiaNumero => $composableBuilder(
    column: $table.guiaNumero,
    builder: (column) => ColumnFilters(column),
  );
}

class $$NfeInformacaoAgropecuariosTableOrderingComposer
    extends Composer<_$AppDatabase, $NfeInformacaoAgropecuariosTable> {
  $$NfeInformacaoAgropecuariosTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idNfeCabecalho => $composableBuilder(
    column: $table.idNfeCabecalho,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get numeroReceituario => $composableBuilder(
    column: $table.numeroReceituario,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get cpfResponsavelTecnico => $composableBuilder(
    column: $table.cpfResponsavelTecnico,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get guiaTipo => $composableBuilder(
    column: $table.guiaTipo,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get guiaUfEmissao => $composableBuilder(
    column: $table.guiaUfEmissao,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get guiaSerie => $composableBuilder(
    column: $table.guiaSerie,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get guiaNumero => $composableBuilder(
    column: $table.guiaNumero,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$NfeInformacaoAgropecuariosTableAnnotationComposer
    extends Composer<_$AppDatabase, $NfeInformacaoAgropecuariosTable> {
  $$NfeInformacaoAgropecuariosTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<int> get idNfeCabecalho => $composableBuilder(
    column: $table.idNfeCabecalho,
    builder: (column) => column,
  );

  GeneratedColumn<String> get numeroReceituario => $composableBuilder(
    column: $table.numeroReceituario,
    builder: (column) => column,
  );

  GeneratedColumn<String> get cpfResponsavelTecnico => $composableBuilder(
    column: $table.cpfResponsavelTecnico,
    builder: (column) => column,
  );

  GeneratedColumn<String> get guiaTipo =>
      $composableBuilder(column: $table.guiaTipo, builder: (column) => column);

  GeneratedColumn<String> get guiaUfEmissao => $composableBuilder(
    column: $table.guiaUfEmissao,
    builder: (column) => column,
  );

  GeneratedColumn<String> get guiaSerie =>
      $composableBuilder(column: $table.guiaSerie, builder: (column) => column);

  GeneratedColumn<String> get guiaNumero => $composableBuilder(
    column: $table.guiaNumero,
    builder: (column) => column,
  );
}

class $$NfeInformacaoAgropecuariosTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $NfeInformacaoAgropecuariosTable,
          NfeInformacaoAgropecuario,
          $$NfeInformacaoAgropecuariosTableFilterComposer,
          $$NfeInformacaoAgropecuariosTableOrderingComposer,
          $$NfeInformacaoAgropecuariosTableAnnotationComposer,
          $$NfeInformacaoAgropecuariosTableCreateCompanionBuilder,
          $$NfeInformacaoAgropecuariosTableUpdateCompanionBuilder,
          (
            NfeInformacaoAgropecuario,
            BaseReferences<
              _$AppDatabase,
              $NfeInformacaoAgropecuariosTable,
              NfeInformacaoAgropecuario
            >,
          ),
          NfeInformacaoAgropecuario,
          PrefetchHooks Function()
        > {
  $$NfeInformacaoAgropecuariosTableTableManager(
    _$AppDatabase db,
    $NfeInformacaoAgropecuariosTable table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer:
              () => $$NfeInformacaoAgropecuariosTableFilterComposer(
                $db: db,
                $table: table,
              ),
          createOrderingComposer:
              () => $$NfeInformacaoAgropecuariosTableOrderingComposer(
                $db: db,
                $table: table,
              ),
          createComputedFieldComposer:
              () => $$NfeInformacaoAgropecuariosTableAnnotationComposer(
                $db: db,
                $table: table,
              ),
          updateCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeCabecalho = const Value.absent(),
                Value<String?> numeroReceituario = const Value.absent(),
                Value<String?> cpfResponsavelTecnico = const Value.absent(),
                Value<String?> guiaTipo = const Value.absent(),
                Value<String?> guiaUfEmissao = const Value.absent(),
                Value<String?> guiaSerie = const Value.absent(),
                Value<String?> guiaNumero = const Value.absent(),
              }) => NfeInformacaoAgropecuariosCompanion(
                id: id,
                idNfeCabecalho: idNfeCabecalho,
                numeroReceituario: numeroReceituario,
                cpfResponsavelTecnico: cpfResponsavelTecnico,
                guiaTipo: guiaTipo,
                guiaUfEmissao: guiaUfEmissao,
                guiaSerie: guiaSerie,
                guiaNumero: guiaNumero,
              ),
          createCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeCabecalho = const Value.absent(),
                Value<String?> numeroReceituario = const Value.absent(),
                Value<String?> cpfResponsavelTecnico = const Value.absent(),
                Value<String?> guiaTipo = const Value.absent(),
                Value<String?> guiaUfEmissao = const Value.absent(),
                Value<String?> guiaSerie = const Value.absent(),
                Value<String?> guiaNumero = const Value.absent(),
              }) => NfeInformacaoAgropecuariosCompanion.insert(
                id: id,
                idNfeCabecalho: idNfeCabecalho,
                numeroReceituario: numeroReceituario,
                cpfResponsavelTecnico: cpfResponsavelTecnico,
                guiaTipo: guiaTipo,
                guiaUfEmissao: guiaUfEmissao,
                guiaSerie: guiaSerie,
                guiaNumero: guiaNumero,
              ),
          withReferenceMapper:
              (p0) =>
                  p0
                      .map(
                        (e) => (
                          e.readTable(table),
                          BaseReferences(db, table, e),
                        ),
                      )
                      .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$NfeInformacaoAgropecuariosTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $NfeInformacaoAgropecuariosTable,
      NfeInformacaoAgropecuario,
      $$NfeInformacaoAgropecuariosTableFilterComposer,
      $$NfeInformacaoAgropecuariosTableOrderingComposer,
      $$NfeInformacaoAgropecuariosTableAnnotationComposer,
      $$NfeInformacaoAgropecuariosTableCreateCompanionBuilder,
      $$NfeInformacaoAgropecuariosTableUpdateCompanionBuilder,
      (
        NfeInformacaoAgropecuario,
        BaseReferences<
          _$AppDatabase,
          $NfeInformacaoAgropecuariosTable,
          NfeInformacaoAgropecuario
        >,
      ),
      NfeInformacaoAgropecuario,
      PrefetchHooks Function()
    >;
typedef $$ProdutoGruposTableCreateCompanionBuilder =
    ProdutoGruposCompanion Function({
      Value<int?> id,
      Value<String?> nome,
      Value<String?> descricao,
    });
typedef $$ProdutoGruposTableUpdateCompanionBuilder =
    ProdutoGruposCompanion Function({
      Value<int?> id,
      Value<String?> nome,
      Value<String?> descricao,
    });

class $$ProdutoGruposTableFilterComposer
    extends Composer<_$AppDatabase, $ProdutoGruposTable> {
  $$ProdutoGruposTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get nome => $composableBuilder(
    column: $table.nome,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get descricao => $composableBuilder(
    column: $table.descricao,
    builder: (column) => ColumnFilters(column),
  );
}

class $$ProdutoGruposTableOrderingComposer
    extends Composer<_$AppDatabase, $ProdutoGruposTable> {
  $$ProdutoGruposTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get nome => $composableBuilder(
    column: $table.nome,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get descricao => $composableBuilder(
    column: $table.descricao,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$ProdutoGruposTableAnnotationComposer
    extends Composer<_$AppDatabase, $ProdutoGruposTable> {
  $$ProdutoGruposTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<String> get nome =>
      $composableBuilder(column: $table.nome, builder: (column) => column);

  GeneratedColumn<String> get descricao =>
      $composableBuilder(column: $table.descricao, builder: (column) => column);
}

class $$ProdutoGruposTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $ProdutoGruposTable,
          ProdutoGrupo,
          $$ProdutoGruposTableFilterComposer,
          $$ProdutoGruposTableOrderingComposer,
          $$ProdutoGruposTableAnnotationComposer,
          $$ProdutoGruposTableCreateCompanionBuilder,
          $$ProdutoGruposTableUpdateCompanionBuilder,
          (
            ProdutoGrupo,
            BaseReferences<_$AppDatabase, $ProdutoGruposTable, ProdutoGrupo>,
          ),
          ProdutoGrupo,
          PrefetchHooks Function()
        > {
  $$ProdutoGruposTableTableManager(_$AppDatabase db, $ProdutoGruposTable table)
    : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer:
              () => $$ProdutoGruposTableFilterComposer($db: db, $table: table),
          createOrderingComposer:
              () =>
                  $$ProdutoGruposTableOrderingComposer($db: db, $table: table),
          createComputedFieldComposer:
              () => $$ProdutoGruposTableAnnotationComposer(
                $db: db,
                $table: table,
              ),
          updateCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<String?> nome = const Value.absent(),
                Value<String?> descricao = const Value.absent(),
              }) => ProdutoGruposCompanion(
                id: id,
                nome: nome,
                descricao: descricao,
              ),
          createCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<String?> nome = const Value.absent(),
                Value<String?> descricao = const Value.absent(),
              }) => ProdutoGruposCompanion.insert(
                id: id,
                nome: nome,
                descricao: descricao,
              ),
          withReferenceMapper:
              (p0) =>
                  p0
                      .map(
                        (e) => (
                          e.readTable(table),
                          BaseReferences(db, table, e),
                        ),
                      )
                      .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$ProdutoGruposTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $ProdutoGruposTable,
      ProdutoGrupo,
      $$ProdutoGruposTableFilterComposer,
      $$ProdutoGruposTableOrderingComposer,
      $$ProdutoGruposTableAnnotationComposer,
      $$ProdutoGruposTableCreateCompanionBuilder,
      $$ProdutoGruposTableUpdateCompanionBuilder,
      (
        ProdutoGrupo,
        BaseReferences<_$AppDatabase, $ProdutoGruposTable, ProdutoGrupo>,
      ),
      ProdutoGrupo,
      PrefetchHooks Function()
    >;
typedef $$ProdutoSubgruposTableCreateCompanionBuilder =
    ProdutoSubgruposCompanion Function({
      Value<int?> id,
      Value<int?> idProdutoGrupo,
      Value<String?> nome,
      Value<String?> descricao,
    });
typedef $$ProdutoSubgruposTableUpdateCompanionBuilder =
    ProdutoSubgruposCompanion Function({
      Value<int?> id,
      Value<int?> idProdutoGrupo,
      Value<String?> nome,
      Value<String?> descricao,
    });

class $$ProdutoSubgruposTableFilterComposer
    extends Composer<_$AppDatabase, $ProdutoSubgruposTable> {
  $$ProdutoSubgruposTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idProdutoGrupo => $composableBuilder(
    column: $table.idProdutoGrupo,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get nome => $composableBuilder(
    column: $table.nome,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get descricao => $composableBuilder(
    column: $table.descricao,
    builder: (column) => ColumnFilters(column),
  );
}

class $$ProdutoSubgruposTableOrderingComposer
    extends Composer<_$AppDatabase, $ProdutoSubgruposTable> {
  $$ProdutoSubgruposTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idProdutoGrupo => $composableBuilder(
    column: $table.idProdutoGrupo,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get nome => $composableBuilder(
    column: $table.nome,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get descricao => $composableBuilder(
    column: $table.descricao,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$ProdutoSubgruposTableAnnotationComposer
    extends Composer<_$AppDatabase, $ProdutoSubgruposTable> {
  $$ProdutoSubgruposTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<int> get idProdutoGrupo => $composableBuilder(
    column: $table.idProdutoGrupo,
    builder: (column) => column,
  );

  GeneratedColumn<String> get nome =>
      $composableBuilder(column: $table.nome, builder: (column) => column);

  GeneratedColumn<String> get descricao =>
      $composableBuilder(column: $table.descricao, builder: (column) => column);
}

class $$ProdutoSubgruposTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $ProdutoSubgruposTable,
          ProdutoSubgrupo,
          $$ProdutoSubgruposTableFilterComposer,
          $$ProdutoSubgruposTableOrderingComposer,
          $$ProdutoSubgruposTableAnnotationComposer,
          $$ProdutoSubgruposTableCreateCompanionBuilder,
          $$ProdutoSubgruposTableUpdateCompanionBuilder,
          (
            ProdutoSubgrupo,
            BaseReferences<
              _$AppDatabase,
              $ProdutoSubgruposTable,
              ProdutoSubgrupo
            >,
          ),
          ProdutoSubgrupo,
          PrefetchHooks Function()
        > {
  $$ProdutoSubgruposTableTableManager(
    _$AppDatabase db,
    $ProdutoSubgruposTable table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer:
              () =>
                  $$ProdutoSubgruposTableFilterComposer($db: db, $table: table),
          createOrderingComposer:
              () => $$ProdutoSubgruposTableOrderingComposer(
                $db: db,
                $table: table,
              ),
          createComputedFieldComposer:
              () => $$ProdutoSubgruposTableAnnotationComposer(
                $db: db,
                $table: table,
              ),
          updateCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idProdutoGrupo = const Value.absent(),
                Value<String?> nome = const Value.absent(),
                Value<String?> descricao = const Value.absent(),
              }) => ProdutoSubgruposCompanion(
                id: id,
                idProdutoGrupo: idProdutoGrupo,
                nome: nome,
                descricao: descricao,
              ),
          createCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idProdutoGrupo = const Value.absent(),
                Value<String?> nome = const Value.absent(),
                Value<String?> descricao = const Value.absent(),
              }) => ProdutoSubgruposCompanion.insert(
                id: id,
                idProdutoGrupo: idProdutoGrupo,
                nome: nome,
                descricao: descricao,
              ),
          withReferenceMapper:
              (p0) =>
                  p0
                      .map(
                        (e) => (
                          e.readTable(table),
                          BaseReferences(db, table, e),
                        ),
                      )
                      .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$ProdutoSubgruposTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $ProdutoSubgruposTable,
      ProdutoSubgrupo,
      $$ProdutoSubgruposTableFilterComposer,
      $$ProdutoSubgruposTableOrderingComposer,
      $$ProdutoSubgruposTableAnnotationComposer,
      $$ProdutoSubgruposTableCreateCompanionBuilder,
      $$ProdutoSubgruposTableUpdateCompanionBuilder,
      (
        ProdutoSubgrupo,
        BaseReferences<_$AppDatabase, $ProdutoSubgruposTable, ProdutoSubgrupo>,
      ),
      ProdutoSubgrupo,
      PrefetchHooks Function()
    >;
typedef $$ProdutoMarcasTableCreateCompanionBuilder =
    ProdutoMarcasCompanion Function({
      Value<int?> id,
      Value<String?> nome,
      Value<String?> descricao,
    });
typedef $$ProdutoMarcasTableUpdateCompanionBuilder =
    ProdutoMarcasCompanion Function({
      Value<int?> id,
      Value<String?> nome,
      Value<String?> descricao,
    });

class $$ProdutoMarcasTableFilterComposer
    extends Composer<_$AppDatabase, $ProdutoMarcasTable> {
  $$ProdutoMarcasTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get nome => $composableBuilder(
    column: $table.nome,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get descricao => $composableBuilder(
    column: $table.descricao,
    builder: (column) => ColumnFilters(column),
  );
}

class $$ProdutoMarcasTableOrderingComposer
    extends Composer<_$AppDatabase, $ProdutoMarcasTable> {
  $$ProdutoMarcasTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get nome => $composableBuilder(
    column: $table.nome,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get descricao => $composableBuilder(
    column: $table.descricao,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$ProdutoMarcasTableAnnotationComposer
    extends Composer<_$AppDatabase, $ProdutoMarcasTable> {
  $$ProdutoMarcasTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<String> get nome =>
      $composableBuilder(column: $table.nome, builder: (column) => column);

  GeneratedColumn<String> get descricao =>
      $composableBuilder(column: $table.descricao, builder: (column) => column);
}

class $$ProdutoMarcasTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $ProdutoMarcasTable,
          ProdutoMarca,
          $$ProdutoMarcasTableFilterComposer,
          $$ProdutoMarcasTableOrderingComposer,
          $$ProdutoMarcasTableAnnotationComposer,
          $$ProdutoMarcasTableCreateCompanionBuilder,
          $$ProdutoMarcasTableUpdateCompanionBuilder,
          (
            ProdutoMarca,
            BaseReferences<_$AppDatabase, $ProdutoMarcasTable, ProdutoMarca>,
          ),
          ProdutoMarca,
          PrefetchHooks Function()
        > {
  $$ProdutoMarcasTableTableManager(_$AppDatabase db, $ProdutoMarcasTable table)
    : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer:
              () => $$ProdutoMarcasTableFilterComposer($db: db, $table: table),
          createOrderingComposer:
              () =>
                  $$ProdutoMarcasTableOrderingComposer($db: db, $table: table),
          createComputedFieldComposer:
              () => $$ProdutoMarcasTableAnnotationComposer(
                $db: db,
                $table: table,
              ),
          updateCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<String?> nome = const Value.absent(),
                Value<String?> descricao = const Value.absent(),
              }) => ProdutoMarcasCompanion(
                id: id,
                nome: nome,
                descricao: descricao,
              ),
          createCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<String?> nome = const Value.absent(),
                Value<String?> descricao = const Value.absent(),
              }) => ProdutoMarcasCompanion.insert(
                id: id,
                nome: nome,
                descricao: descricao,
              ),
          withReferenceMapper:
              (p0) =>
                  p0
                      .map(
                        (e) => (
                          e.readTable(table),
                          BaseReferences(db, table, e),
                        ),
                      )
                      .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$ProdutoMarcasTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $ProdutoMarcasTable,
      ProdutoMarca,
      $$ProdutoMarcasTableFilterComposer,
      $$ProdutoMarcasTableOrderingComposer,
      $$ProdutoMarcasTableAnnotationComposer,
      $$ProdutoMarcasTableCreateCompanionBuilder,
      $$ProdutoMarcasTableUpdateCompanionBuilder,
      (
        ProdutoMarca,
        BaseReferences<_$AppDatabase, $ProdutoMarcasTable, ProdutoMarca>,
      ),
      ProdutoMarca,
      PrefetchHooks Function()
    >;
typedef $$ProdutoUnidadesTableCreateCompanionBuilder =
    ProdutoUnidadesCompanion Function({
      Value<int?> id,
      Value<String?> sigla,
      Value<String?> descricao,
      Value<String?> podeFracionar,
    });
typedef $$ProdutoUnidadesTableUpdateCompanionBuilder =
    ProdutoUnidadesCompanion Function({
      Value<int?> id,
      Value<String?> sigla,
      Value<String?> descricao,
      Value<String?> podeFracionar,
    });

class $$ProdutoUnidadesTableFilterComposer
    extends Composer<_$AppDatabase, $ProdutoUnidadesTable> {
  $$ProdutoUnidadesTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get sigla => $composableBuilder(
    column: $table.sigla,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get descricao => $composableBuilder(
    column: $table.descricao,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get podeFracionar => $composableBuilder(
    column: $table.podeFracionar,
    builder: (column) => ColumnFilters(column),
  );
}

class $$ProdutoUnidadesTableOrderingComposer
    extends Composer<_$AppDatabase, $ProdutoUnidadesTable> {
  $$ProdutoUnidadesTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get sigla => $composableBuilder(
    column: $table.sigla,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get descricao => $composableBuilder(
    column: $table.descricao,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get podeFracionar => $composableBuilder(
    column: $table.podeFracionar,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$ProdutoUnidadesTableAnnotationComposer
    extends Composer<_$AppDatabase, $ProdutoUnidadesTable> {
  $$ProdutoUnidadesTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<String> get sigla =>
      $composableBuilder(column: $table.sigla, builder: (column) => column);

  GeneratedColumn<String> get descricao =>
      $composableBuilder(column: $table.descricao, builder: (column) => column);

  GeneratedColumn<String> get podeFracionar => $composableBuilder(
    column: $table.podeFracionar,
    builder: (column) => column,
  );
}

class $$ProdutoUnidadesTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $ProdutoUnidadesTable,
          ProdutoUnidade,
          $$ProdutoUnidadesTableFilterComposer,
          $$ProdutoUnidadesTableOrderingComposer,
          $$ProdutoUnidadesTableAnnotationComposer,
          $$ProdutoUnidadesTableCreateCompanionBuilder,
          $$ProdutoUnidadesTableUpdateCompanionBuilder,
          (
            ProdutoUnidade,
            BaseReferences<
              _$AppDatabase,
              $ProdutoUnidadesTable,
              ProdutoUnidade
            >,
          ),
          ProdutoUnidade,
          PrefetchHooks Function()
        > {
  $$ProdutoUnidadesTableTableManager(
    _$AppDatabase db,
    $ProdutoUnidadesTable table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer:
              () =>
                  $$ProdutoUnidadesTableFilterComposer($db: db, $table: table),
          createOrderingComposer:
              () => $$ProdutoUnidadesTableOrderingComposer(
                $db: db,
                $table: table,
              ),
          createComputedFieldComposer:
              () => $$ProdutoUnidadesTableAnnotationComposer(
                $db: db,
                $table: table,
              ),
          updateCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<String?> sigla = const Value.absent(),
                Value<String?> descricao = const Value.absent(),
                Value<String?> podeFracionar = const Value.absent(),
              }) => ProdutoUnidadesCompanion(
                id: id,
                sigla: sigla,
                descricao: descricao,
                podeFracionar: podeFracionar,
              ),
          createCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<String?> sigla = const Value.absent(),
                Value<String?> descricao = const Value.absent(),
                Value<String?> podeFracionar = const Value.absent(),
              }) => ProdutoUnidadesCompanion.insert(
                id: id,
                sigla: sigla,
                descricao: descricao,
                podeFracionar: podeFracionar,
              ),
          withReferenceMapper:
              (p0) =>
                  p0
                      .map(
                        (e) => (
                          e.readTable(table),
                          BaseReferences(db, table, e),
                        ),
                      )
                      .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$ProdutoUnidadesTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $ProdutoUnidadesTable,
      ProdutoUnidade,
      $$ProdutoUnidadesTableFilterComposer,
      $$ProdutoUnidadesTableOrderingComposer,
      $$ProdutoUnidadesTableAnnotationComposer,
      $$ProdutoUnidadesTableCreateCompanionBuilder,
      $$ProdutoUnidadesTableUpdateCompanionBuilder,
      (
        ProdutoUnidade,
        BaseReferences<_$AppDatabase, $ProdutoUnidadesTable, ProdutoUnidade>,
      ),
      ProdutoUnidade,
      PrefetchHooks Function()
    >;
typedef $$NfeCabecalhosTableCreateCompanionBuilder =
    NfeCabecalhosCompanion Function({
      Value<int?> id,
      Value<int?> idVendaCabecalho,
      Value<int?> idTributOperacaoFiscal,
      Value<int?> idCliente,
      Value<int?> idColaborador,
      Value<int?> idFornecedor,
      Value<String?> ufEmitente,
      Value<String?> codigoNumerico,
      Value<String?> naturezaOperacao,
      Value<String?> codigoModelo,
      Value<String?> serie,
      Value<String?> numero,
      Value<DateTime?> dataHoraEmissao,
      Value<DateTime?> dataHoraEntradaSaida,
      Value<String?> tipoOperacao,
      Value<String?> localDestino,
      Value<int?> codigoMunicipio,
      Value<String?> formatoImpressaoDanfe,
      Value<String?> tipoEmissao,
      Value<String?> chaveAcesso,
      Value<String?> digitoChaveAcesso,
      Value<String?> ambiente,
      Value<String?> finalidadeEmissao,
      Value<String?> consumidorOperacao,
      Value<String?> consumidorPresenca,
      Value<String?> processoEmissao,
      Value<String?> versaoProcessoEmissao,
      Value<DateTime?> dataEntradaContingencia,
      Value<String?> justificativaContingencia,
      Value<double?> baseCalculoIcms,
      Value<double?> valorIcms,
      Value<double?> valorIcmsDesonerado,
      Value<double?> totalIcmsFcpUfDestino,
      Value<double?> totalIcmsInterestadualUfDestino,
      Value<double?> totalIcmsInterestadualUfRemetente,
      Value<double?> valorTotalFcp,
      Value<double?> baseCalculoIcmsSt,
      Value<double?> valorIcmsSt,
      Value<double?> valorTotalFcpSt,
      Value<double?> valorTotalFcpStRetido,
      Value<double?> valorTotalProdutos,
      Value<double?> valorFrete,
      Value<double?> valorSeguro,
      Value<double?> valorDesconto,
      Value<double?> valorImpostoImportacao,
      Value<double?> valorIpi,
      Value<double?> valorIpiDevolvido,
      Value<double?> valorPis,
      Value<double?> valorCofins,
      Value<double?> valorDespesasAcessorias,
      Value<double?> valorTotal,
      Value<double?> valorTotalTributos,
      Value<double?> valorServicos,
      Value<double?> baseCalculoIssqn,
      Value<double?> valorIssqn,
      Value<double?> valorPisIssqn,
      Value<double?> valorCofinsIssqn,
      Value<DateTime?> dataPrestacaoServico,
      Value<double?> valorDeducaoIssqn,
      Value<double?> outrasRetencoesIssqn,
      Value<double?> descontoIncondicionadoIssqn,
      Value<double?> descontoCondicionadoIssqn,
      Value<double?> totalRetencaoIssqn,
      Value<String?> regimeEspecialTributacao,
      Value<double?> valorRetidoPis,
      Value<double?> valorRetidoCofins,
      Value<double?> valorRetidoCsll,
      Value<double?> baseCalculoIrrf,
      Value<double?> valorRetidoIrrf,
      Value<double?> baseCalculoPrevidencia,
      Value<double?> valorRetidoPrevidencia,
      Value<String?> informacoesAddFisco,
      Value<String?> informacoesAddContribuinte,
      Value<String?> comexUfEmbarque,
      Value<String?> comexLocalEmbarque,
      Value<String?> comexLocalDespacho,
      Value<String?> compraNotaEmpenho,
      Value<String?> compraPedido,
      Value<String?> compraContrato,
      Value<String?> qrcode,
      Value<String?> urlChave,
      Value<String?> statusNota,
      Value<String?> indicadorIntermediario,
      Value<String?> intermediadorCnpj,
      Value<String?> intermediadorIdCadastro,
      Value<int?> codigoMunicipioFgIbs,
      Value<String?> tipoNotaDebito,
      Value<String?> tipoNotaCredito,
      Value<double?> totalImpostoSeletivo,
      Value<double?> totalBcIbsCbs,
      Value<double?> ibsUfTotalDiferimento,
      Value<double?> ibsUfTotalDevTributos,
      Value<double?> ibsUfValorTotal,
      Value<double?> ibsMunTotalDiferimento,
      Value<double?> ibsMunTotalDevTributos,
      Value<double?> ibsMunValorTotal,
      Value<double?> cbsTotalDiferimento,
      Value<double?> cbsTotalDevTributos,
      Value<double?> cbsValorTotal,
      Value<double?> cbsTotalCreditoPresumido,
      Value<double?> cbsTotCrePreSuspensivo,
      Value<double?> monoIbsTotal,
      Value<double?> monoCbsTotal,
      Value<double?> monoIbsTotalRetencao,
      Value<double?> monoCbsTotalRetencao,
      Value<double?> monoIbsRetido,
      Value<double?> monoCbsRetido,
      Value<double?> valorTotalNfe,
      Value<double?> totalQtdeTributadaMono,
      Value<double?> totalIcmsMono,
      Value<double?> totalQuantidadeMonoRetencao,
      Value<double?> totalIcmsMonoRetencao,
      Value<double?> totalQuantidadeMonoRetida,
      Value<double?> totalIcmsMonoRetido,
      Value<double?> ibsValorTotal,
      Value<double?> totalCreditoPresumido,
      Value<double?> totalCredPresSuspensivo,
    });
typedef $$NfeCabecalhosTableUpdateCompanionBuilder =
    NfeCabecalhosCompanion Function({
      Value<int?> id,
      Value<int?> idVendaCabecalho,
      Value<int?> idTributOperacaoFiscal,
      Value<int?> idCliente,
      Value<int?> idColaborador,
      Value<int?> idFornecedor,
      Value<String?> ufEmitente,
      Value<String?> codigoNumerico,
      Value<String?> naturezaOperacao,
      Value<String?> codigoModelo,
      Value<String?> serie,
      Value<String?> numero,
      Value<DateTime?> dataHoraEmissao,
      Value<DateTime?> dataHoraEntradaSaida,
      Value<String?> tipoOperacao,
      Value<String?> localDestino,
      Value<int?> codigoMunicipio,
      Value<String?> formatoImpressaoDanfe,
      Value<String?> tipoEmissao,
      Value<String?> chaveAcesso,
      Value<String?> digitoChaveAcesso,
      Value<String?> ambiente,
      Value<String?> finalidadeEmissao,
      Value<String?> consumidorOperacao,
      Value<String?> consumidorPresenca,
      Value<String?> processoEmissao,
      Value<String?> versaoProcessoEmissao,
      Value<DateTime?> dataEntradaContingencia,
      Value<String?> justificativaContingencia,
      Value<double?> baseCalculoIcms,
      Value<double?> valorIcms,
      Value<double?> valorIcmsDesonerado,
      Value<double?> totalIcmsFcpUfDestino,
      Value<double?> totalIcmsInterestadualUfDestino,
      Value<double?> totalIcmsInterestadualUfRemetente,
      Value<double?> valorTotalFcp,
      Value<double?> baseCalculoIcmsSt,
      Value<double?> valorIcmsSt,
      Value<double?> valorTotalFcpSt,
      Value<double?> valorTotalFcpStRetido,
      Value<double?> valorTotalProdutos,
      Value<double?> valorFrete,
      Value<double?> valorSeguro,
      Value<double?> valorDesconto,
      Value<double?> valorImpostoImportacao,
      Value<double?> valorIpi,
      Value<double?> valorIpiDevolvido,
      Value<double?> valorPis,
      Value<double?> valorCofins,
      Value<double?> valorDespesasAcessorias,
      Value<double?> valorTotal,
      Value<double?> valorTotalTributos,
      Value<double?> valorServicos,
      Value<double?> baseCalculoIssqn,
      Value<double?> valorIssqn,
      Value<double?> valorPisIssqn,
      Value<double?> valorCofinsIssqn,
      Value<DateTime?> dataPrestacaoServico,
      Value<double?> valorDeducaoIssqn,
      Value<double?> outrasRetencoesIssqn,
      Value<double?> descontoIncondicionadoIssqn,
      Value<double?> descontoCondicionadoIssqn,
      Value<double?> totalRetencaoIssqn,
      Value<String?> regimeEspecialTributacao,
      Value<double?> valorRetidoPis,
      Value<double?> valorRetidoCofins,
      Value<double?> valorRetidoCsll,
      Value<double?> baseCalculoIrrf,
      Value<double?> valorRetidoIrrf,
      Value<double?> baseCalculoPrevidencia,
      Value<double?> valorRetidoPrevidencia,
      Value<String?> informacoesAddFisco,
      Value<String?> informacoesAddContribuinte,
      Value<String?> comexUfEmbarque,
      Value<String?> comexLocalEmbarque,
      Value<String?> comexLocalDespacho,
      Value<String?> compraNotaEmpenho,
      Value<String?> compraPedido,
      Value<String?> compraContrato,
      Value<String?> qrcode,
      Value<String?> urlChave,
      Value<String?> statusNota,
      Value<String?> indicadorIntermediario,
      Value<String?> intermediadorCnpj,
      Value<String?> intermediadorIdCadastro,
      Value<int?> codigoMunicipioFgIbs,
      Value<String?> tipoNotaDebito,
      Value<String?> tipoNotaCredito,
      Value<double?> totalImpostoSeletivo,
      Value<double?> totalBcIbsCbs,
      Value<double?> ibsUfTotalDiferimento,
      Value<double?> ibsUfTotalDevTributos,
      Value<double?> ibsUfValorTotal,
      Value<double?> ibsMunTotalDiferimento,
      Value<double?> ibsMunTotalDevTributos,
      Value<double?> ibsMunValorTotal,
      Value<double?> cbsTotalDiferimento,
      Value<double?> cbsTotalDevTributos,
      Value<double?> cbsValorTotal,
      Value<double?> cbsTotalCreditoPresumido,
      Value<double?> cbsTotCrePreSuspensivo,
      Value<double?> monoIbsTotal,
      Value<double?> monoCbsTotal,
      Value<double?> monoIbsTotalRetencao,
      Value<double?> monoCbsTotalRetencao,
      Value<double?> monoIbsRetido,
      Value<double?> monoCbsRetido,
      Value<double?> valorTotalNfe,
      Value<double?> totalQtdeTributadaMono,
      Value<double?> totalIcmsMono,
      Value<double?> totalQuantidadeMonoRetencao,
      Value<double?> totalIcmsMonoRetencao,
      Value<double?> totalQuantidadeMonoRetida,
      Value<double?> totalIcmsMonoRetido,
      Value<double?> ibsValorTotal,
      Value<double?> totalCreditoPresumido,
      Value<double?> totalCredPresSuspensivo,
    });

class $$NfeCabecalhosTableFilterComposer
    extends Composer<_$AppDatabase, $NfeCabecalhosTable> {
  $$NfeCabecalhosTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idVendaCabecalho => $composableBuilder(
    column: $table.idVendaCabecalho,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idTributOperacaoFiscal => $composableBuilder(
    column: $table.idTributOperacaoFiscal,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idCliente => $composableBuilder(
    column: $table.idCliente,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idColaborador => $composableBuilder(
    column: $table.idColaborador,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idFornecedor => $composableBuilder(
    column: $table.idFornecedor,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get ufEmitente => $composableBuilder(
    column: $table.ufEmitente,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get codigoNumerico => $composableBuilder(
    column: $table.codigoNumerico,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get naturezaOperacao => $composableBuilder(
    column: $table.naturezaOperacao,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get codigoModelo => $composableBuilder(
    column: $table.codigoModelo,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get serie => $composableBuilder(
    column: $table.serie,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get numero => $composableBuilder(
    column: $table.numero,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get dataHoraEmissao => $composableBuilder(
    column: $table.dataHoraEmissao,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get dataHoraEntradaSaida => $composableBuilder(
    column: $table.dataHoraEntradaSaida,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get tipoOperacao => $composableBuilder(
    column: $table.tipoOperacao,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get localDestino => $composableBuilder(
    column: $table.localDestino,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get codigoMunicipio => $composableBuilder(
    column: $table.codigoMunicipio,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get formatoImpressaoDanfe => $composableBuilder(
    column: $table.formatoImpressaoDanfe,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get tipoEmissao => $composableBuilder(
    column: $table.tipoEmissao,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get chaveAcesso => $composableBuilder(
    column: $table.chaveAcesso,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get digitoChaveAcesso => $composableBuilder(
    column: $table.digitoChaveAcesso,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get ambiente => $composableBuilder(
    column: $table.ambiente,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get finalidadeEmissao => $composableBuilder(
    column: $table.finalidadeEmissao,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get consumidorOperacao => $composableBuilder(
    column: $table.consumidorOperacao,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get consumidorPresenca => $composableBuilder(
    column: $table.consumidorPresenca,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get processoEmissao => $composableBuilder(
    column: $table.processoEmissao,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get versaoProcessoEmissao => $composableBuilder(
    column: $table.versaoProcessoEmissao,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get dataEntradaContingencia => $composableBuilder(
    column: $table.dataEntradaContingencia,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get justificativaContingencia => $composableBuilder(
    column: $table.justificativaContingencia,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get baseCalculoIcms => $composableBuilder(
    column: $table.baseCalculoIcms,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorIcms => $composableBuilder(
    column: $table.valorIcms,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorIcmsDesonerado => $composableBuilder(
    column: $table.valorIcmsDesonerado,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get totalIcmsFcpUfDestino => $composableBuilder(
    column: $table.totalIcmsFcpUfDestino,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get totalIcmsInterestadualUfDestino =>
      $composableBuilder(
        column: $table.totalIcmsInterestadualUfDestino,
        builder: (column) => ColumnFilters(column),
      );

  ColumnFilters<double> get totalIcmsInterestadualUfRemetente =>
      $composableBuilder(
        column: $table.totalIcmsInterestadualUfRemetente,
        builder: (column) => ColumnFilters(column),
      );

  ColumnFilters<double> get valorTotalFcp => $composableBuilder(
    column: $table.valorTotalFcp,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get baseCalculoIcmsSt => $composableBuilder(
    column: $table.baseCalculoIcmsSt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorIcmsSt => $composableBuilder(
    column: $table.valorIcmsSt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorTotalFcpSt => $composableBuilder(
    column: $table.valorTotalFcpSt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorTotalFcpStRetido => $composableBuilder(
    column: $table.valorTotalFcpStRetido,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorTotalProdutos => $composableBuilder(
    column: $table.valorTotalProdutos,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorFrete => $composableBuilder(
    column: $table.valorFrete,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorSeguro => $composableBuilder(
    column: $table.valorSeguro,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorDesconto => $composableBuilder(
    column: $table.valorDesconto,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorImpostoImportacao => $composableBuilder(
    column: $table.valorImpostoImportacao,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorIpi => $composableBuilder(
    column: $table.valorIpi,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorIpiDevolvido => $composableBuilder(
    column: $table.valorIpiDevolvido,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorPis => $composableBuilder(
    column: $table.valorPis,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorCofins => $composableBuilder(
    column: $table.valorCofins,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorDespesasAcessorias => $composableBuilder(
    column: $table.valorDespesasAcessorias,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorTotal => $composableBuilder(
    column: $table.valorTotal,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorTotalTributos => $composableBuilder(
    column: $table.valorTotalTributos,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorServicos => $composableBuilder(
    column: $table.valorServicos,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get baseCalculoIssqn => $composableBuilder(
    column: $table.baseCalculoIssqn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorIssqn => $composableBuilder(
    column: $table.valorIssqn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorPisIssqn => $composableBuilder(
    column: $table.valorPisIssqn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorCofinsIssqn => $composableBuilder(
    column: $table.valorCofinsIssqn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get dataPrestacaoServico => $composableBuilder(
    column: $table.dataPrestacaoServico,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorDeducaoIssqn => $composableBuilder(
    column: $table.valorDeducaoIssqn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get outrasRetencoesIssqn => $composableBuilder(
    column: $table.outrasRetencoesIssqn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get descontoIncondicionadoIssqn => $composableBuilder(
    column: $table.descontoIncondicionadoIssqn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get descontoCondicionadoIssqn => $composableBuilder(
    column: $table.descontoCondicionadoIssqn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get totalRetencaoIssqn => $composableBuilder(
    column: $table.totalRetencaoIssqn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get regimeEspecialTributacao => $composableBuilder(
    column: $table.regimeEspecialTributacao,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorRetidoPis => $composableBuilder(
    column: $table.valorRetidoPis,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorRetidoCofins => $composableBuilder(
    column: $table.valorRetidoCofins,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorRetidoCsll => $composableBuilder(
    column: $table.valorRetidoCsll,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get baseCalculoIrrf => $composableBuilder(
    column: $table.baseCalculoIrrf,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorRetidoIrrf => $composableBuilder(
    column: $table.valorRetidoIrrf,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get baseCalculoPrevidencia => $composableBuilder(
    column: $table.baseCalculoPrevidencia,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorRetidoPrevidencia => $composableBuilder(
    column: $table.valorRetidoPrevidencia,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get informacoesAddFisco => $composableBuilder(
    column: $table.informacoesAddFisco,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get informacoesAddContribuinte => $composableBuilder(
    column: $table.informacoesAddContribuinte,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get comexUfEmbarque => $composableBuilder(
    column: $table.comexUfEmbarque,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get comexLocalEmbarque => $composableBuilder(
    column: $table.comexLocalEmbarque,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get comexLocalDespacho => $composableBuilder(
    column: $table.comexLocalDespacho,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get compraNotaEmpenho => $composableBuilder(
    column: $table.compraNotaEmpenho,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get compraPedido => $composableBuilder(
    column: $table.compraPedido,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get compraContrato => $composableBuilder(
    column: $table.compraContrato,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get qrcode => $composableBuilder(
    column: $table.qrcode,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get urlChave => $composableBuilder(
    column: $table.urlChave,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get statusNota => $composableBuilder(
    column: $table.statusNota,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get indicadorIntermediario => $composableBuilder(
    column: $table.indicadorIntermediario,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get intermediadorCnpj => $composableBuilder(
    column: $table.intermediadorCnpj,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get intermediadorIdCadastro => $composableBuilder(
    column: $table.intermediadorIdCadastro,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get codigoMunicipioFgIbs => $composableBuilder(
    column: $table.codigoMunicipioFgIbs,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get tipoNotaDebito => $composableBuilder(
    column: $table.tipoNotaDebito,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get tipoNotaCredito => $composableBuilder(
    column: $table.tipoNotaCredito,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get totalImpostoSeletivo => $composableBuilder(
    column: $table.totalImpostoSeletivo,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get totalBcIbsCbs => $composableBuilder(
    column: $table.totalBcIbsCbs,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get ibsUfTotalDiferimento => $composableBuilder(
    column: $table.ibsUfTotalDiferimento,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get ibsUfTotalDevTributos => $composableBuilder(
    column: $table.ibsUfTotalDevTributos,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get ibsUfValorTotal => $composableBuilder(
    column: $table.ibsUfValorTotal,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get ibsMunTotalDiferimento => $composableBuilder(
    column: $table.ibsMunTotalDiferimento,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get ibsMunTotalDevTributos => $composableBuilder(
    column: $table.ibsMunTotalDevTributos,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get ibsMunValorTotal => $composableBuilder(
    column: $table.ibsMunValorTotal,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get cbsTotalDiferimento => $composableBuilder(
    column: $table.cbsTotalDiferimento,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get cbsTotalDevTributos => $composableBuilder(
    column: $table.cbsTotalDevTributos,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get cbsValorTotal => $composableBuilder(
    column: $table.cbsValorTotal,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get cbsTotalCreditoPresumido => $composableBuilder(
    column: $table.cbsTotalCreditoPresumido,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get cbsTotCrePreSuspensivo => $composableBuilder(
    column: $table.cbsTotCrePreSuspensivo,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get monoIbsTotal => $composableBuilder(
    column: $table.monoIbsTotal,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get monoCbsTotal => $composableBuilder(
    column: $table.monoCbsTotal,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get monoIbsTotalRetencao => $composableBuilder(
    column: $table.monoIbsTotalRetencao,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get monoCbsTotalRetencao => $composableBuilder(
    column: $table.monoCbsTotalRetencao,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get monoIbsRetido => $composableBuilder(
    column: $table.monoIbsRetido,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get monoCbsRetido => $composableBuilder(
    column: $table.monoCbsRetido,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorTotalNfe => $composableBuilder(
    column: $table.valorTotalNfe,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get totalQtdeTributadaMono => $composableBuilder(
    column: $table.totalQtdeTributadaMono,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get totalIcmsMono => $composableBuilder(
    column: $table.totalIcmsMono,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get totalQuantidadeMonoRetencao => $composableBuilder(
    column: $table.totalQuantidadeMonoRetencao,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get totalIcmsMonoRetencao => $composableBuilder(
    column: $table.totalIcmsMonoRetencao,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get totalQuantidadeMonoRetida => $composableBuilder(
    column: $table.totalQuantidadeMonoRetida,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get totalIcmsMonoRetido => $composableBuilder(
    column: $table.totalIcmsMonoRetido,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get ibsValorTotal => $composableBuilder(
    column: $table.ibsValorTotal,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get totalCreditoPresumido => $composableBuilder(
    column: $table.totalCreditoPresumido,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get totalCredPresSuspensivo => $composableBuilder(
    column: $table.totalCredPresSuspensivo,
    builder: (column) => ColumnFilters(column),
  );
}

class $$NfeCabecalhosTableOrderingComposer
    extends Composer<_$AppDatabase, $NfeCabecalhosTable> {
  $$NfeCabecalhosTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idVendaCabecalho => $composableBuilder(
    column: $table.idVendaCabecalho,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idTributOperacaoFiscal => $composableBuilder(
    column: $table.idTributOperacaoFiscal,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idCliente => $composableBuilder(
    column: $table.idCliente,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idColaborador => $composableBuilder(
    column: $table.idColaborador,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idFornecedor => $composableBuilder(
    column: $table.idFornecedor,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get ufEmitente => $composableBuilder(
    column: $table.ufEmitente,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get codigoNumerico => $composableBuilder(
    column: $table.codigoNumerico,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get naturezaOperacao => $composableBuilder(
    column: $table.naturezaOperacao,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get codigoModelo => $composableBuilder(
    column: $table.codigoModelo,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get serie => $composableBuilder(
    column: $table.serie,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get numero => $composableBuilder(
    column: $table.numero,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get dataHoraEmissao => $composableBuilder(
    column: $table.dataHoraEmissao,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get dataHoraEntradaSaida => $composableBuilder(
    column: $table.dataHoraEntradaSaida,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get tipoOperacao => $composableBuilder(
    column: $table.tipoOperacao,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get localDestino => $composableBuilder(
    column: $table.localDestino,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get codigoMunicipio => $composableBuilder(
    column: $table.codigoMunicipio,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get formatoImpressaoDanfe => $composableBuilder(
    column: $table.formatoImpressaoDanfe,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get tipoEmissao => $composableBuilder(
    column: $table.tipoEmissao,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get chaveAcesso => $composableBuilder(
    column: $table.chaveAcesso,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get digitoChaveAcesso => $composableBuilder(
    column: $table.digitoChaveAcesso,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get ambiente => $composableBuilder(
    column: $table.ambiente,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get finalidadeEmissao => $composableBuilder(
    column: $table.finalidadeEmissao,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get consumidorOperacao => $composableBuilder(
    column: $table.consumidorOperacao,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get consumidorPresenca => $composableBuilder(
    column: $table.consumidorPresenca,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get processoEmissao => $composableBuilder(
    column: $table.processoEmissao,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get versaoProcessoEmissao => $composableBuilder(
    column: $table.versaoProcessoEmissao,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get dataEntradaContingencia => $composableBuilder(
    column: $table.dataEntradaContingencia,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get justificativaContingencia => $composableBuilder(
    column: $table.justificativaContingencia,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get baseCalculoIcms => $composableBuilder(
    column: $table.baseCalculoIcms,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorIcms => $composableBuilder(
    column: $table.valorIcms,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorIcmsDesonerado => $composableBuilder(
    column: $table.valorIcmsDesonerado,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get totalIcmsFcpUfDestino => $composableBuilder(
    column: $table.totalIcmsFcpUfDestino,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get totalIcmsInterestadualUfDestino =>
      $composableBuilder(
        column: $table.totalIcmsInterestadualUfDestino,
        builder: (column) => ColumnOrderings(column),
      );

  ColumnOrderings<double> get totalIcmsInterestadualUfRemetente =>
      $composableBuilder(
        column: $table.totalIcmsInterestadualUfRemetente,
        builder: (column) => ColumnOrderings(column),
      );

  ColumnOrderings<double> get valorTotalFcp => $composableBuilder(
    column: $table.valorTotalFcp,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get baseCalculoIcmsSt => $composableBuilder(
    column: $table.baseCalculoIcmsSt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorIcmsSt => $composableBuilder(
    column: $table.valorIcmsSt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorTotalFcpSt => $composableBuilder(
    column: $table.valorTotalFcpSt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorTotalFcpStRetido => $composableBuilder(
    column: $table.valorTotalFcpStRetido,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorTotalProdutos => $composableBuilder(
    column: $table.valorTotalProdutos,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorFrete => $composableBuilder(
    column: $table.valorFrete,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorSeguro => $composableBuilder(
    column: $table.valorSeguro,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorDesconto => $composableBuilder(
    column: $table.valorDesconto,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorImpostoImportacao => $composableBuilder(
    column: $table.valorImpostoImportacao,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorIpi => $composableBuilder(
    column: $table.valorIpi,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorIpiDevolvido => $composableBuilder(
    column: $table.valorIpiDevolvido,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorPis => $composableBuilder(
    column: $table.valorPis,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorCofins => $composableBuilder(
    column: $table.valorCofins,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorDespesasAcessorias => $composableBuilder(
    column: $table.valorDespesasAcessorias,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorTotal => $composableBuilder(
    column: $table.valorTotal,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorTotalTributos => $composableBuilder(
    column: $table.valorTotalTributos,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorServicos => $composableBuilder(
    column: $table.valorServicos,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get baseCalculoIssqn => $composableBuilder(
    column: $table.baseCalculoIssqn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorIssqn => $composableBuilder(
    column: $table.valorIssqn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorPisIssqn => $composableBuilder(
    column: $table.valorPisIssqn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorCofinsIssqn => $composableBuilder(
    column: $table.valorCofinsIssqn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get dataPrestacaoServico => $composableBuilder(
    column: $table.dataPrestacaoServico,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorDeducaoIssqn => $composableBuilder(
    column: $table.valorDeducaoIssqn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get outrasRetencoesIssqn => $composableBuilder(
    column: $table.outrasRetencoesIssqn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get descontoIncondicionadoIssqn => $composableBuilder(
    column: $table.descontoIncondicionadoIssqn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get descontoCondicionadoIssqn => $composableBuilder(
    column: $table.descontoCondicionadoIssqn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get totalRetencaoIssqn => $composableBuilder(
    column: $table.totalRetencaoIssqn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get regimeEspecialTributacao => $composableBuilder(
    column: $table.regimeEspecialTributacao,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorRetidoPis => $composableBuilder(
    column: $table.valorRetidoPis,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorRetidoCofins => $composableBuilder(
    column: $table.valorRetidoCofins,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorRetidoCsll => $composableBuilder(
    column: $table.valorRetidoCsll,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get baseCalculoIrrf => $composableBuilder(
    column: $table.baseCalculoIrrf,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorRetidoIrrf => $composableBuilder(
    column: $table.valorRetidoIrrf,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get baseCalculoPrevidencia => $composableBuilder(
    column: $table.baseCalculoPrevidencia,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorRetidoPrevidencia => $composableBuilder(
    column: $table.valorRetidoPrevidencia,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get informacoesAddFisco => $composableBuilder(
    column: $table.informacoesAddFisco,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get informacoesAddContribuinte => $composableBuilder(
    column: $table.informacoesAddContribuinte,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get comexUfEmbarque => $composableBuilder(
    column: $table.comexUfEmbarque,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get comexLocalEmbarque => $composableBuilder(
    column: $table.comexLocalEmbarque,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get comexLocalDespacho => $composableBuilder(
    column: $table.comexLocalDespacho,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get compraNotaEmpenho => $composableBuilder(
    column: $table.compraNotaEmpenho,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get compraPedido => $composableBuilder(
    column: $table.compraPedido,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get compraContrato => $composableBuilder(
    column: $table.compraContrato,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get qrcode => $composableBuilder(
    column: $table.qrcode,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get urlChave => $composableBuilder(
    column: $table.urlChave,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get statusNota => $composableBuilder(
    column: $table.statusNota,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get indicadorIntermediario => $composableBuilder(
    column: $table.indicadorIntermediario,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get intermediadorCnpj => $composableBuilder(
    column: $table.intermediadorCnpj,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get intermediadorIdCadastro => $composableBuilder(
    column: $table.intermediadorIdCadastro,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get codigoMunicipioFgIbs => $composableBuilder(
    column: $table.codigoMunicipioFgIbs,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get tipoNotaDebito => $composableBuilder(
    column: $table.tipoNotaDebito,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get tipoNotaCredito => $composableBuilder(
    column: $table.tipoNotaCredito,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get totalImpostoSeletivo => $composableBuilder(
    column: $table.totalImpostoSeletivo,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get totalBcIbsCbs => $composableBuilder(
    column: $table.totalBcIbsCbs,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get ibsUfTotalDiferimento => $composableBuilder(
    column: $table.ibsUfTotalDiferimento,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get ibsUfTotalDevTributos => $composableBuilder(
    column: $table.ibsUfTotalDevTributos,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get ibsUfValorTotal => $composableBuilder(
    column: $table.ibsUfValorTotal,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get ibsMunTotalDiferimento => $composableBuilder(
    column: $table.ibsMunTotalDiferimento,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get ibsMunTotalDevTributos => $composableBuilder(
    column: $table.ibsMunTotalDevTributos,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get ibsMunValorTotal => $composableBuilder(
    column: $table.ibsMunValorTotal,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get cbsTotalDiferimento => $composableBuilder(
    column: $table.cbsTotalDiferimento,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get cbsTotalDevTributos => $composableBuilder(
    column: $table.cbsTotalDevTributos,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get cbsValorTotal => $composableBuilder(
    column: $table.cbsValorTotal,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get cbsTotalCreditoPresumido => $composableBuilder(
    column: $table.cbsTotalCreditoPresumido,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get cbsTotCrePreSuspensivo => $composableBuilder(
    column: $table.cbsTotCrePreSuspensivo,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get monoIbsTotal => $composableBuilder(
    column: $table.monoIbsTotal,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get monoCbsTotal => $composableBuilder(
    column: $table.monoCbsTotal,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get monoIbsTotalRetencao => $composableBuilder(
    column: $table.monoIbsTotalRetencao,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get monoCbsTotalRetencao => $composableBuilder(
    column: $table.monoCbsTotalRetencao,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get monoIbsRetido => $composableBuilder(
    column: $table.monoIbsRetido,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get monoCbsRetido => $composableBuilder(
    column: $table.monoCbsRetido,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorTotalNfe => $composableBuilder(
    column: $table.valorTotalNfe,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get totalQtdeTributadaMono => $composableBuilder(
    column: $table.totalQtdeTributadaMono,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get totalIcmsMono => $composableBuilder(
    column: $table.totalIcmsMono,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get totalQuantidadeMonoRetencao => $composableBuilder(
    column: $table.totalQuantidadeMonoRetencao,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get totalIcmsMonoRetencao => $composableBuilder(
    column: $table.totalIcmsMonoRetencao,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get totalQuantidadeMonoRetida => $composableBuilder(
    column: $table.totalQuantidadeMonoRetida,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get totalIcmsMonoRetido => $composableBuilder(
    column: $table.totalIcmsMonoRetido,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get ibsValorTotal => $composableBuilder(
    column: $table.ibsValorTotal,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get totalCreditoPresumido => $composableBuilder(
    column: $table.totalCreditoPresumido,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get totalCredPresSuspensivo => $composableBuilder(
    column: $table.totalCredPresSuspensivo,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$NfeCabecalhosTableAnnotationComposer
    extends Composer<_$AppDatabase, $NfeCabecalhosTable> {
  $$NfeCabecalhosTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<int> get idVendaCabecalho => $composableBuilder(
    column: $table.idVendaCabecalho,
    builder: (column) => column,
  );

  GeneratedColumn<int> get idTributOperacaoFiscal => $composableBuilder(
    column: $table.idTributOperacaoFiscal,
    builder: (column) => column,
  );

  GeneratedColumn<int> get idCliente =>
      $composableBuilder(column: $table.idCliente, builder: (column) => column);

  GeneratedColumn<int> get idColaborador => $composableBuilder(
    column: $table.idColaborador,
    builder: (column) => column,
  );

  GeneratedColumn<int> get idFornecedor => $composableBuilder(
    column: $table.idFornecedor,
    builder: (column) => column,
  );

  GeneratedColumn<String> get ufEmitente => $composableBuilder(
    column: $table.ufEmitente,
    builder: (column) => column,
  );

  GeneratedColumn<String> get codigoNumerico => $composableBuilder(
    column: $table.codigoNumerico,
    builder: (column) => column,
  );

  GeneratedColumn<String> get naturezaOperacao => $composableBuilder(
    column: $table.naturezaOperacao,
    builder: (column) => column,
  );

  GeneratedColumn<String> get codigoModelo => $composableBuilder(
    column: $table.codigoModelo,
    builder: (column) => column,
  );

  GeneratedColumn<String> get serie =>
      $composableBuilder(column: $table.serie, builder: (column) => column);

  GeneratedColumn<String> get numero =>
      $composableBuilder(column: $table.numero, builder: (column) => column);

  GeneratedColumn<DateTime> get dataHoraEmissao => $composableBuilder(
    column: $table.dataHoraEmissao,
    builder: (column) => column,
  );

  GeneratedColumn<DateTime> get dataHoraEntradaSaida => $composableBuilder(
    column: $table.dataHoraEntradaSaida,
    builder: (column) => column,
  );

  GeneratedColumn<String> get tipoOperacao => $composableBuilder(
    column: $table.tipoOperacao,
    builder: (column) => column,
  );

  GeneratedColumn<String> get localDestino => $composableBuilder(
    column: $table.localDestino,
    builder: (column) => column,
  );

  GeneratedColumn<int> get codigoMunicipio => $composableBuilder(
    column: $table.codigoMunicipio,
    builder: (column) => column,
  );

  GeneratedColumn<String> get formatoImpressaoDanfe => $composableBuilder(
    column: $table.formatoImpressaoDanfe,
    builder: (column) => column,
  );

  GeneratedColumn<String> get tipoEmissao => $composableBuilder(
    column: $table.tipoEmissao,
    builder: (column) => column,
  );

  GeneratedColumn<String> get chaveAcesso => $composableBuilder(
    column: $table.chaveAcesso,
    builder: (column) => column,
  );

  GeneratedColumn<String> get digitoChaveAcesso => $composableBuilder(
    column: $table.digitoChaveAcesso,
    builder: (column) => column,
  );

  GeneratedColumn<String> get ambiente =>
      $composableBuilder(column: $table.ambiente, builder: (column) => column);

  GeneratedColumn<String> get finalidadeEmissao => $composableBuilder(
    column: $table.finalidadeEmissao,
    builder: (column) => column,
  );

  GeneratedColumn<String> get consumidorOperacao => $composableBuilder(
    column: $table.consumidorOperacao,
    builder: (column) => column,
  );

  GeneratedColumn<String> get consumidorPresenca => $composableBuilder(
    column: $table.consumidorPresenca,
    builder: (column) => column,
  );

  GeneratedColumn<String> get processoEmissao => $composableBuilder(
    column: $table.processoEmissao,
    builder: (column) => column,
  );

  GeneratedColumn<String> get versaoProcessoEmissao => $composableBuilder(
    column: $table.versaoProcessoEmissao,
    builder: (column) => column,
  );

  GeneratedColumn<DateTime> get dataEntradaContingencia => $composableBuilder(
    column: $table.dataEntradaContingencia,
    builder: (column) => column,
  );

  GeneratedColumn<String> get justificativaContingencia => $composableBuilder(
    column: $table.justificativaContingencia,
    builder: (column) => column,
  );

  GeneratedColumn<double> get baseCalculoIcms => $composableBuilder(
    column: $table.baseCalculoIcms,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorIcms =>
      $composableBuilder(column: $table.valorIcms, builder: (column) => column);

  GeneratedColumn<double> get valorIcmsDesonerado => $composableBuilder(
    column: $table.valorIcmsDesonerado,
    builder: (column) => column,
  );

  GeneratedColumn<double> get totalIcmsFcpUfDestino => $composableBuilder(
    column: $table.totalIcmsFcpUfDestino,
    builder: (column) => column,
  );

  GeneratedColumn<double> get totalIcmsInterestadualUfDestino =>
      $composableBuilder(
        column: $table.totalIcmsInterestadualUfDestino,
        builder: (column) => column,
      );

  GeneratedColumn<double> get totalIcmsInterestadualUfRemetente =>
      $composableBuilder(
        column: $table.totalIcmsInterestadualUfRemetente,
        builder: (column) => column,
      );

  GeneratedColumn<double> get valorTotalFcp => $composableBuilder(
    column: $table.valorTotalFcp,
    builder: (column) => column,
  );

  GeneratedColumn<double> get baseCalculoIcmsSt => $composableBuilder(
    column: $table.baseCalculoIcmsSt,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorIcmsSt => $composableBuilder(
    column: $table.valorIcmsSt,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorTotalFcpSt => $composableBuilder(
    column: $table.valorTotalFcpSt,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorTotalFcpStRetido => $composableBuilder(
    column: $table.valorTotalFcpStRetido,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorTotalProdutos => $composableBuilder(
    column: $table.valorTotalProdutos,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorFrete => $composableBuilder(
    column: $table.valorFrete,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorSeguro => $composableBuilder(
    column: $table.valorSeguro,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorDesconto => $composableBuilder(
    column: $table.valorDesconto,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorImpostoImportacao => $composableBuilder(
    column: $table.valorImpostoImportacao,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorIpi =>
      $composableBuilder(column: $table.valorIpi, builder: (column) => column);

  GeneratedColumn<double> get valorIpiDevolvido => $composableBuilder(
    column: $table.valorIpiDevolvido,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorPis =>
      $composableBuilder(column: $table.valorPis, builder: (column) => column);

  GeneratedColumn<double> get valorCofins => $composableBuilder(
    column: $table.valorCofins,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorDespesasAcessorias => $composableBuilder(
    column: $table.valorDespesasAcessorias,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorTotal => $composableBuilder(
    column: $table.valorTotal,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorTotalTributos => $composableBuilder(
    column: $table.valorTotalTributos,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorServicos => $composableBuilder(
    column: $table.valorServicos,
    builder: (column) => column,
  );

  GeneratedColumn<double> get baseCalculoIssqn => $composableBuilder(
    column: $table.baseCalculoIssqn,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorIssqn => $composableBuilder(
    column: $table.valorIssqn,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorPisIssqn => $composableBuilder(
    column: $table.valorPisIssqn,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorCofinsIssqn => $composableBuilder(
    column: $table.valorCofinsIssqn,
    builder: (column) => column,
  );

  GeneratedColumn<DateTime> get dataPrestacaoServico => $composableBuilder(
    column: $table.dataPrestacaoServico,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorDeducaoIssqn => $composableBuilder(
    column: $table.valorDeducaoIssqn,
    builder: (column) => column,
  );

  GeneratedColumn<double> get outrasRetencoesIssqn => $composableBuilder(
    column: $table.outrasRetencoesIssqn,
    builder: (column) => column,
  );

  GeneratedColumn<double> get descontoIncondicionadoIssqn => $composableBuilder(
    column: $table.descontoIncondicionadoIssqn,
    builder: (column) => column,
  );

  GeneratedColumn<double> get descontoCondicionadoIssqn => $composableBuilder(
    column: $table.descontoCondicionadoIssqn,
    builder: (column) => column,
  );

  GeneratedColumn<double> get totalRetencaoIssqn => $composableBuilder(
    column: $table.totalRetencaoIssqn,
    builder: (column) => column,
  );

  GeneratedColumn<String> get regimeEspecialTributacao => $composableBuilder(
    column: $table.regimeEspecialTributacao,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorRetidoPis => $composableBuilder(
    column: $table.valorRetidoPis,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorRetidoCofins => $composableBuilder(
    column: $table.valorRetidoCofins,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorRetidoCsll => $composableBuilder(
    column: $table.valorRetidoCsll,
    builder: (column) => column,
  );

  GeneratedColumn<double> get baseCalculoIrrf => $composableBuilder(
    column: $table.baseCalculoIrrf,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorRetidoIrrf => $composableBuilder(
    column: $table.valorRetidoIrrf,
    builder: (column) => column,
  );

  GeneratedColumn<double> get baseCalculoPrevidencia => $composableBuilder(
    column: $table.baseCalculoPrevidencia,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorRetidoPrevidencia => $composableBuilder(
    column: $table.valorRetidoPrevidencia,
    builder: (column) => column,
  );

  GeneratedColumn<String> get informacoesAddFisco => $composableBuilder(
    column: $table.informacoesAddFisco,
    builder: (column) => column,
  );

  GeneratedColumn<String> get informacoesAddContribuinte => $composableBuilder(
    column: $table.informacoesAddContribuinte,
    builder: (column) => column,
  );

  GeneratedColumn<String> get comexUfEmbarque => $composableBuilder(
    column: $table.comexUfEmbarque,
    builder: (column) => column,
  );

  GeneratedColumn<String> get comexLocalEmbarque => $composableBuilder(
    column: $table.comexLocalEmbarque,
    builder: (column) => column,
  );

  GeneratedColumn<String> get comexLocalDespacho => $composableBuilder(
    column: $table.comexLocalDespacho,
    builder: (column) => column,
  );

  GeneratedColumn<String> get compraNotaEmpenho => $composableBuilder(
    column: $table.compraNotaEmpenho,
    builder: (column) => column,
  );

  GeneratedColumn<String> get compraPedido => $composableBuilder(
    column: $table.compraPedido,
    builder: (column) => column,
  );

  GeneratedColumn<String> get compraContrato => $composableBuilder(
    column: $table.compraContrato,
    builder: (column) => column,
  );

  GeneratedColumn<String> get qrcode =>
      $composableBuilder(column: $table.qrcode, builder: (column) => column);

  GeneratedColumn<String> get urlChave =>
      $composableBuilder(column: $table.urlChave, builder: (column) => column);

  GeneratedColumn<String> get statusNota => $composableBuilder(
    column: $table.statusNota,
    builder: (column) => column,
  );

  GeneratedColumn<String> get indicadorIntermediario => $composableBuilder(
    column: $table.indicadorIntermediario,
    builder: (column) => column,
  );

  GeneratedColumn<String> get intermediadorCnpj => $composableBuilder(
    column: $table.intermediadorCnpj,
    builder: (column) => column,
  );

  GeneratedColumn<String> get intermediadorIdCadastro => $composableBuilder(
    column: $table.intermediadorIdCadastro,
    builder: (column) => column,
  );

  GeneratedColumn<int> get codigoMunicipioFgIbs => $composableBuilder(
    column: $table.codigoMunicipioFgIbs,
    builder: (column) => column,
  );

  GeneratedColumn<String> get tipoNotaDebito => $composableBuilder(
    column: $table.tipoNotaDebito,
    builder: (column) => column,
  );

  GeneratedColumn<String> get tipoNotaCredito => $composableBuilder(
    column: $table.tipoNotaCredito,
    builder: (column) => column,
  );

  GeneratedColumn<double> get totalImpostoSeletivo => $composableBuilder(
    column: $table.totalImpostoSeletivo,
    builder: (column) => column,
  );

  GeneratedColumn<double> get totalBcIbsCbs => $composableBuilder(
    column: $table.totalBcIbsCbs,
    builder: (column) => column,
  );

  GeneratedColumn<double> get ibsUfTotalDiferimento => $composableBuilder(
    column: $table.ibsUfTotalDiferimento,
    builder: (column) => column,
  );

  GeneratedColumn<double> get ibsUfTotalDevTributos => $composableBuilder(
    column: $table.ibsUfTotalDevTributos,
    builder: (column) => column,
  );

  GeneratedColumn<double> get ibsUfValorTotal => $composableBuilder(
    column: $table.ibsUfValorTotal,
    builder: (column) => column,
  );

  GeneratedColumn<double> get ibsMunTotalDiferimento => $composableBuilder(
    column: $table.ibsMunTotalDiferimento,
    builder: (column) => column,
  );

  GeneratedColumn<double> get ibsMunTotalDevTributos => $composableBuilder(
    column: $table.ibsMunTotalDevTributos,
    builder: (column) => column,
  );

  GeneratedColumn<double> get ibsMunValorTotal => $composableBuilder(
    column: $table.ibsMunValorTotal,
    builder: (column) => column,
  );

  GeneratedColumn<double> get cbsTotalDiferimento => $composableBuilder(
    column: $table.cbsTotalDiferimento,
    builder: (column) => column,
  );

  GeneratedColumn<double> get cbsTotalDevTributos => $composableBuilder(
    column: $table.cbsTotalDevTributos,
    builder: (column) => column,
  );

  GeneratedColumn<double> get cbsValorTotal => $composableBuilder(
    column: $table.cbsValorTotal,
    builder: (column) => column,
  );

  GeneratedColumn<double> get cbsTotalCreditoPresumido => $composableBuilder(
    column: $table.cbsTotalCreditoPresumido,
    builder: (column) => column,
  );

  GeneratedColumn<double> get cbsTotCrePreSuspensivo => $composableBuilder(
    column: $table.cbsTotCrePreSuspensivo,
    builder: (column) => column,
  );

  GeneratedColumn<double> get monoIbsTotal => $composableBuilder(
    column: $table.monoIbsTotal,
    builder: (column) => column,
  );

  GeneratedColumn<double> get monoCbsTotal => $composableBuilder(
    column: $table.monoCbsTotal,
    builder: (column) => column,
  );

  GeneratedColumn<double> get monoIbsTotalRetencao => $composableBuilder(
    column: $table.monoIbsTotalRetencao,
    builder: (column) => column,
  );

  GeneratedColumn<double> get monoCbsTotalRetencao => $composableBuilder(
    column: $table.monoCbsTotalRetencao,
    builder: (column) => column,
  );

  GeneratedColumn<double> get monoIbsRetido => $composableBuilder(
    column: $table.monoIbsRetido,
    builder: (column) => column,
  );

  GeneratedColumn<double> get monoCbsRetido => $composableBuilder(
    column: $table.monoCbsRetido,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorTotalNfe => $composableBuilder(
    column: $table.valorTotalNfe,
    builder: (column) => column,
  );

  GeneratedColumn<double> get totalQtdeTributadaMono => $composableBuilder(
    column: $table.totalQtdeTributadaMono,
    builder: (column) => column,
  );

  GeneratedColumn<double> get totalIcmsMono => $composableBuilder(
    column: $table.totalIcmsMono,
    builder: (column) => column,
  );

  GeneratedColumn<double> get totalQuantidadeMonoRetencao => $composableBuilder(
    column: $table.totalQuantidadeMonoRetencao,
    builder: (column) => column,
  );

  GeneratedColumn<double> get totalIcmsMonoRetencao => $composableBuilder(
    column: $table.totalIcmsMonoRetencao,
    builder: (column) => column,
  );

  GeneratedColumn<double> get totalQuantidadeMonoRetida => $composableBuilder(
    column: $table.totalQuantidadeMonoRetida,
    builder: (column) => column,
  );

  GeneratedColumn<double> get totalIcmsMonoRetido => $composableBuilder(
    column: $table.totalIcmsMonoRetido,
    builder: (column) => column,
  );

  GeneratedColumn<double> get ibsValorTotal => $composableBuilder(
    column: $table.ibsValorTotal,
    builder: (column) => column,
  );

  GeneratedColumn<double> get totalCreditoPresumido => $composableBuilder(
    column: $table.totalCreditoPresumido,
    builder: (column) => column,
  );

  GeneratedColumn<double> get totalCredPresSuspensivo => $composableBuilder(
    column: $table.totalCredPresSuspensivo,
    builder: (column) => column,
  );
}

class $$NfeCabecalhosTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $NfeCabecalhosTable,
          NfeCabecalho,
          $$NfeCabecalhosTableFilterComposer,
          $$NfeCabecalhosTableOrderingComposer,
          $$NfeCabecalhosTableAnnotationComposer,
          $$NfeCabecalhosTableCreateCompanionBuilder,
          $$NfeCabecalhosTableUpdateCompanionBuilder,
          (
            NfeCabecalho,
            BaseReferences<_$AppDatabase, $NfeCabecalhosTable, NfeCabecalho>,
          ),
          NfeCabecalho,
          PrefetchHooks Function()
        > {
  $$NfeCabecalhosTableTableManager(_$AppDatabase db, $NfeCabecalhosTable table)
    : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer:
              () => $$NfeCabecalhosTableFilterComposer($db: db, $table: table),
          createOrderingComposer:
              () =>
                  $$NfeCabecalhosTableOrderingComposer($db: db, $table: table),
          createComputedFieldComposer:
              () => $$NfeCabecalhosTableAnnotationComposer(
                $db: db,
                $table: table,
              ),
          updateCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idVendaCabecalho = const Value.absent(),
                Value<int?> idTributOperacaoFiscal = const Value.absent(),
                Value<int?> idCliente = const Value.absent(),
                Value<int?> idColaborador = const Value.absent(),
                Value<int?> idFornecedor = const Value.absent(),
                Value<String?> ufEmitente = const Value.absent(),
                Value<String?> codigoNumerico = const Value.absent(),
                Value<String?> naturezaOperacao = const Value.absent(),
                Value<String?> codigoModelo = const Value.absent(),
                Value<String?> serie = const Value.absent(),
                Value<String?> numero = const Value.absent(),
                Value<DateTime?> dataHoraEmissao = const Value.absent(),
                Value<DateTime?> dataHoraEntradaSaida = const Value.absent(),
                Value<String?> tipoOperacao = const Value.absent(),
                Value<String?> localDestino = const Value.absent(),
                Value<int?> codigoMunicipio = const Value.absent(),
                Value<String?> formatoImpressaoDanfe = const Value.absent(),
                Value<String?> tipoEmissao = const Value.absent(),
                Value<String?> chaveAcesso = const Value.absent(),
                Value<String?> digitoChaveAcesso = const Value.absent(),
                Value<String?> ambiente = const Value.absent(),
                Value<String?> finalidadeEmissao = const Value.absent(),
                Value<String?> consumidorOperacao = const Value.absent(),
                Value<String?> consumidorPresenca = const Value.absent(),
                Value<String?> processoEmissao = const Value.absent(),
                Value<String?> versaoProcessoEmissao = const Value.absent(),
                Value<DateTime?> dataEntradaContingencia = const Value.absent(),
                Value<String?> justificativaContingencia = const Value.absent(),
                Value<double?> baseCalculoIcms = const Value.absent(),
                Value<double?> valorIcms = const Value.absent(),
                Value<double?> valorIcmsDesonerado = const Value.absent(),
                Value<double?> totalIcmsFcpUfDestino = const Value.absent(),
                Value<double?> totalIcmsInterestadualUfDestino =
                    const Value.absent(),
                Value<double?> totalIcmsInterestadualUfRemetente =
                    const Value.absent(),
                Value<double?> valorTotalFcp = const Value.absent(),
                Value<double?> baseCalculoIcmsSt = const Value.absent(),
                Value<double?> valorIcmsSt = const Value.absent(),
                Value<double?> valorTotalFcpSt = const Value.absent(),
                Value<double?> valorTotalFcpStRetido = const Value.absent(),
                Value<double?> valorTotalProdutos = const Value.absent(),
                Value<double?> valorFrete = const Value.absent(),
                Value<double?> valorSeguro = const Value.absent(),
                Value<double?> valorDesconto = const Value.absent(),
                Value<double?> valorImpostoImportacao = const Value.absent(),
                Value<double?> valorIpi = const Value.absent(),
                Value<double?> valorIpiDevolvido = const Value.absent(),
                Value<double?> valorPis = const Value.absent(),
                Value<double?> valorCofins = const Value.absent(),
                Value<double?> valorDespesasAcessorias = const Value.absent(),
                Value<double?> valorTotal = const Value.absent(),
                Value<double?> valorTotalTributos = const Value.absent(),
                Value<double?> valorServicos = const Value.absent(),
                Value<double?> baseCalculoIssqn = const Value.absent(),
                Value<double?> valorIssqn = const Value.absent(),
                Value<double?> valorPisIssqn = const Value.absent(),
                Value<double?> valorCofinsIssqn = const Value.absent(),
                Value<DateTime?> dataPrestacaoServico = const Value.absent(),
                Value<double?> valorDeducaoIssqn = const Value.absent(),
                Value<double?> outrasRetencoesIssqn = const Value.absent(),
                Value<double?> descontoIncondicionadoIssqn =
                    const Value.absent(),
                Value<double?> descontoCondicionadoIssqn = const Value.absent(),
                Value<double?> totalRetencaoIssqn = const Value.absent(),
                Value<String?> regimeEspecialTributacao = const Value.absent(),
                Value<double?> valorRetidoPis = const Value.absent(),
                Value<double?> valorRetidoCofins = const Value.absent(),
                Value<double?> valorRetidoCsll = const Value.absent(),
                Value<double?> baseCalculoIrrf = const Value.absent(),
                Value<double?> valorRetidoIrrf = const Value.absent(),
                Value<double?> baseCalculoPrevidencia = const Value.absent(),
                Value<double?> valorRetidoPrevidencia = const Value.absent(),
                Value<String?> informacoesAddFisco = const Value.absent(),
                Value<String?> informacoesAddContribuinte =
                    const Value.absent(),
                Value<String?> comexUfEmbarque = const Value.absent(),
                Value<String?> comexLocalEmbarque = const Value.absent(),
                Value<String?> comexLocalDespacho = const Value.absent(),
                Value<String?> compraNotaEmpenho = const Value.absent(),
                Value<String?> compraPedido = const Value.absent(),
                Value<String?> compraContrato = const Value.absent(),
                Value<String?> qrcode = const Value.absent(),
                Value<String?> urlChave = const Value.absent(),
                Value<String?> statusNota = const Value.absent(),
                Value<String?> indicadorIntermediario = const Value.absent(),
                Value<String?> intermediadorCnpj = const Value.absent(),
                Value<String?> intermediadorIdCadastro = const Value.absent(),
                Value<int?> codigoMunicipioFgIbs = const Value.absent(),
                Value<String?> tipoNotaDebito = const Value.absent(),
                Value<String?> tipoNotaCredito = const Value.absent(),
                Value<double?> totalImpostoSeletivo = const Value.absent(),
                Value<double?> totalBcIbsCbs = const Value.absent(),
                Value<double?> ibsUfTotalDiferimento = const Value.absent(),
                Value<double?> ibsUfTotalDevTributos = const Value.absent(),
                Value<double?> ibsUfValorTotal = const Value.absent(),
                Value<double?> ibsMunTotalDiferimento = const Value.absent(),
                Value<double?> ibsMunTotalDevTributos = const Value.absent(),
                Value<double?> ibsMunValorTotal = const Value.absent(),
                Value<double?> cbsTotalDiferimento = const Value.absent(),
                Value<double?> cbsTotalDevTributos = const Value.absent(),
                Value<double?> cbsValorTotal = const Value.absent(),
                Value<double?> cbsTotalCreditoPresumido = const Value.absent(),
                Value<double?> cbsTotCrePreSuspensivo = const Value.absent(),
                Value<double?> monoIbsTotal = const Value.absent(),
                Value<double?> monoCbsTotal = const Value.absent(),
                Value<double?> monoIbsTotalRetencao = const Value.absent(),
                Value<double?> monoCbsTotalRetencao = const Value.absent(),
                Value<double?> monoIbsRetido = const Value.absent(),
                Value<double?> monoCbsRetido = const Value.absent(),
                Value<double?> valorTotalNfe = const Value.absent(),
                Value<double?> totalQtdeTributadaMono = const Value.absent(),
                Value<double?> totalIcmsMono = const Value.absent(),
                Value<double?> totalQuantidadeMonoRetencao =
                    const Value.absent(),
                Value<double?> totalIcmsMonoRetencao = const Value.absent(),
                Value<double?> totalQuantidadeMonoRetida = const Value.absent(),
                Value<double?> totalIcmsMonoRetido = const Value.absent(),
                Value<double?> ibsValorTotal = const Value.absent(),
                Value<double?> totalCreditoPresumido = const Value.absent(),
                Value<double?> totalCredPresSuspensivo = const Value.absent(),
              }) => NfeCabecalhosCompanion(
                id: id,
                idVendaCabecalho: idVendaCabecalho,
                idTributOperacaoFiscal: idTributOperacaoFiscal,
                idCliente: idCliente,
                idColaborador: idColaborador,
                idFornecedor: idFornecedor,
                ufEmitente: ufEmitente,
                codigoNumerico: codigoNumerico,
                naturezaOperacao: naturezaOperacao,
                codigoModelo: codigoModelo,
                serie: serie,
                numero: numero,
                dataHoraEmissao: dataHoraEmissao,
                dataHoraEntradaSaida: dataHoraEntradaSaida,
                tipoOperacao: tipoOperacao,
                localDestino: localDestino,
                codigoMunicipio: codigoMunicipio,
                formatoImpressaoDanfe: formatoImpressaoDanfe,
                tipoEmissao: tipoEmissao,
                chaveAcesso: chaveAcesso,
                digitoChaveAcesso: digitoChaveAcesso,
                ambiente: ambiente,
                finalidadeEmissao: finalidadeEmissao,
                consumidorOperacao: consumidorOperacao,
                consumidorPresenca: consumidorPresenca,
                processoEmissao: processoEmissao,
                versaoProcessoEmissao: versaoProcessoEmissao,
                dataEntradaContingencia: dataEntradaContingencia,
                justificativaContingencia: justificativaContingencia,
                baseCalculoIcms: baseCalculoIcms,
                valorIcms: valorIcms,
                valorIcmsDesonerado: valorIcmsDesonerado,
                totalIcmsFcpUfDestino: totalIcmsFcpUfDestino,
                totalIcmsInterestadualUfDestino:
                    totalIcmsInterestadualUfDestino,
                totalIcmsInterestadualUfRemetente:
                    totalIcmsInterestadualUfRemetente,
                valorTotalFcp: valorTotalFcp,
                baseCalculoIcmsSt: baseCalculoIcmsSt,
                valorIcmsSt: valorIcmsSt,
                valorTotalFcpSt: valorTotalFcpSt,
                valorTotalFcpStRetido: valorTotalFcpStRetido,
                valorTotalProdutos: valorTotalProdutos,
                valorFrete: valorFrete,
                valorSeguro: valorSeguro,
                valorDesconto: valorDesconto,
                valorImpostoImportacao: valorImpostoImportacao,
                valorIpi: valorIpi,
                valorIpiDevolvido: valorIpiDevolvido,
                valorPis: valorPis,
                valorCofins: valorCofins,
                valorDespesasAcessorias: valorDespesasAcessorias,
                valorTotal: valorTotal,
                valorTotalTributos: valorTotalTributos,
                valorServicos: valorServicos,
                baseCalculoIssqn: baseCalculoIssqn,
                valorIssqn: valorIssqn,
                valorPisIssqn: valorPisIssqn,
                valorCofinsIssqn: valorCofinsIssqn,
                dataPrestacaoServico: dataPrestacaoServico,
                valorDeducaoIssqn: valorDeducaoIssqn,
                outrasRetencoesIssqn: outrasRetencoesIssqn,
                descontoIncondicionadoIssqn: descontoIncondicionadoIssqn,
                descontoCondicionadoIssqn: descontoCondicionadoIssqn,
                totalRetencaoIssqn: totalRetencaoIssqn,
                regimeEspecialTributacao: regimeEspecialTributacao,
                valorRetidoPis: valorRetidoPis,
                valorRetidoCofins: valorRetidoCofins,
                valorRetidoCsll: valorRetidoCsll,
                baseCalculoIrrf: baseCalculoIrrf,
                valorRetidoIrrf: valorRetidoIrrf,
                baseCalculoPrevidencia: baseCalculoPrevidencia,
                valorRetidoPrevidencia: valorRetidoPrevidencia,
                informacoesAddFisco: informacoesAddFisco,
                informacoesAddContribuinte: informacoesAddContribuinte,
                comexUfEmbarque: comexUfEmbarque,
                comexLocalEmbarque: comexLocalEmbarque,
                comexLocalDespacho: comexLocalDespacho,
                compraNotaEmpenho: compraNotaEmpenho,
                compraPedido: compraPedido,
                compraContrato: compraContrato,
                qrcode: qrcode,
                urlChave: urlChave,
                statusNota: statusNota,
                indicadorIntermediario: indicadorIntermediario,
                intermediadorCnpj: intermediadorCnpj,
                intermediadorIdCadastro: intermediadorIdCadastro,
                codigoMunicipioFgIbs: codigoMunicipioFgIbs,
                tipoNotaDebito: tipoNotaDebito,
                tipoNotaCredito: tipoNotaCredito,
                totalImpostoSeletivo: totalImpostoSeletivo,
                totalBcIbsCbs: totalBcIbsCbs,
                ibsUfTotalDiferimento: ibsUfTotalDiferimento,
                ibsUfTotalDevTributos: ibsUfTotalDevTributos,
                ibsUfValorTotal: ibsUfValorTotal,
                ibsMunTotalDiferimento: ibsMunTotalDiferimento,
                ibsMunTotalDevTributos: ibsMunTotalDevTributos,
                ibsMunValorTotal: ibsMunValorTotal,
                cbsTotalDiferimento: cbsTotalDiferimento,
                cbsTotalDevTributos: cbsTotalDevTributos,
                cbsValorTotal: cbsValorTotal,
                cbsTotalCreditoPresumido: cbsTotalCreditoPresumido,
                cbsTotCrePreSuspensivo: cbsTotCrePreSuspensivo,
                monoIbsTotal: monoIbsTotal,
                monoCbsTotal: monoCbsTotal,
                monoIbsTotalRetencao: monoIbsTotalRetencao,
                monoCbsTotalRetencao: monoCbsTotalRetencao,
                monoIbsRetido: monoIbsRetido,
                monoCbsRetido: monoCbsRetido,
                valorTotalNfe: valorTotalNfe,
                totalQtdeTributadaMono: totalQtdeTributadaMono,
                totalIcmsMono: totalIcmsMono,
                totalQuantidadeMonoRetencao: totalQuantidadeMonoRetencao,
                totalIcmsMonoRetencao: totalIcmsMonoRetencao,
                totalQuantidadeMonoRetida: totalQuantidadeMonoRetida,
                totalIcmsMonoRetido: totalIcmsMonoRetido,
                ibsValorTotal: ibsValorTotal,
                totalCreditoPresumido: totalCreditoPresumido,
                totalCredPresSuspensivo: totalCredPresSuspensivo,
              ),
          createCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idVendaCabecalho = const Value.absent(),
                Value<int?> idTributOperacaoFiscal = const Value.absent(),
                Value<int?> idCliente = const Value.absent(),
                Value<int?> idColaborador = const Value.absent(),
                Value<int?> idFornecedor = const Value.absent(),
                Value<String?> ufEmitente = const Value.absent(),
                Value<String?> codigoNumerico = const Value.absent(),
                Value<String?> naturezaOperacao = const Value.absent(),
                Value<String?> codigoModelo = const Value.absent(),
                Value<String?> serie = const Value.absent(),
                Value<String?> numero = const Value.absent(),
                Value<DateTime?> dataHoraEmissao = const Value.absent(),
                Value<DateTime?> dataHoraEntradaSaida = const Value.absent(),
                Value<String?> tipoOperacao = const Value.absent(),
                Value<String?> localDestino = const Value.absent(),
                Value<int?> codigoMunicipio = const Value.absent(),
                Value<String?> formatoImpressaoDanfe = const Value.absent(),
                Value<String?> tipoEmissao = const Value.absent(),
                Value<String?> chaveAcesso = const Value.absent(),
                Value<String?> digitoChaveAcesso = const Value.absent(),
                Value<String?> ambiente = const Value.absent(),
                Value<String?> finalidadeEmissao = const Value.absent(),
                Value<String?> consumidorOperacao = const Value.absent(),
                Value<String?> consumidorPresenca = const Value.absent(),
                Value<String?> processoEmissao = const Value.absent(),
                Value<String?> versaoProcessoEmissao = const Value.absent(),
                Value<DateTime?> dataEntradaContingencia = const Value.absent(),
                Value<String?> justificativaContingencia = const Value.absent(),
                Value<double?> baseCalculoIcms = const Value.absent(),
                Value<double?> valorIcms = const Value.absent(),
                Value<double?> valorIcmsDesonerado = const Value.absent(),
                Value<double?> totalIcmsFcpUfDestino = const Value.absent(),
                Value<double?> totalIcmsInterestadualUfDestino =
                    const Value.absent(),
                Value<double?> totalIcmsInterestadualUfRemetente =
                    const Value.absent(),
                Value<double?> valorTotalFcp = const Value.absent(),
                Value<double?> baseCalculoIcmsSt = const Value.absent(),
                Value<double?> valorIcmsSt = const Value.absent(),
                Value<double?> valorTotalFcpSt = const Value.absent(),
                Value<double?> valorTotalFcpStRetido = const Value.absent(),
                Value<double?> valorTotalProdutos = const Value.absent(),
                Value<double?> valorFrete = const Value.absent(),
                Value<double?> valorSeguro = const Value.absent(),
                Value<double?> valorDesconto = const Value.absent(),
                Value<double?> valorImpostoImportacao = const Value.absent(),
                Value<double?> valorIpi = const Value.absent(),
                Value<double?> valorIpiDevolvido = const Value.absent(),
                Value<double?> valorPis = const Value.absent(),
                Value<double?> valorCofins = const Value.absent(),
                Value<double?> valorDespesasAcessorias = const Value.absent(),
                Value<double?> valorTotal = const Value.absent(),
                Value<double?> valorTotalTributos = const Value.absent(),
                Value<double?> valorServicos = const Value.absent(),
                Value<double?> baseCalculoIssqn = const Value.absent(),
                Value<double?> valorIssqn = const Value.absent(),
                Value<double?> valorPisIssqn = const Value.absent(),
                Value<double?> valorCofinsIssqn = const Value.absent(),
                Value<DateTime?> dataPrestacaoServico = const Value.absent(),
                Value<double?> valorDeducaoIssqn = const Value.absent(),
                Value<double?> outrasRetencoesIssqn = const Value.absent(),
                Value<double?> descontoIncondicionadoIssqn =
                    const Value.absent(),
                Value<double?> descontoCondicionadoIssqn = const Value.absent(),
                Value<double?> totalRetencaoIssqn = const Value.absent(),
                Value<String?> regimeEspecialTributacao = const Value.absent(),
                Value<double?> valorRetidoPis = const Value.absent(),
                Value<double?> valorRetidoCofins = const Value.absent(),
                Value<double?> valorRetidoCsll = const Value.absent(),
                Value<double?> baseCalculoIrrf = const Value.absent(),
                Value<double?> valorRetidoIrrf = const Value.absent(),
                Value<double?> baseCalculoPrevidencia = const Value.absent(),
                Value<double?> valorRetidoPrevidencia = const Value.absent(),
                Value<String?> informacoesAddFisco = const Value.absent(),
                Value<String?> informacoesAddContribuinte =
                    const Value.absent(),
                Value<String?> comexUfEmbarque = const Value.absent(),
                Value<String?> comexLocalEmbarque = const Value.absent(),
                Value<String?> comexLocalDespacho = const Value.absent(),
                Value<String?> compraNotaEmpenho = const Value.absent(),
                Value<String?> compraPedido = const Value.absent(),
                Value<String?> compraContrato = const Value.absent(),
                Value<String?> qrcode = const Value.absent(),
                Value<String?> urlChave = const Value.absent(),
                Value<String?> statusNota = const Value.absent(),
                Value<String?> indicadorIntermediario = const Value.absent(),
                Value<String?> intermediadorCnpj = const Value.absent(),
                Value<String?> intermediadorIdCadastro = const Value.absent(),
                Value<int?> codigoMunicipioFgIbs = const Value.absent(),
                Value<String?> tipoNotaDebito = const Value.absent(),
                Value<String?> tipoNotaCredito = const Value.absent(),
                Value<double?> totalImpostoSeletivo = const Value.absent(),
                Value<double?> totalBcIbsCbs = const Value.absent(),
                Value<double?> ibsUfTotalDiferimento = const Value.absent(),
                Value<double?> ibsUfTotalDevTributos = const Value.absent(),
                Value<double?> ibsUfValorTotal = const Value.absent(),
                Value<double?> ibsMunTotalDiferimento = const Value.absent(),
                Value<double?> ibsMunTotalDevTributos = const Value.absent(),
                Value<double?> ibsMunValorTotal = const Value.absent(),
                Value<double?> cbsTotalDiferimento = const Value.absent(),
                Value<double?> cbsTotalDevTributos = const Value.absent(),
                Value<double?> cbsValorTotal = const Value.absent(),
                Value<double?> cbsTotalCreditoPresumido = const Value.absent(),
                Value<double?> cbsTotCrePreSuspensivo = const Value.absent(),
                Value<double?> monoIbsTotal = const Value.absent(),
                Value<double?> monoCbsTotal = const Value.absent(),
                Value<double?> monoIbsTotalRetencao = const Value.absent(),
                Value<double?> monoCbsTotalRetencao = const Value.absent(),
                Value<double?> monoIbsRetido = const Value.absent(),
                Value<double?> monoCbsRetido = const Value.absent(),
                Value<double?> valorTotalNfe = const Value.absent(),
                Value<double?> totalQtdeTributadaMono = const Value.absent(),
                Value<double?> totalIcmsMono = const Value.absent(),
                Value<double?> totalQuantidadeMonoRetencao =
                    const Value.absent(),
                Value<double?> totalIcmsMonoRetencao = const Value.absent(),
                Value<double?> totalQuantidadeMonoRetida = const Value.absent(),
                Value<double?> totalIcmsMonoRetido = const Value.absent(),
                Value<double?> ibsValorTotal = const Value.absent(),
                Value<double?> totalCreditoPresumido = const Value.absent(),
                Value<double?> totalCredPresSuspensivo = const Value.absent(),
              }) => NfeCabecalhosCompanion.insert(
                id: id,
                idVendaCabecalho: idVendaCabecalho,
                idTributOperacaoFiscal: idTributOperacaoFiscal,
                idCliente: idCliente,
                idColaborador: idColaborador,
                idFornecedor: idFornecedor,
                ufEmitente: ufEmitente,
                codigoNumerico: codigoNumerico,
                naturezaOperacao: naturezaOperacao,
                codigoModelo: codigoModelo,
                serie: serie,
                numero: numero,
                dataHoraEmissao: dataHoraEmissao,
                dataHoraEntradaSaida: dataHoraEntradaSaida,
                tipoOperacao: tipoOperacao,
                localDestino: localDestino,
                codigoMunicipio: codigoMunicipio,
                formatoImpressaoDanfe: formatoImpressaoDanfe,
                tipoEmissao: tipoEmissao,
                chaveAcesso: chaveAcesso,
                digitoChaveAcesso: digitoChaveAcesso,
                ambiente: ambiente,
                finalidadeEmissao: finalidadeEmissao,
                consumidorOperacao: consumidorOperacao,
                consumidorPresenca: consumidorPresenca,
                processoEmissao: processoEmissao,
                versaoProcessoEmissao: versaoProcessoEmissao,
                dataEntradaContingencia: dataEntradaContingencia,
                justificativaContingencia: justificativaContingencia,
                baseCalculoIcms: baseCalculoIcms,
                valorIcms: valorIcms,
                valorIcmsDesonerado: valorIcmsDesonerado,
                totalIcmsFcpUfDestino: totalIcmsFcpUfDestino,
                totalIcmsInterestadualUfDestino:
                    totalIcmsInterestadualUfDestino,
                totalIcmsInterestadualUfRemetente:
                    totalIcmsInterestadualUfRemetente,
                valorTotalFcp: valorTotalFcp,
                baseCalculoIcmsSt: baseCalculoIcmsSt,
                valorIcmsSt: valorIcmsSt,
                valorTotalFcpSt: valorTotalFcpSt,
                valorTotalFcpStRetido: valorTotalFcpStRetido,
                valorTotalProdutos: valorTotalProdutos,
                valorFrete: valorFrete,
                valorSeguro: valorSeguro,
                valorDesconto: valorDesconto,
                valorImpostoImportacao: valorImpostoImportacao,
                valorIpi: valorIpi,
                valorIpiDevolvido: valorIpiDevolvido,
                valorPis: valorPis,
                valorCofins: valorCofins,
                valorDespesasAcessorias: valorDespesasAcessorias,
                valorTotal: valorTotal,
                valorTotalTributos: valorTotalTributos,
                valorServicos: valorServicos,
                baseCalculoIssqn: baseCalculoIssqn,
                valorIssqn: valorIssqn,
                valorPisIssqn: valorPisIssqn,
                valorCofinsIssqn: valorCofinsIssqn,
                dataPrestacaoServico: dataPrestacaoServico,
                valorDeducaoIssqn: valorDeducaoIssqn,
                outrasRetencoesIssqn: outrasRetencoesIssqn,
                descontoIncondicionadoIssqn: descontoIncondicionadoIssqn,
                descontoCondicionadoIssqn: descontoCondicionadoIssqn,
                totalRetencaoIssqn: totalRetencaoIssqn,
                regimeEspecialTributacao: regimeEspecialTributacao,
                valorRetidoPis: valorRetidoPis,
                valorRetidoCofins: valorRetidoCofins,
                valorRetidoCsll: valorRetidoCsll,
                baseCalculoIrrf: baseCalculoIrrf,
                valorRetidoIrrf: valorRetidoIrrf,
                baseCalculoPrevidencia: baseCalculoPrevidencia,
                valorRetidoPrevidencia: valorRetidoPrevidencia,
                informacoesAddFisco: informacoesAddFisco,
                informacoesAddContribuinte: informacoesAddContribuinte,
                comexUfEmbarque: comexUfEmbarque,
                comexLocalEmbarque: comexLocalEmbarque,
                comexLocalDespacho: comexLocalDespacho,
                compraNotaEmpenho: compraNotaEmpenho,
                compraPedido: compraPedido,
                compraContrato: compraContrato,
                qrcode: qrcode,
                urlChave: urlChave,
                statusNota: statusNota,
                indicadorIntermediario: indicadorIntermediario,
                intermediadorCnpj: intermediadorCnpj,
                intermediadorIdCadastro: intermediadorIdCadastro,
                codigoMunicipioFgIbs: codigoMunicipioFgIbs,
                tipoNotaDebito: tipoNotaDebito,
                tipoNotaCredito: tipoNotaCredito,
                totalImpostoSeletivo: totalImpostoSeletivo,
                totalBcIbsCbs: totalBcIbsCbs,
                ibsUfTotalDiferimento: ibsUfTotalDiferimento,
                ibsUfTotalDevTributos: ibsUfTotalDevTributos,
                ibsUfValorTotal: ibsUfValorTotal,
                ibsMunTotalDiferimento: ibsMunTotalDiferimento,
                ibsMunTotalDevTributos: ibsMunTotalDevTributos,
                ibsMunValorTotal: ibsMunValorTotal,
                cbsTotalDiferimento: cbsTotalDiferimento,
                cbsTotalDevTributos: cbsTotalDevTributos,
                cbsValorTotal: cbsValorTotal,
                cbsTotalCreditoPresumido: cbsTotalCreditoPresumido,
                cbsTotCrePreSuspensivo: cbsTotCrePreSuspensivo,
                monoIbsTotal: monoIbsTotal,
                monoCbsTotal: monoCbsTotal,
                monoIbsTotalRetencao: monoIbsTotalRetencao,
                monoCbsTotalRetencao: monoCbsTotalRetencao,
                monoIbsRetido: monoIbsRetido,
                monoCbsRetido: monoCbsRetido,
                valorTotalNfe: valorTotalNfe,
                totalQtdeTributadaMono: totalQtdeTributadaMono,
                totalIcmsMono: totalIcmsMono,
                totalQuantidadeMonoRetencao: totalQuantidadeMonoRetencao,
                totalIcmsMonoRetencao: totalIcmsMonoRetencao,
                totalQuantidadeMonoRetida: totalQuantidadeMonoRetida,
                totalIcmsMonoRetido: totalIcmsMonoRetido,
                ibsValorTotal: ibsValorTotal,
                totalCreditoPresumido: totalCreditoPresumido,
                totalCredPresSuspensivo: totalCredPresSuspensivo,
              ),
          withReferenceMapper:
              (p0) =>
                  p0
                      .map(
                        (e) => (
                          e.readTable(table),
                          BaseReferences(db, table, e),
                        ),
                      )
                      .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$NfeCabecalhosTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $NfeCabecalhosTable,
      NfeCabecalho,
      $$NfeCabecalhosTableFilterComposer,
      $$NfeCabecalhosTableOrderingComposer,
      $$NfeCabecalhosTableAnnotationComposer,
      $$NfeCabecalhosTableCreateCompanionBuilder,
      $$NfeCabecalhosTableUpdateCompanionBuilder,
      (
        NfeCabecalho,
        BaseReferences<_$AppDatabase, $NfeCabecalhosTable, NfeCabecalho>,
      ),
      NfeCabecalho,
      PrefetchHooks Function()
    >;
typedef $$NfeDetalhesTableCreateCompanionBuilder =
    NfeDetalhesCompanion Function({
      Value<int?> id,
      Value<int?> idNfeCabecalho,
      Value<int?> idProduto,
      Value<int?> numeroItem,
      Value<String?> codigoProduto,
      Value<String?> gtin,
      Value<String?> nomeProduto,
      Value<String?> ncm,
      Value<String?> nve,
      Value<String?> cest,
      Value<String?> indicadorEscalaRelevante,
      Value<String?> cnpjFabricante,
      Value<String?> codigoBeneficioFiscal,
      Value<int?> exTipi,
      Value<int?> cfop,
      Value<String?> unidadeComercial,
      Value<double?> quantidadeComercial,
      Value<String?> numeroPedidoCompra,
      Value<int?> itemPedidoCompra,
      Value<String?> numeroFci,
      Value<String?> numeroRecopi,
      Value<double?> valorUnitarioComercial,
      Value<double?> valorBrutoProduto,
      Value<String?> gtinUnidadeTributavel,
      Value<String?> unidadeTributavel,
      Value<double?> quantidadeTributavel,
      Value<double?> valorUnitarioTributavel,
      Value<double?> valorFrete,
      Value<double?> valorSeguro,
      Value<double?> valorDesconto,
      Value<double?> valorOutrasDespesas,
      Value<String?> entraTotal,
      Value<double?> valorTotalTributos,
      Value<double?> percentualDevolvido,
      Value<double?> valorIpiDevolvido,
      Value<String?> informacoesAdicionais,
      Value<double?> valorSubtotal,
      Value<double?> valorTotal,
      Value<String?> indicadorBemMovelUsado,
      Value<String?> codigoBarraDifGtin,
      Value<String?> codigoBarraTribDifGtin,
    });
typedef $$NfeDetalhesTableUpdateCompanionBuilder =
    NfeDetalhesCompanion Function({
      Value<int?> id,
      Value<int?> idNfeCabecalho,
      Value<int?> idProduto,
      Value<int?> numeroItem,
      Value<String?> codigoProduto,
      Value<String?> gtin,
      Value<String?> nomeProduto,
      Value<String?> ncm,
      Value<String?> nve,
      Value<String?> cest,
      Value<String?> indicadorEscalaRelevante,
      Value<String?> cnpjFabricante,
      Value<String?> codigoBeneficioFiscal,
      Value<int?> exTipi,
      Value<int?> cfop,
      Value<String?> unidadeComercial,
      Value<double?> quantidadeComercial,
      Value<String?> numeroPedidoCompra,
      Value<int?> itemPedidoCompra,
      Value<String?> numeroFci,
      Value<String?> numeroRecopi,
      Value<double?> valorUnitarioComercial,
      Value<double?> valorBrutoProduto,
      Value<String?> gtinUnidadeTributavel,
      Value<String?> unidadeTributavel,
      Value<double?> quantidadeTributavel,
      Value<double?> valorUnitarioTributavel,
      Value<double?> valorFrete,
      Value<double?> valorSeguro,
      Value<double?> valorDesconto,
      Value<double?> valorOutrasDespesas,
      Value<String?> entraTotal,
      Value<double?> valorTotalTributos,
      Value<double?> percentualDevolvido,
      Value<double?> valorIpiDevolvido,
      Value<String?> informacoesAdicionais,
      Value<double?> valorSubtotal,
      Value<double?> valorTotal,
      Value<String?> indicadorBemMovelUsado,
      Value<String?> codigoBarraDifGtin,
      Value<String?> codigoBarraTribDifGtin,
    });

class $$NfeDetalhesTableFilterComposer
    extends Composer<_$AppDatabase, $NfeDetalhesTable> {
  $$NfeDetalhesTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idNfeCabecalho => $composableBuilder(
    column: $table.idNfeCabecalho,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idProduto => $composableBuilder(
    column: $table.idProduto,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get numeroItem => $composableBuilder(
    column: $table.numeroItem,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get codigoProduto => $composableBuilder(
    column: $table.codigoProduto,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get gtin => $composableBuilder(
    column: $table.gtin,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get nomeProduto => $composableBuilder(
    column: $table.nomeProduto,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get ncm => $composableBuilder(
    column: $table.ncm,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get nve => $composableBuilder(
    column: $table.nve,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get cest => $composableBuilder(
    column: $table.cest,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get indicadorEscalaRelevante => $composableBuilder(
    column: $table.indicadorEscalaRelevante,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get cnpjFabricante => $composableBuilder(
    column: $table.cnpjFabricante,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get codigoBeneficioFiscal => $composableBuilder(
    column: $table.codigoBeneficioFiscal,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get exTipi => $composableBuilder(
    column: $table.exTipi,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get cfop => $composableBuilder(
    column: $table.cfop,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get unidadeComercial => $composableBuilder(
    column: $table.unidadeComercial,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get quantidadeComercial => $composableBuilder(
    column: $table.quantidadeComercial,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get numeroPedidoCompra => $composableBuilder(
    column: $table.numeroPedidoCompra,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get itemPedidoCompra => $composableBuilder(
    column: $table.itemPedidoCompra,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get numeroFci => $composableBuilder(
    column: $table.numeroFci,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get numeroRecopi => $composableBuilder(
    column: $table.numeroRecopi,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorUnitarioComercial => $composableBuilder(
    column: $table.valorUnitarioComercial,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorBrutoProduto => $composableBuilder(
    column: $table.valorBrutoProduto,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get gtinUnidadeTributavel => $composableBuilder(
    column: $table.gtinUnidadeTributavel,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get unidadeTributavel => $composableBuilder(
    column: $table.unidadeTributavel,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get quantidadeTributavel => $composableBuilder(
    column: $table.quantidadeTributavel,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorUnitarioTributavel => $composableBuilder(
    column: $table.valorUnitarioTributavel,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorFrete => $composableBuilder(
    column: $table.valorFrete,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorSeguro => $composableBuilder(
    column: $table.valorSeguro,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorDesconto => $composableBuilder(
    column: $table.valorDesconto,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorOutrasDespesas => $composableBuilder(
    column: $table.valorOutrasDespesas,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get entraTotal => $composableBuilder(
    column: $table.entraTotal,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorTotalTributos => $composableBuilder(
    column: $table.valorTotalTributos,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get percentualDevolvido => $composableBuilder(
    column: $table.percentualDevolvido,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorIpiDevolvido => $composableBuilder(
    column: $table.valorIpiDevolvido,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get informacoesAdicionais => $composableBuilder(
    column: $table.informacoesAdicionais,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorSubtotal => $composableBuilder(
    column: $table.valorSubtotal,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorTotal => $composableBuilder(
    column: $table.valorTotal,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get indicadorBemMovelUsado => $composableBuilder(
    column: $table.indicadorBemMovelUsado,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get codigoBarraDifGtin => $composableBuilder(
    column: $table.codigoBarraDifGtin,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get codigoBarraTribDifGtin => $composableBuilder(
    column: $table.codigoBarraTribDifGtin,
    builder: (column) => ColumnFilters(column),
  );
}

class $$NfeDetalhesTableOrderingComposer
    extends Composer<_$AppDatabase, $NfeDetalhesTable> {
  $$NfeDetalhesTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idNfeCabecalho => $composableBuilder(
    column: $table.idNfeCabecalho,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idProduto => $composableBuilder(
    column: $table.idProduto,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get numeroItem => $composableBuilder(
    column: $table.numeroItem,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get codigoProduto => $composableBuilder(
    column: $table.codigoProduto,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get gtin => $composableBuilder(
    column: $table.gtin,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get nomeProduto => $composableBuilder(
    column: $table.nomeProduto,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get ncm => $composableBuilder(
    column: $table.ncm,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get nve => $composableBuilder(
    column: $table.nve,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get cest => $composableBuilder(
    column: $table.cest,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get indicadorEscalaRelevante => $composableBuilder(
    column: $table.indicadorEscalaRelevante,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get cnpjFabricante => $composableBuilder(
    column: $table.cnpjFabricante,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get codigoBeneficioFiscal => $composableBuilder(
    column: $table.codigoBeneficioFiscal,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get exTipi => $composableBuilder(
    column: $table.exTipi,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get cfop => $composableBuilder(
    column: $table.cfop,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get unidadeComercial => $composableBuilder(
    column: $table.unidadeComercial,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get quantidadeComercial => $composableBuilder(
    column: $table.quantidadeComercial,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get numeroPedidoCompra => $composableBuilder(
    column: $table.numeroPedidoCompra,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get itemPedidoCompra => $composableBuilder(
    column: $table.itemPedidoCompra,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get numeroFci => $composableBuilder(
    column: $table.numeroFci,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get numeroRecopi => $composableBuilder(
    column: $table.numeroRecopi,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorUnitarioComercial => $composableBuilder(
    column: $table.valorUnitarioComercial,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorBrutoProduto => $composableBuilder(
    column: $table.valorBrutoProduto,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get gtinUnidadeTributavel => $composableBuilder(
    column: $table.gtinUnidadeTributavel,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get unidadeTributavel => $composableBuilder(
    column: $table.unidadeTributavel,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get quantidadeTributavel => $composableBuilder(
    column: $table.quantidadeTributavel,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorUnitarioTributavel => $composableBuilder(
    column: $table.valorUnitarioTributavel,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorFrete => $composableBuilder(
    column: $table.valorFrete,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorSeguro => $composableBuilder(
    column: $table.valorSeguro,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorDesconto => $composableBuilder(
    column: $table.valorDesconto,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorOutrasDespesas => $composableBuilder(
    column: $table.valorOutrasDespesas,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get entraTotal => $composableBuilder(
    column: $table.entraTotal,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorTotalTributos => $composableBuilder(
    column: $table.valorTotalTributos,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get percentualDevolvido => $composableBuilder(
    column: $table.percentualDevolvido,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorIpiDevolvido => $composableBuilder(
    column: $table.valorIpiDevolvido,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get informacoesAdicionais => $composableBuilder(
    column: $table.informacoesAdicionais,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorSubtotal => $composableBuilder(
    column: $table.valorSubtotal,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorTotal => $composableBuilder(
    column: $table.valorTotal,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get indicadorBemMovelUsado => $composableBuilder(
    column: $table.indicadorBemMovelUsado,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get codigoBarraDifGtin => $composableBuilder(
    column: $table.codigoBarraDifGtin,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get codigoBarraTribDifGtin => $composableBuilder(
    column: $table.codigoBarraTribDifGtin,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$NfeDetalhesTableAnnotationComposer
    extends Composer<_$AppDatabase, $NfeDetalhesTable> {
  $$NfeDetalhesTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<int> get idNfeCabecalho => $composableBuilder(
    column: $table.idNfeCabecalho,
    builder: (column) => column,
  );

  GeneratedColumn<int> get idProduto =>
      $composableBuilder(column: $table.idProduto, builder: (column) => column);

  GeneratedColumn<int> get numeroItem => $composableBuilder(
    column: $table.numeroItem,
    builder: (column) => column,
  );

  GeneratedColumn<String> get codigoProduto => $composableBuilder(
    column: $table.codigoProduto,
    builder: (column) => column,
  );

  GeneratedColumn<String> get gtin =>
      $composableBuilder(column: $table.gtin, builder: (column) => column);

  GeneratedColumn<String> get nomeProduto => $composableBuilder(
    column: $table.nomeProduto,
    builder: (column) => column,
  );

  GeneratedColumn<String> get ncm =>
      $composableBuilder(column: $table.ncm, builder: (column) => column);

  GeneratedColumn<String> get nve =>
      $composableBuilder(column: $table.nve, builder: (column) => column);

  GeneratedColumn<String> get cest =>
      $composableBuilder(column: $table.cest, builder: (column) => column);

  GeneratedColumn<String> get indicadorEscalaRelevante => $composableBuilder(
    column: $table.indicadorEscalaRelevante,
    builder: (column) => column,
  );

  GeneratedColumn<String> get cnpjFabricante => $composableBuilder(
    column: $table.cnpjFabricante,
    builder: (column) => column,
  );

  GeneratedColumn<String> get codigoBeneficioFiscal => $composableBuilder(
    column: $table.codigoBeneficioFiscal,
    builder: (column) => column,
  );

  GeneratedColumn<int> get exTipi =>
      $composableBuilder(column: $table.exTipi, builder: (column) => column);

  GeneratedColumn<int> get cfop =>
      $composableBuilder(column: $table.cfop, builder: (column) => column);

  GeneratedColumn<String> get unidadeComercial => $composableBuilder(
    column: $table.unidadeComercial,
    builder: (column) => column,
  );

  GeneratedColumn<double> get quantidadeComercial => $composableBuilder(
    column: $table.quantidadeComercial,
    builder: (column) => column,
  );

  GeneratedColumn<String> get numeroPedidoCompra => $composableBuilder(
    column: $table.numeroPedidoCompra,
    builder: (column) => column,
  );

  GeneratedColumn<int> get itemPedidoCompra => $composableBuilder(
    column: $table.itemPedidoCompra,
    builder: (column) => column,
  );

  GeneratedColumn<String> get numeroFci =>
      $composableBuilder(column: $table.numeroFci, builder: (column) => column);

  GeneratedColumn<String> get numeroRecopi => $composableBuilder(
    column: $table.numeroRecopi,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorUnitarioComercial => $composableBuilder(
    column: $table.valorUnitarioComercial,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorBrutoProduto => $composableBuilder(
    column: $table.valorBrutoProduto,
    builder: (column) => column,
  );

  GeneratedColumn<String> get gtinUnidadeTributavel => $composableBuilder(
    column: $table.gtinUnidadeTributavel,
    builder: (column) => column,
  );

  GeneratedColumn<String> get unidadeTributavel => $composableBuilder(
    column: $table.unidadeTributavel,
    builder: (column) => column,
  );

  GeneratedColumn<double> get quantidadeTributavel => $composableBuilder(
    column: $table.quantidadeTributavel,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorUnitarioTributavel => $composableBuilder(
    column: $table.valorUnitarioTributavel,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorFrete => $composableBuilder(
    column: $table.valorFrete,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorSeguro => $composableBuilder(
    column: $table.valorSeguro,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorDesconto => $composableBuilder(
    column: $table.valorDesconto,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorOutrasDespesas => $composableBuilder(
    column: $table.valorOutrasDespesas,
    builder: (column) => column,
  );

  GeneratedColumn<String> get entraTotal => $composableBuilder(
    column: $table.entraTotal,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorTotalTributos => $composableBuilder(
    column: $table.valorTotalTributos,
    builder: (column) => column,
  );

  GeneratedColumn<double> get percentualDevolvido => $composableBuilder(
    column: $table.percentualDevolvido,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorIpiDevolvido => $composableBuilder(
    column: $table.valorIpiDevolvido,
    builder: (column) => column,
  );

  GeneratedColumn<String> get informacoesAdicionais => $composableBuilder(
    column: $table.informacoesAdicionais,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorSubtotal => $composableBuilder(
    column: $table.valorSubtotal,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorTotal => $composableBuilder(
    column: $table.valorTotal,
    builder: (column) => column,
  );

  GeneratedColumn<String> get indicadorBemMovelUsado => $composableBuilder(
    column: $table.indicadorBemMovelUsado,
    builder: (column) => column,
  );

  GeneratedColumn<String> get codigoBarraDifGtin => $composableBuilder(
    column: $table.codigoBarraDifGtin,
    builder: (column) => column,
  );

  GeneratedColumn<String> get codigoBarraTribDifGtin => $composableBuilder(
    column: $table.codigoBarraTribDifGtin,
    builder: (column) => column,
  );
}

class $$NfeDetalhesTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $NfeDetalhesTable,
          NfeDetalhe,
          $$NfeDetalhesTableFilterComposer,
          $$NfeDetalhesTableOrderingComposer,
          $$NfeDetalhesTableAnnotationComposer,
          $$NfeDetalhesTableCreateCompanionBuilder,
          $$NfeDetalhesTableUpdateCompanionBuilder,
          (
            NfeDetalhe,
            BaseReferences<_$AppDatabase, $NfeDetalhesTable, NfeDetalhe>,
          ),
          NfeDetalhe,
          PrefetchHooks Function()
        > {
  $$NfeDetalhesTableTableManager(_$AppDatabase db, $NfeDetalhesTable table)
    : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer:
              () => $$NfeDetalhesTableFilterComposer($db: db, $table: table),
          createOrderingComposer:
              () => $$NfeDetalhesTableOrderingComposer($db: db, $table: table),
          createComputedFieldComposer:
              () =>
                  $$NfeDetalhesTableAnnotationComposer($db: db, $table: table),
          updateCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeCabecalho = const Value.absent(),
                Value<int?> idProduto = const Value.absent(),
                Value<int?> numeroItem = const Value.absent(),
                Value<String?> codigoProduto = const Value.absent(),
                Value<String?> gtin = const Value.absent(),
                Value<String?> nomeProduto = const Value.absent(),
                Value<String?> ncm = const Value.absent(),
                Value<String?> nve = const Value.absent(),
                Value<String?> cest = const Value.absent(),
                Value<String?> indicadorEscalaRelevante = const Value.absent(),
                Value<String?> cnpjFabricante = const Value.absent(),
                Value<String?> codigoBeneficioFiscal = const Value.absent(),
                Value<int?> exTipi = const Value.absent(),
                Value<int?> cfop = const Value.absent(),
                Value<String?> unidadeComercial = const Value.absent(),
                Value<double?> quantidadeComercial = const Value.absent(),
                Value<String?> numeroPedidoCompra = const Value.absent(),
                Value<int?> itemPedidoCompra = const Value.absent(),
                Value<String?> numeroFci = const Value.absent(),
                Value<String?> numeroRecopi = const Value.absent(),
                Value<double?> valorUnitarioComercial = const Value.absent(),
                Value<double?> valorBrutoProduto = const Value.absent(),
                Value<String?> gtinUnidadeTributavel = const Value.absent(),
                Value<String?> unidadeTributavel = const Value.absent(),
                Value<double?> quantidadeTributavel = const Value.absent(),
                Value<double?> valorUnitarioTributavel = const Value.absent(),
                Value<double?> valorFrete = const Value.absent(),
                Value<double?> valorSeguro = const Value.absent(),
                Value<double?> valorDesconto = const Value.absent(),
                Value<double?> valorOutrasDespesas = const Value.absent(),
                Value<String?> entraTotal = const Value.absent(),
                Value<double?> valorTotalTributos = const Value.absent(),
                Value<double?> percentualDevolvido = const Value.absent(),
                Value<double?> valorIpiDevolvido = const Value.absent(),
                Value<String?> informacoesAdicionais = const Value.absent(),
                Value<double?> valorSubtotal = const Value.absent(),
                Value<double?> valorTotal = const Value.absent(),
                Value<String?> indicadorBemMovelUsado = const Value.absent(),
                Value<String?> codigoBarraDifGtin = const Value.absent(),
                Value<String?> codigoBarraTribDifGtin = const Value.absent(),
              }) => NfeDetalhesCompanion(
                id: id,
                idNfeCabecalho: idNfeCabecalho,
                idProduto: idProduto,
                numeroItem: numeroItem,
                codigoProduto: codigoProduto,
                gtin: gtin,
                nomeProduto: nomeProduto,
                ncm: ncm,
                nve: nve,
                cest: cest,
                indicadorEscalaRelevante: indicadorEscalaRelevante,
                cnpjFabricante: cnpjFabricante,
                codigoBeneficioFiscal: codigoBeneficioFiscal,
                exTipi: exTipi,
                cfop: cfop,
                unidadeComercial: unidadeComercial,
                quantidadeComercial: quantidadeComercial,
                numeroPedidoCompra: numeroPedidoCompra,
                itemPedidoCompra: itemPedidoCompra,
                numeroFci: numeroFci,
                numeroRecopi: numeroRecopi,
                valorUnitarioComercial: valorUnitarioComercial,
                valorBrutoProduto: valorBrutoProduto,
                gtinUnidadeTributavel: gtinUnidadeTributavel,
                unidadeTributavel: unidadeTributavel,
                quantidadeTributavel: quantidadeTributavel,
                valorUnitarioTributavel: valorUnitarioTributavel,
                valorFrete: valorFrete,
                valorSeguro: valorSeguro,
                valorDesconto: valorDesconto,
                valorOutrasDespesas: valorOutrasDespesas,
                entraTotal: entraTotal,
                valorTotalTributos: valorTotalTributos,
                percentualDevolvido: percentualDevolvido,
                valorIpiDevolvido: valorIpiDevolvido,
                informacoesAdicionais: informacoesAdicionais,
                valorSubtotal: valorSubtotal,
                valorTotal: valorTotal,
                indicadorBemMovelUsado: indicadorBemMovelUsado,
                codigoBarraDifGtin: codigoBarraDifGtin,
                codigoBarraTribDifGtin: codigoBarraTribDifGtin,
              ),
          createCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeCabecalho = const Value.absent(),
                Value<int?> idProduto = const Value.absent(),
                Value<int?> numeroItem = const Value.absent(),
                Value<String?> codigoProduto = const Value.absent(),
                Value<String?> gtin = const Value.absent(),
                Value<String?> nomeProduto = const Value.absent(),
                Value<String?> ncm = const Value.absent(),
                Value<String?> nve = const Value.absent(),
                Value<String?> cest = const Value.absent(),
                Value<String?> indicadorEscalaRelevante = const Value.absent(),
                Value<String?> cnpjFabricante = const Value.absent(),
                Value<String?> codigoBeneficioFiscal = const Value.absent(),
                Value<int?> exTipi = const Value.absent(),
                Value<int?> cfop = const Value.absent(),
                Value<String?> unidadeComercial = const Value.absent(),
                Value<double?> quantidadeComercial = const Value.absent(),
                Value<String?> numeroPedidoCompra = const Value.absent(),
                Value<int?> itemPedidoCompra = const Value.absent(),
                Value<String?> numeroFci = const Value.absent(),
                Value<String?> numeroRecopi = const Value.absent(),
                Value<double?> valorUnitarioComercial = const Value.absent(),
                Value<double?> valorBrutoProduto = const Value.absent(),
                Value<String?> gtinUnidadeTributavel = const Value.absent(),
                Value<String?> unidadeTributavel = const Value.absent(),
                Value<double?> quantidadeTributavel = const Value.absent(),
                Value<double?> valorUnitarioTributavel = const Value.absent(),
                Value<double?> valorFrete = const Value.absent(),
                Value<double?> valorSeguro = const Value.absent(),
                Value<double?> valorDesconto = const Value.absent(),
                Value<double?> valorOutrasDespesas = const Value.absent(),
                Value<String?> entraTotal = const Value.absent(),
                Value<double?> valorTotalTributos = const Value.absent(),
                Value<double?> percentualDevolvido = const Value.absent(),
                Value<double?> valorIpiDevolvido = const Value.absent(),
                Value<String?> informacoesAdicionais = const Value.absent(),
                Value<double?> valorSubtotal = const Value.absent(),
                Value<double?> valorTotal = const Value.absent(),
                Value<String?> indicadorBemMovelUsado = const Value.absent(),
                Value<String?> codigoBarraDifGtin = const Value.absent(),
                Value<String?> codigoBarraTribDifGtin = const Value.absent(),
              }) => NfeDetalhesCompanion.insert(
                id: id,
                idNfeCabecalho: idNfeCabecalho,
                idProduto: idProduto,
                numeroItem: numeroItem,
                codigoProduto: codigoProduto,
                gtin: gtin,
                nomeProduto: nomeProduto,
                ncm: ncm,
                nve: nve,
                cest: cest,
                indicadorEscalaRelevante: indicadorEscalaRelevante,
                cnpjFabricante: cnpjFabricante,
                codigoBeneficioFiscal: codigoBeneficioFiscal,
                exTipi: exTipi,
                cfop: cfop,
                unidadeComercial: unidadeComercial,
                quantidadeComercial: quantidadeComercial,
                numeroPedidoCompra: numeroPedidoCompra,
                itemPedidoCompra: itemPedidoCompra,
                numeroFci: numeroFci,
                numeroRecopi: numeroRecopi,
                valorUnitarioComercial: valorUnitarioComercial,
                valorBrutoProduto: valorBrutoProduto,
                gtinUnidadeTributavel: gtinUnidadeTributavel,
                unidadeTributavel: unidadeTributavel,
                quantidadeTributavel: quantidadeTributavel,
                valorUnitarioTributavel: valorUnitarioTributavel,
                valorFrete: valorFrete,
                valorSeguro: valorSeguro,
                valorDesconto: valorDesconto,
                valorOutrasDespesas: valorOutrasDespesas,
                entraTotal: entraTotal,
                valorTotalTributos: valorTotalTributos,
                percentualDevolvido: percentualDevolvido,
                valorIpiDevolvido: valorIpiDevolvido,
                informacoesAdicionais: informacoesAdicionais,
                valorSubtotal: valorSubtotal,
                valorTotal: valorTotal,
                indicadorBemMovelUsado: indicadorBemMovelUsado,
                codigoBarraDifGtin: codigoBarraDifGtin,
                codigoBarraTribDifGtin: codigoBarraTribDifGtin,
              ),
          withReferenceMapper:
              (p0) =>
                  p0
                      .map(
                        (e) => (
                          e.readTable(table),
                          BaseReferences(db, table, e),
                        ),
                      )
                      .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$NfeDetalhesTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $NfeDetalhesTable,
      NfeDetalhe,
      $$NfeDetalhesTableFilterComposer,
      $$NfeDetalhesTableOrderingComposer,
      $$NfeDetalhesTableAnnotationComposer,
      $$NfeDetalhesTableCreateCompanionBuilder,
      $$NfeDetalhesTableUpdateCompanionBuilder,
      (
        NfeDetalhe,
        BaseReferences<_$AppDatabase, $NfeDetalhesTable, NfeDetalhe>,
      ),
      NfeDetalhe,
      PrefetchHooks Function()
    >;
typedef $$NfeDetEspecificoCombustivelsTableCreateCompanionBuilder =
    NfeDetEspecificoCombustivelsCompanion Function({
      Value<int?> id,
      Value<int?> idNfeDetalhe,
      Value<int?> codigoAnp,
      Value<String?> descricaoAnp,
      Value<double?> percentualGlp,
      Value<double?> percentualGasNacional,
      Value<double?> percentualGasImportado,
      Value<double?> valorPartida,
      Value<String?> codif,
      Value<double?> quantidadeTempAmbiente,
      Value<String?> ufConsumo,
      Value<double?> cideBaseCalculo,
      Value<double?> cideAliquota,
      Value<double?> cideValor,
      Value<int?> encerranteBico,
      Value<int?> encerranteBomba,
      Value<int?> encerranteTanque,
      Value<double?> encerranteValorInicio,
      Value<double?> encerranteValorFim,
      Value<double?> percentualMisturaBiodiesel,
    });
typedef $$NfeDetEspecificoCombustivelsTableUpdateCompanionBuilder =
    NfeDetEspecificoCombustivelsCompanion Function({
      Value<int?> id,
      Value<int?> idNfeDetalhe,
      Value<int?> codigoAnp,
      Value<String?> descricaoAnp,
      Value<double?> percentualGlp,
      Value<double?> percentualGasNacional,
      Value<double?> percentualGasImportado,
      Value<double?> valorPartida,
      Value<String?> codif,
      Value<double?> quantidadeTempAmbiente,
      Value<String?> ufConsumo,
      Value<double?> cideBaseCalculo,
      Value<double?> cideAliquota,
      Value<double?> cideValor,
      Value<int?> encerranteBico,
      Value<int?> encerranteBomba,
      Value<int?> encerranteTanque,
      Value<double?> encerranteValorInicio,
      Value<double?> encerranteValorFim,
      Value<double?> percentualMisturaBiodiesel,
    });

class $$NfeDetEspecificoCombustivelsTableFilterComposer
    extends Composer<_$AppDatabase, $NfeDetEspecificoCombustivelsTable> {
  $$NfeDetEspecificoCombustivelsTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get codigoAnp => $composableBuilder(
    column: $table.codigoAnp,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get descricaoAnp => $composableBuilder(
    column: $table.descricaoAnp,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get percentualGlp => $composableBuilder(
    column: $table.percentualGlp,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get percentualGasNacional => $composableBuilder(
    column: $table.percentualGasNacional,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get percentualGasImportado => $composableBuilder(
    column: $table.percentualGasImportado,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorPartida => $composableBuilder(
    column: $table.valorPartida,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get codif => $composableBuilder(
    column: $table.codif,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get quantidadeTempAmbiente => $composableBuilder(
    column: $table.quantidadeTempAmbiente,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get ufConsumo => $composableBuilder(
    column: $table.ufConsumo,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get cideBaseCalculo => $composableBuilder(
    column: $table.cideBaseCalculo,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get cideAliquota => $composableBuilder(
    column: $table.cideAliquota,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get cideValor => $composableBuilder(
    column: $table.cideValor,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get encerranteBico => $composableBuilder(
    column: $table.encerranteBico,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get encerranteBomba => $composableBuilder(
    column: $table.encerranteBomba,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get encerranteTanque => $composableBuilder(
    column: $table.encerranteTanque,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get encerranteValorInicio => $composableBuilder(
    column: $table.encerranteValorInicio,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get encerranteValorFim => $composableBuilder(
    column: $table.encerranteValorFim,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get percentualMisturaBiodiesel => $composableBuilder(
    column: $table.percentualMisturaBiodiesel,
    builder: (column) => ColumnFilters(column),
  );
}

class $$NfeDetEspecificoCombustivelsTableOrderingComposer
    extends Composer<_$AppDatabase, $NfeDetEspecificoCombustivelsTable> {
  $$NfeDetEspecificoCombustivelsTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get codigoAnp => $composableBuilder(
    column: $table.codigoAnp,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get descricaoAnp => $composableBuilder(
    column: $table.descricaoAnp,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get percentualGlp => $composableBuilder(
    column: $table.percentualGlp,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get percentualGasNacional => $composableBuilder(
    column: $table.percentualGasNacional,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get percentualGasImportado => $composableBuilder(
    column: $table.percentualGasImportado,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorPartida => $composableBuilder(
    column: $table.valorPartida,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get codif => $composableBuilder(
    column: $table.codif,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get quantidadeTempAmbiente => $composableBuilder(
    column: $table.quantidadeTempAmbiente,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get ufConsumo => $composableBuilder(
    column: $table.ufConsumo,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get cideBaseCalculo => $composableBuilder(
    column: $table.cideBaseCalculo,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get cideAliquota => $composableBuilder(
    column: $table.cideAliquota,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get cideValor => $composableBuilder(
    column: $table.cideValor,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get encerranteBico => $composableBuilder(
    column: $table.encerranteBico,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get encerranteBomba => $composableBuilder(
    column: $table.encerranteBomba,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get encerranteTanque => $composableBuilder(
    column: $table.encerranteTanque,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get encerranteValorInicio => $composableBuilder(
    column: $table.encerranteValorInicio,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get encerranteValorFim => $composableBuilder(
    column: $table.encerranteValorFim,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get percentualMisturaBiodiesel => $composableBuilder(
    column: $table.percentualMisturaBiodiesel,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$NfeDetEspecificoCombustivelsTableAnnotationComposer
    extends Composer<_$AppDatabase, $NfeDetEspecificoCombustivelsTable> {
  $$NfeDetEspecificoCombustivelsTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<int> get idNfeDetalhe => $composableBuilder(
    column: $table.idNfeDetalhe,
    builder: (column) => column,
  );

  GeneratedColumn<int> get codigoAnp =>
      $composableBuilder(column: $table.codigoAnp, builder: (column) => column);

  GeneratedColumn<String> get descricaoAnp => $composableBuilder(
    column: $table.descricaoAnp,
    builder: (column) => column,
  );

  GeneratedColumn<double> get percentualGlp => $composableBuilder(
    column: $table.percentualGlp,
    builder: (column) => column,
  );

  GeneratedColumn<double> get percentualGasNacional => $composableBuilder(
    column: $table.percentualGasNacional,
    builder: (column) => column,
  );

  GeneratedColumn<double> get percentualGasImportado => $composableBuilder(
    column: $table.percentualGasImportado,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorPartida => $composableBuilder(
    column: $table.valorPartida,
    builder: (column) => column,
  );

  GeneratedColumn<String> get codif =>
      $composableBuilder(column: $table.codif, builder: (column) => column);

  GeneratedColumn<double> get quantidadeTempAmbiente => $composableBuilder(
    column: $table.quantidadeTempAmbiente,
    builder: (column) => column,
  );

  GeneratedColumn<String> get ufConsumo =>
      $composableBuilder(column: $table.ufConsumo, builder: (column) => column);

  GeneratedColumn<double> get cideBaseCalculo => $composableBuilder(
    column: $table.cideBaseCalculo,
    builder: (column) => column,
  );

  GeneratedColumn<double> get cideAliquota => $composableBuilder(
    column: $table.cideAliquota,
    builder: (column) => column,
  );

  GeneratedColumn<double> get cideValor =>
      $composableBuilder(column: $table.cideValor, builder: (column) => column);

  GeneratedColumn<int> get encerranteBico => $composableBuilder(
    column: $table.encerranteBico,
    builder: (column) => column,
  );

  GeneratedColumn<int> get encerranteBomba => $composableBuilder(
    column: $table.encerranteBomba,
    builder: (column) => column,
  );

  GeneratedColumn<int> get encerranteTanque => $composableBuilder(
    column: $table.encerranteTanque,
    builder: (column) => column,
  );

  GeneratedColumn<double> get encerranteValorInicio => $composableBuilder(
    column: $table.encerranteValorInicio,
    builder: (column) => column,
  );

  GeneratedColumn<double> get encerranteValorFim => $composableBuilder(
    column: $table.encerranteValorFim,
    builder: (column) => column,
  );

  GeneratedColumn<double> get percentualMisturaBiodiesel => $composableBuilder(
    column: $table.percentualMisturaBiodiesel,
    builder: (column) => column,
  );
}

class $$NfeDetEspecificoCombustivelsTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $NfeDetEspecificoCombustivelsTable,
          NfeDetEspecificoCombustivel,
          $$NfeDetEspecificoCombustivelsTableFilterComposer,
          $$NfeDetEspecificoCombustivelsTableOrderingComposer,
          $$NfeDetEspecificoCombustivelsTableAnnotationComposer,
          $$NfeDetEspecificoCombustivelsTableCreateCompanionBuilder,
          $$NfeDetEspecificoCombustivelsTableUpdateCompanionBuilder,
          (
            NfeDetEspecificoCombustivel,
            BaseReferences<
              _$AppDatabase,
              $NfeDetEspecificoCombustivelsTable,
              NfeDetEspecificoCombustivel
            >,
          ),
          NfeDetEspecificoCombustivel,
          PrefetchHooks Function()
        > {
  $$NfeDetEspecificoCombustivelsTableTableManager(
    _$AppDatabase db,
    $NfeDetEspecificoCombustivelsTable table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer:
              () => $$NfeDetEspecificoCombustivelsTableFilterComposer(
                $db: db,
                $table: table,
              ),
          createOrderingComposer:
              () => $$NfeDetEspecificoCombustivelsTableOrderingComposer(
                $db: db,
                $table: table,
              ),
          createComputedFieldComposer:
              () => $$NfeDetEspecificoCombustivelsTableAnnotationComposer(
                $db: db,
                $table: table,
              ),
          updateCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeDetalhe = const Value.absent(),
                Value<int?> codigoAnp = const Value.absent(),
                Value<String?> descricaoAnp = const Value.absent(),
                Value<double?> percentualGlp = const Value.absent(),
                Value<double?> percentualGasNacional = const Value.absent(),
                Value<double?> percentualGasImportado = const Value.absent(),
                Value<double?> valorPartida = const Value.absent(),
                Value<String?> codif = const Value.absent(),
                Value<double?> quantidadeTempAmbiente = const Value.absent(),
                Value<String?> ufConsumo = const Value.absent(),
                Value<double?> cideBaseCalculo = const Value.absent(),
                Value<double?> cideAliquota = const Value.absent(),
                Value<double?> cideValor = const Value.absent(),
                Value<int?> encerranteBico = const Value.absent(),
                Value<int?> encerranteBomba = const Value.absent(),
                Value<int?> encerranteTanque = const Value.absent(),
                Value<double?> encerranteValorInicio = const Value.absent(),
                Value<double?> encerranteValorFim = const Value.absent(),
                Value<double?> percentualMisturaBiodiesel =
                    const Value.absent(),
              }) => NfeDetEspecificoCombustivelsCompanion(
                id: id,
                idNfeDetalhe: idNfeDetalhe,
                codigoAnp: codigoAnp,
                descricaoAnp: descricaoAnp,
                percentualGlp: percentualGlp,
                percentualGasNacional: percentualGasNacional,
                percentualGasImportado: percentualGasImportado,
                valorPartida: valorPartida,
                codif: codif,
                quantidadeTempAmbiente: quantidadeTempAmbiente,
                ufConsumo: ufConsumo,
                cideBaseCalculo: cideBaseCalculo,
                cideAliquota: cideAliquota,
                cideValor: cideValor,
                encerranteBico: encerranteBico,
                encerranteBomba: encerranteBomba,
                encerranteTanque: encerranteTanque,
                encerranteValorInicio: encerranteValorInicio,
                encerranteValorFim: encerranteValorFim,
                percentualMisturaBiodiesel: percentualMisturaBiodiesel,
              ),
          createCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeDetalhe = const Value.absent(),
                Value<int?> codigoAnp = const Value.absent(),
                Value<String?> descricaoAnp = const Value.absent(),
                Value<double?> percentualGlp = const Value.absent(),
                Value<double?> percentualGasNacional = const Value.absent(),
                Value<double?> percentualGasImportado = const Value.absent(),
                Value<double?> valorPartida = const Value.absent(),
                Value<String?> codif = const Value.absent(),
                Value<double?> quantidadeTempAmbiente = const Value.absent(),
                Value<String?> ufConsumo = const Value.absent(),
                Value<double?> cideBaseCalculo = const Value.absent(),
                Value<double?> cideAliquota = const Value.absent(),
                Value<double?> cideValor = const Value.absent(),
                Value<int?> encerranteBico = const Value.absent(),
                Value<int?> encerranteBomba = const Value.absent(),
                Value<int?> encerranteTanque = const Value.absent(),
                Value<double?> encerranteValorInicio = const Value.absent(),
                Value<double?> encerranteValorFim = const Value.absent(),
                Value<double?> percentualMisturaBiodiesel =
                    const Value.absent(),
              }) => NfeDetEspecificoCombustivelsCompanion.insert(
                id: id,
                idNfeDetalhe: idNfeDetalhe,
                codigoAnp: codigoAnp,
                descricaoAnp: descricaoAnp,
                percentualGlp: percentualGlp,
                percentualGasNacional: percentualGasNacional,
                percentualGasImportado: percentualGasImportado,
                valorPartida: valorPartida,
                codif: codif,
                quantidadeTempAmbiente: quantidadeTempAmbiente,
                ufConsumo: ufConsumo,
                cideBaseCalculo: cideBaseCalculo,
                cideAliquota: cideAliquota,
                cideValor: cideValor,
                encerranteBico: encerranteBico,
                encerranteBomba: encerranteBomba,
                encerranteTanque: encerranteTanque,
                encerranteValorInicio: encerranteValorInicio,
                encerranteValorFim: encerranteValorFim,
                percentualMisturaBiodiesel: percentualMisturaBiodiesel,
              ),
          withReferenceMapper:
              (p0) =>
                  p0
                      .map(
                        (e) => (
                          e.readTable(table),
                          BaseReferences(db, table, e),
                        ),
                      )
                      .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$NfeDetEspecificoCombustivelsTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $NfeDetEspecificoCombustivelsTable,
      NfeDetEspecificoCombustivel,
      $$NfeDetEspecificoCombustivelsTableFilterComposer,
      $$NfeDetEspecificoCombustivelsTableOrderingComposer,
      $$NfeDetEspecificoCombustivelsTableAnnotationComposer,
      $$NfeDetEspecificoCombustivelsTableCreateCompanionBuilder,
      $$NfeDetEspecificoCombustivelsTableUpdateCompanionBuilder,
      (
        NfeDetEspecificoCombustivel,
        BaseReferences<
          _$AppDatabase,
          $NfeDetEspecificoCombustivelsTable,
          NfeDetEspecificoCombustivel
        >,
      ),
      NfeDetEspecificoCombustivel,
      PrefetchHooks Function()
    >;
typedef $$NfeTransportesTableCreateCompanionBuilder =
    NfeTransportesCompanion Function({
      Value<int?> id,
      Value<int?> idNfeCabecalho,
      Value<int?> idTransportadora,
      Value<String?> modalidadeFrete,
      Value<String?> cnpj,
      Value<String?> cpf,
      Value<String?> nome,
      Value<String?> inscricaoEstadual,
      Value<String?> endereco,
      Value<String?> nomeMunicipio,
      Value<String?> uf,
      Value<double?> valorServico,
      Value<double?> valorBcRetencaoIcms,
      Value<double?> aliquotaRetencaoIcms,
      Value<double?> valorIcmsRetido,
      Value<int?> cfop,
      Value<int?> municipio,
      Value<String?> placaVeiculo,
      Value<String?> ufVeiculo,
      Value<String?> rntcVeiculo,
    });
typedef $$NfeTransportesTableUpdateCompanionBuilder =
    NfeTransportesCompanion Function({
      Value<int?> id,
      Value<int?> idNfeCabecalho,
      Value<int?> idTransportadora,
      Value<String?> modalidadeFrete,
      Value<String?> cnpj,
      Value<String?> cpf,
      Value<String?> nome,
      Value<String?> inscricaoEstadual,
      Value<String?> endereco,
      Value<String?> nomeMunicipio,
      Value<String?> uf,
      Value<double?> valorServico,
      Value<double?> valorBcRetencaoIcms,
      Value<double?> aliquotaRetencaoIcms,
      Value<double?> valorIcmsRetido,
      Value<int?> cfop,
      Value<int?> municipio,
      Value<String?> placaVeiculo,
      Value<String?> ufVeiculo,
      Value<String?> rntcVeiculo,
    });

class $$NfeTransportesTableFilterComposer
    extends Composer<_$AppDatabase, $NfeTransportesTable> {
  $$NfeTransportesTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idNfeCabecalho => $composableBuilder(
    column: $table.idNfeCabecalho,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idTransportadora => $composableBuilder(
    column: $table.idTransportadora,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get modalidadeFrete => $composableBuilder(
    column: $table.modalidadeFrete,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get cnpj => $composableBuilder(
    column: $table.cnpj,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get cpf => $composableBuilder(
    column: $table.cpf,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get nome => $composableBuilder(
    column: $table.nome,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get inscricaoEstadual => $composableBuilder(
    column: $table.inscricaoEstadual,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get endereco => $composableBuilder(
    column: $table.endereco,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get nomeMunicipio => $composableBuilder(
    column: $table.nomeMunicipio,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get uf => $composableBuilder(
    column: $table.uf,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorServico => $composableBuilder(
    column: $table.valorServico,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorBcRetencaoIcms => $composableBuilder(
    column: $table.valorBcRetencaoIcms,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get aliquotaRetencaoIcms => $composableBuilder(
    column: $table.aliquotaRetencaoIcms,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorIcmsRetido => $composableBuilder(
    column: $table.valorIcmsRetido,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get cfop => $composableBuilder(
    column: $table.cfop,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get municipio => $composableBuilder(
    column: $table.municipio,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get placaVeiculo => $composableBuilder(
    column: $table.placaVeiculo,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get ufVeiculo => $composableBuilder(
    column: $table.ufVeiculo,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get rntcVeiculo => $composableBuilder(
    column: $table.rntcVeiculo,
    builder: (column) => ColumnFilters(column),
  );
}

class $$NfeTransportesTableOrderingComposer
    extends Composer<_$AppDatabase, $NfeTransportesTable> {
  $$NfeTransportesTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idNfeCabecalho => $composableBuilder(
    column: $table.idNfeCabecalho,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idTransportadora => $composableBuilder(
    column: $table.idTransportadora,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get modalidadeFrete => $composableBuilder(
    column: $table.modalidadeFrete,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get cnpj => $composableBuilder(
    column: $table.cnpj,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get cpf => $composableBuilder(
    column: $table.cpf,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get nome => $composableBuilder(
    column: $table.nome,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get inscricaoEstadual => $composableBuilder(
    column: $table.inscricaoEstadual,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get endereco => $composableBuilder(
    column: $table.endereco,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get nomeMunicipio => $composableBuilder(
    column: $table.nomeMunicipio,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get uf => $composableBuilder(
    column: $table.uf,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorServico => $composableBuilder(
    column: $table.valorServico,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorBcRetencaoIcms => $composableBuilder(
    column: $table.valorBcRetencaoIcms,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get aliquotaRetencaoIcms => $composableBuilder(
    column: $table.aliquotaRetencaoIcms,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorIcmsRetido => $composableBuilder(
    column: $table.valorIcmsRetido,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get cfop => $composableBuilder(
    column: $table.cfop,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get municipio => $composableBuilder(
    column: $table.municipio,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get placaVeiculo => $composableBuilder(
    column: $table.placaVeiculo,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get ufVeiculo => $composableBuilder(
    column: $table.ufVeiculo,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get rntcVeiculo => $composableBuilder(
    column: $table.rntcVeiculo,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$NfeTransportesTableAnnotationComposer
    extends Composer<_$AppDatabase, $NfeTransportesTable> {
  $$NfeTransportesTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<int> get idNfeCabecalho => $composableBuilder(
    column: $table.idNfeCabecalho,
    builder: (column) => column,
  );

  GeneratedColumn<int> get idTransportadora => $composableBuilder(
    column: $table.idTransportadora,
    builder: (column) => column,
  );

  GeneratedColumn<String> get modalidadeFrete => $composableBuilder(
    column: $table.modalidadeFrete,
    builder: (column) => column,
  );

  GeneratedColumn<String> get cnpj =>
      $composableBuilder(column: $table.cnpj, builder: (column) => column);

  GeneratedColumn<String> get cpf =>
      $composableBuilder(column: $table.cpf, builder: (column) => column);

  GeneratedColumn<String> get nome =>
      $composableBuilder(column: $table.nome, builder: (column) => column);

  GeneratedColumn<String> get inscricaoEstadual => $composableBuilder(
    column: $table.inscricaoEstadual,
    builder: (column) => column,
  );

  GeneratedColumn<String> get endereco =>
      $composableBuilder(column: $table.endereco, builder: (column) => column);

  GeneratedColumn<String> get nomeMunicipio => $composableBuilder(
    column: $table.nomeMunicipio,
    builder: (column) => column,
  );

  GeneratedColumn<String> get uf =>
      $composableBuilder(column: $table.uf, builder: (column) => column);

  GeneratedColumn<double> get valorServico => $composableBuilder(
    column: $table.valorServico,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorBcRetencaoIcms => $composableBuilder(
    column: $table.valorBcRetencaoIcms,
    builder: (column) => column,
  );

  GeneratedColumn<double> get aliquotaRetencaoIcms => $composableBuilder(
    column: $table.aliquotaRetencaoIcms,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorIcmsRetido => $composableBuilder(
    column: $table.valorIcmsRetido,
    builder: (column) => column,
  );

  GeneratedColumn<int> get cfop =>
      $composableBuilder(column: $table.cfop, builder: (column) => column);

  GeneratedColumn<int> get municipio =>
      $composableBuilder(column: $table.municipio, builder: (column) => column);

  GeneratedColumn<String> get placaVeiculo => $composableBuilder(
    column: $table.placaVeiculo,
    builder: (column) => column,
  );

  GeneratedColumn<String> get ufVeiculo =>
      $composableBuilder(column: $table.ufVeiculo, builder: (column) => column);

  GeneratedColumn<String> get rntcVeiculo => $composableBuilder(
    column: $table.rntcVeiculo,
    builder: (column) => column,
  );
}

class $$NfeTransportesTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $NfeTransportesTable,
          NfeTransporte,
          $$NfeTransportesTableFilterComposer,
          $$NfeTransportesTableOrderingComposer,
          $$NfeTransportesTableAnnotationComposer,
          $$NfeTransportesTableCreateCompanionBuilder,
          $$NfeTransportesTableUpdateCompanionBuilder,
          (
            NfeTransporte,
            BaseReferences<_$AppDatabase, $NfeTransportesTable, NfeTransporte>,
          ),
          NfeTransporte,
          PrefetchHooks Function()
        > {
  $$NfeTransportesTableTableManager(
    _$AppDatabase db,
    $NfeTransportesTable table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer:
              () => $$NfeTransportesTableFilterComposer($db: db, $table: table),
          createOrderingComposer:
              () =>
                  $$NfeTransportesTableOrderingComposer($db: db, $table: table),
          createComputedFieldComposer:
              () => $$NfeTransportesTableAnnotationComposer(
                $db: db,
                $table: table,
              ),
          updateCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeCabecalho = const Value.absent(),
                Value<int?> idTransportadora = const Value.absent(),
                Value<String?> modalidadeFrete = const Value.absent(),
                Value<String?> cnpj = const Value.absent(),
                Value<String?> cpf = const Value.absent(),
                Value<String?> nome = const Value.absent(),
                Value<String?> inscricaoEstadual = const Value.absent(),
                Value<String?> endereco = const Value.absent(),
                Value<String?> nomeMunicipio = const Value.absent(),
                Value<String?> uf = const Value.absent(),
                Value<double?> valorServico = const Value.absent(),
                Value<double?> valorBcRetencaoIcms = const Value.absent(),
                Value<double?> aliquotaRetencaoIcms = const Value.absent(),
                Value<double?> valorIcmsRetido = const Value.absent(),
                Value<int?> cfop = const Value.absent(),
                Value<int?> municipio = const Value.absent(),
                Value<String?> placaVeiculo = const Value.absent(),
                Value<String?> ufVeiculo = const Value.absent(),
                Value<String?> rntcVeiculo = const Value.absent(),
              }) => NfeTransportesCompanion(
                id: id,
                idNfeCabecalho: idNfeCabecalho,
                idTransportadora: idTransportadora,
                modalidadeFrete: modalidadeFrete,
                cnpj: cnpj,
                cpf: cpf,
                nome: nome,
                inscricaoEstadual: inscricaoEstadual,
                endereco: endereco,
                nomeMunicipio: nomeMunicipio,
                uf: uf,
                valorServico: valorServico,
                valorBcRetencaoIcms: valorBcRetencaoIcms,
                aliquotaRetencaoIcms: aliquotaRetencaoIcms,
                valorIcmsRetido: valorIcmsRetido,
                cfop: cfop,
                municipio: municipio,
                placaVeiculo: placaVeiculo,
                ufVeiculo: ufVeiculo,
                rntcVeiculo: rntcVeiculo,
              ),
          createCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeCabecalho = const Value.absent(),
                Value<int?> idTransportadora = const Value.absent(),
                Value<String?> modalidadeFrete = const Value.absent(),
                Value<String?> cnpj = const Value.absent(),
                Value<String?> cpf = const Value.absent(),
                Value<String?> nome = const Value.absent(),
                Value<String?> inscricaoEstadual = const Value.absent(),
                Value<String?> endereco = const Value.absent(),
                Value<String?> nomeMunicipio = const Value.absent(),
                Value<String?> uf = const Value.absent(),
                Value<double?> valorServico = const Value.absent(),
                Value<double?> valorBcRetencaoIcms = const Value.absent(),
                Value<double?> aliquotaRetencaoIcms = const Value.absent(),
                Value<double?> valorIcmsRetido = const Value.absent(),
                Value<int?> cfop = const Value.absent(),
                Value<int?> municipio = const Value.absent(),
                Value<String?> placaVeiculo = const Value.absent(),
                Value<String?> ufVeiculo = const Value.absent(),
                Value<String?> rntcVeiculo = const Value.absent(),
              }) => NfeTransportesCompanion.insert(
                id: id,
                idNfeCabecalho: idNfeCabecalho,
                idTransportadora: idTransportadora,
                modalidadeFrete: modalidadeFrete,
                cnpj: cnpj,
                cpf: cpf,
                nome: nome,
                inscricaoEstadual: inscricaoEstadual,
                endereco: endereco,
                nomeMunicipio: nomeMunicipio,
                uf: uf,
                valorServico: valorServico,
                valorBcRetencaoIcms: valorBcRetencaoIcms,
                aliquotaRetencaoIcms: aliquotaRetencaoIcms,
                valorIcmsRetido: valorIcmsRetido,
                cfop: cfop,
                municipio: municipio,
                placaVeiculo: placaVeiculo,
                ufVeiculo: ufVeiculo,
                rntcVeiculo: rntcVeiculo,
              ),
          withReferenceMapper:
              (p0) =>
                  p0
                      .map(
                        (e) => (
                          e.readTable(table),
                          BaseReferences(db, table, e),
                        ),
                      )
                      .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$NfeTransportesTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $NfeTransportesTable,
      NfeTransporte,
      $$NfeTransportesTableFilterComposer,
      $$NfeTransportesTableOrderingComposer,
      $$NfeTransportesTableAnnotationComposer,
      $$NfeTransportesTableCreateCompanionBuilder,
      $$NfeTransportesTableUpdateCompanionBuilder,
      (
        NfeTransporte,
        BaseReferences<_$AppDatabase, $NfeTransportesTable, NfeTransporte>,
      ),
      NfeTransporte,
      PrefetchHooks Function()
    >;
typedef $$NfeFaturasTableCreateCompanionBuilder =
    NfeFaturasCompanion Function({
      Value<int?> id,
      Value<int?> idNfeCabecalho,
      Value<String?> numero,
      Value<double?> valorOriginal,
      Value<double?> valorDesconto,
      Value<double?> valorLiquido,
    });
typedef $$NfeFaturasTableUpdateCompanionBuilder =
    NfeFaturasCompanion Function({
      Value<int?> id,
      Value<int?> idNfeCabecalho,
      Value<String?> numero,
      Value<double?> valorOriginal,
      Value<double?> valorDesconto,
      Value<double?> valorLiquido,
    });

class $$NfeFaturasTableFilterComposer
    extends Composer<_$AppDatabase, $NfeFaturasTable> {
  $$NfeFaturasTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idNfeCabecalho => $composableBuilder(
    column: $table.idNfeCabecalho,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get numero => $composableBuilder(
    column: $table.numero,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorOriginal => $composableBuilder(
    column: $table.valorOriginal,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorDesconto => $composableBuilder(
    column: $table.valorDesconto,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorLiquido => $composableBuilder(
    column: $table.valorLiquido,
    builder: (column) => ColumnFilters(column),
  );
}

class $$NfeFaturasTableOrderingComposer
    extends Composer<_$AppDatabase, $NfeFaturasTable> {
  $$NfeFaturasTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idNfeCabecalho => $composableBuilder(
    column: $table.idNfeCabecalho,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get numero => $composableBuilder(
    column: $table.numero,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorOriginal => $composableBuilder(
    column: $table.valorOriginal,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorDesconto => $composableBuilder(
    column: $table.valorDesconto,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorLiquido => $composableBuilder(
    column: $table.valorLiquido,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$NfeFaturasTableAnnotationComposer
    extends Composer<_$AppDatabase, $NfeFaturasTable> {
  $$NfeFaturasTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<int> get idNfeCabecalho => $composableBuilder(
    column: $table.idNfeCabecalho,
    builder: (column) => column,
  );

  GeneratedColumn<String> get numero =>
      $composableBuilder(column: $table.numero, builder: (column) => column);

  GeneratedColumn<double> get valorOriginal => $composableBuilder(
    column: $table.valorOriginal,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorDesconto => $composableBuilder(
    column: $table.valorDesconto,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorLiquido => $composableBuilder(
    column: $table.valorLiquido,
    builder: (column) => column,
  );
}

class $$NfeFaturasTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $NfeFaturasTable,
          NfeFatura,
          $$NfeFaturasTableFilterComposer,
          $$NfeFaturasTableOrderingComposer,
          $$NfeFaturasTableAnnotationComposer,
          $$NfeFaturasTableCreateCompanionBuilder,
          $$NfeFaturasTableUpdateCompanionBuilder,
          (
            NfeFatura,
            BaseReferences<_$AppDatabase, $NfeFaturasTable, NfeFatura>,
          ),
          NfeFatura,
          PrefetchHooks Function()
        > {
  $$NfeFaturasTableTableManager(_$AppDatabase db, $NfeFaturasTable table)
    : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer:
              () => $$NfeFaturasTableFilterComposer($db: db, $table: table),
          createOrderingComposer:
              () => $$NfeFaturasTableOrderingComposer($db: db, $table: table),
          createComputedFieldComposer:
              () => $$NfeFaturasTableAnnotationComposer($db: db, $table: table),
          updateCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeCabecalho = const Value.absent(),
                Value<String?> numero = const Value.absent(),
                Value<double?> valorOriginal = const Value.absent(),
                Value<double?> valorDesconto = const Value.absent(),
                Value<double?> valorLiquido = const Value.absent(),
              }) => NfeFaturasCompanion(
                id: id,
                idNfeCabecalho: idNfeCabecalho,
                numero: numero,
                valorOriginal: valorOriginal,
                valorDesconto: valorDesconto,
                valorLiquido: valorLiquido,
              ),
          createCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeCabecalho = const Value.absent(),
                Value<String?> numero = const Value.absent(),
                Value<double?> valorOriginal = const Value.absent(),
                Value<double?> valorDesconto = const Value.absent(),
                Value<double?> valorLiquido = const Value.absent(),
              }) => NfeFaturasCompanion.insert(
                id: id,
                idNfeCabecalho: idNfeCabecalho,
                numero: numero,
                valorOriginal: valorOriginal,
                valorDesconto: valorDesconto,
                valorLiquido: valorLiquido,
              ),
          withReferenceMapper:
              (p0) =>
                  p0
                      .map(
                        (e) => (
                          e.readTable(table),
                          BaseReferences(db, table, e),
                        ),
                      )
                      .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$NfeFaturasTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $NfeFaturasTable,
      NfeFatura,
      $$NfeFaturasTableFilterComposer,
      $$NfeFaturasTableOrderingComposer,
      $$NfeFaturasTableAnnotationComposer,
      $$NfeFaturasTableCreateCompanionBuilder,
      $$NfeFaturasTableUpdateCompanionBuilder,
      (NfeFatura, BaseReferences<_$AppDatabase, $NfeFaturasTable, NfeFatura>),
      NfeFatura,
      PrefetchHooks Function()
    >;
typedef $$NfeCanasTableCreateCompanionBuilder =
    NfeCanasCompanion Function({
      Value<int?> id,
      Value<int?> idNfeCabecalho,
      Value<String?> safra,
      Value<String?> mesAnoReferencia,
    });
typedef $$NfeCanasTableUpdateCompanionBuilder =
    NfeCanasCompanion Function({
      Value<int?> id,
      Value<int?> idNfeCabecalho,
      Value<String?> safra,
      Value<String?> mesAnoReferencia,
    });

class $$NfeCanasTableFilterComposer
    extends Composer<_$AppDatabase, $NfeCanasTable> {
  $$NfeCanasTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idNfeCabecalho => $composableBuilder(
    column: $table.idNfeCabecalho,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get safra => $composableBuilder(
    column: $table.safra,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get mesAnoReferencia => $composableBuilder(
    column: $table.mesAnoReferencia,
    builder: (column) => ColumnFilters(column),
  );
}

class $$NfeCanasTableOrderingComposer
    extends Composer<_$AppDatabase, $NfeCanasTable> {
  $$NfeCanasTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idNfeCabecalho => $composableBuilder(
    column: $table.idNfeCabecalho,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get safra => $composableBuilder(
    column: $table.safra,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get mesAnoReferencia => $composableBuilder(
    column: $table.mesAnoReferencia,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$NfeCanasTableAnnotationComposer
    extends Composer<_$AppDatabase, $NfeCanasTable> {
  $$NfeCanasTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<int> get idNfeCabecalho => $composableBuilder(
    column: $table.idNfeCabecalho,
    builder: (column) => column,
  );

  GeneratedColumn<String> get safra =>
      $composableBuilder(column: $table.safra, builder: (column) => column);

  GeneratedColumn<String> get mesAnoReferencia => $composableBuilder(
    column: $table.mesAnoReferencia,
    builder: (column) => column,
  );
}

class $$NfeCanasTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $NfeCanasTable,
          NfeCana,
          $$NfeCanasTableFilterComposer,
          $$NfeCanasTableOrderingComposer,
          $$NfeCanasTableAnnotationComposer,
          $$NfeCanasTableCreateCompanionBuilder,
          $$NfeCanasTableUpdateCompanionBuilder,
          (NfeCana, BaseReferences<_$AppDatabase, $NfeCanasTable, NfeCana>),
          NfeCana,
          PrefetchHooks Function()
        > {
  $$NfeCanasTableTableManager(_$AppDatabase db, $NfeCanasTable table)
    : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer:
              () => $$NfeCanasTableFilterComposer($db: db, $table: table),
          createOrderingComposer:
              () => $$NfeCanasTableOrderingComposer($db: db, $table: table),
          createComputedFieldComposer:
              () => $$NfeCanasTableAnnotationComposer($db: db, $table: table),
          updateCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeCabecalho = const Value.absent(),
                Value<String?> safra = const Value.absent(),
                Value<String?> mesAnoReferencia = const Value.absent(),
              }) => NfeCanasCompanion(
                id: id,
                idNfeCabecalho: idNfeCabecalho,
                safra: safra,
                mesAnoReferencia: mesAnoReferencia,
              ),
          createCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeCabecalho = const Value.absent(),
                Value<String?> safra = const Value.absent(),
                Value<String?> mesAnoReferencia = const Value.absent(),
              }) => NfeCanasCompanion.insert(
                id: id,
                idNfeCabecalho: idNfeCabecalho,
                safra: safra,
                mesAnoReferencia: mesAnoReferencia,
              ),
          withReferenceMapper:
              (p0) =>
                  p0
                      .map(
                        (e) => (
                          e.readTable(table),
                          BaseReferences(db, table, e),
                        ),
                      )
                      .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$NfeCanasTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $NfeCanasTable,
      NfeCana,
      $$NfeCanasTableFilterComposer,
      $$NfeCanasTableOrderingComposer,
      $$NfeCanasTableAnnotationComposer,
      $$NfeCanasTableCreateCompanionBuilder,
      $$NfeCanasTableUpdateCompanionBuilder,
      (NfeCana, BaseReferences<_$AppDatabase, $NfeCanasTable, NfeCana>),
      NfeCana,
      PrefetchHooks Function()
    >;
typedef $$NfeTransporteVolumesTableCreateCompanionBuilder =
    NfeTransporteVolumesCompanion Function({
      Value<int?> id,
      Value<int?> idNfeTransporte,
      Value<int?> quantidade,
      Value<String?> especie,
      Value<String?> marca,
      Value<String?> numeracao,
      Value<double?> pesoLiquido,
      Value<double?> pesoBruto,
    });
typedef $$NfeTransporteVolumesTableUpdateCompanionBuilder =
    NfeTransporteVolumesCompanion Function({
      Value<int?> id,
      Value<int?> idNfeTransporte,
      Value<int?> quantidade,
      Value<String?> especie,
      Value<String?> marca,
      Value<String?> numeracao,
      Value<double?> pesoLiquido,
      Value<double?> pesoBruto,
    });

class $$NfeTransporteVolumesTableFilterComposer
    extends Composer<_$AppDatabase, $NfeTransporteVolumesTable> {
  $$NfeTransporteVolumesTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idNfeTransporte => $composableBuilder(
    column: $table.idNfeTransporte,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get quantidade => $composableBuilder(
    column: $table.quantidade,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get especie => $composableBuilder(
    column: $table.especie,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get marca => $composableBuilder(
    column: $table.marca,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get numeracao => $composableBuilder(
    column: $table.numeracao,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get pesoLiquido => $composableBuilder(
    column: $table.pesoLiquido,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get pesoBruto => $composableBuilder(
    column: $table.pesoBruto,
    builder: (column) => ColumnFilters(column),
  );
}

class $$NfeTransporteVolumesTableOrderingComposer
    extends Composer<_$AppDatabase, $NfeTransporteVolumesTable> {
  $$NfeTransporteVolumesTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idNfeTransporte => $composableBuilder(
    column: $table.idNfeTransporte,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get quantidade => $composableBuilder(
    column: $table.quantidade,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get especie => $composableBuilder(
    column: $table.especie,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get marca => $composableBuilder(
    column: $table.marca,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get numeracao => $composableBuilder(
    column: $table.numeracao,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get pesoLiquido => $composableBuilder(
    column: $table.pesoLiquido,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get pesoBruto => $composableBuilder(
    column: $table.pesoBruto,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$NfeTransporteVolumesTableAnnotationComposer
    extends Composer<_$AppDatabase, $NfeTransporteVolumesTable> {
  $$NfeTransporteVolumesTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<int> get idNfeTransporte => $composableBuilder(
    column: $table.idNfeTransporte,
    builder: (column) => column,
  );

  GeneratedColumn<int> get quantidade => $composableBuilder(
    column: $table.quantidade,
    builder: (column) => column,
  );

  GeneratedColumn<String> get especie =>
      $composableBuilder(column: $table.especie, builder: (column) => column);

  GeneratedColumn<String> get marca =>
      $composableBuilder(column: $table.marca, builder: (column) => column);

  GeneratedColumn<String> get numeracao =>
      $composableBuilder(column: $table.numeracao, builder: (column) => column);

  GeneratedColumn<double> get pesoLiquido => $composableBuilder(
    column: $table.pesoLiquido,
    builder: (column) => column,
  );

  GeneratedColumn<double> get pesoBruto =>
      $composableBuilder(column: $table.pesoBruto, builder: (column) => column);
}

class $$NfeTransporteVolumesTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $NfeTransporteVolumesTable,
          NfeTransporteVolume,
          $$NfeTransporteVolumesTableFilterComposer,
          $$NfeTransporteVolumesTableOrderingComposer,
          $$NfeTransporteVolumesTableAnnotationComposer,
          $$NfeTransporteVolumesTableCreateCompanionBuilder,
          $$NfeTransporteVolumesTableUpdateCompanionBuilder,
          (
            NfeTransporteVolume,
            BaseReferences<
              _$AppDatabase,
              $NfeTransporteVolumesTable,
              NfeTransporteVolume
            >,
          ),
          NfeTransporteVolume,
          PrefetchHooks Function()
        > {
  $$NfeTransporteVolumesTableTableManager(
    _$AppDatabase db,
    $NfeTransporteVolumesTable table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer:
              () => $$NfeTransporteVolumesTableFilterComposer(
                $db: db,
                $table: table,
              ),
          createOrderingComposer:
              () => $$NfeTransporteVolumesTableOrderingComposer(
                $db: db,
                $table: table,
              ),
          createComputedFieldComposer:
              () => $$NfeTransporteVolumesTableAnnotationComposer(
                $db: db,
                $table: table,
              ),
          updateCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeTransporte = const Value.absent(),
                Value<int?> quantidade = const Value.absent(),
                Value<String?> especie = const Value.absent(),
                Value<String?> marca = const Value.absent(),
                Value<String?> numeracao = const Value.absent(),
                Value<double?> pesoLiquido = const Value.absent(),
                Value<double?> pesoBruto = const Value.absent(),
              }) => NfeTransporteVolumesCompanion(
                id: id,
                idNfeTransporte: idNfeTransporte,
                quantidade: quantidade,
                especie: especie,
                marca: marca,
                numeracao: numeracao,
                pesoLiquido: pesoLiquido,
                pesoBruto: pesoBruto,
              ),
          createCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeTransporte = const Value.absent(),
                Value<int?> quantidade = const Value.absent(),
                Value<String?> especie = const Value.absent(),
                Value<String?> marca = const Value.absent(),
                Value<String?> numeracao = const Value.absent(),
                Value<double?> pesoLiquido = const Value.absent(),
                Value<double?> pesoBruto = const Value.absent(),
              }) => NfeTransporteVolumesCompanion.insert(
                id: id,
                idNfeTransporte: idNfeTransporte,
                quantidade: quantidade,
                especie: especie,
                marca: marca,
                numeracao: numeracao,
                pesoLiquido: pesoLiquido,
                pesoBruto: pesoBruto,
              ),
          withReferenceMapper:
              (p0) =>
                  p0
                      .map(
                        (e) => (
                          e.readTable(table),
                          BaseReferences(db, table, e),
                        ),
                      )
                      .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$NfeTransporteVolumesTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $NfeTransporteVolumesTable,
      NfeTransporteVolume,
      $$NfeTransporteVolumesTableFilterComposer,
      $$NfeTransporteVolumesTableOrderingComposer,
      $$NfeTransporteVolumesTableAnnotationComposer,
      $$NfeTransporteVolumesTableCreateCompanionBuilder,
      $$NfeTransporteVolumesTableUpdateCompanionBuilder,
      (
        NfeTransporteVolume,
        BaseReferences<
          _$AppDatabase,
          $NfeTransporteVolumesTable,
          NfeTransporteVolume
        >,
      ),
      NfeTransporteVolume,
      PrefetchHooks Function()
    >;
typedef $$TributOperacaoFiscalsTableCreateCompanionBuilder =
    TributOperacaoFiscalsCompanion Function({
      Value<int?> id,
      Value<String?> descricao,
      Value<String?> descricaoNaNf,
      Value<int?> cfop,
      Value<String?> observacao,
    });
typedef $$TributOperacaoFiscalsTableUpdateCompanionBuilder =
    TributOperacaoFiscalsCompanion Function({
      Value<int?> id,
      Value<String?> descricao,
      Value<String?> descricaoNaNf,
      Value<int?> cfop,
      Value<String?> observacao,
    });

class $$TributOperacaoFiscalsTableFilterComposer
    extends Composer<_$AppDatabase, $TributOperacaoFiscalsTable> {
  $$TributOperacaoFiscalsTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get descricao => $composableBuilder(
    column: $table.descricao,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get descricaoNaNf => $composableBuilder(
    column: $table.descricaoNaNf,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get cfop => $composableBuilder(
    column: $table.cfop,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get observacao => $composableBuilder(
    column: $table.observacao,
    builder: (column) => ColumnFilters(column),
  );
}

class $$TributOperacaoFiscalsTableOrderingComposer
    extends Composer<_$AppDatabase, $TributOperacaoFiscalsTable> {
  $$TributOperacaoFiscalsTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get descricao => $composableBuilder(
    column: $table.descricao,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get descricaoNaNf => $composableBuilder(
    column: $table.descricaoNaNf,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get cfop => $composableBuilder(
    column: $table.cfop,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get observacao => $composableBuilder(
    column: $table.observacao,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$TributOperacaoFiscalsTableAnnotationComposer
    extends Composer<_$AppDatabase, $TributOperacaoFiscalsTable> {
  $$TributOperacaoFiscalsTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<String> get descricao =>
      $composableBuilder(column: $table.descricao, builder: (column) => column);

  GeneratedColumn<String> get descricaoNaNf => $composableBuilder(
    column: $table.descricaoNaNf,
    builder: (column) => column,
  );

  GeneratedColumn<int> get cfop =>
      $composableBuilder(column: $table.cfop, builder: (column) => column);

  GeneratedColumn<String> get observacao => $composableBuilder(
    column: $table.observacao,
    builder: (column) => column,
  );
}

class $$TributOperacaoFiscalsTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $TributOperacaoFiscalsTable,
          TributOperacaoFiscal,
          $$TributOperacaoFiscalsTableFilterComposer,
          $$TributOperacaoFiscalsTableOrderingComposer,
          $$TributOperacaoFiscalsTableAnnotationComposer,
          $$TributOperacaoFiscalsTableCreateCompanionBuilder,
          $$TributOperacaoFiscalsTableUpdateCompanionBuilder,
          (
            TributOperacaoFiscal,
            BaseReferences<
              _$AppDatabase,
              $TributOperacaoFiscalsTable,
              TributOperacaoFiscal
            >,
          ),
          TributOperacaoFiscal,
          PrefetchHooks Function()
        > {
  $$TributOperacaoFiscalsTableTableManager(
    _$AppDatabase db,
    $TributOperacaoFiscalsTable table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer:
              () => $$TributOperacaoFiscalsTableFilterComposer(
                $db: db,
                $table: table,
              ),
          createOrderingComposer:
              () => $$TributOperacaoFiscalsTableOrderingComposer(
                $db: db,
                $table: table,
              ),
          createComputedFieldComposer:
              () => $$TributOperacaoFiscalsTableAnnotationComposer(
                $db: db,
                $table: table,
              ),
          updateCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<String?> descricao = const Value.absent(),
                Value<String?> descricaoNaNf = const Value.absent(),
                Value<int?> cfop = const Value.absent(),
                Value<String?> observacao = const Value.absent(),
              }) => TributOperacaoFiscalsCompanion(
                id: id,
                descricao: descricao,
                descricaoNaNf: descricaoNaNf,
                cfop: cfop,
                observacao: observacao,
              ),
          createCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<String?> descricao = const Value.absent(),
                Value<String?> descricaoNaNf = const Value.absent(),
                Value<int?> cfop = const Value.absent(),
                Value<String?> observacao = const Value.absent(),
              }) => TributOperacaoFiscalsCompanion.insert(
                id: id,
                descricao: descricao,
                descricaoNaNf: descricaoNaNf,
                cfop: cfop,
                observacao: observacao,
              ),
          withReferenceMapper:
              (p0) =>
                  p0
                      .map(
                        (e) => (
                          e.readTable(table),
                          BaseReferences(db, table, e),
                        ),
                      )
                      .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$TributOperacaoFiscalsTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $TributOperacaoFiscalsTable,
      TributOperacaoFiscal,
      $$TributOperacaoFiscalsTableFilterComposer,
      $$TributOperacaoFiscalsTableOrderingComposer,
      $$TributOperacaoFiscalsTableAnnotationComposer,
      $$TributOperacaoFiscalsTableCreateCompanionBuilder,
      $$TributOperacaoFiscalsTableUpdateCompanionBuilder,
      (
        TributOperacaoFiscal,
        BaseReferences<
          _$AppDatabase,
          $TributOperacaoFiscalsTable,
          TributOperacaoFiscal
        >,
      ),
      TributOperacaoFiscal,
      PrefetchHooks Function()
    >;
typedef $$VendaCabecalhosTableCreateCompanionBuilder =
    VendaCabecalhosCompanion Function({
      Value<int?> id,
      Value<int?> idVendaOrcamentoCabecalho,
      Value<int?> idVendaCondicoesPagamento,
      Value<int?> idNotaFiscalTipo,
      Value<int?> idTransportadora,
      Value<DateTime?> dataVenda,
      Value<DateTime?> dataSaida,
      Value<String?> horaSaida,
      Value<int?> numeroFatura,
      Value<String?> localEntrega,
      Value<String?> localCobranca,
      Value<double?> valorSubtotal,
      Value<double?> taxaComissao,
      Value<double?> valorComissao,
      Value<double?> taxaDesconto,
      Value<double?> valorDesconto,
      Value<double?> valorTotal,
      Value<String?> tipoFrete,
      Value<String?> formaPagamento,
      Value<double?> valorFrete,
      Value<double?> valorSeguro,
      Value<String?> observacao,
      Value<String?> situacao,
      Value<String?> diaFixoParcela,
    });
typedef $$VendaCabecalhosTableUpdateCompanionBuilder =
    VendaCabecalhosCompanion Function({
      Value<int?> id,
      Value<int?> idVendaOrcamentoCabecalho,
      Value<int?> idVendaCondicoesPagamento,
      Value<int?> idNotaFiscalTipo,
      Value<int?> idTransportadora,
      Value<DateTime?> dataVenda,
      Value<DateTime?> dataSaida,
      Value<String?> horaSaida,
      Value<int?> numeroFatura,
      Value<String?> localEntrega,
      Value<String?> localCobranca,
      Value<double?> valorSubtotal,
      Value<double?> taxaComissao,
      Value<double?> valorComissao,
      Value<double?> taxaDesconto,
      Value<double?> valorDesconto,
      Value<double?> valorTotal,
      Value<String?> tipoFrete,
      Value<String?> formaPagamento,
      Value<double?> valorFrete,
      Value<double?> valorSeguro,
      Value<String?> observacao,
      Value<String?> situacao,
      Value<String?> diaFixoParcela,
    });

class $$VendaCabecalhosTableFilterComposer
    extends Composer<_$AppDatabase, $VendaCabecalhosTable> {
  $$VendaCabecalhosTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idVendaOrcamentoCabecalho => $composableBuilder(
    column: $table.idVendaOrcamentoCabecalho,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idVendaCondicoesPagamento => $composableBuilder(
    column: $table.idVendaCondicoesPagamento,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idNotaFiscalTipo => $composableBuilder(
    column: $table.idNotaFiscalTipo,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idTransportadora => $composableBuilder(
    column: $table.idTransportadora,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get dataVenda => $composableBuilder(
    column: $table.dataVenda,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get dataSaida => $composableBuilder(
    column: $table.dataSaida,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get horaSaida => $composableBuilder(
    column: $table.horaSaida,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get numeroFatura => $composableBuilder(
    column: $table.numeroFatura,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get localEntrega => $composableBuilder(
    column: $table.localEntrega,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get localCobranca => $composableBuilder(
    column: $table.localCobranca,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorSubtotal => $composableBuilder(
    column: $table.valorSubtotal,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get taxaComissao => $composableBuilder(
    column: $table.taxaComissao,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorComissao => $composableBuilder(
    column: $table.valorComissao,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get taxaDesconto => $composableBuilder(
    column: $table.taxaDesconto,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorDesconto => $composableBuilder(
    column: $table.valorDesconto,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorTotal => $composableBuilder(
    column: $table.valorTotal,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get tipoFrete => $composableBuilder(
    column: $table.tipoFrete,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get formaPagamento => $composableBuilder(
    column: $table.formaPagamento,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorFrete => $composableBuilder(
    column: $table.valorFrete,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorSeguro => $composableBuilder(
    column: $table.valorSeguro,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get observacao => $composableBuilder(
    column: $table.observacao,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get situacao => $composableBuilder(
    column: $table.situacao,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get diaFixoParcela => $composableBuilder(
    column: $table.diaFixoParcela,
    builder: (column) => ColumnFilters(column),
  );
}

class $$VendaCabecalhosTableOrderingComposer
    extends Composer<_$AppDatabase, $VendaCabecalhosTable> {
  $$VendaCabecalhosTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idVendaOrcamentoCabecalho => $composableBuilder(
    column: $table.idVendaOrcamentoCabecalho,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idVendaCondicoesPagamento => $composableBuilder(
    column: $table.idVendaCondicoesPagamento,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idNotaFiscalTipo => $composableBuilder(
    column: $table.idNotaFiscalTipo,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idTransportadora => $composableBuilder(
    column: $table.idTransportadora,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get dataVenda => $composableBuilder(
    column: $table.dataVenda,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get dataSaida => $composableBuilder(
    column: $table.dataSaida,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get horaSaida => $composableBuilder(
    column: $table.horaSaida,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get numeroFatura => $composableBuilder(
    column: $table.numeroFatura,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get localEntrega => $composableBuilder(
    column: $table.localEntrega,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get localCobranca => $composableBuilder(
    column: $table.localCobranca,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorSubtotal => $composableBuilder(
    column: $table.valorSubtotal,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get taxaComissao => $composableBuilder(
    column: $table.taxaComissao,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorComissao => $composableBuilder(
    column: $table.valorComissao,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get taxaDesconto => $composableBuilder(
    column: $table.taxaDesconto,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorDesconto => $composableBuilder(
    column: $table.valorDesconto,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorTotal => $composableBuilder(
    column: $table.valorTotal,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get tipoFrete => $composableBuilder(
    column: $table.tipoFrete,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get formaPagamento => $composableBuilder(
    column: $table.formaPagamento,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorFrete => $composableBuilder(
    column: $table.valorFrete,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorSeguro => $composableBuilder(
    column: $table.valorSeguro,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get observacao => $composableBuilder(
    column: $table.observacao,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get situacao => $composableBuilder(
    column: $table.situacao,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get diaFixoParcela => $composableBuilder(
    column: $table.diaFixoParcela,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$VendaCabecalhosTableAnnotationComposer
    extends Composer<_$AppDatabase, $VendaCabecalhosTable> {
  $$VendaCabecalhosTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<int> get idVendaOrcamentoCabecalho => $composableBuilder(
    column: $table.idVendaOrcamentoCabecalho,
    builder: (column) => column,
  );

  GeneratedColumn<int> get idVendaCondicoesPagamento => $composableBuilder(
    column: $table.idVendaCondicoesPagamento,
    builder: (column) => column,
  );

  GeneratedColumn<int> get idNotaFiscalTipo => $composableBuilder(
    column: $table.idNotaFiscalTipo,
    builder: (column) => column,
  );

  GeneratedColumn<int> get idTransportadora => $composableBuilder(
    column: $table.idTransportadora,
    builder: (column) => column,
  );

  GeneratedColumn<DateTime> get dataVenda =>
      $composableBuilder(column: $table.dataVenda, builder: (column) => column);

  GeneratedColumn<DateTime> get dataSaida =>
      $composableBuilder(column: $table.dataSaida, builder: (column) => column);

  GeneratedColumn<String> get horaSaida =>
      $composableBuilder(column: $table.horaSaida, builder: (column) => column);

  GeneratedColumn<int> get numeroFatura => $composableBuilder(
    column: $table.numeroFatura,
    builder: (column) => column,
  );

  GeneratedColumn<String> get localEntrega => $composableBuilder(
    column: $table.localEntrega,
    builder: (column) => column,
  );

  GeneratedColumn<String> get localCobranca => $composableBuilder(
    column: $table.localCobranca,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorSubtotal => $composableBuilder(
    column: $table.valorSubtotal,
    builder: (column) => column,
  );

  GeneratedColumn<double> get taxaComissao => $composableBuilder(
    column: $table.taxaComissao,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorComissao => $composableBuilder(
    column: $table.valorComissao,
    builder: (column) => column,
  );

  GeneratedColumn<double> get taxaDesconto => $composableBuilder(
    column: $table.taxaDesconto,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorDesconto => $composableBuilder(
    column: $table.valorDesconto,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorTotal => $composableBuilder(
    column: $table.valorTotal,
    builder: (column) => column,
  );

  GeneratedColumn<String> get tipoFrete =>
      $composableBuilder(column: $table.tipoFrete, builder: (column) => column);

  GeneratedColumn<String> get formaPagamento => $composableBuilder(
    column: $table.formaPagamento,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorFrete => $composableBuilder(
    column: $table.valorFrete,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorSeguro => $composableBuilder(
    column: $table.valorSeguro,
    builder: (column) => column,
  );

  GeneratedColumn<String> get observacao => $composableBuilder(
    column: $table.observacao,
    builder: (column) => column,
  );

  GeneratedColumn<String> get situacao =>
      $composableBuilder(column: $table.situacao, builder: (column) => column);

  GeneratedColumn<String> get diaFixoParcela => $composableBuilder(
    column: $table.diaFixoParcela,
    builder: (column) => column,
  );
}

class $$VendaCabecalhosTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $VendaCabecalhosTable,
          VendaCabecalho,
          $$VendaCabecalhosTableFilterComposer,
          $$VendaCabecalhosTableOrderingComposer,
          $$VendaCabecalhosTableAnnotationComposer,
          $$VendaCabecalhosTableCreateCompanionBuilder,
          $$VendaCabecalhosTableUpdateCompanionBuilder,
          (
            VendaCabecalho,
            BaseReferences<
              _$AppDatabase,
              $VendaCabecalhosTable,
              VendaCabecalho
            >,
          ),
          VendaCabecalho,
          PrefetchHooks Function()
        > {
  $$VendaCabecalhosTableTableManager(
    _$AppDatabase db,
    $VendaCabecalhosTable table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer:
              () =>
                  $$VendaCabecalhosTableFilterComposer($db: db, $table: table),
          createOrderingComposer:
              () => $$VendaCabecalhosTableOrderingComposer(
                $db: db,
                $table: table,
              ),
          createComputedFieldComposer:
              () => $$VendaCabecalhosTableAnnotationComposer(
                $db: db,
                $table: table,
              ),
          updateCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idVendaOrcamentoCabecalho = const Value.absent(),
                Value<int?> idVendaCondicoesPagamento = const Value.absent(),
                Value<int?> idNotaFiscalTipo = const Value.absent(),
                Value<int?> idTransportadora = const Value.absent(),
                Value<DateTime?> dataVenda = const Value.absent(),
                Value<DateTime?> dataSaida = const Value.absent(),
                Value<String?> horaSaida = const Value.absent(),
                Value<int?> numeroFatura = const Value.absent(),
                Value<String?> localEntrega = const Value.absent(),
                Value<String?> localCobranca = const Value.absent(),
                Value<double?> valorSubtotal = const Value.absent(),
                Value<double?> taxaComissao = const Value.absent(),
                Value<double?> valorComissao = const Value.absent(),
                Value<double?> taxaDesconto = const Value.absent(),
                Value<double?> valorDesconto = const Value.absent(),
                Value<double?> valorTotal = const Value.absent(),
                Value<String?> tipoFrete = const Value.absent(),
                Value<String?> formaPagamento = const Value.absent(),
                Value<double?> valorFrete = const Value.absent(),
                Value<double?> valorSeguro = const Value.absent(),
                Value<String?> observacao = const Value.absent(),
                Value<String?> situacao = const Value.absent(),
                Value<String?> diaFixoParcela = const Value.absent(),
              }) => VendaCabecalhosCompanion(
                id: id,
                idVendaOrcamentoCabecalho: idVendaOrcamentoCabecalho,
                idVendaCondicoesPagamento: idVendaCondicoesPagamento,
                idNotaFiscalTipo: idNotaFiscalTipo,
                idTransportadora: idTransportadora,
                dataVenda: dataVenda,
                dataSaida: dataSaida,
                horaSaida: horaSaida,
                numeroFatura: numeroFatura,
                localEntrega: localEntrega,
                localCobranca: localCobranca,
                valorSubtotal: valorSubtotal,
                taxaComissao: taxaComissao,
                valorComissao: valorComissao,
                taxaDesconto: taxaDesconto,
                valorDesconto: valorDesconto,
                valorTotal: valorTotal,
                tipoFrete: tipoFrete,
                formaPagamento: formaPagamento,
                valorFrete: valorFrete,
                valorSeguro: valorSeguro,
                observacao: observacao,
                situacao: situacao,
                diaFixoParcela: diaFixoParcela,
              ),
          createCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idVendaOrcamentoCabecalho = const Value.absent(),
                Value<int?> idVendaCondicoesPagamento = const Value.absent(),
                Value<int?> idNotaFiscalTipo = const Value.absent(),
                Value<int?> idTransportadora = const Value.absent(),
                Value<DateTime?> dataVenda = const Value.absent(),
                Value<DateTime?> dataSaida = const Value.absent(),
                Value<String?> horaSaida = const Value.absent(),
                Value<int?> numeroFatura = const Value.absent(),
                Value<String?> localEntrega = const Value.absent(),
                Value<String?> localCobranca = const Value.absent(),
                Value<double?> valorSubtotal = const Value.absent(),
                Value<double?> taxaComissao = const Value.absent(),
                Value<double?> valorComissao = const Value.absent(),
                Value<double?> taxaDesconto = const Value.absent(),
                Value<double?> valorDesconto = const Value.absent(),
                Value<double?> valorTotal = const Value.absent(),
                Value<String?> tipoFrete = const Value.absent(),
                Value<String?> formaPagamento = const Value.absent(),
                Value<double?> valorFrete = const Value.absent(),
                Value<double?> valorSeguro = const Value.absent(),
                Value<String?> observacao = const Value.absent(),
                Value<String?> situacao = const Value.absent(),
                Value<String?> diaFixoParcela = const Value.absent(),
              }) => VendaCabecalhosCompanion.insert(
                id: id,
                idVendaOrcamentoCabecalho: idVendaOrcamentoCabecalho,
                idVendaCondicoesPagamento: idVendaCondicoesPagamento,
                idNotaFiscalTipo: idNotaFiscalTipo,
                idTransportadora: idTransportadora,
                dataVenda: dataVenda,
                dataSaida: dataSaida,
                horaSaida: horaSaida,
                numeroFatura: numeroFatura,
                localEntrega: localEntrega,
                localCobranca: localCobranca,
                valorSubtotal: valorSubtotal,
                taxaComissao: taxaComissao,
                valorComissao: valorComissao,
                taxaDesconto: taxaDesconto,
                valorDesconto: valorDesconto,
                valorTotal: valorTotal,
                tipoFrete: tipoFrete,
                formaPagamento: formaPagamento,
                valorFrete: valorFrete,
                valorSeguro: valorSeguro,
                observacao: observacao,
                situacao: situacao,
                diaFixoParcela: diaFixoParcela,
              ),
          withReferenceMapper:
              (p0) =>
                  p0
                      .map(
                        (e) => (
                          e.readTable(table),
                          BaseReferences(db, table, e),
                        ),
                      )
                      .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$VendaCabecalhosTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $VendaCabecalhosTable,
      VendaCabecalho,
      $$VendaCabecalhosTableFilterComposer,
      $$VendaCabecalhosTableOrderingComposer,
      $$VendaCabecalhosTableAnnotationComposer,
      $$VendaCabecalhosTableCreateCompanionBuilder,
      $$VendaCabecalhosTableUpdateCompanionBuilder,
      (
        VendaCabecalho,
        BaseReferences<_$AppDatabase, $VendaCabecalhosTable, VendaCabecalho>,
      ),
      VendaCabecalho,
      PrefetchHooks Function()
    >;
typedef $$NfeImportacaoDetalhesTableCreateCompanionBuilder =
    NfeImportacaoDetalhesCompanion Function({
      Value<int?> id,
      Value<int?> idNfeDeclaracaoImportacao,
      Value<int?> numeroAdicao,
      Value<int?> numeroSequencial,
      Value<String?> codigoFabricanteEstrangeiro,
      Value<double?> valorDesconto,
      Value<String?> drawback,
    });
typedef $$NfeImportacaoDetalhesTableUpdateCompanionBuilder =
    NfeImportacaoDetalhesCompanion Function({
      Value<int?> id,
      Value<int?> idNfeDeclaracaoImportacao,
      Value<int?> numeroAdicao,
      Value<int?> numeroSequencial,
      Value<String?> codigoFabricanteEstrangeiro,
      Value<double?> valorDesconto,
      Value<String?> drawback,
    });

class $$NfeImportacaoDetalhesTableFilterComposer
    extends Composer<_$AppDatabase, $NfeImportacaoDetalhesTable> {
  $$NfeImportacaoDetalhesTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idNfeDeclaracaoImportacao => $composableBuilder(
    column: $table.idNfeDeclaracaoImportacao,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get numeroAdicao => $composableBuilder(
    column: $table.numeroAdicao,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get numeroSequencial => $composableBuilder(
    column: $table.numeroSequencial,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get codigoFabricanteEstrangeiro => $composableBuilder(
    column: $table.codigoFabricanteEstrangeiro,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get valorDesconto => $composableBuilder(
    column: $table.valorDesconto,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get drawback => $composableBuilder(
    column: $table.drawback,
    builder: (column) => ColumnFilters(column),
  );
}

class $$NfeImportacaoDetalhesTableOrderingComposer
    extends Composer<_$AppDatabase, $NfeImportacaoDetalhesTable> {
  $$NfeImportacaoDetalhesTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idNfeDeclaracaoImportacao => $composableBuilder(
    column: $table.idNfeDeclaracaoImportacao,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get numeroAdicao => $composableBuilder(
    column: $table.numeroAdicao,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get numeroSequencial => $composableBuilder(
    column: $table.numeroSequencial,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get codigoFabricanteEstrangeiro => $composableBuilder(
    column: $table.codigoFabricanteEstrangeiro,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get valorDesconto => $composableBuilder(
    column: $table.valorDesconto,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get drawback => $composableBuilder(
    column: $table.drawback,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$NfeImportacaoDetalhesTableAnnotationComposer
    extends Composer<_$AppDatabase, $NfeImportacaoDetalhesTable> {
  $$NfeImportacaoDetalhesTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<int> get idNfeDeclaracaoImportacao => $composableBuilder(
    column: $table.idNfeDeclaracaoImportacao,
    builder: (column) => column,
  );

  GeneratedColumn<int> get numeroAdicao => $composableBuilder(
    column: $table.numeroAdicao,
    builder: (column) => column,
  );

  GeneratedColumn<int> get numeroSequencial => $composableBuilder(
    column: $table.numeroSequencial,
    builder: (column) => column,
  );

  GeneratedColumn<String> get codigoFabricanteEstrangeiro => $composableBuilder(
    column: $table.codigoFabricanteEstrangeiro,
    builder: (column) => column,
  );

  GeneratedColumn<double> get valorDesconto => $composableBuilder(
    column: $table.valorDesconto,
    builder: (column) => column,
  );

  GeneratedColumn<String> get drawback =>
      $composableBuilder(column: $table.drawback, builder: (column) => column);
}

class $$NfeImportacaoDetalhesTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $NfeImportacaoDetalhesTable,
          NfeImportacaoDetalhe,
          $$NfeImportacaoDetalhesTableFilterComposer,
          $$NfeImportacaoDetalhesTableOrderingComposer,
          $$NfeImportacaoDetalhesTableAnnotationComposer,
          $$NfeImportacaoDetalhesTableCreateCompanionBuilder,
          $$NfeImportacaoDetalhesTableUpdateCompanionBuilder,
          (
            NfeImportacaoDetalhe,
            BaseReferences<
              _$AppDatabase,
              $NfeImportacaoDetalhesTable,
              NfeImportacaoDetalhe
            >,
          ),
          NfeImportacaoDetalhe,
          PrefetchHooks Function()
        > {
  $$NfeImportacaoDetalhesTableTableManager(
    _$AppDatabase db,
    $NfeImportacaoDetalhesTable table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer:
              () => $$NfeImportacaoDetalhesTableFilterComposer(
                $db: db,
                $table: table,
              ),
          createOrderingComposer:
              () => $$NfeImportacaoDetalhesTableOrderingComposer(
                $db: db,
                $table: table,
              ),
          createComputedFieldComposer:
              () => $$NfeImportacaoDetalhesTableAnnotationComposer(
                $db: db,
                $table: table,
              ),
          updateCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeDeclaracaoImportacao = const Value.absent(),
                Value<int?> numeroAdicao = const Value.absent(),
                Value<int?> numeroSequencial = const Value.absent(),
                Value<String?> codigoFabricanteEstrangeiro =
                    const Value.absent(),
                Value<double?> valorDesconto = const Value.absent(),
                Value<String?> drawback = const Value.absent(),
              }) => NfeImportacaoDetalhesCompanion(
                id: id,
                idNfeDeclaracaoImportacao: idNfeDeclaracaoImportacao,
                numeroAdicao: numeroAdicao,
                numeroSequencial: numeroSequencial,
                codigoFabricanteEstrangeiro: codigoFabricanteEstrangeiro,
                valorDesconto: valorDesconto,
                drawback: drawback,
              ),
          createCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idNfeDeclaracaoImportacao = const Value.absent(),
                Value<int?> numeroAdicao = const Value.absent(),
                Value<int?> numeroSequencial = const Value.absent(),
                Value<String?> codigoFabricanteEstrangeiro =
                    const Value.absent(),
                Value<double?> valorDesconto = const Value.absent(),
                Value<String?> drawback = const Value.absent(),
              }) => NfeImportacaoDetalhesCompanion.insert(
                id: id,
                idNfeDeclaracaoImportacao: idNfeDeclaracaoImportacao,
                numeroAdicao: numeroAdicao,
                numeroSequencial: numeroSequencial,
                codigoFabricanteEstrangeiro: codigoFabricanteEstrangeiro,
                valorDesconto: valorDesconto,
                drawback: drawback,
              ),
          withReferenceMapper:
              (p0) =>
                  p0
                      .map(
                        (e) => (
                          e.readTable(table),
                          BaseReferences(db, table, e),
                        ),
                      )
                      .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$NfeImportacaoDetalhesTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $NfeImportacaoDetalhesTable,
      NfeImportacaoDetalhe,
      $$NfeImportacaoDetalhesTableFilterComposer,
      $$NfeImportacaoDetalhesTableOrderingComposer,
      $$NfeImportacaoDetalhesTableAnnotationComposer,
      $$NfeImportacaoDetalhesTableCreateCompanionBuilder,
      $$NfeImportacaoDetalhesTableUpdateCompanionBuilder,
      (
        NfeImportacaoDetalhe,
        BaseReferences<
          _$AppDatabase,
          $NfeImportacaoDetalhesTable,
          NfeImportacaoDetalhe
        >,
      ),
      NfeImportacaoDetalhe,
      PrefetchHooks Function()
    >;
typedef $$NfeNumerosTableCreateCompanionBuilder =
    NfeNumerosCompanion Function({
      Value<int?> id,
      Value<String?> serie,
      Value<int?> numero,
    });
typedef $$NfeNumerosTableUpdateCompanionBuilder =
    NfeNumerosCompanion Function({
      Value<int?> id,
      Value<String?> serie,
      Value<int?> numero,
    });

class $$NfeNumerosTableFilterComposer
    extends Composer<_$AppDatabase, $NfeNumerosTable> {
  $$NfeNumerosTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get serie => $composableBuilder(
    column: $table.serie,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get numero => $composableBuilder(
    column: $table.numero,
    builder: (column) => ColumnFilters(column),
  );
}

class $$NfeNumerosTableOrderingComposer
    extends Composer<_$AppDatabase, $NfeNumerosTable> {
  $$NfeNumerosTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get serie => $composableBuilder(
    column: $table.serie,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get numero => $composableBuilder(
    column: $table.numero,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$NfeNumerosTableAnnotationComposer
    extends Composer<_$AppDatabase, $NfeNumerosTable> {
  $$NfeNumerosTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<String> get serie =>
      $composableBuilder(column: $table.serie, builder: (column) => column);

  GeneratedColumn<int> get numero =>
      $composableBuilder(column: $table.numero, builder: (column) => column);
}

class $$NfeNumerosTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $NfeNumerosTable,
          NfeNumero,
          $$NfeNumerosTableFilterComposer,
          $$NfeNumerosTableOrderingComposer,
          $$NfeNumerosTableAnnotationComposer,
          $$NfeNumerosTableCreateCompanionBuilder,
          $$NfeNumerosTableUpdateCompanionBuilder,
          (
            NfeNumero,
            BaseReferences<_$AppDatabase, $NfeNumerosTable, NfeNumero>,
          ),
          NfeNumero,
          PrefetchHooks Function()
        > {
  $$NfeNumerosTableTableManager(_$AppDatabase db, $NfeNumerosTable table)
    : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer:
              () => $$NfeNumerosTableFilterComposer($db: db, $table: table),
          createOrderingComposer:
              () => $$NfeNumerosTableOrderingComposer($db: db, $table: table),
          createComputedFieldComposer:
              () => $$NfeNumerosTableAnnotationComposer($db: db, $table: table),
          updateCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<String?> serie = const Value.absent(),
                Value<int?> numero = const Value.absent(),
              }) => NfeNumerosCompanion(id: id, serie: serie, numero: numero),
          createCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<String?> serie = const Value.absent(),
                Value<int?> numero = const Value.absent(),
              }) => NfeNumerosCompanion.insert(
                id: id,
                serie: serie,
                numero: numero,
              ),
          withReferenceMapper:
              (p0) =>
                  p0
                      .map(
                        (e) => (
                          e.readTable(table),
                          BaseReferences(db, table, e),
                        ),
                      )
                      .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$NfeNumerosTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $NfeNumerosTable,
      NfeNumero,
      $$NfeNumerosTableFilterComposer,
      $$NfeNumerosTableOrderingComposer,
      $$NfeNumerosTableAnnotationComposer,
      $$NfeNumerosTableCreateCompanionBuilder,
      $$NfeNumerosTableUpdateCompanionBuilder,
      (NfeNumero, BaseReferences<_$AppDatabase, $NfeNumerosTable, NfeNumero>),
      NfeNumero,
      PrefetchHooks Function()
    >;
typedef $$NfeConfiguracaosTableCreateCompanionBuilder =
    NfeConfiguracaosCompanion Function({
      Value<int?> id,
      Value<String?> certificadoDigitalSerie,
      Value<String?> certificadoDigitalCaminho,
      Value<String?> certificadoDigitalSenha,
      Value<int?> tipoEmissao,
      Value<int?> formatoImpressaoDanfe,
      Value<int?> processoEmissao,
      Value<String?> versaoProcessoEmissao,
      Value<String?> caminhoLogomarca,
      Value<String?> salvarXml,
      Value<String?> caminhoSalvarXml,
      Value<String?> caminhoSchemas,
      Value<String?> caminhoArquivoDanfe,
      Value<String?> caminhoSalvarPdf,
      Value<String?> webserviceUf,
      Value<int?> webserviceAmbiente,
      Value<String?> webserviceProxyHost,
      Value<int?> webserviceProxyPorta,
      Value<String?> webserviceProxyUsuario,
      Value<String?> webserviceProxySenha,
      Value<String?> webserviceVisualizar,
      Value<String?> emailServidorSmtp,
      Value<int?> emailPorta,
      Value<String?> emailUsuario,
      Value<String?> emailSenha,
      Value<String?> emailAssunto,
      Value<String?> emailAutenticaSsl,
      Value<String?> emailTexto,
    });
typedef $$NfeConfiguracaosTableUpdateCompanionBuilder =
    NfeConfiguracaosCompanion Function({
      Value<int?> id,
      Value<String?> certificadoDigitalSerie,
      Value<String?> certificadoDigitalCaminho,
      Value<String?> certificadoDigitalSenha,
      Value<int?> tipoEmissao,
      Value<int?> formatoImpressaoDanfe,
      Value<int?> processoEmissao,
      Value<String?> versaoProcessoEmissao,
      Value<String?> caminhoLogomarca,
      Value<String?> salvarXml,
      Value<String?> caminhoSalvarXml,
      Value<String?> caminhoSchemas,
      Value<String?> caminhoArquivoDanfe,
      Value<String?> caminhoSalvarPdf,
      Value<String?> webserviceUf,
      Value<int?> webserviceAmbiente,
      Value<String?> webserviceProxyHost,
      Value<int?> webserviceProxyPorta,
      Value<String?> webserviceProxyUsuario,
      Value<String?> webserviceProxySenha,
      Value<String?> webserviceVisualizar,
      Value<String?> emailServidorSmtp,
      Value<int?> emailPorta,
      Value<String?> emailUsuario,
      Value<String?> emailSenha,
      Value<String?> emailAssunto,
      Value<String?> emailAutenticaSsl,
      Value<String?> emailTexto,
    });

class $$NfeConfiguracaosTableFilterComposer
    extends Composer<_$AppDatabase, $NfeConfiguracaosTable> {
  $$NfeConfiguracaosTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get certificadoDigitalSerie => $composableBuilder(
    column: $table.certificadoDigitalSerie,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get certificadoDigitalCaminho => $composableBuilder(
    column: $table.certificadoDigitalCaminho,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get certificadoDigitalSenha => $composableBuilder(
    column: $table.certificadoDigitalSenha,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get tipoEmissao => $composableBuilder(
    column: $table.tipoEmissao,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get formatoImpressaoDanfe => $composableBuilder(
    column: $table.formatoImpressaoDanfe,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get processoEmissao => $composableBuilder(
    column: $table.processoEmissao,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get versaoProcessoEmissao => $composableBuilder(
    column: $table.versaoProcessoEmissao,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get caminhoLogomarca => $composableBuilder(
    column: $table.caminhoLogomarca,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get salvarXml => $composableBuilder(
    column: $table.salvarXml,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get caminhoSalvarXml => $composableBuilder(
    column: $table.caminhoSalvarXml,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get caminhoSchemas => $composableBuilder(
    column: $table.caminhoSchemas,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get caminhoArquivoDanfe => $composableBuilder(
    column: $table.caminhoArquivoDanfe,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get caminhoSalvarPdf => $composableBuilder(
    column: $table.caminhoSalvarPdf,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get webserviceUf => $composableBuilder(
    column: $table.webserviceUf,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get webserviceAmbiente => $composableBuilder(
    column: $table.webserviceAmbiente,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get webserviceProxyHost => $composableBuilder(
    column: $table.webserviceProxyHost,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get webserviceProxyPorta => $composableBuilder(
    column: $table.webserviceProxyPorta,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get webserviceProxyUsuario => $composableBuilder(
    column: $table.webserviceProxyUsuario,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get webserviceProxySenha => $composableBuilder(
    column: $table.webserviceProxySenha,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get webserviceVisualizar => $composableBuilder(
    column: $table.webserviceVisualizar,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get emailServidorSmtp => $composableBuilder(
    column: $table.emailServidorSmtp,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get emailPorta => $composableBuilder(
    column: $table.emailPorta,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get emailUsuario => $composableBuilder(
    column: $table.emailUsuario,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get emailSenha => $composableBuilder(
    column: $table.emailSenha,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get emailAssunto => $composableBuilder(
    column: $table.emailAssunto,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get emailAutenticaSsl => $composableBuilder(
    column: $table.emailAutenticaSsl,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get emailTexto => $composableBuilder(
    column: $table.emailTexto,
    builder: (column) => ColumnFilters(column),
  );
}

class $$NfeConfiguracaosTableOrderingComposer
    extends Composer<_$AppDatabase, $NfeConfiguracaosTable> {
  $$NfeConfiguracaosTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get certificadoDigitalSerie => $composableBuilder(
    column: $table.certificadoDigitalSerie,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get certificadoDigitalCaminho => $composableBuilder(
    column: $table.certificadoDigitalCaminho,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get certificadoDigitalSenha => $composableBuilder(
    column: $table.certificadoDigitalSenha,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get tipoEmissao => $composableBuilder(
    column: $table.tipoEmissao,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get formatoImpressaoDanfe => $composableBuilder(
    column: $table.formatoImpressaoDanfe,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get processoEmissao => $composableBuilder(
    column: $table.processoEmissao,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get versaoProcessoEmissao => $composableBuilder(
    column: $table.versaoProcessoEmissao,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get caminhoLogomarca => $composableBuilder(
    column: $table.caminhoLogomarca,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get salvarXml => $composableBuilder(
    column: $table.salvarXml,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get caminhoSalvarXml => $composableBuilder(
    column: $table.caminhoSalvarXml,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get caminhoSchemas => $composableBuilder(
    column: $table.caminhoSchemas,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get caminhoArquivoDanfe => $composableBuilder(
    column: $table.caminhoArquivoDanfe,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get caminhoSalvarPdf => $composableBuilder(
    column: $table.caminhoSalvarPdf,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get webserviceUf => $composableBuilder(
    column: $table.webserviceUf,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get webserviceAmbiente => $composableBuilder(
    column: $table.webserviceAmbiente,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get webserviceProxyHost => $composableBuilder(
    column: $table.webserviceProxyHost,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get webserviceProxyPorta => $composableBuilder(
    column: $table.webserviceProxyPorta,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get webserviceProxyUsuario => $composableBuilder(
    column: $table.webserviceProxyUsuario,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get webserviceProxySenha => $composableBuilder(
    column: $table.webserviceProxySenha,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get webserviceVisualizar => $composableBuilder(
    column: $table.webserviceVisualizar,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get emailServidorSmtp => $composableBuilder(
    column: $table.emailServidorSmtp,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get emailPorta => $composableBuilder(
    column: $table.emailPorta,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get emailUsuario => $composableBuilder(
    column: $table.emailUsuario,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get emailSenha => $composableBuilder(
    column: $table.emailSenha,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get emailAssunto => $composableBuilder(
    column: $table.emailAssunto,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get emailAutenticaSsl => $composableBuilder(
    column: $table.emailAutenticaSsl,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get emailTexto => $composableBuilder(
    column: $table.emailTexto,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$NfeConfiguracaosTableAnnotationComposer
    extends Composer<_$AppDatabase, $NfeConfiguracaosTable> {
  $$NfeConfiguracaosTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<String> get certificadoDigitalSerie => $composableBuilder(
    column: $table.certificadoDigitalSerie,
    builder: (column) => column,
  );

  GeneratedColumn<String> get certificadoDigitalCaminho => $composableBuilder(
    column: $table.certificadoDigitalCaminho,
    builder: (column) => column,
  );

  GeneratedColumn<String> get certificadoDigitalSenha => $composableBuilder(
    column: $table.certificadoDigitalSenha,
    builder: (column) => column,
  );

  GeneratedColumn<int> get tipoEmissao => $composableBuilder(
    column: $table.tipoEmissao,
    builder: (column) => column,
  );

  GeneratedColumn<int> get formatoImpressaoDanfe => $composableBuilder(
    column: $table.formatoImpressaoDanfe,
    builder: (column) => column,
  );

  GeneratedColumn<int> get processoEmissao => $composableBuilder(
    column: $table.processoEmissao,
    builder: (column) => column,
  );

  GeneratedColumn<String> get versaoProcessoEmissao => $composableBuilder(
    column: $table.versaoProcessoEmissao,
    builder: (column) => column,
  );

  GeneratedColumn<String> get caminhoLogomarca => $composableBuilder(
    column: $table.caminhoLogomarca,
    builder: (column) => column,
  );

  GeneratedColumn<String> get salvarXml =>
      $composableBuilder(column: $table.salvarXml, builder: (column) => column);

  GeneratedColumn<String> get caminhoSalvarXml => $composableBuilder(
    column: $table.caminhoSalvarXml,
    builder: (column) => column,
  );

  GeneratedColumn<String> get caminhoSchemas => $composableBuilder(
    column: $table.caminhoSchemas,
    builder: (column) => column,
  );

  GeneratedColumn<String> get caminhoArquivoDanfe => $composableBuilder(
    column: $table.caminhoArquivoDanfe,
    builder: (column) => column,
  );

  GeneratedColumn<String> get caminhoSalvarPdf => $composableBuilder(
    column: $table.caminhoSalvarPdf,
    builder: (column) => column,
  );

  GeneratedColumn<String> get webserviceUf => $composableBuilder(
    column: $table.webserviceUf,
    builder: (column) => column,
  );

  GeneratedColumn<int> get webserviceAmbiente => $composableBuilder(
    column: $table.webserviceAmbiente,
    builder: (column) => column,
  );

  GeneratedColumn<String> get webserviceProxyHost => $composableBuilder(
    column: $table.webserviceProxyHost,
    builder: (column) => column,
  );

  GeneratedColumn<int> get webserviceProxyPorta => $composableBuilder(
    column: $table.webserviceProxyPorta,
    builder: (column) => column,
  );

  GeneratedColumn<String> get webserviceProxyUsuario => $composableBuilder(
    column: $table.webserviceProxyUsuario,
    builder: (column) => column,
  );

  GeneratedColumn<String> get webserviceProxySenha => $composableBuilder(
    column: $table.webserviceProxySenha,
    builder: (column) => column,
  );

  GeneratedColumn<String> get webserviceVisualizar => $composableBuilder(
    column: $table.webserviceVisualizar,
    builder: (column) => column,
  );

  GeneratedColumn<String> get emailServidorSmtp => $composableBuilder(
    column: $table.emailServidorSmtp,
    builder: (column) => column,
  );

  GeneratedColumn<int> get emailPorta => $composableBuilder(
    column: $table.emailPorta,
    builder: (column) => column,
  );

  GeneratedColumn<String> get emailUsuario => $composableBuilder(
    column: $table.emailUsuario,
    builder: (column) => column,
  );

  GeneratedColumn<String> get emailSenha => $composableBuilder(
    column: $table.emailSenha,
    builder: (column) => column,
  );

  GeneratedColumn<String> get emailAssunto => $composableBuilder(
    column: $table.emailAssunto,
    builder: (column) => column,
  );

  GeneratedColumn<String> get emailAutenticaSsl => $composableBuilder(
    column: $table.emailAutenticaSsl,
    builder: (column) => column,
  );

  GeneratedColumn<String> get emailTexto => $composableBuilder(
    column: $table.emailTexto,
    builder: (column) => column,
  );
}

class $$NfeConfiguracaosTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $NfeConfiguracaosTable,
          NfeConfiguracao,
          $$NfeConfiguracaosTableFilterComposer,
          $$NfeConfiguracaosTableOrderingComposer,
          $$NfeConfiguracaosTableAnnotationComposer,
          $$NfeConfiguracaosTableCreateCompanionBuilder,
          $$NfeConfiguracaosTableUpdateCompanionBuilder,
          (
            NfeConfiguracao,
            BaseReferences<
              _$AppDatabase,
              $NfeConfiguracaosTable,
              NfeConfiguracao
            >,
          ),
          NfeConfiguracao,
          PrefetchHooks Function()
        > {
  $$NfeConfiguracaosTableTableManager(
    _$AppDatabase db,
    $NfeConfiguracaosTable table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer:
              () =>
                  $$NfeConfiguracaosTableFilterComposer($db: db, $table: table),
          createOrderingComposer:
              () => $$NfeConfiguracaosTableOrderingComposer(
                $db: db,
                $table: table,
              ),
          createComputedFieldComposer:
              () => $$NfeConfiguracaosTableAnnotationComposer(
                $db: db,
                $table: table,
              ),
          updateCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<String?> certificadoDigitalSerie = const Value.absent(),
                Value<String?> certificadoDigitalCaminho = const Value.absent(),
                Value<String?> certificadoDigitalSenha = const Value.absent(),
                Value<int?> tipoEmissao = const Value.absent(),
                Value<int?> formatoImpressaoDanfe = const Value.absent(),
                Value<int?> processoEmissao = const Value.absent(),
                Value<String?> versaoProcessoEmissao = const Value.absent(),
                Value<String?> caminhoLogomarca = const Value.absent(),
                Value<String?> salvarXml = const Value.absent(),
                Value<String?> caminhoSalvarXml = const Value.absent(),
                Value<String?> caminhoSchemas = const Value.absent(),
                Value<String?> caminhoArquivoDanfe = const Value.absent(),
                Value<String?> caminhoSalvarPdf = const Value.absent(),
                Value<String?> webserviceUf = const Value.absent(),
                Value<int?> webserviceAmbiente = const Value.absent(),
                Value<String?> webserviceProxyHost = const Value.absent(),
                Value<int?> webserviceProxyPorta = const Value.absent(),
                Value<String?> webserviceProxyUsuario = const Value.absent(),
                Value<String?> webserviceProxySenha = const Value.absent(),
                Value<String?> webserviceVisualizar = const Value.absent(),
                Value<String?> emailServidorSmtp = const Value.absent(),
                Value<int?> emailPorta = const Value.absent(),
                Value<String?> emailUsuario = const Value.absent(),
                Value<String?> emailSenha = const Value.absent(),
                Value<String?> emailAssunto = const Value.absent(),
                Value<String?> emailAutenticaSsl = const Value.absent(),
                Value<String?> emailTexto = const Value.absent(),
              }) => NfeConfiguracaosCompanion(
                id: id,
                certificadoDigitalSerie: certificadoDigitalSerie,
                certificadoDigitalCaminho: certificadoDigitalCaminho,
                certificadoDigitalSenha: certificadoDigitalSenha,
                tipoEmissao: tipoEmissao,
                formatoImpressaoDanfe: formatoImpressaoDanfe,
                processoEmissao: processoEmissao,
                versaoProcessoEmissao: versaoProcessoEmissao,
                caminhoLogomarca: caminhoLogomarca,
                salvarXml: salvarXml,
                caminhoSalvarXml: caminhoSalvarXml,
                caminhoSchemas: caminhoSchemas,
                caminhoArquivoDanfe: caminhoArquivoDanfe,
                caminhoSalvarPdf: caminhoSalvarPdf,
                webserviceUf: webserviceUf,
                webserviceAmbiente: webserviceAmbiente,
                webserviceProxyHost: webserviceProxyHost,
                webserviceProxyPorta: webserviceProxyPorta,
                webserviceProxyUsuario: webserviceProxyUsuario,
                webserviceProxySenha: webserviceProxySenha,
                webserviceVisualizar: webserviceVisualizar,
                emailServidorSmtp: emailServidorSmtp,
                emailPorta: emailPorta,
                emailUsuario: emailUsuario,
                emailSenha: emailSenha,
                emailAssunto: emailAssunto,
                emailAutenticaSsl: emailAutenticaSsl,
                emailTexto: emailTexto,
              ),
          createCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<String?> certificadoDigitalSerie = const Value.absent(),
                Value<String?> certificadoDigitalCaminho = const Value.absent(),
                Value<String?> certificadoDigitalSenha = const Value.absent(),
                Value<int?> tipoEmissao = const Value.absent(),
                Value<int?> formatoImpressaoDanfe = const Value.absent(),
                Value<int?> processoEmissao = const Value.absent(),
                Value<String?> versaoProcessoEmissao = const Value.absent(),
                Value<String?> caminhoLogomarca = const Value.absent(),
                Value<String?> salvarXml = const Value.absent(),
                Value<String?> caminhoSalvarXml = const Value.absent(),
                Value<String?> caminhoSchemas = const Value.absent(),
                Value<String?> caminhoArquivoDanfe = const Value.absent(),
                Value<String?> caminhoSalvarPdf = const Value.absent(),
                Value<String?> webserviceUf = const Value.absent(),
                Value<int?> webserviceAmbiente = const Value.absent(),
                Value<String?> webserviceProxyHost = const Value.absent(),
                Value<int?> webserviceProxyPorta = const Value.absent(),
                Value<String?> webserviceProxyUsuario = const Value.absent(),
                Value<String?> webserviceProxySenha = const Value.absent(),
                Value<String?> webserviceVisualizar = const Value.absent(),
                Value<String?> emailServidorSmtp = const Value.absent(),
                Value<int?> emailPorta = const Value.absent(),
                Value<String?> emailUsuario = const Value.absent(),
                Value<String?> emailSenha = const Value.absent(),
                Value<String?> emailAssunto = const Value.absent(),
                Value<String?> emailAutenticaSsl = const Value.absent(),
                Value<String?> emailTexto = const Value.absent(),
              }) => NfeConfiguracaosCompanion.insert(
                id: id,
                certificadoDigitalSerie: certificadoDigitalSerie,
                certificadoDigitalCaminho: certificadoDigitalCaminho,
                certificadoDigitalSenha: certificadoDigitalSenha,
                tipoEmissao: tipoEmissao,
                formatoImpressaoDanfe: formatoImpressaoDanfe,
                processoEmissao: processoEmissao,
                versaoProcessoEmissao: versaoProcessoEmissao,
                caminhoLogomarca: caminhoLogomarca,
                salvarXml: salvarXml,
                caminhoSalvarXml: caminhoSalvarXml,
                caminhoSchemas: caminhoSchemas,
                caminhoArquivoDanfe: caminhoArquivoDanfe,
                caminhoSalvarPdf: caminhoSalvarPdf,
                webserviceUf: webserviceUf,
                webserviceAmbiente: webserviceAmbiente,
                webserviceProxyHost: webserviceProxyHost,
                webserviceProxyPorta: webserviceProxyPorta,
                webserviceProxyUsuario: webserviceProxyUsuario,
                webserviceProxySenha: webserviceProxySenha,
                webserviceVisualizar: webserviceVisualizar,
                emailServidorSmtp: emailServidorSmtp,
                emailPorta: emailPorta,
                emailUsuario: emailUsuario,
                emailSenha: emailSenha,
                emailAssunto: emailAssunto,
                emailAutenticaSsl: emailAutenticaSsl,
                emailTexto: emailTexto,
              ),
          withReferenceMapper:
              (p0) =>
                  p0
                      .map(
                        (e) => (
                          e.readTable(table),
                          BaseReferences(db, table, e),
                        ),
                      )
                      .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$NfeConfiguracaosTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $NfeConfiguracaosTable,
      NfeConfiguracao,
      $$NfeConfiguracaosTableFilterComposer,
      $$NfeConfiguracaosTableOrderingComposer,
      $$NfeConfiguracaosTableAnnotationComposer,
      $$NfeConfiguracaosTableCreateCompanionBuilder,
      $$NfeConfiguracaosTableUpdateCompanionBuilder,
      (
        NfeConfiguracao,
        BaseReferences<_$AppDatabase, $NfeConfiguracaosTable, NfeConfiguracao>,
      ),
      NfeConfiguracao,
      PrefetchHooks Function()
    >;
typedef $$NfeNumeroInutilizadosTableCreateCompanionBuilder =
    NfeNumeroInutilizadosCompanion Function({
      Value<int?> id,
      Value<String?> serie,
      Value<int?> numero,
      Value<DateTime?> dataInutilizacao,
      Value<String?> observacao,
    });
typedef $$NfeNumeroInutilizadosTableUpdateCompanionBuilder =
    NfeNumeroInutilizadosCompanion Function({
      Value<int?> id,
      Value<String?> serie,
      Value<int?> numero,
      Value<DateTime?> dataInutilizacao,
      Value<String?> observacao,
    });

class $$NfeNumeroInutilizadosTableFilterComposer
    extends Composer<_$AppDatabase, $NfeNumeroInutilizadosTable> {
  $$NfeNumeroInutilizadosTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get serie => $composableBuilder(
    column: $table.serie,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get numero => $composableBuilder(
    column: $table.numero,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get dataInutilizacao => $composableBuilder(
    column: $table.dataInutilizacao,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get observacao => $composableBuilder(
    column: $table.observacao,
    builder: (column) => ColumnFilters(column),
  );
}

class $$NfeNumeroInutilizadosTableOrderingComposer
    extends Composer<_$AppDatabase, $NfeNumeroInutilizadosTable> {
  $$NfeNumeroInutilizadosTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get serie => $composableBuilder(
    column: $table.serie,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get numero => $composableBuilder(
    column: $table.numero,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get dataInutilizacao => $composableBuilder(
    column: $table.dataInutilizacao,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get observacao => $composableBuilder(
    column: $table.observacao,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$NfeNumeroInutilizadosTableAnnotationComposer
    extends Composer<_$AppDatabase, $NfeNumeroInutilizadosTable> {
  $$NfeNumeroInutilizadosTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<String> get serie =>
      $composableBuilder(column: $table.serie, builder: (column) => column);

  GeneratedColumn<int> get numero =>
      $composableBuilder(column: $table.numero, builder: (column) => column);

  GeneratedColumn<DateTime> get dataInutilizacao => $composableBuilder(
    column: $table.dataInutilizacao,
    builder: (column) => column,
  );

  GeneratedColumn<String> get observacao => $composableBuilder(
    column: $table.observacao,
    builder: (column) => column,
  );
}

class $$NfeNumeroInutilizadosTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $NfeNumeroInutilizadosTable,
          NfeNumeroInutilizado,
          $$NfeNumeroInutilizadosTableFilterComposer,
          $$NfeNumeroInutilizadosTableOrderingComposer,
          $$NfeNumeroInutilizadosTableAnnotationComposer,
          $$NfeNumeroInutilizadosTableCreateCompanionBuilder,
          $$NfeNumeroInutilizadosTableUpdateCompanionBuilder,
          (
            NfeNumeroInutilizado,
            BaseReferences<
              _$AppDatabase,
              $NfeNumeroInutilizadosTable,
              NfeNumeroInutilizado
            >,
          ),
          NfeNumeroInutilizado,
          PrefetchHooks Function()
        > {
  $$NfeNumeroInutilizadosTableTableManager(
    _$AppDatabase db,
    $NfeNumeroInutilizadosTable table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer:
              () => $$NfeNumeroInutilizadosTableFilterComposer(
                $db: db,
                $table: table,
              ),
          createOrderingComposer:
              () => $$NfeNumeroInutilizadosTableOrderingComposer(
                $db: db,
                $table: table,
              ),
          createComputedFieldComposer:
              () => $$NfeNumeroInutilizadosTableAnnotationComposer(
                $db: db,
                $table: table,
              ),
          updateCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<String?> serie = const Value.absent(),
                Value<int?> numero = const Value.absent(),
                Value<DateTime?> dataInutilizacao = const Value.absent(),
                Value<String?> observacao = const Value.absent(),
              }) => NfeNumeroInutilizadosCompanion(
                id: id,
                serie: serie,
                numero: numero,
                dataInutilizacao: dataInutilizacao,
                observacao: observacao,
              ),
          createCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<String?> serie = const Value.absent(),
                Value<int?> numero = const Value.absent(),
                Value<DateTime?> dataInutilizacao = const Value.absent(),
                Value<String?> observacao = const Value.absent(),
              }) => NfeNumeroInutilizadosCompanion.insert(
                id: id,
                serie: serie,
                numero: numero,
                dataInutilizacao: dataInutilizacao,
                observacao: observacao,
              ),
          withReferenceMapper:
              (p0) =>
                  p0
                      .map(
                        (e) => (
                          e.readTable(table),
                          BaseReferences(db, table, e),
                        ),
                      )
                      .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$NfeNumeroInutilizadosTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $NfeNumeroInutilizadosTable,
      NfeNumeroInutilizado,
      $$NfeNumeroInutilizadosTableFilterComposer,
      $$NfeNumeroInutilizadosTableOrderingComposer,
      $$NfeNumeroInutilizadosTableAnnotationComposer,
      $$NfeNumeroInutilizadosTableCreateCompanionBuilder,
      $$NfeNumeroInutilizadosTableUpdateCompanionBuilder,
      (
        NfeNumeroInutilizado,
        BaseReferences<
          _$AppDatabase,
          $NfeNumeroInutilizadosTable,
          NfeNumeroInutilizado
        >,
      ),
      NfeNumeroInutilizado,
      PrefetchHooks Function()
    >;
typedef $$ViewControleAcessosTableCreateCompanionBuilder =
    ViewControleAcessosCompanion Function({
      Value<int?> id,
      Value<int?> idPessoa,
      Value<String?> pessoaNome,
      Value<int?> idColaborador,
      Value<int?> idUsuario,
      Value<String?> administrador,
      Value<int?> idPapel,
      Value<String?> papelNome,
      Value<String?> papelDescricao,
      Value<int?> idFuncao,
      Value<String?> funcaoNome,
      Value<String?> funcaoDescricao,
      Value<int?> idPapelFuncao,
      Value<String?> habilitado,
      Value<String?> podeInserir,
      Value<String?> podeAlterar,
      Value<String?> podeExcluir,
    });
typedef $$ViewControleAcessosTableUpdateCompanionBuilder =
    ViewControleAcessosCompanion Function({
      Value<int?> id,
      Value<int?> idPessoa,
      Value<String?> pessoaNome,
      Value<int?> idColaborador,
      Value<int?> idUsuario,
      Value<String?> administrador,
      Value<int?> idPapel,
      Value<String?> papelNome,
      Value<String?> papelDescricao,
      Value<int?> idFuncao,
      Value<String?> funcaoNome,
      Value<String?> funcaoDescricao,
      Value<int?> idPapelFuncao,
      Value<String?> habilitado,
      Value<String?> podeInserir,
      Value<String?> podeAlterar,
      Value<String?> podeExcluir,
    });

class $$ViewControleAcessosTableFilterComposer
    extends Composer<_$AppDatabase, $ViewControleAcessosTable> {
  $$ViewControleAcessosTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idPessoa => $composableBuilder(
    column: $table.idPessoa,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get pessoaNome => $composableBuilder(
    column: $table.pessoaNome,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idColaborador => $composableBuilder(
    column: $table.idColaborador,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idUsuario => $composableBuilder(
    column: $table.idUsuario,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get administrador => $composableBuilder(
    column: $table.administrador,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idPapel => $composableBuilder(
    column: $table.idPapel,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get papelNome => $composableBuilder(
    column: $table.papelNome,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get papelDescricao => $composableBuilder(
    column: $table.papelDescricao,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idFuncao => $composableBuilder(
    column: $table.idFuncao,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get funcaoNome => $composableBuilder(
    column: $table.funcaoNome,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get funcaoDescricao => $composableBuilder(
    column: $table.funcaoDescricao,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idPapelFuncao => $composableBuilder(
    column: $table.idPapelFuncao,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get habilitado => $composableBuilder(
    column: $table.habilitado,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get podeInserir => $composableBuilder(
    column: $table.podeInserir,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get podeAlterar => $composableBuilder(
    column: $table.podeAlterar,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get podeExcluir => $composableBuilder(
    column: $table.podeExcluir,
    builder: (column) => ColumnFilters(column),
  );
}

class $$ViewControleAcessosTableOrderingComposer
    extends Composer<_$AppDatabase, $ViewControleAcessosTable> {
  $$ViewControleAcessosTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idPessoa => $composableBuilder(
    column: $table.idPessoa,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get pessoaNome => $composableBuilder(
    column: $table.pessoaNome,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idColaborador => $composableBuilder(
    column: $table.idColaborador,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idUsuario => $composableBuilder(
    column: $table.idUsuario,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get administrador => $composableBuilder(
    column: $table.administrador,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idPapel => $composableBuilder(
    column: $table.idPapel,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get papelNome => $composableBuilder(
    column: $table.papelNome,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get papelDescricao => $composableBuilder(
    column: $table.papelDescricao,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idFuncao => $composableBuilder(
    column: $table.idFuncao,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get funcaoNome => $composableBuilder(
    column: $table.funcaoNome,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get funcaoDescricao => $composableBuilder(
    column: $table.funcaoDescricao,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idPapelFuncao => $composableBuilder(
    column: $table.idPapelFuncao,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get habilitado => $composableBuilder(
    column: $table.habilitado,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get podeInserir => $composableBuilder(
    column: $table.podeInserir,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get podeAlterar => $composableBuilder(
    column: $table.podeAlterar,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get podeExcluir => $composableBuilder(
    column: $table.podeExcluir,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$ViewControleAcessosTableAnnotationComposer
    extends Composer<_$AppDatabase, $ViewControleAcessosTable> {
  $$ViewControleAcessosTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<int> get idPessoa =>
      $composableBuilder(column: $table.idPessoa, builder: (column) => column);

  GeneratedColumn<String> get pessoaNome => $composableBuilder(
    column: $table.pessoaNome,
    builder: (column) => column,
  );

  GeneratedColumn<int> get idColaborador => $composableBuilder(
    column: $table.idColaborador,
    builder: (column) => column,
  );

  GeneratedColumn<int> get idUsuario =>
      $composableBuilder(column: $table.idUsuario, builder: (column) => column);

  GeneratedColumn<String> get administrador => $composableBuilder(
    column: $table.administrador,
    builder: (column) => column,
  );

  GeneratedColumn<int> get idPapel =>
      $composableBuilder(column: $table.idPapel, builder: (column) => column);

  GeneratedColumn<String> get papelNome =>
      $composableBuilder(column: $table.papelNome, builder: (column) => column);

  GeneratedColumn<String> get papelDescricao => $composableBuilder(
    column: $table.papelDescricao,
    builder: (column) => column,
  );

  GeneratedColumn<int> get idFuncao =>
      $composableBuilder(column: $table.idFuncao, builder: (column) => column);

  GeneratedColumn<String> get funcaoNome => $composableBuilder(
    column: $table.funcaoNome,
    builder: (column) => column,
  );

  GeneratedColumn<String> get funcaoDescricao => $composableBuilder(
    column: $table.funcaoDescricao,
    builder: (column) => column,
  );

  GeneratedColumn<int> get idPapelFuncao => $composableBuilder(
    column: $table.idPapelFuncao,
    builder: (column) => column,
  );

  GeneratedColumn<String> get habilitado => $composableBuilder(
    column: $table.habilitado,
    builder: (column) => column,
  );

  GeneratedColumn<String> get podeInserir => $composableBuilder(
    column: $table.podeInserir,
    builder: (column) => column,
  );

  GeneratedColumn<String> get podeAlterar => $composableBuilder(
    column: $table.podeAlterar,
    builder: (column) => column,
  );

  GeneratedColumn<String> get podeExcluir => $composableBuilder(
    column: $table.podeExcluir,
    builder: (column) => column,
  );
}

class $$ViewControleAcessosTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $ViewControleAcessosTable,
          ViewControleAcesso,
          $$ViewControleAcessosTableFilterComposer,
          $$ViewControleAcessosTableOrderingComposer,
          $$ViewControleAcessosTableAnnotationComposer,
          $$ViewControleAcessosTableCreateCompanionBuilder,
          $$ViewControleAcessosTableUpdateCompanionBuilder,
          (
            ViewControleAcesso,
            BaseReferences<
              _$AppDatabase,
              $ViewControleAcessosTable,
              ViewControleAcesso
            >,
          ),
          ViewControleAcesso,
          PrefetchHooks Function()
        > {
  $$ViewControleAcessosTableTableManager(
    _$AppDatabase db,
    $ViewControleAcessosTable table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer:
              () => $$ViewControleAcessosTableFilterComposer(
                $db: db,
                $table: table,
              ),
          createOrderingComposer:
              () => $$ViewControleAcessosTableOrderingComposer(
                $db: db,
                $table: table,
              ),
          createComputedFieldComposer:
              () => $$ViewControleAcessosTableAnnotationComposer(
                $db: db,
                $table: table,
              ),
          updateCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idPessoa = const Value.absent(),
                Value<String?> pessoaNome = const Value.absent(),
                Value<int?> idColaborador = const Value.absent(),
                Value<int?> idUsuario = const Value.absent(),
                Value<String?> administrador = const Value.absent(),
                Value<int?> idPapel = const Value.absent(),
                Value<String?> papelNome = const Value.absent(),
                Value<String?> papelDescricao = const Value.absent(),
                Value<int?> idFuncao = const Value.absent(),
                Value<String?> funcaoNome = const Value.absent(),
                Value<String?> funcaoDescricao = const Value.absent(),
                Value<int?> idPapelFuncao = const Value.absent(),
                Value<String?> habilitado = const Value.absent(),
                Value<String?> podeInserir = const Value.absent(),
                Value<String?> podeAlterar = const Value.absent(),
                Value<String?> podeExcluir = const Value.absent(),
              }) => ViewControleAcessosCompanion(
                id: id,
                idPessoa: idPessoa,
                pessoaNome: pessoaNome,
                idColaborador: idColaborador,
                idUsuario: idUsuario,
                administrador: administrador,
                idPapel: idPapel,
                papelNome: papelNome,
                papelDescricao: papelDescricao,
                idFuncao: idFuncao,
                funcaoNome: funcaoNome,
                funcaoDescricao: funcaoDescricao,
                idPapelFuncao: idPapelFuncao,
                habilitado: habilitado,
                podeInserir: podeInserir,
                podeAlterar: podeAlterar,
                podeExcluir: podeExcluir,
              ),
          createCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idPessoa = const Value.absent(),
                Value<String?> pessoaNome = const Value.absent(),
                Value<int?> idColaborador = const Value.absent(),
                Value<int?> idUsuario = const Value.absent(),
                Value<String?> administrador = const Value.absent(),
                Value<int?> idPapel = const Value.absent(),
                Value<String?> papelNome = const Value.absent(),
                Value<String?> papelDescricao = const Value.absent(),
                Value<int?> idFuncao = const Value.absent(),
                Value<String?> funcaoNome = const Value.absent(),
                Value<String?> funcaoDescricao = const Value.absent(),
                Value<int?> idPapelFuncao = const Value.absent(),
                Value<String?> habilitado = const Value.absent(),
                Value<String?> podeInserir = const Value.absent(),
                Value<String?> podeAlterar = const Value.absent(),
                Value<String?> podeExcluir = const Value.absent(),
              }) => ViewControleAcessosCompanion.insert(
                id: id,
                idPessoa: idPessoa,
                pessoaNome: pessoaNome,
                idColaborador: idColaborador,
                idUsuario: idUsuario,
                administrador: administrador,
                idPapel: idPapel,
                papelNome: papelNome,
                papelDescricao: papelDescricao,
                idFuncao: idFuncao,
                funcaoNome: funcaoNome,
                funcaoDescricao: funcaoDescricao,
                idPapelFuncao: idPapelFuncao,
                habilitado: habilitado,
                podeInserir: podeInserir,
                podeAlterar: podeAlterar,
                podeExcluir: podeExcluir,
              ),
          withReferenceMapper:
              (p0) =>
                  p0
                      .map(
                        (e) => (
                          e.readTable(table),
                          BaseReferences(db, table, e),
                        ),
                      )
                      .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$ViewControleAcessosTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $ViewControleAcessosTable,
      ViewControleAcesso,
      $$ViewControleAcessosTableFilterComposer,
      $$ViewControleAcessosTableOrderingComposer,
      $$ViewControleAcessosTableAnnotationComposer,
      $$ViewControleAcessosTableCreateCompanionBuilder,
      $$ViewControleAcessosTableUpdateCompanionBuilder,
      (
        ViewControleAcesso,
        BaseReferences<
          _$AppDatabase,
          $ViewControleAcessosTable,
          ViewControleAcesso
        >,
      ),
      ViewControleAcesso,
      PrefetchHooks Function()
    >;
typedef $$ViewPessoaUsuariosTableCreateCompanionBuilder =
    ViewPessoaUsuariosCompanion Function({
      Value<int?> id,
      Value<int?> idPessoa,
      Value<String?> pessoaNome,
      Value<String?> tipo,
      Value<String?> email,
      Value<int?> idColaborador,
      Value<int?> idUsuario,
      Value<String?> login,
      Value<String?> senha,
      Value<DateTime?> dataCadastro,
      Value<String?> administrador,
    });
typedef $$ViewPessoaUsuariosTableUpdateCompanionBuilder =
    ViewPessoaUsuariosCompanion Function({
      Value<int?> id,
      Value<int?> idPessoa,
      Value<String?> pessoaNome,
      Value<String?> tipo,
      Value<String?> email,
      Value<int?> idColaborador,
      Value<int?> idUsuario,
      Value<String?> login,
      Value<String?> senha,
      Value<DateTime?> dataCadastro,
      Value<String?> administrador,
    });

class $$ViewPessoaUsuariosTableFilterComposer
    extends Composer<_$AppDatabase, $ViewPessoaUsuariosTable> {
  $$ViewPessoaUsuariosTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idPessoa => $composableBuilder(
    column: $table.idPessoa,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get pessoaNome => $composableBuilder(
    column: $table.pessoaNome,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get tipo => $composableBuilder(
    column: $table.tipo,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get email => $composableBuilder(
    column: $table.email,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idColaborador => $composableBuilder(
    column: $table.idColaborador,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idUsuario => $composableBuilder(
    column: $table.idUsuario,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get login => $composableBuilder(
    column: $table.login,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get senha => $composableBuilder(
    column: $table.senha,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get dataCadastro => $composableBuilder(
    column: $table.dataCadastro,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get administrador => $composableBuilder(
    column: $table.administrador,
    builder: (column) => ColumnFilters(column),
  );
}

class $$ViewPessoaUsuariosTableOrderingComposer
    extends Composer<_$AppDatabase, $ViewPessoaUsuariosTable> {
  $$ViewPessoaUsuariosTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idPessoa => $composableBuilder(
    column: $table.idPessoa,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get pessoaNome => $composableBuilder(
    column: $table.pessoaNome,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get tipo => $composableBuilder(
    column: $table.tipo,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get email => $composableBuilder(
    column: $table.email,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idColaborador => $composableBuilder(
    column: $table.idColaborador,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idUsuario => $composableBuilder(
    column: $table.idUsuario,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get login => $composableBuilder(
    column: $table.login,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get senha => $composableBuilder(
    column: $table.senha,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get dataCadastro => $composableBuilder(
    column: $table.dataCadastro,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get administrador => $composableBuilder(
    column: $table.administrador,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$ViewPessoaUsuariosTableAnnotationComposer
    extends Composer<_$AppDatabase, $ViewPessoaUsuariosTable> {
  $$ViewPessoaUsuariosTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<int> get idPessoa =>
      $composableBuilder(column: $table.idPessoa, builder: (column) => column);

  GeneratedColumn<String> get pessoaNome => $composableBuilder(
    column: $table.pessoaNome,
    builder: (column) => column,
  );

  GeneratedColumn<String> get tipo =>
      $composableBuilder(column: $table.tipo, builder: (column) => column);

  GeneratedColumn<String> get email =>
      $composableBuilder(column: $table.email, builder: (column) => column);

  GeneratedColumn<int> get idColaborador => $composableBuilder(
    column: $table.idColaborador,
    builder: (column) => column,
  );

  GeneratedColumn<int> get idUsuario =>
      $composableBuilder(column: $table.idUsuario, builder: (column) => column);

  GeneratedColumn<String> get login =>
      $composableBuilder(column: $table.login, builder: (column) => column);

  GeneratedColumn<String> get senha =>
      $composableBuilder(column: $table.senha, builder: (column) => column);

  GeneratedColumn<DateTime> get dataCadastro => $composableBuilder(
    column: $table.dataCadastro,
    builder: (column) => column,
  );

  GeneratedColumn<String> get administrador => $composableBuilder(
    column: $table.administrador,
    builder: (column) => column,
  );
}

class $$ViewPessoaUsuariosTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $ViewPessoaUsuariosTable,
          ViewPessoaUsuario,
          $$ViewPessoaUsuariosTableFilterComposer,
          $$ViewPessoaUsuariosTableOrderingComposer,
          $$ViewPessoaUsuariosTableAnnotationComposer,
          $$ViewPessoaUsuariosTableCreateCompanionBuilder,
          $$ViewPessoaUsuariosTableUpdateCompanionBuilder,
          (
            ViewPessoaUsuario,
            BaseReferences<
              _$AppDatabase,
              $ViewPessoaUsuariosTable,
              ViewPessoaUsuario
            >,
          ),
          ViewPessoaUsuario,
          PrefetchHooks Function()
        > {
  $$ViewPessoaUsuariosTableTableManager(
    _$AppDatabase db,
    $ViewPessoaUsuariosTable table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer:
              () => $$ViewPessoaUsuariosTableFilterComposer(
                $db: db,
                $table: table,
              ),
          createOrderingComposer:
              () => $$ViewPessoaUsuariosTableOrderingComposer(
                $db: db,
                $table: table,
              ),
          createComputedFieldComposer:
              () => $$ViewPessoaUsuariosTableAnnotationComposer(
                $db: db,
                $table: table,
              ),
          updateCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idPessoa = const Value.absent(),
                Value<String?> pessoaNome = const Value.absent(),
                Value<String?> tipo = const Value.absent(),
                Value<String?> email = const Value.absent(),
                Value<int?> idColaborador = const Value.absent(),
                Value<int?> idUsuario = const Value.absent(),
                Value<String?> login = const Value.absent(),
                Value<String?> senha = const Value.absent(),
                Value<DateTime?> dataCadastro = const Value.absent(),
                Value<String?> administrador = const Value.absent(),
              }) => ViewPessoaUsuariosCompanion(
                id: id,
                idPessoa: idPessoa,
                pessoaNome: pessoaNome,
                tipo: tipo,
                email: email,
                idColaborador: idColaborador,
                idUsuario: idUsuario,
                login: login,
                senha: senha,
                dataCadastro: dataCadastro,
                administrador: administrador,
              ),
          createCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<int?> idPessoa = const Value.absent(),
                Value<String?> pessoaNome = const Value.absent(),
                Value<String?> tipo = const Value.absent(),
                Value<String?> email = const Value.absent(),
                Value<int?> idColaborador = const Value.absent(),
                Value<int?> idUsuario = const Value.absent(),
                Value<String?> login = const Value.absent(),
                Value<String?> senha = const Value.absent(),
                Value<DateTime?> dataCadastro = const Value.absent(),
                Value<String?> administrador = const Value.absent(),
              }) => ViewPessoaUsuariosCompanion.insert(
                id: id,
                idPessoa: idPessoa,
                pessoaNome: pessoaNome,
                tipo: tipo,
                email: email,
                idColaborador: idColaborador,
                idUsuario: idUsuario,
                login: login,
                senha: senha,
                dataCadastro: dataCadastro,
                administrador: administrador,
              ),
          withReferenceMapper:
              (p0) =>
                  p0
                      .map(
                        (e) => (
                          e.readTable(table),
                          BaseReferences(db, table, e),
                        ),
                      )
                      .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$ViewPessoaUsuariosTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $ViewPessoaUsuariosTable,
      ViewPessoaUsuario,
      $$ViewPessoaUsuariosTableFilterComposer,
      $$ViewPessoaUsuariosTableOrderingComposer,
      $$ViewPessoaUsuariosTableAnnotationComposer,
      $$ViewPessoaUsuariosTableCreateCompanionBuilder,
      $$ViewPessoaUsuariosTableUpdateCompanionBuilder,
      (
        ViewPessoaUsuario,
        BaseReferences<
          _$AppDatabase,
          $ViewPessoaUsuariosTable,
          ViewPessoaUsuario
        >,
      ),
      ViewPessoaUsuario,
      PrefetchHooks Function()
    >;
typedef $$ViewPessoaClientesTableCreateCompanionBuilder =
    ViewPessoaClientesCompanion Function({
      Value<int?> id,
      Value<String?> nome,
      Value<String?> tipo,
      Value<String?> email,
      Value<String?> site,
      Value<String?> cpfCnpj,
      Value<String?> rgIe,
      Value<DateTime?> desde,
      Value<double?> taxaDesconto,
      Value<double?> limiteCredito,
      Value<DateTime?> dataCadastro,
      Value<String?> observacao,
      Value<int?> idPessoa,
    });
typedef $$ViewPessoaClientesTableUpdateCompanionBuilder =
    ViewPessoaClientesCompanion Function({
      Value<int?> id,
      Value<String?> nome,
      Value<String?> tipo,
      Value<String?> email,
      Value<String?> site,
      Value<String?> cpfCnpj,
      Value<String?> rgIe,
      Value<DateTime?> desde,
      Value<double?> taxaDesconto,
      Value<double?> limiteCredito,
      Value<DateTime?> dataCadastro,
      Value<String?> observacao,
      Value<int?> idPessoa,
    });

class $$ViewPessoaClientesTableFilterComposer
    extends Composer<_$AppDatabase, $ViewPessoaClientesTable> {
  $$ViewPessoaClientesTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get nome => $composableBuilder(
    column: $table.nome,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get tipo => $composableBuilder(
    column: $table.tipo,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get email => $composableBuilder(
    column: $table.email,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get site => $composableBuilder(
    column: $table.site,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get cpfCnpj => $composableBuilder(
    column: $table.cpfCnpj,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get rgIe => $composableBuilder(
    column: $table.rgIe,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get desde => $composableBuilder(
    column: $table.desde,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get taxaDesconto => $composableBuilder(
    column: $table.taxaDesconto,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get limiteCredito => $composableBuilder(
    column: $table.limiteCredito,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get dataCadastro => $composableBuilder(
    column: $table.dataCadastro,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get observacao => $composableBuilder(
    column: $table.observacao,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idPessoa => $composableBuilder(
    column: $table.idPessoa,
    builder: (column) => ColumnFilters(column),
  );
}

class $$ViewPessoaClientesTableOrderingComposer
    extends Composer<_$AppDatabase, $ViewPessoaClientesTable> {
  $$ViewPessoaClientesTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get nome => $composableBuilder(
    column: $table.nome,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get tipo => $composableBuilder(
    column: $table.tipo,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get email => $composableBuilder(
    column: $table.email,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get site => $composableBuilder(
    column: $table.site,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get cpfCnpj => $composableBuilder(
    column: $table.cpfCnpj,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get rgIe => $composableBuilder(
    column: $table.rgIe,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get desde => $composableBuilder(
    column: $table.desde,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get taxaDesconto => $composableBuilder(
    column: $table.taxaDesconto,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get limiteCredito => $composableBuilder(
    column: $table.limiteCredito,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get dataCadastro => $composableBuilder(
    column: $table.dataCadastro,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get observacao => $composableBuilder(
    column: $table.observacao,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idPessoa => $composableBuilder(
    column: $table.idPessoa,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$ViewPessoaClientesTableAnnotationComposer
    extends Composer<_$AppDatabase, $ViewPessoaClientesTable> {
  $$ViewPessoaClientesTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<String> get nome =>
      $composableBuilder(column: $table.nome, builder: (column) => column);

  GeneratedColumn<String> get tipo =>
      $composableBuilder(column: $table.tipo, builder: (column) => column);

  GeneratedColumn<String> get email =>
      $composableBuilder(column: $table.email, builder: (column) => column);

  GeneratedColumn<String> get site =>
      $composableBuilder(column: $table.site, builder: (column) => column);

  GeneratedColumn<String> get cpfCnpj =>
      $composableBuilder(column: $table.cpfCnpj, builder: (column) => column);

  GeneratedColumn<String> get rgIe =>
      $composableBuilder(column: $table.rgIe, builder: (column) => column);

  GeneratedColumn<DateTime> get desde =>
      $composableBuilder(column: $table.desde, builder: (column) => column);

  GeneratedColumn<double> get taxaDesconto => $composableBuilder(
    column: $table.taxaDesconto,
    builder: (column) => column,
  );

  GeneratedColumn<double> get limiteCredito => $composableBuilder(
    column: $table.limiteCredito,
    builder: (column) => column,
  );

  GeneratedColumn<DateTime> get dataCadastro => $composableBuilder(
    column: $table.dataCadastro,
    builder: (column) => column,
  );

  GeneratedColumn<String> get observacao => $composableBuilder(
    column: $table.observacao,
    builder: (column) => column,
  );

  GeneratedColumn<int> get idPessoa =>
      $composableBuilder(column: $table.idPessoa, builder: (column) => column);
}

class $$ViewPessoaClientesTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $ViewPessoaClientesTable,
          ViewPessoaCliente,
          $$ViewPessoaClientesTableFilterComposer,
          $$ViewPessoaClientesTableOrderingComposer,
          $$ViewPessoaClientesTableAnnotationComposer,
          $$ViewPessoaClientesTableCreateCompanionBuilder,
          $$ViewPessoaClientesTableUpdateCompanionBuilder,
          (
            ViewPessoaCliente,
            BaseReferences<
              _$AppDatabase,
              $ViewPessoaClientesTable,
              ViewPessoaCliente
            >,
          ),
          ViewPessoaCliente,
          PrefetchHooks Function()
        > {
  $$ViewPessoaClientesTableTableManager(
    _$AppDatabase db,
    $ViewPessoaClientesTable table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer:
              () => $$ViewPessoaClientesTableFilterComposer(
                $db: db,
                $table: table,
              ),
          createOrderingComposer:
              () => $$ViewPessoaClientesTableOrderingComposer(
                $db: db,
                $table: table,
              ),
          createComputedFieldComposer:
              () => $$ViewPessoaClientesTableAnnotationComposer(
                $db: db,
                $table: table,
              ),
          updateCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<String?> nome = const Value.absent(),
                Value<String?> tipo = const Value.absent(),
                Value<String?> email = const Value.absent(),
                Value<String?> site = const Value.absent(),
                Value<String?> cpfCnpj = const Value.absent(),
                Value<String?> rgIe = const Value.absent(),
                Value<DateTime?> desde = const Value.absent(),
                Value<double?> taxaDesconto = const Value.absent(),
                Value<double?> limiteCredito = const Value.absent(),
                Value<DateTime?> dataCadastro = const Value.absent(),
                Value<String?> observacao = const Value.absent(),
                Value<int?> idPessoa = const Value.absent(),
              }) => ViewPessoaClientesCompanion(
                id: id,
                nome: nome,
                tipo: tipo,
                email: email,
                site: site,
                cpfCnpj: cpfCnpj,
                rgIe: rgIe,
                desde: desde,
                taxaDesconto: taxaDesconto,
                limiteCredito: limiteCredito,
                dataCadastro: dataCadastro,
                observacao: observacao,
                idPessoa: idPessoa,
              ),
          createCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<String?> nome = const Value.absent(),
                Value<String?> tipo = const Value.absent(),
                Value<String?> email = const Value.absent(),
                Value<String?> site = const Value.absent(),
                Value<String?> cpfCnpj = const Value.absent(),
                Value<String?> rgIe = const Value.absent(),
                Value<DateTime?> desde = const Value.absent(),
                Value<double?> taxaDesconto = const Value.absent(),
                Value<double?> limiteCredito = const Value.absent(),
                Value<DateTime?> dataCadastro = const Value.absent(),
                Value<String?> observacao = const Value.absent(),
                Value<int?> idPessoa = const Value.absent(),
              }) => ViewPessoaClientesCompanion.insert(
                id: id,
                nome: nome,
                tipo: tipo,
                email: email,
                site: site,
                cpfCnpj: cpfCnpj,
                rgIe: rgIe,
                desde: desde,
                taxaDesconto: taxaDesconto,
                limiteCredito: limiteCredito,
                dataCadastro: dataCadastro,
                observacao: observacao,
                idPessoa: idPessoa,
              ),
          withReferenceMapper:
              (p0) =>
                  p0
                      .map(
                        (e) => (
                          e.readTable(table),
                          BaseReferences(db, table, e),
                        ),
                      )
                      .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$ViewPessoaClientesTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $ViewPessoaClientesTable,
      ViewPessoaCliente,
      $$ViewPessoaClientesTableFilterComposer,
      $$ViewPessoaClientesTableOrderingComposer,
      $$ViewPessoaClientesTableAnnotationComposer,
      $$ViewPessoaClientesTableCreateCompanionBuilder,
      $$ViewPessoaClientesTableUpdateCompanionBuilder,
      (
        ViewPessoaCliente,
        BaseReferences<
          _$AppDatabase,
          $ViewPessoaClientesTable,
          ViewPessoaCliente
        >,
      ),
      ViewPessoaCliente,
      PrefetchHooks Function()
    >;
typedef $$ViewPessoaFornecedorsTableCreateCompanionBuilder =
    ViewPessoaFornecedorsCompanion Function({
      Value<int?> id,
      Value<String?> nome,
      Value<String?> tipo,
      Value<String?> email,
      Value<String?> site,
      Value<String?> cpfCnpj,
      Value<String?> rgIe,
      Value<DateTime?> desde,
      Value<DateTime?> dataCadastro,
      Value<String?> observacao,
      Value<int?> idPessoa,
    });
typedef $$ViewPessoaFornecedorsTableUpdateCompanionBuilder =
    ViewPessoaFornecedorsCompanion Function({
      Value<int?> id,
      Value<String?> nome,
      Value<String?> tipo,
      Value<String?> email,
      Value<String?> site,
      Value<String?> cpfCnpj,
      Value<String?> rgIe,
      Value<DateTime?> desde,
      Value<DateTime?> dataCadastro,
      Value<String?> observacao,
      Value<int?> idPessoa,
    });

class $$ViewPessoaFornecedorsTableFilterComposer
    extends Composer<_$AppDatabase, $ViewPessoaFornecedorsTable> {
  $$ViewPessoaFornecedorsTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get nome => $composableBuilder(
    column: $table.nome,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get tipo => $composableBuilder(
    column: $table.tipo,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get email => $composableBuilder(
    column: $table.email,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get site => $composableBuilder(
    column: $table.site,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get cpfCnpj => $composableBuilder(
    column: $table.cpfCnpj,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get rgIe => $composableBuilder(
    column: $table.rgIe,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get desde => $composableBuilder(
    column: $table.desde,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get dataCadastro => $composableBuilder(
    column: $table.dataCadastro,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get observacao => $composableBuilder(
    column: $table.observacao,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idPessoa => $composableBuilder(
    column: $table.idPessoa,
    builder: (column) => ColumnFilters(column),
  );
}

class $$ViewPessoaFornecedorsTableOrderingComposer
    extends Composer<_$AppDatabase, $ViewPessoaFornecedorsTable> {
  $$ViewPessoaFornecedorsTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get nome => $composableBuilder(
    column: $table.nome,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get tipo => $composableBuilder(
    column: $table.tipo,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get email => $composableBuilder(
    column: $table.email,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get site => $composableBuilder(
    column: $table.site,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get cpfCnpj => $composableBuilder(
    column: $table.cpfCnpj,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get rgIe => $composableBuilder(
    column: $table.rgIe,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get desde => $composableBuilder(
    column: $table.desde,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get dataCadastro => $composableBuilder(
    column: $table.dataCadastro,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get observacao => $composableBuilder(
    column: $table.observacao,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idPessoa => $composableBuilder(
    column: $table.idPessoa,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$ViewPessoaFornecedorsTableAnnotationComposer
    extends Composer<_$AppDatabase, $ViewPessoaFornecedorsTable> {
  $$ViewPessoaFornecedorsTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<String> get nome =>
      $composableBuilder(column: $table.nome, builder: (column) => column);

  GeneratedColumn<String> get tipo =>
      $composableBuilder(column: $table.tipo, builder: (column) => column);

  GeneratedColumn<String> get email =>
      $composableBuilder(column: $table.email, builder: (column) => column);

  GeneratedColumn<String> get site =>
      $composableBuilder(column: $table.site, builder: (column) => column);

  GeneratedColumn<String> get cpfCnpj =>
      $composableBuilder(column: $table.cpfCnpj, builder: (column) => column);

  GeneratedColumn<String> get rgIe =>
      $composableBuilder(column: $table.rgIe, builder: (column) => column);

  GeneratedColumn<DateTime> get desde =>
      $composableBuilder(column: $table.desde, builder: (column) => column);

  GeneratedColumn<DateTime> get dataCadastro => $composableBuilder(
    column: $table.dataCadastro,
    builder: (column) => column,
  );

  GeneratedColumn<String> get observacao => $composableBuilder(
    column: $table.observacao,
    builder: (column) => column,
  );

  GeneratedColumn<int> get idPessoa =>
      $composableBuilder(column: $table.idPessoa, builder: (column) => column);
}

class $$ViewPessoaFornecedorsTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $ViewPessoaFornecedorsTable,
          ViewPessoaFornecedor,
          $$ViewPessoaFornecedorsTableFilterComposer,
          $$ViewPessoaFornecedorsTableOrderingComposer,
          $$ViewPessoaFornecedorsTableAnnotationComposer,
          $$ViewPessoaFornecedorsTableCreateCompanionBuilder,
          $$ViewPessoaFornecedorsTableUpdateCompanionBuilder,
          (
            ViewPessoaFornecedor,
            BaseReferences<
              _$AppDatabase,
              $ViewPessoaFornecedorsTable,
              ViewPessoaFornecedor
            >,
          ),
          ViewPessoaFornecedor,
          PrefetchHooks Function()
        > {
  $$ViewPessoaFornecedorsTableTableManager(
    _$AppDatabase db,
    $ViewPessoaFornecedorsTable table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer:
              () => $$ViewPessoaFornecedorsTableFilterComposer(
                $db: db,
                $table: table,
              ),
          createOrderingComposer:
              () => $$ViewPessoaFornecedorsTableOrderingComposer(
                $db: db,
                $table: table,
              ),
          createComputedFieldComposer:
              () => $$ViewPessoaFornecedorsTableAnnotationComposer(
                $db: db,
                $table: table,
              ),
          updateCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<String?> nome = const Value.absent(),
                Value<String?> tipo = const Value.absent(),
                Value<String?> email = const Value.absent(),
                Value<String?> site = const Value.absent(),
                Value<String?> cpfCnpj = const Value.absent(),
                Value<String?> rgIe = const Value.absent(),
                Value<DateTime?> desde = const Value.absent(),
                Value<DateTime?> dataCadastro = const Value.absent(),
                Value<String?> observacao = const Value.absent(),
                Value<int?> idPessoa = const Value.absent(),
              }) => ViewPessoaFornecedorsCompanion(
                id: id,
                nome: nome,
                tipo: tipo,
                email: email,
                site: site,
                cpfCnpj: cpfCnpj,
                rgIe: rgIe,
                desde: desde,
                dataCadastro: dataCadastro,
                observacao: observacao,
                idPessoa: idPessoa,
              ),
          createCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<String?> nome = const Value.absent(),
                Value<String?> tipo = const Value.absent(),
                Value<String?> email = const Value.absent(),
                Value<String?> site = const Value.absent(),
                Value<String?> cpfCnpj = const Value.absent(),
                Value<String?> rgIe = const Value.absent(),
                Value<DateTime?> desde = const Value.absent(),
                Value<DateTime?> dataCadastro = const Value.absent(),
                Value<String?> observacao = const Value.absent(),
                Value<int?> idPessoa = const Value.absent(),
              }) => ViewPessoaFornecedorsCompanion.insert(
                id: id,
                nome: nome,
                tipo: tipo,
                email: email,
                site: site,
                cpfCnpj: cpfCnpj,
                rgIe: rgIe,
                desde: desde,
                dataCadastro: dataCadastro,
                observacao: observacao,
                idPessoa: idPessoa,
              ),
          withReferenceMapper:
              (p0) =>
                  p0
                      .map(
                        (e) => (
                          e.readTable(table),
                          BaseReferences(db, table, e),
                        ),
                      )
                      .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$ViewPessoaFornecedorsTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $ViewPessoaFornecedorsTable,
      ViewPessoaFornecedor,
      $$ViewPessoaFornecedorsTableFilterComposer,
      $$ViewPessoaFornecedorsTableOrderingComposer,
      $$ViewPessoaFornecedorsTableAnnotationComposer,
      $$ViewPessoaFornecedorsTableCreateCompanionBuilder,
      $$ViewPessoaFornecedorsTableUpdateCompanionBuilder,
      (
        ViewPessoaFornecedor,
        BaseReferences<
          _$AppDatabase,
          $ViewPessoaFornecedorsTable,
          ViewPessoaFornecedor
        >,
      ),
      ViewPessoaFornecedor,
      PrefetchHooks Function()
    >;
typedef $$ViewPessoaColaboradorsTableCreateCompanionBuilder =
    ViewPessoaColaboradorsCompanion Function({
      Value<int?> id,
      Value<String?> nome,
      Value<String?> tipo,
      Value<String?> email,
      Value<String?> site,
      Value<String?> cpfCnpj,
      Value<String?> rgIe,
      Value<String?> matricula,
      Value<DateTime?> dataCadastro,
      Value<DateTime?> dataAdmissao,
      Value<DateTime?> dataDemissao,
      Value<String?> ctpsNumero,
      Value<String?> ctpsSerie,
      Value<DateTime?> ctpsDataExpedicao,
      Value<String?> ctpsUf,
      Value<String?> observacao,
      Value<String?> logradouro,
      Value<String?> numero,
      Value<String?> complemento,
      Value<String?> bairro,
      Value<String?> cidade,
      Value<String?> cep,
      Value<String?> municipioIbge,
      Value<String?> uf,
      Value<int?> idPessoa,
      Value<int?> idCargo,
      Value<int?> idSetor,
    });
typedef $$ViewPessoaColaboradorsTableUpdateCompanionBuilder =
    ViewPessoaColaboradorsCompanion Function({
      Value<int?> id,
      Value<String?> nome,
      Value<String?> tipo,
      Value<String?> email,
      Value<String?> site,
      Value<String?> cpfCnpj,
      Value<String?> rgIe,
      Value<String?> matricula,
      Value<DateTime?> dataCadastro,
      Value<DateTime?> dataAdmissao,
      Value<DateTime?> dataDemissao,
      Value<String?> ctpsNumero,
      Value<String?> ctpsSerie,
      Value<DateTime?> ctpsDataExpedicao,
      Value<String?> ctpsUf,
      Value<String?> observacao,
      Value<String?> logradouro,
      Value<String?> numero,
      Value<String?> complemento,
      Value<String?> bairro,
      Value<String?> cidade,
      Value<String?> cep,
      Value<String?> municipioIbge,
      Value<String?> uf,
      Value<int?> idPessoa,
      Value<int?> idCargo,
      Value<int?> idSetor,
    });

class $$ViewPessoaColaboradorsTableFilterComposer
    extends Composer<_$AppDatabase, $ViewPessoaColaboradorsTable> {
  $$ViewPessoaColaboradorsTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get nome => $composableBuilder(
    column: $table.nome,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get tipo => $composableBuilder(
    column: $table.tipo,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get email => $composableBuilder(
    column: $table.email,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get site => $composableBuilder(
    column: $table.site,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get cpfCnpj => $composableBuilder(
    column: $table.cpfCnpj,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get rgIe => $composableBuilder(
    column: $table.rgIe,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get matricula => $composableBuilder(
    column: $table.matricula,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get dataCadastro => $composableBuilder(
    column: $table.dataCadastro,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get dataAdmissao => $composableBuilder(
    column: $table.dataAdmissao,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get dataDemissao => $composableBuilder(
    column: $table.dataDemissao,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get ctpsNumero => $composableBuilder(
    column: $table.ctpsNumero,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get ctpsSerie => $composableBuilder(
    column: $table.ctpsSerie,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get ctpsDataExpedicao => $composableBuilder(
    column: $table.ctpsDataExpedicao,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get ctpsUf => $composableBuilder(
    column: $table.ctpsUf,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get observacao => $composableBuilder(
    column: $table.observacao,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get logradouro => $composableBuilder(
    column: $table.logradouro,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get numero => $composableBuilder(
    column: $table.numero,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get complemento => $composableBuilder(
    column: $table.complemento,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get bairro => $composableBuilder(
    column: $table.bairro,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get cidade => $composableBuilder(
    column: $table.cidade,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get cep => $composableBuilder(
    column: $table.cep,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get municipioIbge => $composableBuilder(
    column: $table.municipioIbge,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get uf => $composableBuilder(
    column: $table.uf,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idPessoa => $composableBuilder(
    column: $table.idPessoa,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idCargo => $composableBuilder(
    column: $table.idCargo,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idSetor => $composableBuilder(
    column: $table.idSetor,
    builder: (column) => ColumnFilters(column),
  );
}

class $$ViewPessoaColaboradorsTableOrderingComposer
    extends Composer<_$AppDatabase, $ViewPessoaColaboradorsTable> {
  $$ViewPessoaColaboradorsTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get nome => $composableBuilder(
    column: $table.nome,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get tipo => $composableBuilder(
    column: $table.tipo,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get email => $composableBuilder(
    column: $table.email,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get site => $composableBuilder(
    column: $table.site,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get cpfCnpj => $composableBuilder(
    column: $table.cpfCnpj,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get rgIe => $composableBuilder(
    column: $table.rgIe,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get matricula => $composableBuilder(
    column: $table.matricula,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get dataCadastro => $composableBuilder(
    column: $table.dataCadastro,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get dataAdmissao => $composableBuilder(
    column: $table.dataAdmissao,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get dataDemissao => $composableBuilder(
    column: $table.dataDemissao,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get ctpsNumero => $composableBuilder(
    column: $table.ctpsNumero,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get ctpsSerie => $composableBuilder(
    column: $table.ctpsSerie,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get ctpsDataExpedicao => $composableBuilder(
    column: $table.ctpsDataExpedicao,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get ctpsUf => $composableBuilder(
    column: $table.ctpsUf,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get observacao => $composableBuilder(
    column: $table.observacao,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get logradouro => $composableBuilder(
    column: $table.logradouro,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get numero => $composableBuilder(
    column: $table.numero,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get complemento => $composableBuilder(
    column: $table.complemento,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get bairro => $composableBuilder(
    column: $table.bairro,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get cidade => $composableBuilder(
    column: $table.cidade,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get cep => $composableBuilder(
    column: $table.cep,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get municipioIbge => $composableBuilder(
    column: $table.municipioIbge,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get uf => $composableBuilder(
    column: $table.uf,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idPessoa => $composableBuilder(
    column: $table.idPessoa,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idCargo => $composableBuilder(
    column: $table.idCargo,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idSetor => $composableBuilder(
    column: $table.idSetor,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$ViewPessoaColaboradorsTableAnnotationComposer
    extends Composer<_$AppDatabase, $ViewPessoaColaboradorsTable> {
  $$ViewPessoaColaboradorsTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<String> get nome =>
      $composableBuilder(column: $table.nome, builder: (column) => column);

  GeneratedColumn<String> get tipo =>
      $composableBuilder(column: $table.tipo, builder: (column) => column);

  GeneratedColumn<String> get email =>
      $composableBuilder(column: $table.email, builder: (column) => column);

  GeneratedColumn<String> get site =>
      $composableBuilder(column: $table.site, builder: (column) => column);

  GeneratedColumn<String> get cpfCnpj =>
      $composableBuilder(column: $table.cpfCnpj, builder: (column) => column);

  GeneratedColumn<String> get rgIe =>
      $composableBuilder(column: $table.rgIe, builder: (column) => column);

  GeneratedColumn<String> get matricula =>
      $composableBuilder(column: $table.matricula, builder: (column) => column);

  GeneratedColumn<DateTime> get dataCadastro => $composableBuilder(
    column: $table.dataCadastro,
    builder: (column) => column,
  );

  GeneratedColumn<DateTime> get dataAdmissao => $composableBuilder(
    column: $table.dataAdmissao,
    builder: (column) => column,
  );

  GeneratedColumn<DateTime> get dataDemissao => $composableBuilder(
    column: $table.dataDemissao,
    builder: (column) => column,
  );

  GeneratedColumn<String> get ctpsNumero => $composableBuilder(
    column: $table.ctpsNumero,
    builder: (column) => column,
  );

  GeneratedColumn<String> get ctpsSerie =>
      $composableBuilder(column: $table.ctpsSerie, builder: (column) => column);

  GeneratedColumn<DateTime> get ctpsDataExpedicao => $composableBuilder(
    column: $table.ctpsDataExpedicao,
    builder: (column) => column,
  );

  GeneratedColumn<String> get ctpsUf =>
      $composableBuilder(column: $table.ctpsUf, builder: (column) => column);

  GeneratedColumn<String> get observacao => $composableBuilder(
    column: $table.observacao,
    builder: (column) => column,
  );

  GeneratedColumn<String> get logradouro => $composableBuilder(
    column: $table.logradouro,
    builder: (column) => column,
  );

  GeneratedColumn<String> get numero =>
      $composableBuilder(column: $table.numero, builder: (column) => column);

  GeneratedColumn<String> get complemento => $composableBuilder(
    column: $table.complemento,
    builder: (column) => column,
  );

  GeneratedColumn<String> get bairro =>
      $composableBuilder(column: $table.bairro, builder: (column) => column);

  GeneratedColumn<String> get cidade =>
      $composableBuilder(column: $table.cidade, builder: (column) => column);

  GeneratedColumn<String> get cep =>
      $composableBuilder(column: $table.cep, builder: (column) => column);

  GeneratedColumn<String> get municipioIbge => $composableBuilder(
    column: $table.municipioIbge,
    builder: (column) => column,
  );

  GeneratedColumn<String> get uf =>
      $composableBuilder(column: $table.uf, builder: (column) => column);

  GeneratedColumn<int> get idPessoa =>
      $composableBuilder(column: $table.idPessoa, builder: (column) => column);

  GeneratedColumn<int> get idCargo =>
      $composableBuilder(column: $table.idCargo, builder: (column) => column);

  GeneratedColumn<int> get idSetor =>
      $composableBuilder(column: $table.idSetor, builder: (column) => column);
}

class $$ViewPessoaColaboradorsTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $ViewPessoaColaboradorsTable,
          ViewPessoaColaborador,
          $$ViewPessoaColaboradorsTableFilterComposer,
          $$ViewPessoaColaboradorsTableOrderingComposer,
          $$ViewPessoaColaboradorsTableAnnotationComposer,
          $$ViewPessoaColaboradorsTableCreateCompanionBuilder,
          $$ViewPessoaColaboradorsTableUpdateCompanionBuilder,
          (
            ViewPessoaColaborador,
            BaseReferences<
              _$AppDatabase,
              $ViewPessoaColaboradorsTable,
              ViewPessoaColaborador
            >,
          ),
          ViewPessoaColaborador,
          PrefetchHooks Function()
        > {
  $$ViewPessoaColaboradorsTableTableManager(
    _$AppDatabase db,
    $ViewPessoaColaboradorsTable table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer:
              () => $$ViewPessoaColaboradorsTableFilterComposer(
                $db: db,
                $table: table,
              ),
          createOrderingComposer:
              () => $$ViewPessoaColaboradorsTableOrderingComposer(
                $db: db,
                $table: table,
              ),
          createComputedFieldComposer:
              () => $$ViewPessoaColaboradorsTableAnnotationComposer(
                $db: db,
                $table: table,
              ),
          updateCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<String?> nome = const Value.absent(),
                Value<String?> tipo = const Value.absent(),
                Value<String?> email = const Value.absent(),
                Value<String?> site = const Value.absent(),
                Value<String?> cpfCnpj = const Value.absent(),
                Value<String?> rgIe = const Value.absent(),
                Value<String?> matricula = const Value.absent(),
                Value<DateTime?> dataCadastro = const Value.absent(),
                Value<DateTime?> dataAdmissao = const Value.absent(),
                Value<DateTime?> dataDemissao = const Value.absent(),
                Value<String?> ctpsNumero = const Value.absent(),
                Value<String?> ctpsSerie = const Value.absent(),
                Value<DateTime?> ctpsDataExpedicao = const Value.absent(),
                Value<String?> ctpsUf = const Value.absent(),
                Value<String?> observacao = const Value.absent(),
                Value<String?> logradouro = const Value.absent(),
                Value<String?> numero = const Value.absent(),
                Value<String?> complemento = const Value.absent(),
                Value<String?> bairro = const Value.absent(),
                Value<String?> cidade = const Value.absent(),
                Value<String?> cep = const Value.absent(),
                Value<String?> municipioIbge = const Value.absent(),
                Value<String?> uf = const Value.absent(),
                Value<int?> idPessoa = const Value.absent(),
                Value<int?> idCargo = const Value.absent(),
                Value<int?> idSetor = const Value.absent(),
              }) => ViewPessoaColaboradorsCompanion(
                id: id,
                nome: nome,
                tipo: tipo,
                email: email,
                site: site,
                cpfCnpj: cpfCnpj,
                rgIe: rgIe,
                matricula: matricula,
                dataCadastro: dataCadastro,
                dataAdmissao: dataAdmissao,
                dataDemissao: dataDemissao,
                ctpsNumero: ctpsNumero,
                ctpsSerie: ctpsSerie,
                ctpsDataExpedicao: ctpsDataExpedicao,
                ctpsUf: ctpsUf,
                observacao: observacao,
                logradouro: logradouro,
                numero: numero,
                complemento: complemento,
                bairro: bairro,
                cidade: cidade,
                cep: cep,
                municipioIbge: municipioIbge,
                uf: uf,
                idPessoa: idPessoa,
                idCargo: idCargo,
                idSetor: idSetor,
              ),
          createCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<String?> nome = const Value.absent(),
                Value<String?> tipo = const Value.absent(),
                Value<String?> email = const Value.absent(),
                Value<String?> site = const Value.absent(),
                Value<String?> cpfCnpj = const Value.absent(),
                Value<String?> rgIe = const Value.absent(),
                Value<String?> matricula = const Value.absent(),
                Value<DateTime?> dataCadastro = const Value.absent(),
                Value<DateTime?> dataAdmissao = const Value.absent(),
                Value<DateTime?> dataDemissao = const Value.absent(),
                Value<String?> ctpsNumero = const Value.absent(),
                Value<String?> ctpsSerie = const Value.absent(),
                Value<DateTime?> ctpsDataExpedicao = const Value.absent(),
                Value<String?> ctpsUf = const Value.absent(),
                Value<String?> observacao = const Value.absent(),
                Value<String?> logradouro = const Value.absent(),
                Value<String?> numero = const Value.absent(),
                Value<String?> complemento = const Value.absent(),
                Value<String?> bairro = const Value.absent(),
                Value<String?> cidade = const Value.absent(),
                Value<String?> cep = const Value.absent(),
                Value<String?> municipioIbge = const Value.absent(),
                Value<String?> uf = const Value.absent(),
                Value<int?> idPessoa = const Value.absent(),
                Value<int?> idCargo = const Value.absent(),
                Value<int?> idSetor = const Value.absent(),
              }) => ViewPessoaColaboradorsCompanion.insert(
                id: id,
                nome: nome,
                tipo: tipo,
                email: email,
                site: site,
                cpfCnpj: cpfCnpj,
                rgIe: rgIe,
                matricula: matricula,
                dataCadastro: dataCadastro,
                dataAdmissao: dataAdmissao,
                dataDemissao: dataDemissao,
                ctpsNumero: ctpsNumero,
                ctpsSerie: ctpsSerie,
                ctpsDataExpedicao: ctpsDataExpedicao,
                ctpsUf: ctpsUf,
                observacao: observacao,
                logradouro: logradouro,
                numero: numero,
                complemento: complemento,
                bairro: bairro,
                cidade: cidade,
                cep: cep,
                municipioIbge: municipioIbge,
                uf: uf,
                idPessoa: idPessoa,
                idCargo: idCargo,
                idSetor: idSetor,
              ),
          withReferenceMapper:
              (p0) =>
                  p0
                      .map(
                        (e) => (
                          e.readTable(table),
                          BaseReferences(db, table, e),
                        ),
                      )
                      .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$ViewPessoaColaboradorsTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $ViewPessoaColaboradorsTable,
      ViewPessoaColaborador,
      $$ViewPessoaColaboradorsTableFilterComposer,
      $$ViewPessoaColaboradorsTableOrderingComposer,
      $$ViewPessoaColaboradorsTableAnnotationComposer,
      $$ViewPessoaColaboradorsTableCreateCompanionBuilder,
      $$ViewPessoaColaboradorsTableUpdateCompanionBuilder,
      (
        ViewPessoaColaborador,
        BaseReferences<
          _$AppDatabase,
          $ViewPessoaColaboradorsTable,
          ViewPessoaColaborador
        >,
      ),
      ViewPessoaColaborador,
      PrefetchHooks Function()
    >;
typedef $$ViewPessoaVendedorsTableCreateCompanionBuilder =
    ViewPessoaVendedorsCompanion Function({
      Value<int?> id,
      Value<String?> nome,
      Value<String?> tipo,
      Value<String?> email,
      Value<String?> site,
      Value<String?> cpfCnpj,
      Value<String?> rgIe,
      Value<String?> matricula,
      Value<DateTime?> dataCadastro,
      Value<DateTime?> dataAdmissao,
      Value<DateTime?> dataDemissao,
      Value<String?> ctpsNumero,
      Value<String?> ctpsSerie,
      Value<DateTime?> ctpsDataExpedicao,
      Value<String?> ctpsUf,
      Value<String?> observacao,
      Value<String?> logradouro,
      Value<String?> numero,
      Value<String?> complemento,
      Value<String?> bairro,
      Value<String?> cidade,
      Value<String?> cep,
      Value<String?> municipioIbge,
      Value<String?> uf,
      Value<int?> idPessoa,
      Value<int?> idCargo,
      Value<int?> idSetor,
      Value<double?> comissao,
      Value<double?> metaVenda,
    });
typedef $$ViewPessoaVendedorsTableUpdateCompanionBuilder =
    ViewPessoaVendedorsCompanion Function({
      Value<int?> id,
      Value<String?> nome,
      Value<String?> tipo,
      Value<String?> email,
      Value<String?> site,
      Value<String?> cpfCnpj,
      Value<String?> rgIe,
      Value<String?> matricula,
      Value<DateTime?> dataCadastro,
      Value<DateTime?> dataAdmissao,
      Value<DateTime?> dataDemissao,
      Value<String?> ctpsNumero,
      Value<String?> ctpsSerie,
      Value<DateTime?> ctpsDataExpedicao,
      Value<String?> ctpsUf,
      Value<String?> observacao,
      Value<String?> logradouro,
      Value<String?> numero,
      Value<String?> complemento,
      Value<String?> bairro,
      Value<String?> cidade,
      Value<String?> cep,
      Value<String?> municipioIbge,
      Value<String?> uf,
      Value<int?> idPessoa,
      Value<int?> idCargo,
      Value<int?> idSetor,
      Value<double?> comissao,
      Value<double?> metaVenda,
    });

class $$ViewPessoaVendedorsTableFilterComposer
    extends Composer<_$AppDatabase, $ViewPessoaVendedorsTable> {
  $$ViewPessoaVendedorsTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get nome => $composableBuilder(
    column: $table.nome,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get tipo => $composableBuilder(
    column: $table.tipo,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get email => $composableBuilder(
    column: $table.email,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get site => $composableBuilder(
    column: $table.site,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get cpfCnpj => $composableBuilder(
    column: $table.cpfCnpj,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get rgIe => $composableBuilder(
    column: $table.rgIe,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get matricula => $composableBuilder(
    column: $table.matricula,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get dataCadastro => $composableBuilder(
    column: $table.dataCadastro,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get dataAdmissao => $composableBuilder(
    column: $table.dataAdmissao,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get dataDemissao => $composableBuilder(
    column: $table.dataDemissao,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get ctpsNumero => $composableBuilder(
    column: $table.ctpsNumero,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get ctpsSerie => $composableBuilder(
    column: $table.ctpsSerie,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get ctpsDataExpedicao => $composableBuilder(
    column: $table.ctpsDataExpedicao,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get ctpsUf => $composableBuilder(
    column: $table.ctpsUf,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get observacao => $composableBuilder(
    column: $table.observacao,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get logradouro => $composableBuilder(
    column: $table.logradouro,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get numero => $composableBuilder(
    column: $table.numero,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get complemento => $composableBuilder(
    column: $table.complemento,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get bairro => $composableBuilder(
    column: $table.bairro,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get cidade => $composableBuilder(
    column: $table.cidade,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get cep => $composableBuilder(
    column: $table.cep,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get municipioIbge => $composableBuilder(
    column: $table.municipioIbge,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get uf => $composableBuilder(
    column: $table.uf,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idPessoa => $composableBuilder(
    column: $table.idPessoa,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idCargo => $composableBuilder(
    column: $table.idCargo,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idSetor => $composableBuilder(
    column: $table.idSetor,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get comissao => $composableBuilder(
    column: $table.comissao,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get metaVenda => $composableBuilder(
    column: $table.metaVenda,
    builder: (column) => ColumnFilters(column),
  );
}

class $$ViewPessoaVendedorsTableOrderingComposer
    extends Composer<_$AppDatabase, $ViewPessoaVendedorsTable> {
  $$ViewPessoaVendedorsTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get nome => $composableBuilder(
    column: $table.nome,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get tipo => $composableBuilder(
    column: $table.tipo,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get email => $composableBuilder(
    column: $table.email,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get site => $composableBuilder(
    column: $table.site,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get cpfCnpj => $composableBuilder(
    column: $table.cpfCnpj,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get rgIe => $composableBuilder(
    column: $table.rgIe,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get matricula => $composableBuilder(
    column: $table.matricula,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get dataCadastro => $composableBuilder(
    column: $table.dataCadastro,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get dataAdmissao => $composableBuilder(
    column: $table.dataAdmissao,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get dataDemissao => $composableBuilder(
    column: $table.dataDemissao,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get ctpsNumero => $composableBuilder(
    column: $table.ctpsNumero,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get ctpsSerie => $composableBuilder(
    column: $table.ctpsSerie,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get ctpsDataExpedicao => $composableBuilder(
    column: $table.ctpsDataExpedicao,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get ctpsUf => $composableBuilder(
    column: $table.ctpsUf,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get observacao => $composableBuilder(
    column: $table.observacao,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get logradouro => $composableBuilder(
    column: $table.logradouro,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get numero => $composableBuilder(
    column: $table.numero,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get complemento => $composableBuilder(
    column: $table.complemento,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get bairro => $composableBuilder(
    column: $table.bairro,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get cidade => $composableBuilder(
    column: $table.cidade,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get cep => $composableBuilder(
    column: $table.cep,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get municipioIbge => $composableBuilder(
    column: $table.municipioIbge,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get uf => $composableBuilder(
    column: $table.uf,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idPessoa => $composableBuilder(
    column: $table.idPessoa,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idCargo => $composableBuilder(
    column: $table.idCargo,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idSetor => $composableBuilder(
    column: $table.idSetor,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get comissao => $composableBuilder(
    column: $table.comissao,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get metaVenda => $composableBuilder(
    column: $table.metaVenda,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$ViewPessoaVendedorsTableAnnotationComposer
    extends Composer<_$AppDatabase, $ViewPessoaVendedorsTable> {
  $$ViewPessoaVendedorsTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<String> get nome =>
      $composableBuilder(column: $table.nome, builder: (column) => column);

  GeneratedColumn<String> get tipo =>
      $composableBuilder(column: $table.tipo, builder: (column) => column);

  GeneratedColumn<String> get email =>
      $composableBuilder(column: $table.email, builder: (column) => column);

  GeneratedColumn<String> get site =>
      $composableBuilder(column: $table.site, builder: (column) => column);

  GeneratedColumn<String> get cpfCnpj =>
      $composableBuilder(column: $table.cpfCnpj, builder: (column) => column);

  GeneratedColumn<String> get rgIe =>
      $composableBuilder(column: $table.rgIe, builder: (column) => column);

  GeneratedColumn<String> get matricula =>
      $composableBuilder(column: $table.matricula, builder: (column) => column);

  GeneratedColumn<DateTime> get dataCadastro => $composableBuilder(
    column: $table.dataCadastro,
    builder: (column) => column,
  );

  GeneratedColumn<DateTime> get dataAdmissao => $composableBuilder(
    column: $table.dataAdmissao,
    builder: (column) => column,
  );

  GeneratedColumn<DateTime> get dataDemissao => $composableBuilder(
    column: $table.dataDemissao,
    builder: (column) => column,
  );

  GeneratedColumn<String> get ctpsNumero => $composableBuilder(
    column: $table.ctpsNumero,
    builder: (column) => column,
  );

  GeneratedColumn<String> get ctpsSerie =>
      $composableBuilder(column: $table.ctpsSerie, builder: (column) => column);

  GeneratedColumn<DateTime> get ctpsDataExpedicao => $composableBuilder(
    column: $table.ctpsDataExpedicao,
    builder: (column) => column,
  );

  GeneratedColumn<String> get ctpsUf =>
      $composableBuilder(column: $table.ctpsUf, builder: (column) => column);

  GeneratedColumn<String> get observacao => $composableBuilder(
    column: $table.observacao,
    builder: (column) => column,
  );

  GeneratedColumn<String> get logradouro => $composableBuilder(
    column: $table.logradouro,
    builder: (column) => column,
  );

  GeneratedColumn<String> get numero =>
      $composableBuilder(column: $table.numero, builder: (column) => column);

  GeneratedColumn<String> get complemento => $composableBuilder(
    column: $table.complemento,
    builder: (column) => column,
  );

  GeneratedColumn<String> get bairro =>
      $composableBuilder(column: $table.bairro, builder: (column) => column);

  GeneratedColumn<String> get cidade =>
      $composableBuilder(column: $table.cidade, builder: (column) => column);

  GeneratedColumn<String> get cep =>
      $composableBuilder(column: $table.cep, builder: (column) => column);

  GeneratedColumn<String> get municipioIbge => $composableBuilder(
    column: $table.municipioIbge,
    builder: (column) => column,
  );

  GeneratedColumn<String> get uf =>
      $composableBuilder(column: $table.uf, builder: (column) => column);

  GeneratedColumn<int> get idPessoa =>
      $composableBuilder(column: $table.idPessoa, builder: (column) => column);

  GeneratedColumn<int> get idCargo =>
      $composableBuilder(column: $table.idCargo, builder: (column) => column);

  GeneratedColumn<int> get idSetor =>
      $composableBuilder(column: $table.idSetor, builder: (column) => column);

  GeneratedColumn<double> get comissao =>
      $composableBuilder(column: $table.comissao, builder: (column) => column);

  GeneratedColumn<double> get metaVenda =>
      $composableBuilder(column: $table.metaVenda, builder: (column) => column);
}

class $$ViewPessoaVendedorsTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $ViewPessoaVendedorsTable,
          ViewPessoaVendedor,
          $$ViewPessoaVendedorsTableFilterComposer,
          $$ViewPessoaVendedorsTableOrderingComposer,
          $$ViewPessoaVendedorsTableAnnotationComposer,
          $$ViewPessoaVendedorsTableCreateCompanionBuilder,
          $$ViewPessoaVendedorsTableUpdateCompanionBuilder,
          (
            ViewPessoaVendedor,
            BaseReferences<
              _$AppDatabase,
              $ViewPessoaVendedorsTable,
              ViewPessoaVendedor
            >,
          ),
          ViewPessoaVendedor,
          PrefetchHooks Function()
        > {
  $$ViewPessoaVendedorsTableTableManager(
    _$AppDatabase db,
    $ViewPessoaVendedorsTable table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer:
              () => $$ViewPessoaVendedorsTableFilterComposer(
                $db: db,
                $table: table,
              ),
          createOrderingComposer:
              () => $$ViewPessoaVendedorsTableOrderingComposer(
                $db: db,
                $table: table,
              ),
          createComputedFieldComposer:
              () => $$ViewPessoaVendedorsTableAnnotationComposer(
                $db: db,
                $table: table,
              ),
          updateCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<String?> nome = const Value.absent(),
                Value<String?> tipo = const Value.absent(),
                Value<String?> email = const Value.absent(),
                Value<String?> site = const Value.absent(),
                Value<String?> cpfCnpj = const Value.absent(),
                Value<String?> rgIe = const Value.absent(),
                Value<String?> matricula = const Value.absent(),
                Value<DateTime?> dataCadastro = const Value.absent(),
                Value<DateTime?> dataAdmissao = const Value.absent(),
                Value<DateTime?> dataDemissao = const Value.absent(),
                Value<String?> ctpsNumero = const Value.absent(),
                Value<String?> ctpsSerie = const Value.absent(),
                Value<DateTime?> ctpsDataExpedicao = const Value.absent(),
                Value<String?> ctpsUf = const Value.absent(),
                Value<String?> observacao = const Value.absent(),
                Value<String?> logradouro = const Value.absent(),
                Value<String?> numero = const Value.absent(),
                Value<String?> complemento = const Value.absent(),
                Value<String?> bairro = const Value.absent(),
                Value<String?> cidade = const Value.absent(),
                Value<String?> cep = const Value.absent(),
                Value<String?> municipioIbge = const Value.absent(),
                Value<String?> uf = const Value.absent(),
                Value<int?> idPessoa = const Value.absent(),
                Value<int?> idCargo = const Value.absent(),
                Value<int?> idSetor = const Value.absent(),
                Value<double?> comissao = const Value.absent(),
                Value<double?> metaVenda = const Value.absent(),
              }) => ViewPessoaVendedorsCompanion(
                id: id,
                nome: nome,
                tipo: tipo,
                email: email,
                site: site,
                cpfCnpj: cpfCnpj,
                rgIe: rgIe,
                matricula: matricula,
                dataCadastro: dataCadastro,
                dataAdmissao: dataAdmissao,
                dataDemissao: dataDemissao,
                ctpsNumero: ctpsNumero,
                ctpsSerie: ctpsSerie,
                ctpsDataExpedicao: ctpsDataExpedicao,
                ctpsUf: ctpsUf,
                observacao: observacao,
                logradouro: logradouro,
                numero: numero,
                complemento: complemento,
                bairro: bairro,
                cidade: cidade,
                cep: cep,
                municipioIbge: municipioIbge,
                uf: uf,
                idPessoa: idPessoa,
                idCargo: idCargo,
                idSetor: idSetor,
                comissao: comissao,
                metaVenda: metaVenda,
              ),
          createCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<String?> nome = const Value.absent(),
                Value<String?> tipo = const Value.absent(),
                Value<String?> email = const Value.absent(),
                Value<String?> site = const Value.absent(),
                Value<String?> cpfCnpj = const Value.absent(),
                Value<String?> rgIe = const Value.absent(),
                Value<String?> matricula = const Value.absent(),
                Value<DateTime?> dataCadastro = const Value.absent(),
                Value<DateTime?> dataAdmissao = const Value.absent(),
                Value<DateTime?> dataDemissao = const Value.absent(),
                Value<String?> ctpsNumero = const Value.absent(),
                Value<String?> ctpsSerie = const Value.absent(),
                Value<DateTime?> ctpsDataExpedicao = const Value.absent(),
                Value<String?> ctpsUf = const Value.absent(),
                Value<String?> observacao = const Value.absent(),
                Value<String?> logradouro = const Value.absent(),
                Value<String?> numero = const Value.absent(),
                Value<String?> complemento = const Value.absent(),
                Value<String?> bairro = const Value.absent(),
                Value<String?> cidade = const Value.absent(),
                Value<String?> cep = const Value.absent(),
                Value<String?> municipioIbge = const Value.absent(),
                Value<String?> uf = const Value.absent(),
                Value<int?> idPessoa = const Value.absent(),
                Value<int?> idCargo = const Value.absent(),
                Value<int?> idSetor = const Value.absent(),
                Value<double?> comissao = const Value.absent(),
                Value<double?> metaVenda = const Value.absent(),
              }) => ViewPessoaVendedorsCompanion.insert(
                id: id,
                nome: nome,
                tipo: tipo,
                email: email,
                site: site,
                cpfCnpj: cpfCnpj,
                rgIe: rgIe,
                matricula: matricula,
                dataCadastro: dataCadastro,
                dataAdmissao: dataAdmissao,
                dataDemissao: dataDemissao,
                ctpsNumero: ctpsNumero,
                ctpsSerie: ctpsSerie,
                ctpsDataExpedicao: ctpsDataExpedicao,
                ctpsUf: ctpsUf,
                observacao: observacao,
                logradouro: logradouro,
                numero: numero,
                complemento: complemento,
                bairro: bairro,
                cidade: cidade,
                cep: cep,
                municipioIbge: municipioIbge,
                uf: uf,
                idPessoa: idPessoa,
                idCargo: idCargo,
                idSetor: idSetor,
                comissao: comissao,
                metaVenda: metaVenda,
              ),
          withReferenceMapper:
              (p0) =>
                  p0
                      .map(
                        (e) => (
                          e.readTable(table),
                          BaseReferences(db, table, e),
                        ),
                      )
                      .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$ViewPessoaVendedorsTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $ViewPessoaVendedorsTable,
      ViewPessoaVendedor,
      $$ViewPessoaVendedorsTableFilterComposer,
      $$ViewPessoaVendedorsTableOrderingComposer,
      $$ViewPessoaVendedorsTableAnnotationComposer,
      $$ViewPessoaVendedorsTableCreateCompanionBuilder,
      $$ViewPessoaVendedorsTableUpdateCompanionBuilder,
      (
        ViewPessoaVendedor,
        BaseReferences<
          _$AppDatabase,
          $ViewPessoaVendedorsTable,
          ViewPessoaVendedor
        >,
      ),
      ViewPessoaVendedor,
      PrefetchHooks Function()
    >;
typedef $$ViewPessoaTransportadorasTableCreateCompanionBuilder =
    ViewPessoaTransportadorasCompanion Function({
      Value<int?> id,
      Value<String?> nome,
      Value<String?> tipo,
      Value<String?> email,
      Value<String?> site,
      Value<String?> cpfCnpj,
      Value<String?> rgIe,
      Value<DateTime?> dataCadastro,
      Value<String?> observacao,
      Value<int?> idPessoa,
    });
typedef $$ViewPessoaTransportadorasTableUpdateCompanionBuilder =
    ViewPessoaTransportadorasCompanion Function({
      Value<int?> id,
      Value<String?> nome,
      Value<String?> tipo,
      Value<String?> email,
      Value<String?> site,
      Value<String?> cpfCnpj,
      Value<String?> rgIe,
      Value<DateTime?> dataCadastro,
      Value<String?> observacao,
      Value<int?> idPessoa,
    });

class $$ViewPessoaTransportadorasTableFilterComposer
    extends Composer<_$AppDatabase, $ViewPessoaTransportadorasTable> {
  $$ViewPessoaTransportadorasTableFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get nome => $composableBuilder(
    column: $table.nome,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get tipo => $composableBuilder(
    column: $table.tipo,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get email => $composableBuilder(
    column: $table.email,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get site => $composableBuilder(
    column: $table.site,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get cpfCnpj => $composableBuilder(
    column: $table.cpfCnpj,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get rgIe => $composableBuilder(
    column: $table.rgIe,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<DateTime> get dataCadastro => $composableBuilder(
    column: $table.dataCadastro,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get observacao => $composableBuilder(
    column: $table.observacao,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get idPessoa => $composableBuilder(
    column: $table.idPessoa,
    builder: (column) => ColumnFilters(column),
  );
}

class $$ViewPessoaTransportadorasTableOrderingComposer
    extends Composer<_$AppDatabase, $ViewPessoaTransportadorasTable> {
  $$ViewPessoaTransportadorasTableOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get nome => $composableBuilder(
    column: $table.nome,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get tipo => $composableBuilder(
    column: $table.tipo,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get email => $composableBuilder(
    column: $table.email,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get site => $composableBuilder(
    column: $table.site,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get cpfCnpj => $composableBuilder(
    column: $table.cpfCnpj,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get rgIe => $composableBuilder(
    column: $table.rgIe,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<DateTime> get dataCadastro => $composableBuilder(
    column: $table.dataCadastro,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get observacao => $composableBuilder(
    column: $table.observacao,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get idPessoa => $composableBuilder(
    column: $table.idPessoa,
    builder: (column) => ColumnOrderings(column),
  );
}

class $$ViewPessoaTransportadorasTableAnnotationComposer
    extends Composer<_$AppDatabase, $ViewPessoaTransportadorasTable> {
  $$ViewPessoaTransportadorasTableAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<String> get nome =>
      $composableBuilder(column: $table.nome, builder: (column) => column);

  GeneratedColumn<String> get tipo =>
      $composableBuilder(column: $table.tipo, builder: (column) => column);

  GeneratedColumn<String> get email =>
      $composableBuilder(column: $table.email, builder: (column) => column);

  GeneratedColumn<String> get site =>
      $composableBuilder(column: $table.site, builder: (column) => column);

  GeneratedColumn<String> get cpfCnpj =>
      $composableBuilder(column: $table.cpfCnpj, builder: (column) => column);

  GeneratedColumn<String> get rgIe =>
      $composableBuilder(column: $table.rgIe, builder: (column) => column);

  GeneratedColumn<DateTime> get dataCadastro => $composableBuilder(
    column: $table.dataCadastro,
    builder: (column) => column,
  );

  GeneratedColumn<String> get observacao => $composableBuilder(
    column: $table.observacao,
    builder: (column) => column,
  );

  GeneratedColumn<int> get idPessoa =>
      $composableBuilder(column: $table.idPessoa, builder: (column) => column);
}

class $$ViewPessoaTransportadorasTableTableManager
    extends
        RootTableManager<
          _$AppDatabase,
          $ViewPessoaTransportadorasTable,
          ViewPessoaTransportadora,
          $$ViewPessoaTransportadorasTableFilterComposer,
          $$ViewPessoaTransportadorasTableOrderingComposer,
          $$ViewPessoaTransportadorasTableAnnotationComposer,
          $$ViewPessoaTransportadorasTableCreateCompanionBuilder,
          $$ViewPessoaTransportadorasTableUpdateCompanionBuilder,
          (
            ViewPessoaTransportadora,
            BaseReferences<
              _$AppDatabase,
              $ViewPessoaTransportadorasTable,
              ViewPessoaTransportadora
            >,
          ),
          ViewPessoaTransportadora,
          PrefetchHooks Function()
        > {
  $$ViewPessoaTransportadorasTableTableManager(
    _$AppDatabase db,
    $ViewPessoaTransportadorasTable table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer:
              () => $$ViewPessoaTransportadorasTableFilterComposer(
                $db: db,
                $table: table,
              ),
          createOrderingComposer:
              () => $$ViewPessoaTransportadorasTableOrderingComposer(
                $db: db,
                $table: table,
              ),
          createComputedFieldComposer:
              () => $$ViewPessoaTransportadorasTableAnnotationComposer(
                $db: db,
                $table: table,
              ),
          updateCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<String?> nome = const Value.absent(),
                Value<String?> tipo = const Value.absent(),
                Value<String?> email = const Value.absent(),
                Value<String?> site = const Value.absent(),
                Value<String?> cpfCnpj = const Value.absent(),
                Value<String?> rgIe = const Value.absent(),
                Value<DateTime?> dataCadastro = const Value.absent(),
                Value<String?> observacao = const Value.absent(),
                Value<int?> idPessoa = const Value.absent(),
              }) => ViewPessoaTransportadorasCompanion(
                id: id,
                nome: nome,
                tipo: tipo,
                email: email,
                site: site,
                cpfCnpj: cpfCnpj,
                rgIe: rgIe,
                dataCadastro: dataCadastro,
                observacao: observacao,
                idPessoa: idPessoa,
              ),
          createCompanionCallback:
              ({
                Value<int?> id = const Value.absent(),
                Value<String?> nome = const Value.absent(),
                Value<String?> tipo = const Value.absent(),
                Value<String?> email = const Value.absent(),
                Value<String?> site = const Value.absent(),
                Value<String?> cpfCnpj = const Value.absent(),
                Value<String?> rgIe = const Value.absent(),
                Value<DateTime?> dataCadastro = const Value.absent(),
                Value<String?> observacao = const Value.absent(),
                Value<int?> idPessoa = const Value.absent(),
              }) => ViewPessoaTransportadorasCompanion.insert(
                id: id,
                nome: nome,
                tipo: tipo,
                email: email,
                site: site,
                cpfCnpj: cpfCnpj,
                rgIe: rgIe,
                dataCadastro: dataCadastro,
                observacao: observacao,
                idPessoa: idPessoa,
              ),
          withReferenceMapper:
              (p0) =>
                  p0
                      .map(
                        (e) => (
                          e.readTable(table),
                          BaseReferences(db, table, e),
                        ),
                      )
                      .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $$ViewPessoaTransportadorasTableProcessedTableManager =
    ProcessedTableManager<
      _$AppDatabase,
      $ViewPessoaTransportadorasTable,
      ViewPessoaTransportadora,
      $$ViewPessoaTransportadorasTableFilterComposer,
      $$ViewPessoaTransportadorasTableOrderingComposer,
      $$ViewPessoaTransportadorasTableAnnotationComposer,
      $$ViewPessoaTransportadorasTableCreateCompanionBuilder,
      $$ViewPessoaTransportadorasTableUpdateCompanionBuilder,
      (
        ViewPessoaTransportadora,
        BaseReferences<
          _$AppDatabase,
          $ViewPessoaTransportadorasTable,
          ViewPessoaTransportadora
        >,
      ),
      ViewPessoaTransportadora,
      PrefetchHooks Function()
    >;

class $AppDatabaseManager {
  final _$AppDatabase _db;
  $AppDatabaseManager(this._db);
  $$ProdutosTableTableManager get produtos =>
      $$ProdutosTableTableManager(_db, _db.produtos);
  $$NfeReferenciadasTableTableManager get nfeReferenciadas =>
      $$NfeReferenciadasTableTableManager(_db, _db.nfeReferenciadas);
  $$NfeEmitentesTableTableManager get nfeEmitentes =>
      $$NfeEmitentesTableTableManager(_db, _db.nfeEmitentes);
  $$NfeDestinatariosTableTableManager get nfeDestinatarios =>
      $$NfeDestinatariosTableTableManager(_db, _db.nfeDestinatarios);
  $$NfeLocalRetiradasTableTableManager get nfeLocalRetiradas =>
      $$NfeLocalRetiradasTableTableManager(_db, _db.nfeLocalRetiradas);
  $$NfeLocalEntregasTableTableManager get nfeLocalEntregas =>
      $$NfeLocalEntregasTableTableManager(_db, _db.nfeLocalEntregas);
  $$NfeDetEspecificoVeiculosTableTableManager get nfeDetEspecificoVeiculos =>
      $$NfeDetEspecificoVeiculosTableTableManager(
        _db,
        _db.nfeDetEspecificoVeiculos,
      );
  $$NfeDetEspecificoMedicamentosTableTableManager
  get nfeDetEspecificoMedicamentos =>
      $$NfeDetEspecificoMedicamentosTableTableManager(
        _db,
        _db.nfeDetEspecificoMedicamentos,
      );
  $$NfeDetEspecificoArmamentosTableTableManager
  get nfeDetEspecificoArmamentos =>
      $$NfeDetEspecificoArmamentosTableTableManager(
        _db,
        _db.nfeDetEspecificoArmamentos,
      );
  $$NfeDuplicatasTableTableManager get nfeDuplicatas =>
      $$NfeDuplicatasTableTableManager(_db, _db.nfeDuplicatas);
  $$NfeDeclaracaoImportacaosTableTableManager get nfeDeclaracaoImportacaos =>
      $$NfeDeclaracaoImportacaosTableTableManager(
        _db,
        _db.nfeDeclaracaoImportacaos,
      );
  $$NfeCanaFornecimentoDiariosTableTableManager
  get nfeCanaFornecimentoDiarios =>
      $$NfeCanaFornecimentoDiariosTableTableManager(
        _db,
        _db.nfeCanaFornecimentoDiarios,
      );
  $$NfeCanaDeducoesSafrasTableTableManager get nfeCanaDeducoesSafras =>
      $$NfeCanaDeducoesSafrasTableTableManager(_db, _db.nfeCanaDeducoesSafras);
  $$NfeCupomFiscalReferenciadosTableTableManager
  get nfeCupomFiscalReferenciados =>
      $$NfeCupomFiscalReferenciadosTableTableManager(
        _db,
        _db.nfeCupomFiscalReferenciados,
      );
  $$NfeProdRuralReferenciadasTableTableManager get nfeProdRuralReferenciadas =>
      $$NfeProdRuralReferenciadasTableTableManager(
        _db,
        _db.nfeProdRuralReferenciadas,
      );
  $$NfeNfReferenciadasTableTableManager get nfeNfReferenciadas =>
      $$NfeNfReferenciadasTableTableManager(_db, _db.nfeNfReferenciadas);
  $$NfeDetalheImpostoIcmssTableTableManager get nfeDetalheImpostoIcmss =>
      $$NfeDetalheImpostoIcmssTableTableManager(
        _db,
        _db.nfeDetalheImpostoIcmss,
      );
  $$NfeDetalheImpostoIpisTableTableManager get nfeDetalheImpostoIpis =>
      $$NfeDetalheImpostoIpisTableTableManager(_db, _db.nfeDetalheImpostoIpis);
  $$NfeDetalheImpostoIisTableTableManager get nfeDetalheImpostoIis =>
      $$NfeDetalheImpostoIisTableTableManager(_db, _db.nfeDetalheImpostoIis);
  $$NfeDetalheImpostoPissTableTableManager get nfeDetalheImpostoPiss =>
      $$NfeDetalheImpostoPissTableTableManager(_db, _db.nfeDetalheImpostoPiss);
  $$NfeDetalheImpostoCofinssTableTableManager get nfeDetalheImpostoCofinss =>
      $$NfeDetalheImpostoCofinssTableTableManager(
        _db,
        _db.nfeDetalheImpostoCofinss,
      );
  $$NfeDetalheImpostoIssqnsTableTableManager get nfeDetalheImpostoIssqns =>
      $$NfeDetalheImpostoIssqnsTableTableManager(
        _db,
        _db.nfeDetalheImpostoIssqns,
      );
  $$NfeTransporteReboquesTableTableManager get nfeTransporteReboques =>
      $$NfeTransporteReboquesTableTableManager(_db, _db.nfeTransporteReboques);
  $$NfeTransporteVolumeLacresTableTableManager get nfeTransporteVolumeLacres =>
      $$NfeTransporteVolumeLacresTableTableManager(
        _db,
        _db.nfeTransporteVolumeLacres,
      );
  $$NfeProcessoReferenciadosTableTableManager get nfeProcessoReferenciados =>
      $$NfeProcessoReferenciadosTableTableManager(
        _db,
        _db.nfeProcessoReferenciados,
      );
  $$NfeCteReferenciadosTableTableManager get nfeCteReferenciados =>
      $$NfeCteReferenciadosTableTableManager(_db, _db.nfeCteReferenciados);
  $$NfeAcessoXmlsTableTableManager get nfeAcessoXmls =>
      $$NfeAcessoXmlsTableTableManager(_db, _db.nfeAcessoXmls);
  $$NfeExportacaosTableTableManager get nfeExportacaos =>
      $$NfeExportacaosTableTableManager(_db, _db.nfeExportacaos);
  $$NfeInformacaoPagamentosTableTableManager get nfeInformacaoPagamentos =>
      $$NfeInformacaoPagamentosTableTableManager(
        _db,
        _db.nfeInformacaoPagamentos,
      );
  $$NfeItemRastreadosTableTableManager get nfeItemRastreados =>
      $$NfeItemRastreadosTableTableManager(_db, _db.nfeItemRastreados);
  $$NfeDetalheImpostoPisStsTableTableManager get nfeDetalheImpostoPisSts =>
      $$NfeDetalheImpostoPisStsTableTableManager(
        _db,
        _db.nfeDetalheImpostoPisSts,
      );
  $$NfeDetalheImpostoIcmsUfdestsTableTableManager
  get nfeDetalheImpostoIcmsUfdests =>
      $$NfeDetalheImpostoIcmsUfdestsTableTableManager(
        _db,
        _db.nfeDetalheImpostoIcmsUfdests,
      );
  $$NfeDetalheImpostoCofinsStsTableTableManager
  get nfeDetalheImpostoCofinsSts =>
      $$NfeDetalheImpostoCofinsStsTableTableManager(
        _db,
        _db.nfeDetalheImpostoCofinsSts,
      );
  $$NfeResponsavelTecnicosTableTableManager get nfeResponsavelTecnicos =>
      $$NfeResponsavelTecnicosTableTableManager(
        _db,
        _db.nfeResponsavelTecnicos,
      );
  $$NfeCompraGovernamentalsTableTableManager get nfeCompraGovernamentals =>
      $$NfeCompraGovernamentalsTableTableManager(
        _db,
        _db.nfeCompraGovernamentals,
      );
  $$NfeAntecipacaoPagamentosTableTableManager get nfeAntecipacaoPagamentos =>
      $$NfeAntecipacaoPagamentosTableTableManager(
        _db,
        _db.nfeAntecipacaoPagamentos,
      );
  $$NfeDetalheImpostoSeletivosTableTableManager
  get nfeDetalheImpostoSeletivos =>
      $$NfeDetalheImpostoSeletivosTableTableManager(
        _db,
        _db.nfeDetalheImpostoSeletivos,
      );
  $$NfeDetalheImpostoIbsUfsTableTableManager get nfeDetalheImpostoIbsUfs =>
      $$NfeDetalheImpostoIbsUfsTableTableManager(
        _db,
        _db.nfeDetalheImpostoIbsUfs,
      );
  $$NfeDetalheImpostoIbsMunsTableTableManager get nfeDetalheImpostoIbsMuns =>
      $$NfeDetalheImpostoIbsMunsTableTableManager(
        _db,
        _db.nfeDetalheImpostoIbsMuns,
      );
  $$NfeDetalheImpostoCbssTableTableManager get nfeDetalheImpostoCbss =>
      $$NfeDetalheImpostoCbssTableTableManager(_db, _db.nfeDetalheImpostoCbss);
  $$NfeDetalheTributoRegularsTableTableManager get nfeDetalheTributoRegulars =>
      $$NfeDetalheTributoRegularsTableTableManager(
        _db,
        _db.nfeDetalheTributoRegulars,
      );
  $$NfeDetalheCreditoPresumidoIbssTableTableManager
  get nfeDetalheCreditoPresumidoIbss =>
      $$NfeDetalheCreditoPresumidoIbssTableTableManager(
        _db,
        _db.nfeDetalheCreditoPresumidoIbss,
      );
  $$NfeDetalheCreditoPresumidoCbssTableTableManager
  get nfeDetalheCreditoPresumidoCbss =>
      $$NfeDetalheCreditoPresumidoCbssTableTableManager(
        _db,
        _db.nfeDetalheCreditoPresumidoCbss,
      );
  $$NfeDetalheCompraGovernosTableTableManager get nfeDetalheCompraGovernos =>
      $$NfeDetalheCompraGovernosTableTableManager(
        _db,
        _db.nfeDetalheCompraGovernos,
      );
  $$NfeDetalheImpostoMonofasicosTableTableManager
  get nfeDetalheImpostoMonofasicos =>
      $$NfeDetalheImpostoMonofasicosTableTableManager(
        _db,
        _db.nfeDetalheImpostoMonofasicos,
      );
  $$NfeDetalheTransfCreditosTableTableManager get nfeDetalheTransfCreditos =>
      $$NfeDetalheTransfCreditosTableTableManager(
        _db,
        _db.nfeDetalheTransfCreditos,
      );
  $$NfeDetalheIbsZfmsTableTableManager get nfeDetalheIbsZfms =>
      $$NfeDetalheIbsZfmsTableTableManager(_db, _db.nfeDetalheIbsZfms);
  $$NfeDetalheDfeReferenciadosTableTableManager
  get nfeDetalheDfeReferenciados =>
      $$NfeDetalheDfeReferenciadosTableTableManager(
        _db,
        _db.nfeDetalheDfeReferenciados,
      );
  $$NfeDetCombustivelOrigemsTableTableManager get nfeDetCombustivelOrigems =>
      $$NfeDetCombustivelOrigemsTableTableManager(
        _db,
        _db.nfeDetCombustivelOrigems,
      );
  $$NfeInformacaoAgropecuariosTableTableManager
  get nfeInformacaoAgropecuarios =>
      $$NfeInformacaoAgropecuariosTableTableManager(
        _db,
        _db.nfeInformacaoAgropecuarios,
      );
  $$ProdutoGruposTableTableManager get produtoGrupos =>
      $$ProdutoGruposTableTableManager(_db, _db.produtoGrupos);
  $$ProdutoSubgruposTableTableManager get produtoSubgrupos =>
      $$ProdutoSubgruposTableTableManager(_db, _db.produtoSubgrupos);
  $$ProdutoMarcasTableTableManager get produtoMarcas =>
      $$ProdutoMarcasTableTableManager(_db, _db.produtoMarcas);
  $$ProdutoUnidadesTableTableManager get produtoUnidades =>
      $$ProdutoUnidadesTableTableManager(_db, _db.produtoUnidades);
  $$NfeCabecalhosTableTableManager get nfeCabecalhos =>
      $$NfeCabecalhosTableTableManager(_db, _db.nfeCabecalhos);
  $$NfeDetalhesTableTableManager get nfeDetalhes =>
      $$NfeDetalhesTableTableManager(_db, _db.nfeDetalhes);
  $$NfeDetEspecificoCombustivelsTableTableManager
  get nfeDetEspecificoCombustivels =>
      $$NfeDetEspecificoCombustivelsTableTableManager(
        _db,
        _db.nfeDetEspecificoCombustivels,
      );
  $$NfeTransportesTableTableManager get nfeTransportes =>
      $$NfeTransportesTableTableManager(_db, _db.nfeTransportes);
  $$NfeFaturasTableTableManager get nfeFaturas =>
      $$NfeFaturasTableTableManager(_db, _db.nfeFaturas);
  $$NfeCanasTableTableManager get nfeCanas =>
      $$NfeCanasTableTableManager(_db, _db.nfeCanas);
  $$NfeTransporteVolumesTableTableManager get nfeTransporteVolumes =>
      $$NfeTransporteVolumesTableTableManager(_db, _db.nfeTransporteVolumes);
  $$TributOperacaoFiscalsTableTableManager get tributOperacaoFiscals =>
      $$TributOperacaoFiscalsTableTableManager(_db, _db.tributOperacaoFiscals);
  $$VendaCabecalhosTableTableManager get vendaCabecalhos =>
      $$VendaCabecalhosTableTableManager(_db, _db.vendaCabecalhos);
  $$NfeImportacaoDetalhesTableTableManager get nfeImportacaoDetalhes =>
      $$NfeImportacaoDetalhesTableTableManager(_db, _db.nfeImportacaoDetalhes);
  $$NfeNumerosTableTableManager get nfeNumeros =>
      $$NfeNumerosTableTableManager(_db, _db.nfeNumeros);
  $$NfeConfiguracaosTableTableManager get nfeConfiguracaos =>
      $$NfeConfiguracaosTableTableManager(_db, _db.nfeConfiguracaos);
  $$NfeNumeroInutilizadosTableTableManager get nfeNumeroInutilizados =>
      $$NfeNumeroInutilizadosTableTableManager(_db, _db.nfeNumeroInutilizados);
  $$ViewControleAcessosTableTableManager get viewControleAcessos =>
      $$ViewControleAcessosTableTableManager(_db, _db.viewControleAcessos);
  $$ViewPessoaUsuariosTableTableManager get viewPessoaUsuarios =>
      $$ViewPessoaUsuariosTableTableManager(_db, _db.viewPessoaUsuarios);
  $$ViewPessoaClientesTableTableManager get viewPessoaClientes =>
      $$ViewPessoaClientesTableTableManager(_db, _db.viewPessoaClientes);
  $$ViewPessoaFornecedorsTableTableManager get viewPessoaFornecedors =>
      $$ViewPessoaFornecedorsTableTableManager(_db, _db.viewPessoaFornecedors);
  $$ViewPessoaColaboradorsTableTableManager get viewPessoaColaboradors =>
      $$ViewPessoaColaboradorsTableTableManager(
        _db,
        _db.viewPessoaColaboradors,
      );
  $$ViewPessoaVendedorsTableTableManager get viewPessoaVendedors =>
      $$ViewPessoaVendedorsTableTableManager(_db, _db.viewPessoaVendedors);
  $$ViewPessoaTransportadorasTableTableManager get viewPessoaTransportadoras =>
      $$ViewPessoaTransportadorasTableTableManager(
        _db,
        _db.viewPessoaTransportadoras,
      );
}
